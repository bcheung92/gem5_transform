!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AGEN	inorder/pipeline_traits.5stage.hh	/^       AGEN,$/;"	e	enum:ThePipeline::ResourceList
AGEN	inorder/pipeline_traits.9stage.hh	/^       AGEN,$/;"	e	enum:ThePipeline::ResourceList
AGEN	inorder/pipeline_traits.9stage.smt2.hh	/^       AGEN,$/;"	e	enum:ThePipeline::ResourceList
AGEN	inorder/pipeline_traits.hh	/^       AGEN,$/;"	e	enum:ThePipeline::ResourceId
AGENUnit	inorder/resources/agen_unit.cc	/^AGENUnit::AGENUnit(std::string res_name, int res_id, int res_width,$/;"	f	class:AGENUnit
AGENUnit	inorder/resources/agen_unit.hh	/^class AGENUnit : public Resource {$/;"	c
APPLY_DREG	kvm/x86_cpu.cc	231;"	d	file:
APPLY_DREG	kvm/x86_cpu.cc	236;"	d	file:
APPLY_DTABLE	kvm/x86_cpu.cc	1032;"	d	file:
APPLY_DTABLE	kvm/x86_cpu.cc	1038;"	d	file:
APPLY_DTABLE	kvm/x86_cpu.cc	208;"	d	file:
APPLY_DTABLE	kvm/x86_cpu.cc	222;"	d	file:
APPLY_DTABLE	kvm/x86_cpu.cc	758;"	d	file:
APPLY_DTABLE	kvm/x86_cpu.cc	766;"	d	file:
APPLY_IREG	kvm/x86_cpu.cc	173;"	d	file:
APPLY_IREG	kvm/x86_cpu.cc	178;"	d	file:
APPLY_IREG	kvm/x86_cpu.cc	689;"	d	file:
APPLY_IREG	kvm/x86_cpu.cc	691;"	d	file:
APPLY_IREG	kvm/x86_cpu.cc	974;"	d	file:
APPLY_IREG	kvm/x86_cpu.cc	978;"	d	file:
APPLY_SEGMENT	kvm/x86_cpu.cc	1031;"	d	file:
APPLY_SEGMENT	kvm/x86_cpu.cc	1037;"	d	file:
APPLY_SEGMENT	kvm/x86_cpu.cc	206;"	d	file:
APPLY_SEGMENT	kvm/x86_cpu.cc	221;"	d	file:
APPLY_SEGMENT	kvm/x86_cpu.cc	757;"	d	file:
APPLY_SEGMENT	kvm/x86_cpu.cc	765;"	d	file:
APPLY_SEGMENT	kvm/x86_cpu.cc	809;"	d	file:
APPLY_SEGMENT	kvm/x86_cpu.cc	813;"	d	file:
APPLY_SREG	kvm/x86_cpu.cc	1030;"	d	file:
APPLY_SREG	kvm/x86_cpu.cc	1036;"	d	file:
APPLY_SREG	kvm/x86_cpu.cc	204;"	d	file:
APPLY_SREG	kvm/x86_cpu.cc	220;"	d	file:
APPLY_SREG	kvm/x86_cpu.cc	756;"	d	file:
APPLY_SREG	kvm/x86_cpu.cc	764;"	d	file:
ActivateNextReadyThread	inorder/cpu.hh	/^        ActivateNextReadyThread,$/;"	e	enum:InOrderCPU::CPUEventType
ActivateNextReadyThread_Pri	inorder/cpu.hh	/^        ActivateNextReadyThread_Pri    = Event::CPU_Tick_Pri + 10$/;"	e	enum:InOrderCPU::CPUEventPri
ActivateThread	inorder/cpu.hh	/^        ActivateThread,$/;"	e	enum:InOrderCPU::CPUEventType
Active	inorder/pipeline_stage.hh	/^        Active,$/;"	e	enum:PipelineStage::StageStatus
Active	o3/commit.hh	/^        Active,$/;"	e	enum:DefaultCommit::CommitStatus
Active	o3/decode.hh	/^        Active,$/;"	e	enum:DefaultDecode::DecodeStatus
Active	o3/fetch.hh	/^        Active,$/;"	e	enum:DefaultFetch::FetchStatus
Active	o3/iew.hh	/^        Active,$/;"	e	enum:DefaultIEW::Status
Active	o3/rename.hh	/^        Active,$/;"	e	enum:DefaultRename::RenameStatus
Active	thread_context.hh	/^        Active,$/;"	e	enum:ThreadContext::Status
ActivityRecorder	activity.cc	/^ActivityRecorder::ActivityRecorder(const string &name, int num_stages,$/;"	f	class:ActivityRecorder
ActivityRecorder	activity.hh	/^class ActivityRecorder$/;"	c
AddrMap	decode_cache.hh	/^    AddrMap()$/;"	f	class:DecodeCache::AddrMap
AddrMap	decode_cache.hh	/^class AddrMap$/;"	c	namespace:DecodeCache
AddrRangeCoverage	minor/lsq.hh	/^    enum AddrRangeCoverage$/;"	g	class:Minor::LSQ
Aggressive	o3/commit.hh	/^        Aggressive,$/;"	e	enum:DefaultCommit::CommitPolicy
ArmKvmCPU	kvm/ArmKvmCPU.py	/^class ArmKvmCPU(BaseKvmCPU):$/;"	c
ArmKvmCPU	kvm/arm_cpu.cc	/^ArmKvmCPU::ArmKvmCPU(ArmKvmCPUParams *params)$/;"	f	class:ArmKvmCPU
ArmKvmCPU	kvm/arm_cpu.hh	/^class ArmKvmCPU : public BaseKvmCPU$/;"	c
AssignNextPC	inorder/resources/fetch_seq_unit.hh	/^        AssignNextPC,$/;"	e	enum:FetchSeqUnit::Command
AtCommit	base_dyn_inst.hh	/^        AtCommit,                \/\/\/ Instruction has reached commit$/;"	e	enum:BaseDynInst::Status
AtCommit	inorder/inorder_dyn_inst.hh	/^        AtCommit,                \/\/\/ Instruction has reached commit$/;"	e	enum:InOrderDynInst::Status
AtomicCPUDPort	simple/atomic.hh	/^        AtomicCPUDPort(const std::string &_name, BaseSimpleCPU* _cpu)$/;"	f	class:AtomicSimpleCPU::AtomicCPUDPort
AtomicCPUDPort	simple/atomic.hh	/^    class AtomicCPUDPort : public AtomicCPUPort$/;"	c	class:AtomicSimpleCPU
AtomicCPUPort	simple/atomic.hh	/^        AtomicCPUPort(const std::string &_name, BaseSimpleCPU* _cpu)$/;"	f	class:AtomicSimpleCPU::AtomicCPUPort
AtomicCPUPort	simple/atomic.hh	/^    class AtomicCPUPort : public MasterPort$/;"	c	class:AtomicSimpleCPU
AtomicSimpleCPU	simple/AtomicSimpleCPU.py	/^class AtomicSimpleCPU(BaseSimpleCPU):$/;"	c
AtomicSimpleCPU	simple/atomic.cc	/^AtomicSimpleCPU::AtomicSimpleCPU(AtomicSimpleCPUParams *p)$/;"	f	class:AtomicSimpleCPU
AtomicSimpleCPU	simple/atomic.hh	/^class AtomicSimpleCPU : public BaseSimpleCPU$/;"	c
BBInfo	simple/probes/simpoint.hh	/^    struct BBInfo {$/;"	s	class:SimPoint
BEBlocked	ozone/front_end.hh	/^        BEBlocked$/;"	e	enum:FrontEnd::Status
BPHistory	pred/bi_mode.hh	/^    struct BPHistory {$/;"	s	class:BiModeBP
BPHistory	pred/tournament.hh	/^        BPHistory()$/;"	f	struct:TournamentBP::BPHistory
BPHistory	pred/tournament.hh	/^    struct BPHistory {$/;"	s	class:TournamentBP
BPred	inorder/pipeline_traits.5stage.hh	/^       BPred,$/;"	e	enum:ThePipeline::ResourceList
BPred	inorder/pipeline_traits.9stage.hh	/^       BPred,$/;"	e	enum:ThePipeline::ResourceList
BPred	inorder/pipeline_traits.9stage.smt2.hh	/^       BPred,$/;"	e	enum:ThePipeline::ResourceList
BPred	inorder/pipeline_traits.hh	/^       BPred,$/;"	e	enum:ThePipeline::ResourceId
BPredInfo	ozone/null_predictor.hh	/^        BPredInfo()$/;"	f	struct:NullPredictor::BPredInfo
BPredInfo	ozone/null_predictor.hh	/^        BPredInfo(const Addr &pc, const Addr &next_pc)$/;"	f	struct:NullPredictor::BPredInfo
BPredInfo	ozone/null_predictor.hh	/^    struct BPredInfo {$/;"	s	class:NullPredictor
BPredUnit	pred/bpred_unit.hh	/^class BPredUnit : public SimObject$/;"	c
BPredUnit	pred/bpred_unit_impl.hh	/^BPredUnit::BPredUnit(const Params *params)$/;"	f	class:BPredUnit
BTB	pred/bpred_unit.hh	/^    DefaultBTB BTB;$/;"	m	class:BPredUnit
BTBCorrect	pred/bpred_unit.hh	/^    Stats::Scalar BTBCorrect;$/;"	m	class:BPredUnit
BTBEntries	ozone/OzoneCPU.py	/^    BTBEntries = Param.Unsigned("Number of BTB entries")$/;"	v	class:DerivOzoneCPU
BTBEntries	ozone/SimpleOzoneCPU.py	/^    BTBEntries = Param.Unsigned("Number of BTB entries")$/;"	v	class:SimpleOzoneCPU
BTBEntries	ozone/simple_params.hh	/^    unsigned BTBEntries;$/;"	m	class:SimpleParams
BTBEntries	pred/BranchPredictor.py	/^    BTBEntries = Param.Unsigned(4096, "Number of BTB entries")$/;"	v	class:BranchPredictor
BTBEntry	pred/btb.hh	/^        BTBEntry()$/;"	f	struct:DefaultBTB::BTBEntry
BTBEntry	pred/btb.hh	/^    struct BTBEntry$/;"	s	class:DefaultBTB
BTBHitPct	pred/bpred_unit.hh	/^    Stats::Formula BTBHitPct;$/;"	m	class:BPredUnit
BTBHits	pred/bpred_unit.hh	/^    Stats::Scalar BTBHits;$/;"	m	class:BPredUnit
BTBLookup	pred/bpred_unit.hh	/^    TheISA::PCState BTBLookup(Addr instPC)$/;"	f	class:BPredUnit
BTBLookups	pred/bpred_unit.hh	/^    Stats::Scalar BTBLookups;$/;"	m	class:BPredUnit
BTBTagSize	ozone/OzoneCPU.py	/^    BTBTagSize = Param.Unsigned("Size of the BTB tags, in bits")$/;"	v	class:DerivOzoneCPU
BTBTagSize	ozone/SimpleOzoneCPU.py	/^    BTBTagSize = Param.Unsigned("Size of the BTB tags, in bits")$/;"	v	class:SimpleOzoneCPU
BTBTagSize	ozone/simple_params.hh	/^    unsigned BTBTagSize;$/;"	m	class:SimpleParams
BTBTagSize	pred/BranchPredictor.py	/^    BTBTagSize = Param.Unsigned(16, "Size of the BTB tags, in bits")$/;"	v	class:BranchPredictor
BTBUpdate	pred/bpred_unit.hh	/^    void BTBUpdate(Addr instPC, const TheISA::PCState &target)$/;"	f	class:BPredUnit
BTBValid	pred/bpred_unit.hh	/^    bool BTBValid(Addr instPC)$/;"	f	class:BPredUnit
BackEnd	ozone/back_end.hh	/^class BackEnd$/;"	c
BackEnd	ozone/back_end_impl.hh	/^BackEnd<Impl>::BackEnd(Params *params)$/;"	f	class:BackEnd
BackEnd	ozone/cpu.hh	/^    typedef typename Impl::BackEnd BackEnd;$/;"	t	class:OzoneCPU
BackEnd	ozone/front_end.hh	/^    typedef typename Impl::BackEnd BackEnd;$/;"	t	class:FrontEnd
BackEnd	ozone/lsq_unit.hh	/^    typedef typename Impl::BackEnd BackEnd;$/;"	t	class:OzoneLSQ
BackEnd	ozone/lw_lsq.hh	/^    typedef typename Impl::BackEnd BackEnd;$/;"	t	class:OzoneLWLSQ
BackEnd	ozone/ozone_impl.hh	/^    typedef LWBackEnd<OzoneImpl> BackEnd;$/;"	t	struct:OzoneImpl
BackEnd	ozone/simple_impl.hh	/^    typedef InorderBackEnd<SimpleImpl> BackEnd;$/;"	t	struct:SimpleImpl
BackEndStartStage	inorder/pipeline_traits.5stage.hh	/^    const unsigned BackEndStartStage = 2;$/;"	m	namespace:ThePipeline
BackEndStartStage	inorder/pipeline_traits.9stage.hh	/^    const unsigned BackEndStartStage = 3;$/;"	m	namespace:ThePipeline
BackEndStartStage	inorder/pipeline_traits.9stage.smt2.hh	/^    const unsigned BackEndStartStage = 3;$/;"	m	namespace:ThePipeline
BackEndStartStage	inorder/pipeline_traits.hh	/^    const unsigned BackEndStartStage = 2;$/;"	m	namespace:ThePipeline
BadlyPredictedBranch	minor/pipe_data.hh	/^        BadlyPredictedBranch,$/;"	e	enum:Minor::BranchData::Reason
BadlyPredictedBranchTarget	minor/pipe_data.hh	/^        BadlyPredictedBranchTarget,$/;"	e	enum:Minor::BranchData::Reason
BarrierDataRequest	minor/lsq.hh	/^        BarrierDataRequest(LSQ &port_, MinorDynInstPtr inst_) :$/;"	f	class:Minor::LSQ::BarrierDataRequest
BarrierDataRequest	minor/lsq.hh	/^    class BarrierDataRequest : public SpecialDataRequest$/;"	c	class:Minor::LSQ
BaseCPU	BaseCPU.py	/^class BaseCPU(MemObject):$/;"	c
BaseCPU	base.cc	/^BaseCPU::BaseCPU(Params *p, bool is_checker)$/;"	f	class:BaseCPU
BaseCPU	base.hh	/^class BaseCPU : public MemObject$/;"	c
BaseDynInst	base_dyn_inst.hh	/^class BaseDynInst : public ExecContext, public RefCounted$/;"	c
BaseDynInst	base_dyn_inst_impl.hh	/^BaseDynInst<Impl>::BaseDynInst(const StaticInstPtr &_staticInst,$/;"	f	class:BaseDynInst
BaseDynInstPtr	base_dyn_inst.hh	/^    typedef RefCountingPtr<BaseDynInst<Impl> > BaseDynInstPtr;$/;"	t	class:BaseDynInst
BaseGen	testers/traffic_gen/generators.cc	/^BaseGen::BaseGen(const std::string& _name, MasterID master_id, Tick _duration)$/;"	f	class:BaseGen
BaseGen	testers/traffic_gen/generators.hh	/^class BaseGen$/;"	c
BaseKvmCPU	kvm/BaseKvmCPU.py	/^class BaseKvmCPU(BaseCPU):$/;"	c
BaseKvmCPU	kvm/base.cc	/^BaseKvmCPU::BaseKvmCPU(BaseKvmCPUParams *params)$/;"	f	class:BaseKvmCPU
BaseKvmCPU	kvm/base.hh	/^class BaseKvmCPU : public BaseCPU$/;"	c
BaseKvmTimer	kvm/timer.hh	/^    BaseKvmTimer(int signo, float hostFactor, Tick hostFreq)$/;"	f	class:BaseKvmTimer
BaseKvmTimer	kvm/timer.hh	/^class BaseKvmTimer$/;"	c
BaseO3CPU	o3/cpu.cc	/^BaseO3CPU::BaseO3CPU(BaseCPUParams *params)$/;"	f	class:BaseO3CPU
BaseO3CPU	o3/cpu.hh	/^class BaseO3CPU : public BaseCPU$/;"	c
BaseO3DynInst	o3/dyn_inst.hh	/^class BaseO3DynInst : public BaseDynInst<Impl>$/;"	c
BaseO3DynInst	o3/dyn_inst_impl.hh	/^BaseO3DynInst<Impl>::BaseO3DynInst(const StaticInstPtr &_staticInst,$/;"	f	class:BaseO3DynInst
BaseO3DynInst	o3/dyn_inst_impl.hh	/^BaseO3DynInst<Impl>::BaseO3DynInst(const StaticInstPtr &staticInst,$/;"	f	class:BaseO3DynInst
BaseSimpleCPU	simple/BaseSimpleCPU.py	/^class BaseSimpleCPU(BaseCPU):$/;"	c
BaseSimpleCPU	simple/base.cc	/^BaseSimpleCPU::BaseSimpleCPU(BaseSimpleCPUParams *p)$/;"	f	class:BaseSimpleCPU
BaseSimpleCPU	simple/base.hh	/^class BaseSimpleCPU : public BaseCPU, public ExecContext$/;"	c
BasicBlockRange	simple/probes/simpoint.hh	/^typedef std::pair<Addr, Addr> BasicBlockRange;$/;"	t
BiModeBP	pred/bi_mode.cc	/^BiModeBP::BiModeBP(const Params *params)$/;"	f	class:BiModeBP
BiModeBP	pred/bi_mode.hh	/^class BiModeBP : public BPredUnit$/;"	c
Blocked	inorder/cpu.hh	/^        Blocked,$/;"	e	enum:InOrderCPU::Status
Blocked	inorder/pipeline_stage.hh	/^        Blocked,$/;"	e	enum:PipelineStage::ThreadStatus
Blocked	o3/cpu.hh	/^        Blocked,$/;"	e	enum:FullO3CPU::Status
Blocked	o3/decode.hh	/^        Blocked,$/;"	e	enum:DefaultDecode::ThreadStatus
Blocked	o3/fetch.hh	/^        Blocked,$/;"	e	enum:DefaultFetch::ThreadStatus
Blocked	o3/iew.hh	/^        Blocked,$/;"	e	enum:DefaultIEW::StageStatus
Blocked	o3/rename.hh	/^        Blocked,$/;"	e	enum:DefaultRename::ThreadStatus
Blocked	ozone/back_end.hh	/^        Blocked$/;"	e	enum:BackEnd::Status
Blocked	ozone/inorder_back_end.hh	/^        Blocked$/;"	e	enum:InorderBackEnd::Status
Blocked	ozone/lw_back_end.hh	/^        Blocked,$/;"	e	enum:LWBackEnd::Status
BlockingInst	base_dyn_inst.hh	/^        BlockingInst,            \/\/\/ Is a blocking instruction$/;"	e	enum:BaseDynInst::Status
BlockingInst	inorder/inorder_dyn_inst.hh	/^        BlockingInst,            \/\/\/ Is a blocking instruction$/;"	e	enum:InOrderDynInst::Status
Branch	o3/fetch.hh	/^        Branch,$/;"	e	enum:DefaultFetch::FetchPriority
BranchData	minor/pipe_data.hh	/^    BranchData($/;"	f	class:Minor::BranchData
BranchData	minor/pipe_data.hh	/^    BranchData() :$/;"	f	class:Minor::BranchData
BranchData	minor/pipe_data.hh	/^class BranchData \/* : public ReportIF, public BubbleIF *\/$/;"	c	namespace:Minor
BranchPred	ozone/front_end.hh	/^    typedef typename Impl::BranchPred BranchPred;$/;"	t	class:FrontEnd
BranchPred	ozone/ozone_impl.hh	/^    typedef BPredUnit<OzoneImpl> BranchPred;$/;"	t	struct:OzoneImpl
BranchPred	ozone/simple_impl.hh	/^    typedef BPredUnit<SimpleImpl> BranchPred;$/;"	t	struct:SimpleImpl
BranchPrediction	minor/pipe_data.hh	/^        BranchPrediction,$/;"	e	enum:Minor::BranchData::Reason
BranchPredictor	inorder/resources/branch_predictor.cc	/^BranchPredictor::BranchPredictor(std::string res_name, int res_id,$/;"	f	class:BranchPredictor
BranchPredictor	inorder/resources/branch_predictor.hh	/^class BranchPredictor : public Resource {$/;"	c
BranchPredictor	pred/BranchPredictor.py	/^class BranchPredictor(SimObject):$/;"	c
BreakPCEvent	pc_event.cc	/^BreakPCEvent::BreakPCEvent(PCEventQueue *q, const std::string &desc, Addr addr,$/;"	f	class:BreakPCEvent
BreakPCEvent	pc_event.hh	/^class BreakPCEvent : public PCEvent$/;"	c
BubbleIF	minor/buffers.hh	/^class BubbleIF$/;"	c	namespace:Minor
BubbleTraitsAdaptor	minor/buffers.hh	/^class BubbleTraitsAdaptor$/;"	c	namespace:Minor
BubbleTraitsPtrAdaptor	minor/buffers.hh	/^class BubbleTraitsPtrAdaptor$/;"	c	namespace:Minor
Buffer	minor/buffers.hh	/^    typedef MinorBuffer<Data> Buffer;$/;"	t	class:Minor::Latch
CCReg	exec_context.hh	/^    typedef TheISA::CCReg CCReg;$/;"	t	class:ExecContext
CCReg	inorder/cpu.hh	/^    typedef TheISA::CCReg CCReg;$/;"	t	class:InOrderCPU
CCReg	inorder/inorder_dyn_inst.hh	/^    typedef TheISA::CCReg CCReg;$/;"	t	class:InOrderDynInst
CCReg	o3/dyn_inst.hh	/^    typedef TheISA::CCReg   CCReg;$/;"	t	class:BaseO3DynInst
CCReg	o3/regfile.hh	/^    typedef TheISA::CCReg CCReg;$/;"	t	class:PhysRegFile
CCReg	simple/base.hh	/^    typedef TheISA::CCReg CCReg;$/;"	t	class:BaseSimpleCPU
CCReg	simple_thread.hh	/^    typedef TheISA::CCReg CCReg;$/;"	t	class:SimpleThread
CCReg	thread_context.hh	/^    typedef TheISA::CCReg CCReg;$/;"	t	class:ThreadContext
CCRegClass	reg_class.hh	/^    CCRegClass,         \/\/\/< Condition-code register$/;"	e	enum:RegClass
CHECK_SIZE	testers/rubytest/Check.hh	/^const int CHECK_SIZE = (1 << CHECK_SIZE_BITS);$/;"	v
CHECK_SIZE_BITS	testers/rubytest/Check.hh	/^const int CHECK_SIZE_BITS = 2;$/;"	v
COUNT_OF	kvm/arm_cpu.cc	187;"	d	file:
CPUEvent	inorder/cpu.cc	/^InOrderCPU::CPUEvent::CPUEvent(InOrderCPU *_cpu, CPUEventType e_type,$/;"	f	class:InOrderCPU::CPUEvent
CPUEvent	inorder/cpu.hh	/^    class CPUEvent : public Event$/;"	c	class:InOrderCPU
CPUEventPri	inorder/cpu.hh	/^    enum CPUEventPri {$/;"	g	class:InOrderCPU
CPUEventType	inorder/cpu.hh	/^    enum CPUEventType {$/;"	g	class:InOrderCPU
CPUIDVector	kvm/vm.hh	/^    typedef std::vector<struct kvm_cpuid_entry2> CPUIDVector;$/;"	t	class:Kvm
CPUPol	o3/commit.hh	/^    typedef typename Impl::CPUPol CPUPol;$/;"	t	class:DefaultCommit
CPUPol	o3/decode.hh	/^    typedef typename Impl::CPUPol CPUPol;$/;"	t	class:DefaultDecode
CPUPol	o3/fetch.hh	/^    typedef typename Impl::CPUPol CPUPol;$/;"	t	class:DefaultFetch
CPUPol	o3/iew.hh	/^    typedef typename Impl::CPUPol CPUPol;$/;"	t	class:DefaultIEW
CPUPol	o3/impl.hh	/^    typedef SimpleCPUPolicy<O3CPUImpl> CPUPol;$/;"	t	struct:O3CPUImpl
CPUPol	o3/rename.hh	/^    typedef typename Impl::CPUPol CPUPol;$/;"	t	class:DefaultRename
CPUPolicy	o3/cpu.hh	/^    typedef typename Impl::CPUPol CPUPolicy;$/;"	t	class:FullO3CPU
CPUProgressEvent	base.cc	/^CPUProgressEvent::CPUProgressEvent(BaseCPU *_cpu, Tick ival)$/;"	f	class:CPUProgressEvent
CPUProgressEvent	base.hh	/^class CPUProgressEvent : public Event$/;"	c
CPUStageId	minor/pipeline.hh	/^        CPUStageId = 0,$/;"	e	enum:Minor::Pipeline::StageId
CPUType	o3/impl.hh	/^    typedef O3CPU CPUType;$/;"	t	struct:O3CPUImpl
CPUType	ozone/front_end.hh	/^    typedef typename Impl::CPUType CPUType;$/;"	t	class:FrontEnd
CPUType	ozone/ozone_impl.hh	/^    typedef OzoneCPU CPUType;$/;"	t	struct:OzoneImpl
CPUType	ozone/thread_state.hh	/^    typedef typename Impl::CPUType CPUType;$/;"	t	struct:OzoneThreadState
CPU_INORDER_REG_DEP_MAP_HH	inorder/reg_dep_map.hh	34;"	d
CPU_INORDER_RESOURCE_LIST_HH	inorder/resources/resource_list.hh	33;"	d
CachePage	decode_cache.hh	/^    struct CachePage {$/;"	s	class:DecodeCache::AddrMap
CachePort	inorder/cpu.cc	/^InOrderCPU::CachePort::CachePort(CacheUnit *_cacheUnit,$/;"	f	class:InOrderCPU::CachePort
CachePort	inorder/cpu.hh	/^    class CachePort : public MasterPort$/;"	c	class:InOrderCPU
CacheReqPacket	inorder/resources/cache_unit.hh	/^    CacheReqPacket(CacheRequest *_req,$/;"	f	class:CacheReqPacket
CacheReqPacket	inorder/resources/cache_unit.hh	/^class CacheReqPacket : public Packet$/;"	c
CacheReqPktPtr	inorder/resources/cache_unit.hh	/^typedef CacheReqPacket* CacheReqPktPtr;$/;"	t
CacheReqPtr	inorder/resource.hh	/^typedef CacheRequest* CacheReqPtr;$/;"	t
CacheRequest	inorder/resources/cache_unit.hh	/^    CacheRequest(CacheUnit *cres)$/;"	f	class:CacheRequest
CacheRequest	inorder/resources/cache_unit.hh	/^class CacheRequest : public ResourceRequest$/;"	c
CacheUnit	inorder/resources/cache_unit.cc	/^CacheUnit::CacheUnit(string res_name, int res_id, int res_width,$/;"	f	class:CacheUnit
CacheUnit	inorder/resources/cache_unit.hh	/^class CacheUnit : public Resource$/;"	c
CacheUnitEvent	inorder/resources/cache_unit.cc	/^CacheUnitEvent::CacheUnitEvent()$/;"	f	class:CacheUnitEvent
CacheUnitEvent	inorder/resources/cache_unit.hh	/^class CacheUnitEvent : public ResourceEvent {$/;"	c
CanCommit	base_dyn_inst.hh	/^        CanCommit,               \/\/\/ Instruction can commit$/;"	e	enum:BaseDynInst::Status
CanCommit	inorder/inorder_dyn_inst.hh	/^        CanCommit,               \/\/\/ Instruction can commit$/;"	e	enum:InOrderDynInst::Status
CanIssue	base_dyn_inst.hh	/^        CanIssue,                \/\/\/ Instruction can issue and execute$/;"	e	enum:BaseDynInst::Status
CanIssue	inorder/inorder_dyn_inst.hh	/^        CanIssue,                \/\/\/ Instruction can issue and execute$/;"	e	enum:InOrderDynInst::Status
Check	testers/rubytest/Check.cc	/^Check::Check(const Address& address, const Address& pc,$/;"	f	class:Check
Check	testers/rubytest/Check.hh	/^class Check$/;"	c
CheckFault	inorder/resources/graduation_unit.hh	/^        CheckFault,$/;"	e	enum:GraduationUnit::Command
CheckStartEvent	testers/rubytest/RubyTester.hh	/^        CheckStartEvent(RubyTester *_tester)$/;"	f	class:RubyTester::CheckStartEvent
CheckStartEvent	testers/rubytest/RubyTester.hh	/^    class CheckStartEvent : public Event$/;"	c	class:RubyTester
CheckTable	testers/rubytest/CheckTable.cc	/^CheckTable::CheckTable(int _num_writers, int _num_readers, RubyTester* _tester)$/;"	f	class:CheckTable
CheckTable	testers/rubytest/CheckTable.hh	/^class CheckTable$/;"	c
Checker	checker/cpu.hh	/^    Checker(Params *p)$/;"	f	class:Checker
Checker	checker/cpu.hh	/^class Checker : public CheckerCPU$/;"	c
CheckerCPU	CheckerCPU.py	/^class CheckerCPU(BaseCPU):$/;"	c
CheckerCPU	checker/cpu.cc	/^CheckerCPU::CheckerCPU(Params *p)$/;"	f	class:CheckerCPU
CheckerCPU	checker/cpu.hh	/^class CheckerCPU : public BaseCPU, public ExecContext$/;"	c
CheckerThreadContext	checker/thread_context.hh	/^    CheckerThreadContext(TC *actual_tc,$/;"	f	class:CheckerThreadContext
CheckerThreadContext	checker/thread_context.hh	/^class CheckerThreadContext : public ThreadContext$/;"	c
ChildList	profile.hh	/^    typedef std::map<Addr, ProfileNode *> ChildList;$/;"	t	class:ProfileNode
CommStruct	ozone/back_end.hh	/^    typedef typename Impl::FullCPU::CommStruct CommStruct;$/;"	t	class:BackEnd
CommStruct	ozone/cpu.hh	/^    struct CommStruct {$/;"	s	class:OzoneCPU
CommStruct	ozone/front_end.hh	/^    typedef typename Impl::CPUType::CommStruct CommStruct;$/;"	t	class:FrontEnd
CommStruct	ozone/inorder_back_end.hh	/^    typedef typename Impl::FullCPU::CommStruct CommStruct;$/;"	t	class:InorderBackEnd
CommStruct	ozone/lw_back_end.hh	/^    typedef typename Impl::OzoneCPU::CommStruct CommStruct;$/;"	t	class:LWBackEnd
Command	inorder/resources/agen_unit.hh	/^    enum Command {$/;"	g	class:AGENUnit
Command	inorder/resources/branch_predictor.hh	/^    enum Command {$/;"	g	class:BranchPredictor
Command	inorder/resources/cache_unit.hh	/^    enum Command {$/;"	g	class:CacheUnit
Command	inorder/resources/decode_unit.hh	/^    enum Command {$/;"	g	class:DecodeUnit
Command	inorder/resources/execution_unit.hh	/^    enum Command {$/;"	g	class:ExecutionUnit
Command	inorder/resources/fetch_seq_unit.hh	/^    enum Command {$/;"	g	class:FetchSeqUnit
Command	inorder/resources/fetch_unit.hh	/^    enum Command {$/;"	g	class:FetchUnit
Command	inorder/resources/graduation_unit.hh	/^    enum Command {$/;"	g	class:GraduationUnit
Command	inorder/resources/inst_buffer.hh	/^    enum Command {$/;"	g	class:InstBuffer
Command	inorder/resources/mult_div_unit.hh	/^    enum Command {$/;"	g	class:MultDivUnit
Command	inorder/resources/use_def.hh	/^    enum Command {$/;"	g	class:UseDefUnit
Commit	o3/cpu_policy.hh	/^    typedef DefaultCommit<Impl> Commit;$/;"	t	struct:SimpleCPUPolicy
Commit	o3/rename.hh	/^    typedef typename CPUPol::Commit Commit;$/;"	t	class:DefaultRename
CommitIdx	o3/cpu.hh	/^        CommitIdx,$/;"	e	enum:FullO3CPU::StageIdx
CommitPolicy	o3/commit.hh	/^    enum CommitPolicy {$/;"	g	class:DefaultCommit
CommitStatus	o3/commit.hh	/^    enum CommitStatus{$/;"	g	class:DefaultCommit
Committed	base_dyn_inst.hh	/^        Committed,               \/\/\/ Instruction has committed$/;"	e	enum:BaseDynInst::Status
Committed	inorder/inorder_dyn_inst.hh	/^        Committed,               \/\/\/ Instruction has committed$/;"	e	enum:InOrderDynInst::Status
Complete	minor/fetch1.hh	/^            Complete \/* Complete.  Either a fault, or a fetched line *\/$/;"	e	enum:Minor::Fetch1::FetchRequest::FetchRequestState
Complete	minor/lsq.hh	/^            Complete$/;"	e	enum:Minor::LSQ::LSQRequest::LSQRequestState
CompleteFetch	inorder/resources/fetch_unit.hh	/^        CompleteFetch$/;"	e	enum:FetchUnit::Command
CompleteReadData	inorder/resources/cache_unit.hh	/^        CompleteReadData,$/;"	e	enum:CacheUnit::Command
CompleteSecondSplitRead	inorder/resources/cache_unit.hh	/^        CompleteSecondSplitRead,$/;"	e	enum:CacheUnit::Command
CompleteSecondSplitWrite	inorder/resources/cache_unit.hh	/^        CompleteSecondSplitWrite$/;"	e	enum:CacheUnit::Command
CompleteWriteData	inorder/resources/cache_unit.hh	/^        CompleteWriteData,$/;"	e	enum:CacheUnit::Command
Completed	base_dyn_inst.hh	/^        Completed,               \/\/\/ Instruction has completed$/;"	e	enum:BaseDynInst::Status
Completed	inorder/inorder_dyn_inst.hh	/^        Completed,               \/\/\/ Instruction has completed$/;"	e	enum:InOrderDynInst::Status
CorrectlyPredictedBranch	minor/pipe_data.hh	/^        CorrectlyPredictedBranch,$/;"	e	enum:Minor::BranchData::Reason
CpuEvent	cpuevent.hh	/^    CpuEvent(ThreadContext *_tc, Priority p = Default_Pri)$/;"	f	class:CpuEvent
CpuEvent	cpuevent.hh	/^class CpuEvent : public Event$/;"	c
CpuEventList	cpuevent.hh	/^    typedef std::vector<CpuEvent *> CpuEventList;$/;"	t	class:CpuEvent
CpuEventWrapper	cpuevent.hh	/^    CpuEventWrapper(T *obj, ThreadContext *_tc, Priority p = Default_Pri)$/;"	f	class:CpuEventWrapper
CpuEventWrapper	cpuevent.hh	/^class CpuEventWrapper : public CpuEvent$/;"	c
CpuPort	testers/directedtest/RubyDirectedTester.hh	/^        CpuPort(const std::string &_name, RubyDirectedTester *_tester,$/;"	f	class:RubyDirectedTester::CpuPort
CpuPort	testers/directedtest/RubyDirectedTester.hh	/^    class CpuPort : public MasterPort$/;"	c	class:RubyDirectedTester
CpuPort	testers/memtest/memtest.hh	/^        CpuPort(const std::string &_name, MemTest *_memtest)$/;"	f	class:MemTest::CpuPort
CpuPort	testers/memtest/memtest.hh	/^    class CpuPort : public MasterPort$/;"	c	class:MemTest
CpuPort	testers/networktest/networktest.hh	/^        CpuPort(const std::string &_name, NetworkTest *_networktest)$/;"	f	class:NetworkTest::CpuPort
CpuPort	testers/networktest/networktest.hh	/^    class CpuPort : public MasterPort$/;"	c	class:NetworkTest
CpuPort	testers/rubytest/RubyTester.hh	/^        CpuPort(const std::string &_name, RubyTester *_tester, PortID _id)$/;"	f	class:RubyTester::CpuPort
CpuPort	testers/rubytest/RubyTester.hh	/^    class CpuPort : public MasterPort$/;"	c	class:RubyTester
DCache	inorder/pipeline_traits.5stage.hh	/^       DCache,$/;"	e	enum:ThePipeline::ResourceList
DCache	inorder/pipeline_traits.9stage.hh	/^       DCache,$/;"	e	enum:ThePipeline::ResourceList
DCache	inorder/pipeline_traits.9stage.smt2.hh	/^       DCache,$/;"	e	enum:ThePipeline::ResourceList
DCache	inorder/pipeline_traits.hh	/^       DCache,$/;"	e	enum:ThePipeline::ResourceId
DCacheCompletionEvent	ozone/back_end.hh	/^    class DCacheCompletionEvent : public Event$/;"	c	class:BackEnd
DCacheCompletionEvent	ozone/back_end_impl.hh	/^BackEnd<Impl>::DCacheCompletionEvent::DCacheCompletionEvent(BackEnd *_be)$/;"	f	class:BackEnd::DCacheCompletionEvent
DCacheCompletionEvent	ozone/inorder_back_end.hh	/^    class DCacheCompletionEvent : public Event$/;"	c	class:InorderBackEnd
DCacheCompletionEvent	ozone/inorder_back_end_impl.hh	/^InorderBackEnd<Impl>::DCacheCompletionEvent::DCacheCompletionEvent($/;"	f	class:InorderBackEnd::DCacheCompletionEvent
DTBWaitResponse	simple/base.hh	/^        DTBWaitResponse,$/;"	e	enum:BaseSimpleCPU::Status
DTLB	inorder/pipeline_traits.5stage.hh	/^       DTLB,$/;"	e	enum:ThePipeline::ResourceList
DTLB	inorder/pipeline_traits.9stage.hh	/^       DTLB,$/;"	e	enum:ThePipeline::ResourceList
DTLB	inorder/pipeline_traits.9stage.smt2.hh	/^       DTLB,$/;"	e	enum:ThePipeline::ResourceList
DTickEvent	simple/timing.hh	/^            DTickEvent(TimingSimpleCPU *_cpu)$/;"	f	struct:TimingSimpleCPU::DcachePort::DTickEvent
DTickEvent	simple/timing.hh	/^        struct DTickEvent : public TickEvent$/;"	s	class:TimingSimpleCPU::DcachePort
DataReadLookup	inorder/resources/tlb_unit.hh	/^        DataReadLookup,$/;"	e	enum:TLBUnit::TLBCommand
DataTranslation	translation.hh	/^    DataTranslation(ExecContextPtr _xc, WholeTranslationState* _state)$/;"	f	class:DataTranslation
DataTranslation	translation.hh	/^    DataTranslation(ExecContextPtr _xc, WholeTranslationState* _state,$/;"	f	class:DataTranslation
DataTranslation	translation.hh	/^class DataTranslation : public BaseTLB::Translation$/;"	c
DataWriteLookup	inorder/resources/tlb_unit.hh	/^        DataWriteLookup$/;"	e	enum:TLBUnit::TLBCommand
DcacheMissComplete	ozone/back_end.hh	/^        DcacheMissComplete,$/;"	e	enum:BackEnd::Status
DcacheMissComplete	ozone/inorder_back_end.hh	/^        DcacheMissComplete,$/;"	e	enum:InorderBackEnd::Status
DcacheMissComplete	ozone/lw_back_end.hh	/^        DcacheMissComplete,$/;"	e	enum:LWBackEnd::Status
DcacheMissLoadStall	ozone/inorder_back_end.hh	/^        DcacheMissLoadStall,$/;"	e	enum:InorderBackEnd::Status
DcacheMissStall	ozone/back_end.hh	/^        DcacheMissStall,$/;"	e	enum:BackEnd::Status
DcacheMissStall	ozone/lsq_unit.hh	/^        DcacheMissStall,$/;"	e	enum:OzoneLSQ::Status
DcacheMissStall	ozone/lw_back_end.hh	/^        DcacheMissStall,$/;"	e	enum:LWBackEnd::Status
DcacheMissStall	ozone/lw_lsq.hh	/^        DcacheMissStall,$/;"	e	enum:OzoneLWLSQ::Status
DcacheMissStoreStall	ozone/inorder_back_end.hh	/^        DcacheMissStoreStall,$/;"	e	enum:InorderBackEnd::Status
DcacheMissSwitch	ozone/lsq_unit.hh	/^        DcacheMissSwitch$/;"	e	enum:OzoneLSQ::Status
DcacheMissSwitch	ozone/lw_lsq.hh	/^        DcacheMissSwitch$/;"	e	enum:OzoneLWLSQ::Status
DcachePort	minor/lsq.hh	/^        DcachePort(std::string name, LSQ &lsq_, MinorCPU &cpu) :$/;"	f	class:Minor::LSQ::DcachePort
DcachePort	minor/lsq.hh	/^    class DcachePort : public MinorCPU::MinorCPUPort$/;"	c	class:Minor::LSQ
DcachePort	o3/cpu.hh	/^        DcachePort(LSQ<Impl> *_lsq, FullO3CPU<Impl>* _cpu)$/;"	f	class:FullO3CPU::DcachePort
DcachePort	o3/cpu.hh	/^    class DcachePort : public MasterPort$/;"	c	class:FullO3CPU
DcachePort	ozone/lw_lsq.hh	/^        DcachePort(OzoneLWLSQ *_lsq)$/;"	f	class:OzoneLWLSQ::DcachePort
DcachePort	ozone/lw_lsq.hh	/^    class DcachePort : public MasterPort$/;"	c	class:OzoneLWLSQ
DcachePort	simple/timing.hh	/^        DcachePort(TimingSimpleCPU *_cpu)$/;"	f	class:TimingSimpleCPU::DcachePort
DcachePort	simple/timing.hh	/^    class DcachePort : public TimingCPUPort$/;"	c	class:TimingSimpleCPU
DcacheRetry	simple/base.hh	/^        DcacheRetry,$/;"	e	enum:BaseSimpleCPU::Status
DcacheWaitResponse	simple/base.hh	/^        DcacheWaitResponse,$/;"	e	enum:BaseSimpleCPU::Status
DcacheWaitSwitch	simple/base.hh	/^        DcacheWaitSwitch,$/;"	e	enum:BaseSimpleCPU::Status
DeactivateThread	inorder/cpu.hh	/^        DeactivateThread,$/;"	e	enum:InOrderCPU::CPUEventType
Decode	inorder/pipeline_traits.5stage.hh	/^       Decode,$/;"	e	enum:ThePipeline::ResourceList
Decode	inorder/pipeline_traits.9stage.hh	/^       Decode,$/;"	e	enum:ThePipeline::ResourceList
Decode	inorder/pipeline_traits.9stage.smt2.hh	/^       Decode,$/;"	e	enum:ThePipeline::ResourceList
Decode	inorder/pipeline_traits.hh	/^       Decode,$/;"	e	enum:ThePipeline::ResourceId
Decode	minor/decode.cc	/^Decode::Decode(const std::string &name,$/;"	f	class:Minor::Decode
Decode	minor/decode.hh	/^class Decode : public Named$/;"	c	namespace:Minor
Decode	o3/cpu_policy.hh	/^    typedef DefaultDecode<Impl> Decode;$/;"	t	struct:SimpleCPUPolicy
DecodeCache	decode_cache.hh	/^namespace DecodeCache$/;"	n
DecodeIdx	o3/cpu.hh	/^        DecodeIdx,$/;"	e	enum:FullO3CPU::StageIdx
DecodeInst	inorder/resources/decode_unit.hh	/^        DecodeInst$/;"	e	enum:DecodeUnit::Command
DecodeStageId	minor/pipeline.hh	/^        Fetch1StageId, Fetch2StageId, DecodeStageId, ExecuteStageId,$/;"	e	enum:Minor::Pipeline::StageId
DecodeStatus	o3/decode.hh	/^    enum DecodeStatus {$/;"	g	class:DefaultDecode
DecodeStruct	o3/cpu.hh	/^    typedef typename CPUPolicy::DecodeStruct DecodeStruct;$/;"	t	class:FullO3CPU
DecodeStruct	o3/cpu_policy.hh	/^    typedef DefaultDecodeDefaultRename<Impl> DecodeStruct;$/;"	t	struct:SimpleCPUPolicy
DecodeStruct	o3/decode.hh	/^    typedef typename CPUPol::DecodeStruct DecodeStruct;$/;"	t	class:DefaultDecode
DecodeStruct	o3/rename.hh	/^    typedef typename CPUPol::DecodeStruct DecodeStruct;$/;"	t	class:DefaultRename
DecodeUnit	inorder/resources/decode_unit.cc	/^DecodeUnit::DecodeUnit(std::string res_name, int res_id, int res_width,$/;"	f	class:DecodeUnit
DecodeUnit	inorder/resources/decode_unit.hh	/^class DecodeUnit : public Resource {$/;"	c
Default	inorder/resource_pool.hh	/^        Default$/;"	e	enum:ResourcePool::ResPoolEventType
DefaultBTB	pred/btb.cc	/^DefaultBTB::DefaultBTB(unsigned _numEntries,$/;"	f	class:DefaultBTB
DefaultBTB	pred/btb.hh	/^class DefaultBTB$/;"	c
DefaultCommit	o3/commit.hh	/^class DefaultCommit$/;"	c
DefaultCommit	o3/commit_impl.hh	/^DefaultCommit<Impl>::DefaultCommit(O3CPU *_cpu, DerivO3CPUParams *params)$/;"	f	class:DefaultCommit
DefaultDecode	o3/decode.hh	/^class DefaultDecode$/;"	c
DefaultDecode	o3/decode_impl.hh	/^DefaultDecode<Impl>::DefaultDecode(O3CPU *_cpu, DerivO3CPUParams *params)$/;"	f	class:DefaultDecode
DefaultDecodeDefaultRename	o3/comm.hh	/^struct DefaultDecodeDefaultRename {$/;"	s
DefaultFUPool	o3/FUPool.py	/^class DefaultFUPool(FUPool):$/;"	c
DefaultFetch	o3/fetch.hh	/^class DefaultFetch$/;"	c
DefaultFetch	o3/fetch_impl.hh	/^DefaultFetch<Impl>::DefaultFetch(O3CPU *_cpu, DerivO3CPUParams *params)$/;"	f	class:DefaultFetch
DefaultFetchDefaultDecode	o3/comm.hh	/^struct DefaultFetchDefaultDecode {$/;"	s
DefaultIEW	o3/iew.hh	/^class DefaultIEW$/;"	c
DefaultIEW	o3/iew_impl.hh	/^DefaultIEW<Impl>::DefaultIEW(O3CPU *_cpu, DerivO3CPUParams *params)$/;"	f	class:DefaultIEW
DefaultIEWDefaultCommit	o3/comm.hh	/^struct DefaultIEWDefaultCommit {$/;"	s
DefaultRename	o3/rename.hh	/^class DefaultRename$/;"	c
DefaultRename	o3/rename_impl.hh	/^DefaultRename<Impl>::DefaultRename(O3CPU *_cpu, DerivO3CPUParams *params)$/;"	f	class:DefaultRename
DefaultRenameDefaultIEW	o3/comm.hh	/^struct DefaultRenameDefaultIEW {$/;"	s
DepEntry	o3/dep_graph.hh	/^    typedef DependencyEntry<DynInstPtr> DepEntry;$/;"	t	class:DependencyGraph
DepMap	inorder/reg_dep_map.hh	/^    typedef std::vector<std::list<DynInstPtr> > DepMap;$/;"	t	class:RegDepMap
DependencyEntry	o3/dep_graph.hh	/^    DependencyEntry()$/;"	f	class:DependencyEntry
DependencyEntry	o3/dep_graph.hh	/^class DependencyEntry$/;"	c
DependencyGraph	o3/dep_graph.hh	/^    DependencyGraph()$/;"	f	class:DependencyGraph
DependencyGraph	o3/dep_graph.hh	/^class DependencyGraph$/;"	c
DerivO3CPU	o3/O3CPU.py	/^class DerivO3CPU(BaseCPU):$/;"	c
DerivO3CPU	o3/deriv.hh	/^    DerivO3CPU(DerivO3CPUParams *p)$/;"	f	class:DerivO3CPU
DerivO3CPU	o3/deriv.hh	/^class DerivO3CPU : public FullO3CPU<O3CPUImpl>$/;"	c
DerivOzoneCPU	ozone/OzoneCPU.py	/^class DerivOzoneCPU(BaseCPU):$/;"	c
DerivOzoneCPU	ozone/cpu_builder.cc	/^    DerivOzoneCPU(SimpleParams *p)$/;"	f	class:DerivOzoneCPU
DerivOzoneCPU	ozone/cpu_builder.cc	/^class DerivOzoneCPU : public OzoneCPU<OzoneImpl>$/;"	c	file:
DirectedGenerator	testers/directedtest/DirectedGenerator.cc	/^DirectedGenerator::DirectedGenerator(const Params *p)$/;"	f	class:DirectedGenerator
DirectedGenerator	testers/directedtest/DirectedGenerator.hh	/^class DirectedGenerator : public SimObject $/;"	c
DirectedGenerator	testers/directedtest/RubyDirectedTester.py	/^class DirectedGenerator(SimObject):$/;"	c
DirectedStartEvent	testers/directedtest/RubyDirectedTester.hh	/^        DirectedStartEvent(RubyDirectedTester *_tester)$/;"	f	class:RubyDirectedTester::DirectedStartEvent
DirectedStartEvent	testers/directedtest/RubyDirectedTester.hh	/^    class DirectedStartEvent : public Event$/;"	c	class:RubyDirectedTester
DispatchToIssue	ozone/back_end.hh	/^    typedef SizeStruct DispatchToIssue;$/;"	t	class:BackEnd
DispatchToIssue	ozone/lw_back_end.hh	/^    typedef SizeStruct DispatchToIssue;$/;"	t	class:LWBackEnd
Double	inorder/inorder_dyn_inst.hh	/^        Double$/;"	e	enum:InOrderDynInst::ResultType
DrainAllInsts	minor/execute.hh	/^        DrainAllInsts \/* Discarding all remaining insts *\/$/;"	e	enum:Minor::Execute::DrainState
DrainCurrentInst	minor/execute.hh	/^        DrainCurrentInst, \/* Draining to end of inst\/macroop *\/$/;"	e	enum:Minor::Execute::DrainState
DrainHaltFetch	minor/execute.hh	/^        DrainHaltFetch, \/* Halting Fetch after completing current inst *\/$/;"	e	enum:Minor::Execute::DrainState
DrainState	minor/execute.hh	/^    enum DrainState$/;"	g	class:Minor::Execute
DramGen	testers/traffic_gen/generators.hh	/^    DramGen(const std::string& _name, MasterID master_id, Tick _duration,$/;"	f	class:DramGen
DramGen	testers/traffic_gen/generators.hh	/^class DramGen : public RandomGen$/;"	c
DramRotGen	testers/traffic_gen/generators.hh	/^    DramRotGen(const std::string& _name, MasterID master_id, Tick _duration,$/;"	f	class:DramRotGen
DramRotGen	testers/traffic_gen/generators.hh	/^class DramRotGen : public DramGen$/;"	c
DummyChecker	DummyChecker.py	/^class DummyChecker(CheckerCPU):$/;"	c
DummyChecker	dummy_checker.hh	/^    DummyChecker(Params *p)$/;"	f	class:DummyChecker
DummyChecker	dummy_checker.hh	/^class DummyChecker : public CheckerCPU$/;"	c
DynInst	o3/fetch.hh	/^    typedef typename Impl::DynInst DynInst;$/;"	t	class:DefaultFetch
DynInst	o3/impl.hh	/^    typedef BaseO3DynInst<O3CPUImpl> DynInst;$/;"	t	struct:O3CPUImpl
DynInst	ozone/back_end.hh	/^    typedef typename Impl::DynInst DynInst;$/;"	t	class:BackEnd
DynInst	ozone/cpu.hh	/^    typedef typename Impl::DynInst DynInst;$/;"	t	class:OzoneCPU
DynInst	ozone/front_end.hh	/^    typedef typename Impl::DynInst DynInst;$/;"	t	class:FrontEnd
DynInst	ozone/lw_back_end.hh	/^    typedef typename Impl::DynInst DynInst;$/;"	t	class:LWBackEnd
DynInst	ozone/ozone_impl.hh	/^    typedef OzoneDynInst<OzoneImpl> DynInst;$/;"	t	struct:OzoneImpl
DynInst	ozone/simple_impl.hh	/^    typedef OzoneDynInst<SimpleImpl> DynInst;$/;"	t	struct:SimpleImpl
DynInstPtr	base_dyn_inst.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:BaseDynInst
DynInstPtr	checker/cpu.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:Checker
DynInstPtr	inorder/cpu.hh	/^    typedef ThePipeline::DynInstPtr DynInstPtr;$/;"	t	class:InOrderCPU
DynInstPtr	inorder/inorder_dyn_inst.hh	/^    typedef RefCountingPtr<InOrderDynInst> DynInstPtr;$/;"	t	class:InOrderDynInst
DynInstPtr	inorder/pipeline_stage.hh	/^    typedef ThePipeline::DynInstPtr DynInstPtr;$/;"	t	class:PipelineStage
DynInstPtr	inorder/pipeline_traits.5stage.hh	/^    typedef RefCountingPtr<InOrderDynInst> DynInstPtr;$/;"	t	namespace:ThePipeline
DynInstPtr	inorder/pipeline_traits.9stage.hh	/^    typedef RefCountingPtr<InOrderDynInst> DynInstPtr;$/;"	t	namespace:ThePipeline
DynInstPtr	inorder/pipeline_traits.9stage.smt2.hh	/^    typedef RefCountingPtr<InOrderDynInst> DynInstPtr;$/;"	t	namespace:ThePipeline
DynInstPtr	inorder/pipeline_traits.hh	/^    typedef RefCountingPtr<InOrderDynInst> DynInstPtr;$/;"	t	namespace:ThePipeline
DynInstPtr	inorder/reg_dep_map.hh	/^    typedef ThePipeline::DynInstPtr DynInstPtr;$/;"	t	class:RegDepMap
DynInstPtr	inorder/resource.hh	/^    typedef ThePipeline::DynInstPtr DynInstPtr;$/;"	t	class:Resource
DynInstPtr	inorder/resource.hh	/^    typedef ThePipeline::DynInstPtr DynInstPtr;$/;"	t	class:ResourceRequest
DynInstPtr	inorder/resource_pool.hh	/^    typedef InOrderDynInst::DynInstPtr DynInstPtr;$/;"	t	class:ResourcePool
DynInstPtr	inorder/resources/agen_unit.hh	/^    typedef InOrderDynInst::DynInstPtr DynInstPtr;$/;"	t	class:AGENUnit
DynInstPtr	inorder/resources/branch_predictor.hh	/^    typedef ThePipeline::DynInstPtr DynInstPtr;$/;"	t	class:BranchPredictor
DynInstPtr	inorder/resources/cache_unit.hh	/^    typedef ThePipeline::DynInstPtr DynInstPtr;$/;"	t	class:CacheUnit
DynInstPtr	inorder/resources/decode_unit.hh	/^    typedef ThePipeline::DynInstPtr DynInstPtr;$/;"	t	class:DecodeUnit
DynInstPtr	inorder/resources/execution_unit.hh	/^    typedef ThePipeline::DynInstPtr DynInstPtr;$/;"	t	class:ExecutionUnit
DynInstPtr	inorder/resources/fetch_seq_unit.hh	/^    typedef ThePipeline::DynInstPtr DynInstPtr;$/;"	t	class:FetchSeqUnit
DynInstPtr	inorder/resources/fetch_unit.hh	/^    typedef ThePipeline::DynInstPtr DynInstPtr;$/;"	t	class:FetchUnit
DynInstPtr	inorder/resources/graduation_unit.hh	/^    typedef ThePipeline::DynInstPtr DynInstPtr;$/;"	t	class:GraduationUnit
DynInstPtr	inorder/resources/inst_buffer.hh	/^    typedef ThePipeline::DynInstPtr DynInstPtr;$/;"	t	class:InstBuffer
DynInstPtr	inorder/resources/mem_dep_unit.hh	/^    typedef ThePipeline::DynInstPtr DynInstPtr;$/;"	t	class:MemDepUnit
DynInstPtr	inorder/resources/mult_div_unit.hh	/^    typedef ThePipeline::DynInstPtr DynInstPtr;$/;"	t	class:MultDivUnit
DynInstPtr	inorder/resources/tlb_unit.hh	/^    typedef ThePipeline::DynInstPtr DynInstPtr;$/;"	t	class:TLBUnit
DynInstPtr	inorder/resources/tlb_unit.hh	/^    typedef ThePipeline::DynInstPtr DynInstPtr;$/;"	t	class:TLBUnitRequest
DynInstPtr	inorder/resources/use_def.hh	/^        typedef ThePipeline::DynInstPtr DynInstPtr;$/;"	t	class:UseDefUnit::UseDefRequest
DynInstPtr	inorder/resources/use_def.hh	/^    typedef ThePipeline::DynInstPtr DynInstPtr;$/;"	t	class:UseDefUnit
DynInstPtr	o3/comm.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	struct:DefaultDecodeDefaultRename
DynInstPtr	o3/comm.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	struct:DefaultFetchDefaultDecode
DynInstPtr	o3/comm.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	struct:DefaultIEWDefaultCommit
DynInstPtr	o3/comm.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	struct:DefaultRenameDefaultIEW
DynInstPtr	o3/comm.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	struct:IssueStruct
DynInstPtr	o3/comm.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	struct:TimeBufStruct
DynInstPtr	o3/commit.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:DefaultCommit
DynInstPtr	o3/cpu.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:FullO3CPU
DynInstPtr	o3/decode.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:DefaultDecode
DynInstPtr	o3/fetch.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:DefaultFetch
DynInstPtr	o3/iew.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:DefaultIEW
DynInstPtr	o3/impl.hh	/^    typedef RefCountingPtr<DynInst> DynInstPtr;$/;"	t	struct:O3CPUImpl
DynInstPtr	o3/inst_queue.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:InstructionQueue
DynInstPtr	o3/lsq.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:LSQ
DynInstPtr	o3/lsq_unit.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:LSQUnit
DynInstPtr	o3/mem_dep_unit.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:MemDepUnit
DynInstPtr	o3/rename.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:DefaultRename
DynInstPtr	o3/rob.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:ROB
DynInstPtr	ozone/back_end.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:BackEnd
DynInstPtr	ozone/cpu.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:OzoneCPU
DynInstPtr	ozone/dyn_inst.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:OzoneDynInst
DynInstPtr	ozone/front_end.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:FrontEnd
DynInstPtr	ozone/inorder_back_end.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:InorderBackEnd
DynInstPtr	ozone/inst_queue.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:InstQueue
DynInstPtr	ozone/lsq_unit.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:OzoneLSQ
DynInstPtr	ozone/lw_back_end.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:LWBackEnd
DynInstPtr	ozone/lw_lsq.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:OzoneLWLSQ
DynInstPtr	ozone/null_predictor.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:NullPredictor
DynInstPtr	ozone/ozone_impl.hh	/^    typedef RefCountingPtr<DynInst> DynInstPtr;$/;"	t	struct:OzoneImpl
DynInstPtr	ozone/rename_table.hh	/^    typedef typename Impl::DynInstPtr DynInstPtr;$/;"	t	class:RenameTable
DynInstPtr	ozone/simple_impl.hh	/^    typedef RefCountingPtr<DynInst> DynInstPtr;$/;"	t	struct:SimpleImpl
Dynamic	o3/inst_queue.hh	/^        Dynamic,$/;"	e	enum:InstructionQueue::IQPolicy
Dynamic	o3/lsq.hh	/^        Dynamic,$/;"	e	enum:LSQ::LSQPolicy
Dynamic	o3/rob.hh	/^        Dynamic,$/;"	e	enum:ROB::ROBPolicy
EACalcDone	base_dyn_inst.hh	/^        EACalcDone,$/;"	e	enum:BaseDynInst::Flags
EAList	ozone/ea_list.hh	/^    EAList() { }$/;"	f	class:EAList
EAList	ozone/ea_list.hh	/^class EAList {$/;"	c
EXPECTED_KVM_API_VERSION	kvm/vm.cc	55;"	d	file:
EXTRACT_FIELD	kvm/arm_cpu.cc	56;"	d	file:
EffAddrValid	base_dyn_inst.hh	/^        EffAddrValid,$/;"	e	enum:BaseDynInst::Flags
EndMultDiv	inorder/resources/mult_div_unit.hh	/^        EndMultDiv,$/;"	e	enum:MultDivUnit::Command
EndQuiesceEvent	quiesce_event.cc	/^EndQuiesceEvent::EndQuiesceEvent(ThreadContext *_tc)$/;"	f	class:EndQuiesceEvent
EndQuiesceEvent	quiesce_event.hh	/^class EndQuiesceEvent : public Event$/;"	c
ExeTracer	ExeTracer.py	/^class ExeTracer(InstTracer):$/;"	c
ExeTracer	exetrace.hh	/^    ExeTracer(const Params *params) : InstTracer(params)$/;"	f	class:Trace::ExeTracer
ExeTracer	exetrace.hh	/^class ExeTracer : public InstTracer$/;"	c	namespace:Trace
ExeTracerRecord	exetrace.hh	/^    ExeTracerRecord(Tick _when, ThreadContext *_thread,$/;"	f	class:Trace::ExeTracerRecord
ExeTracerRecord	exetrace.hh	/^class ExeTracerRecord : public InstRecord$/;"	c	namespace:Trace
ExecContext	exec_context.hh	/^class ExecContext {$/;"	c
ExecContext	minor/exec_context.hh	/^    ExecContext ($/;"	f	class:Minor::ExecContext
ExecContext	minor/exec_context.hh	/^class ExecContext : public ::ExecContext$/;"	c	namespace:Minor
ExecToCommit	ozone/back_end.hh	/^    typedef SizeStruct ExecToCommit;$/;"	t	class:BackEnd
ExecToCommit	ozone/lw_back_end.hh	/^    typedef SizeStruct ExecToCommit;$/;"	t	class:LWBackEnd
ExecUnit	inorder/pipeline_traits.5stage.hh	/^       ExecUnit,$/;"	e	enum:ThePipeline::ResourceList
ExecUnit	inorder/pipeline_traits.9stage.hh	/^       ExecUnit,$/;"	e	enum:ThePipeline::ResourceList
ExecUnit	inorder/pipeline_traits.9stage.smt2.hh	/^       ExecUnit,$/;"	e	enum:ThePipeline::ResourceList
ExecUnit	inorder/pipeline_traits.hh	/^       ExecUnit,$/;"	e	enum:ThePipeline::ResourceId
Execute	minor/execute.cc	/^Execute::Execute(const std::string &name_,$/;"	f	class:Minor::Execute
Execute	minor/execute.hh	/^class Execute : public Named$/;"	c	namespace:Minor
ExecuteInst	inorder/resources/execution_unit.hh	/^        ExecuteInst$/;"	e	enum:ExecutionUnit::Command
ExecuteStageId	minor/pipeline.hh	/^        Fetch1StageId, Fetch2StageId, DecodeStageId, ExecuteStageId,$/;"	e	enum:Minor::Pipeline::StageId
Executed	base_dyn_inst.hh	/^        Executed,                \/\/\/ Instruction has executed$/;"	e	enum:BaseDynInst::Status
Executed	inorder/inorder_dyn_inst.hh	/^        Executed,                \/\/\/ Instruction has executed$/;"	e	enum:InOrderDynInst::Status
ExecutionUnit	inorder/resources/execution_unit.cc	/^ExecutionUnit::ExecutionUnit(string res_name, int res_id, int res_width,$/;"	f	class:ExecutionUnit
ExecutionUnit	inorder/resources/execution_unit.hh	/^class ExecutionUnit : public Resource {$/;"	c
ExtMachInst	inorder/inorder_dyn_inst.hh	/^    typedef TheISA::ExtMachInst ExtMachInst;$/;"	t	class:InOrderDynInst
ExtMachInst	inorder/resources/fetch_unit.hh	/^    typedef TheISA::ExtMachInst ExtMachInst;$/;"	t	class:FetchUnit
ExtMachInst	o3/dyn_inst.hh	/^    typedef TheISA::ExtMachInst ExtMachInst;$/;"	t	class:BaseO3DynInst
ExtMachInst	o3/fetch.hh	/^    typedef TheISA::ExtMachInst ExtMachInst;$/;"	t	class:DefaultFetch
ExtMachInst	ozone/dyn_inst.hh	/^    typedef TheISA::ExtMachInst ExtMachInst;$/;"	t	class:OzoneDynInst
ExtMachInst	static_inst.hh	/^    typedef TheISA::ExtMachInst ExtMachInst;$/;"	t	class:StaticInst
FOREACH_DREG	kvm/x86_cpu.cc	134;"	d	file:
FOREACH_DTABLE	kvm/x86_cpu.cc	156;"	d	file:
FOREACH_IREG	kvm/x86_cpu.cc	103;"	d	file:
FOREACH_SEGMENT	kvm/x86_cpu.cc	144;"	d	file:
FOREACH_SREG	kvm/x86_cpu.cc	123;"	d	file:
FP_ALU	o3/FuncUnitConfig.py	/^class FP_ALU(FUDesc):$/;"	c
FP_MultDiv	o3/FuncUnitConfig.py	/^class FP_MultDiv(FUDesc):$/;"	c
FUCompletion	o3/inst_queue.hh	/^    class FUCompletion : public Event {$/;"	c	class:InstructionQueue
FUCompletion	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::FUCompletion::FUCompletion(DynInstPtr &_inst,$/;"	f	class:InstructionQueue::FUCompletion
FUDDiterator	func_unit.hh	/^typedef std::vector<FUDesc *>::const_iterator FUDDiterator;$/;"	t
FUDesc	FuncUnit.py	/^class FUDesc(SimObject):$/;"	c
FUDesc	func_unit.hh	/^    FUDesc(const FUDescParams *p)$/;"	f	class:FUDesc
FUDesc	func_unit.hh	/^class FUDesc : public SimObject$/;"	c
FUIdxQueue	o3/fu_pool.hh	/^        FUIdxQueue()$/;"	f	class:FUPool::FUIdxQueue
FUIdxQueue	o3/fu_pool.hh	/^    class FUIdxQueue {$/;"	c	class:FUPool
FUList	o3/FUPool.py	/^    FUList = VectorParam.FUDesc("list of FU's for this pool")$/;"	v	class:FUPool
FUList	o3/FUPool.py	/^    FUList = [ IntALU(), IntMultDiv(), FP_ALU(), FP_MultDiv(), ReadPort(),$/;"	v	class:DefaultFUPool
FUPipeline	minor/func_unit.cc	/^FUPipeline::FUPipeline(const std::string &name, const MinorFU &description_,$/;"	f	class:Minor::FUPipeline
FUPipeline	minor/func_unit.hh	/^class FUPipeline : public FUPipelineBase, public FuncUnit$/;"	c	namespace:Minor
FUPipelineBase	minor/func_unit.hh	/^    ReportTraitsAdaptor<QueuedInst> > FUPipelineBase;$/;"	t	namespace:Minor
FUPool	o3/FUPool.py	/^class FUPool(SimObject):$/;"	c
FUPool	o3/fu_pool.cc	/^FUPool::FUPool(const Params *p)$/;"	f	class:FUPool
FUPool	o3/fu_pool.hh	/^class FUPool : public SimObject$/;"	c
FXSave	kvm/x86_cpu.cc	/^struct FXSave$/;"	s	file:
Failed	minor/lsq.hh	/^            Failed, \/* The starting start of FailedDataRequests *\/$/;"	e	enum:Minor::LSQ::LSQRequest::LSQRequestState
FailedDataRequest	minor/lsq.hh	/^        FailedDataRequest(LSQ &port_, MinorDynInstPtr inst_) :$/;"	f	class:Minor::LSQ::FailedDataRequest
FailedDataRequest	minor/lsq.hh	/^    class FailedDataRequest : public SpecialDataRequest$/;"	c	class:Minor::LSQ
Faulting	simple/base.hh	/^        Faulting,$/;"	e	enum:BaseSimpleCPU::Status
Fetch	o3/commit.hh	/^    typedef typename CPUPol::Fetch Fetch;$/;"	t	class:DefaultCommit
Fetch	o3/cpu_policy.hh	/^    typedef DefaultFetch<Impl> Fetch;$/;"	t	struct:SimpleCPUPolicy
Fetch1	minor/fetch1.cc	/^Fetch1::Fetch1(const std::string &name_,$/;"	f	class:Minor::Fetch1
Fetch1	minor/fetch1.hh	/^class Fetch1 : public Named$/;"	c	namespace:Minor
Fetch1StageId	minor/pipeline.hh	/^        Fetch1StageId, Fetch2StageId, DecodeStageId, ExecuteStageId,$/;"	e	enum:Minor::Pipeline::StageId
Fetch2	minor/fetch2.cc	/^Fetch2::Fetch2(const std::string &name,$/;"	f	class:Minor::Fetch2
Fetch2	minor/fetch2.hh	/^class Fetch2 : public Named$/;"	c	namespace:Minor
Fetch2StageId	minor/pipeline.hh	/^        Fetch1StageId, Fetch2StageId, DecodeStageId, ExecuteStageId,$/;"	e	enum:Minor::Pipeline::StageId
FetchBlock	inorder/resources/fetch_unit.hh	/^        FetchBlock(int _asid, Addr _addr)$/;"	f	struct:FetchUnit::FetchBlock
FetchBlock	inorder/resources/fetch_unit.hh	/^    struct FetchBlock {$/;"	s	class:FetchUnit
FetchBuff	inorder/pipeline_traits.5stage.hh	/^       FetchBuff,$/;"	e	enum:ThePipeline::ResourceList
FetchBuff	inorder/pipeline_traits.9stage.hh	/^       FetchBuff,$/;"	e	enum:ThePipeline::ResourceList
FetchBuff	inorder/pipeline_traits.9stage.smt2.hh	/^       FetchBuff,$/;"	e	enum:ThePipeline::ResourceList
FetchBuff	inorder/pipeline_traits.hh	/^       FetchBuff,$/;"	e	enum:ThePipeline::ResourceId
FetchBuff2	inorder/pipeline_traits.5stage.hh	/^       FetchBuff2$/;"	e	enum:ThePipeline::ResourceList
FetchBuff2	inorder/pipeline_traits.9stage.hh	/^       FetchBuff2$/;"	e	enum:ThePipeline::ResourceList
FetchBuff2	inorder/pipeline_traits.9stage.smt2.hh	/^       FetchBuff2$/;"	e	enum:ThePipeline::ResourceList
FetchBuff2	inorder/pipeline_traits.hh	/^       FetchBuff2$/;"	e	enum:ThePipeline::ResourceId
FetchEvent	simple/timing.hh	/^    typedef EventWrapper<TimingSimpleCPU, &TimingSimpleCPU::fetch> FetchEvent;$/;"	t	class:TimingSimpleCPU
FetchHalted	minor/fetch1.hh	/^        FetchHalted, \/* Not fetching, waiting to be woken by transition$/;"	e	enum:Minor::Fetch1::FetchState
FetchIdx	o3/cpu.hh	/^        FetchIdx,$/;"	e	enum:FullO3CPU::StageIdx
FetchLookup	inorder/resources/tlb_unit.hh	/^        FetchLookup,$/;"	e	enum:TLBUnit::TLBCommand
FetchPriority	inorder/first_stage.hh	/^    enum FetchPriority {$/;"	g	class:FirstStage
FetchPriority	o3/fetch.hh	/^    enum FetchPriority {$/;"	g	class:DefaultFetch
FetchQueue	minor/fetch1.hh	/^        FetchQueue;$/;"	t	class:Minor::Fetch1
FetchRequest	minor/fetch1.hh	/^        FetchRequest(Fetch1 &fetch_, InstId id_, TheISA::PCState pc_) :$/;"	f	class:Minor::Fetch1::FetchRequest
FetchRequest	minor/fetch1.hh	/^    class FetchRequest :$/;"	c	class:Minor::Fetch1
FetchRequestPtr	minor/fetch1.hh	/^    typedef FetchRequest *FetchRequestPtr;$/;"	t	class:Minor::Fetch1
FetchRequestState	minor/fetch1.hh	/^        enum FetchRequestState$/;"	g	class:Minor::Fetch1::FetchRequest
FetchRunning	minor/fetch1.hh	/^        FetchRunning \/* Try to fetch, when possible *\/$/;"	e	enum:Minor::Fetch1::FetchState
FetchSeq	inorder/pipeline_traits.5stage.hh	/^       FetchSeq = 0,$/;"	e	enum:ThePipeline::ResourceList
FetchSeq	inorder/pipeline_traits.9stage.hh	/^       FetchSeq = 0,$/;"	e	enum:ThePipeline::ResourceList
FetchSeq	inorder/pipeline_traits.9stage.smt2.hh	/^       FetchSeq = 0,$/;"	e	enum:ThePipeline::ResourceList
FetchSeq	inorder/pipeline_traits.hh	/^       FetchSeq = 0,$/;"	e	enum:ThePipeline::ResourceId
FetchSeqEvent	inorder/resources/fetch_seq_unit.cc	/^FetchSeqUnit::FetchSeqEvent::FetchSeqEvent()$/;"	f	class:FetchSeqUnit::FetchSeqEvent
FetchSeqEvent	inorder/resources/fetch_seq_unit.hh	/^    class FetchSeqEvent : public ResourceEvent {$/;"	c	class:FetchSeqUnit
FetchSeqUnit	inorder/resources/fetch_seq_unit.cc	/^FetchSeqUnit::FetchSeqUnit(std::string res_name, int res_id, int res_width,$/;"	f	class:FetchSeqUnit
FetchSeqUnit	inorder/resources/fetch_seq_unit.hh	/^class FetchSeqUnit : public Resource {$/;"	c
FetchState	minor/fetch1.hh	/^    enum FetchState$/;"	g	class:Minor::Fetch1
FetchStatus	o3/fetch.hh	/^    enum FetchStatus {$/;"	g	class:DefaultFetch
FetchStruct	o3/commit.hh	/^    typedef typename CPUPol::FetchStruct FetchStruct;$/;"	t	class:DefaultCommit
FetchStruct	o3/cpu.hh	/^    typedef typename CPUPolicy::FetchStruct FetchStruct;$/;"	t	class:FullO3CPU
FetchStruct	o3/cpu_policy.hh	/^    typedef DefaultFetchDefaultDecode<Impl> FetchStruct;$/;"	t	struct:SimpleCPUPolicy
FetchStruct	o3/decode.hh	/^    typedef typename CPUPol::FetchStruct FetchStruct;$/;"	t	class:DefaultDecode
FetchStruct	o3/fetch.hh	/^    typedef typename CPUPol::FetchStruct FetchStruct;$/;"	t	class:DefaultFetch
FetchTranslation	o3/fetch.hh	/^        FetchTranslation(DefaultFetch<Impl> *_fetch)$/;"	f	class:DefaultFetch::FetchTranslation
FetchTranslation	o3/fetch.hh	/^    class FetchTranslation : public BaseTLB::Translation$/;"	c	class:DefaultFetch
FetchTranslation	simple/timing.hh	/^        FetchTranslation(TimingSimpleCPU *_cpu)$/;"	f	class:TimingSimpleCPU::FetchTranslation
FetchTranslation	simple/timing.hh	/^    class FetchTranslation : public BaseTLB::Translation$/;"	c	class:TimingSimpleCPU
FetchTrapPending	o3/commit.hh	/^        FetchTrapPending,$/;"	e	enum:DefaultCommit::ThreadStatus
FetchUnit	inorder/resources/fetch_unit.cc	/^FetchUnit::FetchUnit(string res_name, int res_id, int res_width,$/;"	f	class:FetchUnit
FetchUnit	inorder/resources/fetch_unit.hh	/^class FetchUnit : public CacheUnit$/;"	c
FetchWaitingForPC	minor/fetch1.hh	/^        FetchWaitingForPC, \/* Not fetching, waiting for stream change.$/;"	e	enum:Minor::Fetch1::FetchState
Fetching	o3/fetch.hh	/^        Fetching,$/;"	e	enum:DefaultFetch::ThreadStatus
FinishTranslationEvent	o3/fetch.hh	/^        FinishTranslationEvent(DefaultFetch<Impl> *_fetch)$/;"	f	class:DefaultFetch::FinishTranslationEvent
FinishTranslationEvent	o3/fetch.hh	/^    class FinishTranslationEvent : public Event$/;"	c	class:DefaultFetch
FirstStage	inorder/first_stage.cc	/^FirstStage::FirstStage(Params *params, unsigned stage_num)$/;"	f	class:FirstStage
FirstStage	inorder/first_stage.hh	/^class FirstStage : public PipelineStage {$/;"	c
Flags	base_dyn_inst.hh	/^    enum Flags {$/;"	g	class:BaseDynInst
Float	inorder/inorder_dyn_inst.hh	/^        Float,$/;"	e	enum:InOrderDynInst::ResultType
FloatAddOp	op_class.hh	/^const OpClass FloatAddOp = Enums::FloatAdd;$/;"	v
FloatBits	inorder/inorder_dyn_inst.hh	/^        FloatBits,$/;"	e	enum:InOrderDynInst::ResultType
FloatCmpOp	op_class.hh	/^const OpClass FloatCmpOp = Enums::FloatCmp;$/;"	v
FloatCvtOp	op_class.hh	/^const OpClass FloatCvtOp = Enums::FloatCvt;$/;"	v
FloatDivOp	op_class.hh	/^const OpClass FloatDivOp = Enums::FloatDiv;$/;"	v
FloatMultOp	op_class.hh	/^const OpClass FloatMultOp = Enums::FloatMult;$/;"	v
FloatReg	checker/cpu.hh	/^    typedef TheISA::FloatReg FloatReg;$/;"	t	class:CheckerCPU
FloatReg	exec_context.hh	/^    typedef TheISA::FloatReg FloatReg;$/;"	t	class:ExecContext
FloatReg	inorder/cpu.hh	/^    typedef TheISA::FloatReg FloatReg;$/;"	t	class:InOrderCPU
FloatReg	inorder/inorder_dyn_inst.hh	/^    typedef TheISA::FloatReg FloatReg;$/;"	t	class:InOrderDynInst
FloatReg	o3/dyn_inst.hh	/^    typedef TheISA::FloatReg FloatReg;$/;"	t	class:BaseO3DynInst
FloatReg	o3/regfile.hh	/^    typedef TheISA::FloatReg FloatReg;$/;"	t	class:PhysRegFile
FloatReg	ozone/cpu.hh	/^    typedef TheISA::FloatReg FloatReg;$/;"	t	class:OzoneCPU
FloatReg	ozone/dyn_inst.hh	/^    typedef TheISA::FloatReg FloatReg;$/;"	t	class:OzoneDynInst
FloatReg	simple/base.hh	/^    typedef TheISA::FloatReg FloatReg;$/;"	t	class:BaseSimpleCPU
FloatReg	simple_thread.hh	/^    typedef TheISA::FloatReg FloatReg;$/;"	t	class:SimpleThread
FloatReg	thread_context.hh	/^    typedef TheISA::FloatReg FloatReg;$/;"	t	class:ThreadContext
FloatRegBits	checker/cpu.hh	/^    typedef TheISA::FloatRegBits FloatRegBits;$/;"	t	class:CheckerCPU
FloatRegBits	exec_context.hh	/^    typedef TheISA::FloatRegBits FloatRegBits;$/;"	t	class:ExecContext
FloatRegBits	inorder/cpu.hh	/^    typedef TheISA::FloatRegBits FloatRegBits;$/;"	t	class:InOrderCPU
FloatRegBits	inorder/inorder_dyn_inst.hh	/^    typedef TheISA::FloatRegBits FloatRegBits;$/;"	t	class:InOrderDynInst
FloatRegBits	o3/dyn_inst.hh	/^    typedef TheISA::FloatRegBits FloatRegBits;$/;"	t	class:BaseO3DynInst
FloatRegBits	o3/regfile.hh	/^    typedef TheISA::FloatRegBits FloatRegBits;$/;"	t	class:PhysRegFile
FloatRegBits	ozone/cpu.hh	/^    typedef TheISA::FloatRegBits FloatRegBits;$/;"	t	class:OzoneCPU
FloatRegBits	ozone/dyn_inst.hh	/^    typedef TheISA::FloatRegBits FloatRegBits;$/;"	t	class:OzoneDynInst
FloatRegBits	simple/base.hh	/^    typedef TheISA::FloatRegBits FloatRegBits;$/;"	t	class:BaseSimpleCPU
FloatRegBits	simple_thread.hh	/^    typedef TheISA::FloatRegBits FloatRegBits;$/;"	t	class:SimpleThread
FloatRegBits	thread_context.hh	/^    typedef TheISA::FloatRegBits FloatRegBits;$/;"	t	class:ThreadContext
FloatRegClass	reg_class.hh	/^    FloatRegClass,      \/\/\/< Floating-point register$/;"	e	enum:RegClass
FloatSqrtOp	op_class.hh	/^const OpClass FloatSqrtOp = Enums::FloatSqrt;$/;"	v
ForwardInstData	minor/pipe_data.cc	/^ForwardInstData::ForwardInstData(const ForwardInstData &src)$/;"	f	class:Minor::ForwardInstData
ForwardInstData	minor/pipe_data.cc	/^ForwardInstData::ForwardInstData(unsigned int width) :$/;"	f	class:Minor::ForwardInstData
ForwardInstData	minor/pipe_data.hh	/^class ForwardInstData \/* : public ReportIF, public BubbleIF *\/$/;"	c	namespace:Minor
ForwardLineData	minor/pipe_data.hh	/^    ForwardLineData() :$/;"	f	class:Minor::ForwardLineData
ForwardLineData	minor/pipe_data.hh	/^class ForwardLineData \/* : public ReportIF, public BubbleIF *\/$/;"	c	namespace:Minor
FreeEntries	o3/rename.hh	/^    struct FreeEntries {$/;"	s	class:DefaultRename
FreeList	o3/cpu_policy.hh	/^    typedef UnifiedFreeList FreeList;$/;"	t	struct:SimpleCPUPolicy
FreeList	o3/rename.hh	/^    typedef typename CPUPol::FreeList FreeList;$/;"	t	class:DefaultRename
FrontEnd	ozone/back_end.hh	/^    typedef typename Impl::FrontEnd FrontEnd;$/;"	t	class:BackEnd
FrontEnd	ozone/cpu.hh	/^    typedef typename Impl::FrontEnd FrontEnd;$/;"	t	class:OzoneCPU
FrontEnd	ozone/front_end.hh	/^class FrontEnd$/;"	c
FrontEnd	ozone/front_end_impl.hh	/^FrontEnd<Impl>::FrontEnd(Params *params)$/;"	f	class:FrontEnd
FrontEnd	ozone/inorder_back_end.hh	/^    typedef typename Impl::FrontEnd FrontEnd;$/;"	t	class:InorderBackEnd
FrontEnd	ozone/lw_back_end.hh	/^    typedef typename Impl::FrontEnd FrontEnd;$/;"	t	class:LWBackEnd
FrontEnd	ozone/ozone_impl.hh	/^    typedef FrontEnd<OzoneImpl> FrontEnd;$/;"	t	struct:OzoneImpl
FrontEnd	ozone/simple_impl.hh	/^    typedef FrontEnd<SimpleImpl> FrontEnd;$/;"	t	struct:SimpleImpl
FullAddrRangeCoverage	minor/lsq.hh	/^        FullAddrRangeCoverage, \/* One range fully covers another *\/$/;"	e	enum:Minor::LSQ::AddrRangeCoverage
FullCPU	ozone/back_end.hh	/^    typedef typename Impl::FullCPU FullCPU;$/;"	t	class:BackEnd
FullCPU	ozone/inorder_back_end.hh	/^    typedef typename Impl::FullCPU FullCPU;$/;"	t	class:InorderBackEnd
FullCPU	ozone/inst_queue.hh	/^    typedef typename Impl::FullCPU FullCPU;$/;"	t	class:InstQueue
FullCPU	ozone/lsq_unit.hh	/^    typedef typename Impl::FullCPU FullCPU;$/;"	t	class:OzoneLSQ
FullCPU	ozone/simple_impl.hh	/^    typedef OzoneCPU FullCPU;$/;"	t	struct:SimpleImpl
FullO3CPU	o3/cpu.cc	/^FullO3CPU<Impl>::FullO3CPU(DerivO3CPUParams *params)$/;"	f	class:FullO3CPU
FullO3CPU	o3/cpu.hh	/^class FullO3CPU : public BaseO3CPU$/;"	c
FullSource	o3/rename.hh	/^    enum FullSource {$/;"	g	class:DefaultRename
FuncUnit	func_unit.cc	/^FuncUnit::FuncUnit()$/;"	f	class:FuncUnit
FuncUnit	func_unit.cc	/^FuncUnit::FuncUnit(const FuncUnit &fu)$/;"	f	class:FuncUnit
FuncUnit	func_unit.hh	/^class FuncUnit$/;"	c
FunctionProfile	profile.cc	/^FunctionProfile::FunctionProfile(const SymbolTable *_symtab)$/;"	f	class:FunctionProfile
FunctionProfile	profile.hh	/^class FunctionProfile$/;"	c
GenerateAddr	inorder/resources/agen_unit.hh	/^        GenerateAddr$/;"	e	enum:AGENUnit::Command
Grad	inorder/pipeline_traits.5stage.hh	/^       Grad,$/;"	e	enum:ThePipeline::ResourceList
Grad	inorder/pipeline_traits.9stage.hh	/^       Grad,$/;"	e	enum:ThePipeline::ResourceList
Grad	inorder/pipeline_traits.9stage.smt2.hh	/^       Grad,$/;"	e	enum:ThePipeline::ResourceList
Grad	inorder/pipeline_traits.hh	/^       Grad,$/;"	e	enum:ThePipeline::ResourceId
GraduateInst	inorder/resources/graduation_unit.hh	/^        GraduateInst$/;"	e	enum:GraduationUnit::Command
GraduationUnit	inorder/resources/graduation_unit.cc	/^GraduationUnit::GraduationUnit(std::string res_name, int res_id, int res_width,$/;"	f	class:GraduationUnit
GraduationUnit	inorder/resources/graduation_unit.hh	/^class GraduationUnit : public Resource {$/;"	c
HANDLE_ARRAY	kvm/base.cc	815;"	d	file:
HANDLE_ARRAY	kvm/base.cc	839;"	d	file:
HANDLE_INTTYPE	kvm/base.cc	808;"	d	file:
HANDLE_INTTYPE	kvm/base.cc	838;"	d	file:
HaltFetch	minor/pipe_data.hh	/^        HaltFetch$/;"	e	enum:Minor::BranchData::Reason
HaltThread	inorder/cpu.hh	/^        HaltThread,$/;"	e	enum:InOrderCPU::CPUEventType
Halted	inorder/cpu.hh	/^        Halted,$/;"	e	enum:InOrderCPU::Status
Halted	o3/cpu.hh	/^        Halted,$/;"	e	enum:FullO3CPU::Status
Halted	thread_context.hh	/^        Halted$/;"	e	enum:ThreadContext::Status
HashFn	ozone/lw_lsq.hh	/^    struct HashFn {$/;"	s	class:OzoneLWLSQ
History	pred/bpred_unit.hh	/^    typedef std::deque<PredictorHistory> History;$/;"	t	class:BPredUnit
HitExternalSnoop	base_dyn_inst.hh	/^        HitExternalSnoop,$/;"	e	enum:BaseDynInst::Flags
ICache	inorder/pipeline_traits.5stage.hh	/^       ICache,$/;"	e	enum:ThePipeline::ResourceList
ICache	inorder/pipeline_traits.9stage.hh	/^       ICache,$/;"	e	enum:ThePipeline::ResourceList
ICache	inorder/pipeline_traits.9stage.smt2.hh	/^       ICache,$/;"	e	enum:ThePipeline::ResourceList
ICache	inorder/pipeline_traits.hh	/^       ICache,$/;"	e	enum:ThePipeline::ResourceId
IEW	o3/commit.hh	/^    typedef typename CPUPol::IEW IEW;$/;"	t	class:DefaultCommit
IEW	o3/cpu_policy.hh	/^    typedef DefaultIEW<Impl> IEW;$/;"	t	struct:SimpleCPUPolicy
IEW	o3/inst_queue.hh	/^    typedef typename Impl::CPUPol::IEW IEW;$/;"	t	class:InstructionQueue
IEW	o3/lsq.hh	/^    typedef typename Impl::CPUPol::IEW IEW;$/;"	t	class:LSQ
IEW	o3/lsq_unit.hh	/^    typedef typename Impl::CPUPol::IEW IEW;$/;"	t	class:LSQUnit
IEW	o3/rename.hh	/^    typedef typename CPUPol::IEW IEW;$/;"	t	class:DefaultRename
IEWIdx	o3/cpu.hh	/^        IEWIdx,$/;"	e	enum:FullO3CPU::StageIdx
IEWStruct	o3/commit.hh	/^    typedef typename CPUPol::IEWStruct IEWStruct;$/;"	t	class:DefaultCommit
IEWStruct	o3/cpu.hh	/^    typedef typename CPUPolicy::IEWStruct IEWStruct;$/;"	t	class:FullO3CPU
IEWStruct	o3/cpu_policy.hh	/^    typedef DefaultIEWDefaultCommit<Impl> IEWStruct;$/;"	t	struct:SimpleCPUPolicy
IEWStruct	o3/iew.hh	/^    typedef typename CPUPol::IEWStruct IEWStruct;$/;"	t	class:DefaultIEW
IFQCount	ozone/front_end.hh	/^    Stats::Scalar IFQCount;   \/\/ cumulative IFQ occupancy$/;"	m	class:FrontEnd
IFQFcount	ozone/front_end.hh	/^    Stats::Scalar IFQFcount; \/\/ cumulative IFQ full count$/;"	m	class:FrontEnd
IFQFullRate	ozone/front_end.hh	/^    Stats::Formula IFQFullRate;$/;"	m	class:FrontEnd
IFQLatency	ozone/front_end.hh	/^    Stats::Formula IFQLatency;$/;"	m	class:FrontEnd
IFQOccupancy	ozone/front_end.hh	/^    Stats::Formula IFQOccupancy;$/;"	m	class:FrontEnd
INST_CONTROL	inorder/cpu.hh	/^    static const uint8_t INST_CONTROL                       = 23;$/;"	m	class:InOrderCPU
INST_DEST_REGS	inorder/cpu.hh	/^    static const uint8_t INST_DEST_REGS                     = 18;$/;"	m	class:InOrderCPU
INST_LOAD	inorder/cpu.hh	/^    static const uint8_t INST_LOAD                          = 25;$/;"	m	class:InOrderCPU
INST_NONSPEC	inorder/cpu.hh	/^    static const uint8_t INST_NONSPEC                       = 22;$/;"	m	class:InOrderCPU
INST_OPCLASS	inorder/cpu.hh	/^    static const uint8_t INST_OPCLASS                       = 26;$/;"	m	class:InOrderCPU
INST_SPLIT_DATA	inorder/cpu.hh	/^    static const uint8_t INST_SPLIT_DATA                    = 13;$/;"	m	class:InOrderCPU
INST_SRC_REGS	inorder/cpu.hh	/^    static const uint8_t INST_SRC_REGS                      = 14;$/;"	m	class:InOrderCPU
INST_STORE	inorder/cpu.hh	/^    static const uint8_t INST_STORE                         = 24;$/;"	m	class:InOrderCPU
INTERRUPT_ID	kvm/arm_cpu.cc	175;"	d	file:
INTERRUPT_VCPU_FIQ	kvm/arm_cpu.cc	183;"	d	file:
INTERRUPT_VCPU_IRQ	kvm/arm_cpu.cc	180;"	d	file:
IO_PCI_CONF_ADDR	kvm/x86_cpu.cc	53;"	d	file:
IO_PCI_CONF_DATA_BASE	kvm/x86_cpu.cc	54;"	d	file:
IQ	o3/cpu_policy.hh	/^    typedef InstructionQueue<Impl> IQ;$/;"	t	struct:SimpleCPUPolicy
IQ	o3/fetch.hh	/^        IQ,$/;"	e	enum:DefaultFetch::FetchPriority
IQ	o3/iew.hh	/^    typedef typename CPUPol::IQ IQ;$/;"	t	class:DefaultIEW
IQ	o3/rename.hh	/^        IQ,$/;"	e	enum:DefaultRename::FullSource
IQ	ozone/back_end.hh	/^            IQ,$/;"	e	enum:BackEnd::InstQueue::queue
IQ	ozone/back_end.hh	/^    InstQueue IQ;$/;"	m	class:BackEnd
IQEntry	ozone/inst_queue.hh	/^    struct IQEntry {$/;"	s	class:InstQueue
IQPolicy	o3/inst_queue.hh	/^    enum IQPolicy {$/;"	g	class:InstructionQueue
ITBWaitResponse	simple/base.hh	/^        ITBWaitResponse,$/;"	e	enum:BaseSimpleCPU::Status
ITLB	inorder/pipeline_traits.5stage.hh	/^       ITLB,$/;"	e	enum:ThePipeline::ResourceList
ITLB	inorder/pipeline_traits.9stage.hh	/^       ITLB,$/;"	e	enum:ThePipeline::ResourceList
ITLB	inorder/pipeline_traits.9stage.smt2.hh	/^       ITLB,$/;"	e	enum:ThePipeline::ResourceList
ITickEvent	simple/timing.hh	/^            ITickEvent(TimingSimpleCPU *_cpu)$/;"	f	struct:TimingSimpleCPU::IcachePort::ITickEvent
ITickEvent	simple/timing.hh	/^        struct ITickEvent : public TickEvent$/;"	s	class:TimingSimpleCPU::IcachePort
IcacheAccessComplete	o3/fetch.hh	/^        IcacheAccessComplete,$/;"	e	enum:DefaultFetch::ThreadStatus
IcacheAccessComplete	ozone/front_end.hh	/^        IcacheAccessComplete,$/;"	e	enum:FrontEnd::Status
IcacheNeedsRetry	minor/fetch1.hh	/^        IcacheNeedsRetry \/* Request rejected, will be asked to retry *\/$/;"	e	enum:Minor::Fetch1::IcacheState
IcachePort	minor/fetch1.hh	/^        IcachePort(std::string name, Fetch1 &fetch_, MinorCPU &cpu) :$/;"	f	class:Minor::Fetch1::IcachePort
IcachePort	minor/fetch1.hh	/^    class IcachePort : public MinorCPU::MinorCPUPort$/;"	c	class:Minor::Fetch1
IcachePort	o3/cpu.hh	/^        IcachePort(DefaultFetch<Impl> *_fetch, FullO3CPU<Impl>* _cpu)$/;"	f	class:FullO3CPU::IcachePort
IcachePort	o3/cpu.hh	/^    class IcachePort : public MasterPort$/;"	c	class:FullO3CPU
IcachePort	ozone/front_end.hh	/^        IcachePort(FrontEnd<Impl> *_fe)$/;"	f	class:FrontEnd::IcachePort
IcachePort	ozone/front_end.hh	/^    class IcachePort : public MasterPort$/;"	c	class:FrontEnd
IcachePort	simple/timing.hh	/^        IcachePort(TimingSimpleCPU *_cpu)$/;"	f	class:TimingSimpleCPU::IcachePort
IcachePort	simple/timing.hh	/^    class IcachePort : public TimingCPUPort$/;"	c	class:TimingSimpleCPU
IcacheRetry	simple/base.hh	/^        IcacheRetry,$/;"	e	enum:BaseSimpleCPU::Status
IcacheRunning	minor/fetch1.hh	/^        IcacheRunning, \/* Default. Step icache queues when possible *\/$/;"	e	enum:Minor::Fetch1::IcacheState
IcacheState	minor/fetch1.hh	/^    enum IcacheState$/;"	g	class:Minor::Fetch1
IcacheWaitResponse	o3/fetch.hh	/^        IcacheWaitResponse,$/;"	e	enum:DefaultFetch::ThreadStatus
IcacheWaitResponse	ozone/front_end.hh	/^        IcacheWaitResponse,$/;"	e	enum:FrontEnd::Status
IcacheWaitResponse	simple/base.hh	/^        IcacheWaitResponse,$/;"	e	enum:BaseSimpleCPU::Status
IcacheWaitRetry	o3/fetch.hh	/^        IcacheWaitRetry,$/;"	e	enum:DefaultFetch::ThreadStatus
IcacheWaitRetry	ozone/front_end.hh	/^        IcacheWaitRetry,$/;"	e	enum:FrontEnd::Status
IcacheWaitSwitch	simple/base.hh	/^        IcacheWaitSwitch,$/;"	e	enum:BaseSimpleCPU::Status
Idle	inorder/cpu.hh	/^        Idle,$/;"	e	enum:InOrderCPU::Status
Idle	inorder/pipeline_stage.hh	/^        Idle,$/;"	e	enum:PipelineStage::ThreadStatus
Idle	kvm/base.hh	/^        Idle,$/;"	e	enum:BaseKvmCPU::Status
Idle	o3/commit.hh	/^        Idle,$/;"	e	enum:DefaultCommit::ThreadStatus
Idle	o3/cpu.hh	/^        Idle,$/;"	e	enum:FullO3CPU::Status
Idle	o3/decode.hh	/^        Idle,$/;"	e	enum:DefaultDecode::ThreadStatus
Idle	o3/fetch.hh	/^        Idle,$/;"	e	enum:DefaultFetch::ThreadStatus
Idle	o3/iew.hh	/^        Idle,$/;"	e	enum:DefaultIEW::StageStatus
Idle	o3/rename.hh	/^        Idle,$/;"	e	enum:DefaultRename::ThreadStatus
Idle	o3/rob.hh	/^        Idle,$/;"	e	enum:ROB::Status
Idle	ozone/back_end.hh	/^        Idle,$/;"	e	enum:BackEnd::Status
Idle	ozone/cpu.hh	/^        Idle,$/;"	e	enum:OzoneCPU::Status
Idle	ozone/front_end.hh	/^        Idle,$/;"	e	enum:FrontEnd::Status
Idle	ozone/inorder_back_end.hh	/^        Idle,$/;"	e	enum:InorderBackEnd::Status
Idle	ozone/lsq_unit.hh	/^        Idle,$/;"	e	enum:OzoneLSQ::Status
Idle	ozone/lw_back_end.hh	/^        Idle,$/;"	e	enum:LWBackEnd::Status
Idle	ozone/lw_lsq.hh	/^        Idle,$/;"	e	enum:OzoneLWLSQ::Status
Idle	simple/base.hh	/^        Idle,$/;"	e	enum:BaseSimpleCPU::Status
IdleGen	testers/traffic_gen/generators.hh	/^    IdleGen(const std::string& _name, MasterID master_id, Tick _duration)$/;"	f	class:IdleGen
IdleGen	testers/traffic_gen/generators.hh	/^class IdleGen : public BaseGen$/;"	c
ImplCPU	base_dyn_inst.hh	/^    typedef typename Impl::CPUType ImplCPU;$/;"	t	class:BaseDynInst
ImplState	base_dyn_inst.hh	/^    typedef typename ImplCPU::ImplState ImplState;$/;"	t	class:BaseDynInst
ImplState	o3/cpu.hh	/^    typedef O3ThreadState<Impl> ImplState;$/;"	t	class:FullO3CPU
ImplState	ozone/cpu.hh	/^    typedef OzoneThreadState<Impl> ImplState;$/;"	t	class:OzoneCPU
ImplState	ozone/dyn_inst.hh	/^    typedef typename OzoneCPU::ImplState ImplState;$/;"	t	class:OzoneDynInst
InOrderCPU	inorder/InOrderCPU.py	/^class InOrderCPU(BaseCPU):$/;"	c
InOrderCPU	inorder/cpu.cc	/^InOrderCPU::InOrderCPU(Params *params)$/;"	f	class:InOrderCPU
InOrderCPU	inorder/cpu.hh	/^class InOrderCPU : public BaseCPU$/;"	c
InOrderCPU_Pri	inorder/cpu.hh	/^        InOrderCPU_Pri                 = Event::CPU_Tick_Pri,$/;"	e	enum:InOrderCPU::CPUEventPri
InOrderDynInst	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::InOrderDynInst(InOrderCPU *cpu,$/;"	f	class:InOrderDynInst
InOrderDynInst	inorder/inorder_dyn_inst.hh	/^class InOrderDynInst : public ExecContext, public RefCounted$/;"	c
InOrderPriority	inorder/resource.hh	/^    enum InOrderPriority {$/;"	g	class:ResourceEvent
InOrderThreadContext	inorder/thread_context.hh	/^    InOrderThreadContext() { }$/;"	f	class:InOrderThreadContext
InOrderThreadContext	inorder/thread_context.hh	/^class InOrderThreadContext : public ThreadContext$/;"	c
InOrderThreadState	inorder/thread_state.hh	/^    InOrderThreadState(InOrderCPU *_cpu, ThreadID _thread_num,$/;"	f	class:InOrderThreadState
InOrderThreadState	inorder/thread_state.hh	/^class InOrderThreadState : public ThreadState {$/;"	c
InOrderTrace	inorder/InOrderTrace.py	/^class InOrderTrace(InstTracer):$/;"	c
InOrderTrace	inorder/inorder_trace.hh	/^    InOrderTrace(const InOrderTraceParams *p) : InstTracer(p)$/;"	f	class:Trace::InOrderTrace
InOrderTrace	inorder/inorder_trace.hh	/^class InOrderTrace : public InstTracer$/;"	c	namespace:Trace
InOrderTraceRecord	inorder/inorder_trace.hh	/^    InOrderTraceRecord(unsigned num_stages, bool _stage_tracing,$/;"	f	class:Trace::InOrderTraceRecord
InOrderTraceRecord	inorder/inorder_trace.hh	/^class InOrderTraceRecord : public ExeTracerRecord$/;"	c	namespace:Trace
InTranslation	minor/fetch1.hh	/^            InTranslation, \/* Issued to ITLB, must wait for reqply *\/$/;"	e	enum:Minor::Fetch1::FetchRequest::FetchRequestState
InTranslation	minor/lsq.hh	/^            InTranslation, \/* TLB accessed, no reply yet *\/$/;"	e	enum:Minor::LSQ::LSQRequest::LSQRequestState
Inactive	inorder/pipeline_stage.hh	/^        Inactive$/;"	e	enum:PipelineStage::StageStatus
Inactive	o3/commit.hh	/^        Inactive$/;"	e	enum:DefaultCommit::CommitStatus
Inactive	o3/decode.hh	/^        Inactive$/;"	e	enum:DefaultDecode::DecodeStatus
Inactive	o3/fetch.hh	/^        Inactive$/;"	e	enum:DefaultFetch::FetchStatus
Inactive	o3/iew.hh	/^        Inactive$/;"	e	enum:DefaultIEW::Status
Inactive	o3/rename.hh	/^        Inactive$/;"	e	enum:DefaultRename::RenameStatus
Index	minor/scoreboard.hh	/^    typedef unsigned short int Index;$/;"	t	class:Minor::Scoreboard
InitSecondSplitRead	inorder/resources/cache_unit.hh	/^        InitSecondSplitRead,$/;"	e	enum:CacheUnit::Command
InitSecondSplitWrite	inorder/resources/cache_unit.hh	/^        InitSecondSplitWrite,$/;"	e	enum:CacheUnit::Command
InitiateFetch	inorder/resources/fetch_unit.hh	/^        InitiateFetch,$/;"	e	enum:FetchUnit::Command
InitiateReadData	inorder/resources/cache_unit.hh	/^        InitiateReadData,$/;"	e	enum:CacheUnit::Command
InitiateWriteData	inorder/resources/cache_unit.hh	/^        InitiateWriteData,$/;"	e	enum:CacheUnit::Command
InorderBackEnd	ozone/inorder_back_end.hh	/^class InorderBackEnd$/;"	c
InorderBackEnd	ozone/inorder_back_end_impl.hh	/^InorderBackEnd<Impl>::InorderBackEnd(Params *params)$/;"	f	class:InorderBackEnd
Input	minor/buffers.hh	/^        Input(typename Buffer::wire input_wire) :$/;"	f	class:Minor::Latch::Input
Input	minor/buffers.hh	/^    class Input$/;"	c	class:Minor::Latch
InputBuffer	minor/buffers.hh	/^    InputBuffer(const std::string &name, const std::string &data_name,$/;"	f	class:Minor::InputBuffer
InputBuffer	minor/buffers.hh	/^class InputBuffer : public Reservable$/;"	c	namespace:Minor
InputStream	testers/traffic_gen/generators.cc	/^TraceGen::InputStream::InputStream(const std::string& filename)$/;"	f	class:TraceGen::InputStream
InputStream	testers/traffic_gen/generators.hh	/^    class InputStream$/;"	c	class:TraceGen
InsertAddr	inorder/resources/inst_buffer.hh	/^        InsertAddr,$/;"	e	enum:InstBuffer::Command
InsertInst	inorder/resources/inst_buffer.hh	/^        InsertInst,$/;"	e	enum:InstBuffer::Command
InstBuff	ozone/front_end.hh	/^    typedef typename std::deque<DynInstPtr> InstBuff;$/;"	t	class:FrontEnd
InstBuffIt	ozone/front_end.hh	/^    typedef typename InstBuff::iterator InstBuffIt;$/;"	t	class:FrontEnd
InstBuffer	inorder/resources/inst_buffer.cc	/^InstBuffer::InstBuffer(string res_name, int res_id, int res_width,$/;"	f	class:InstBuffer
InstBuffer	inorder/resources/inst_buffer.hh	/^class InstBuffer : public Resource {$/;"	c
InstGraduated	inorder/resource_pool.hh	/^        InstGraduated = InOrderCPU::NumCPUEvents,$/;"	e	enum:ResourcePool::ResPoolEventType
InstId	minor/dyn_inst.hh	/^    InstId($/;"	f	class:Minor::InstId
InstId	minor/dyn_inst.hh	/^class InstId$/;"	c	namespace:Minor
InstIt	o3/rob.hh	/^    typedef typename std::list<DynInstPtr>::iterator InstIt;$/;"	t	class:ROB
InstList	ozone/back_end.hh	/^        typedef typename std::list<DynInstPtr> InstList;$/;"	t	class:BackEnd::InstQueue
InstListIt	checker/cpu.hh	/^    typedef typename std::list<DynInstPtr>::iterator InstListIt;$/;"	t	class:Checker
InstListIt	ozone/back_end.hh	/^        typedef typename std::list<DynInstPtr>::iterator InstListIt;$/;"	t	class:BackEnd::InstQueue
InstListIt	ozone/back_end.hh	/^    typedef typename std::list<DynInstPtr>::iterator InstListIt;$/;"	t	class:BackEnd
InstListIt	ozone/inorder_back_end.hh	/^    typedef typename std::list<DynInstPtr>::iterator InstListIt;$/;"	t	class:InorderBackEnd
InstListIt	ozone/lw_back_end.hh	/^    typedef typename std::list<DynInstPtr>::iterator InstListIt;$/;"	t	class:LWBackEnd
InstMap	decode_cache.hh	/^typedef m5::hash_map<TheISA::ExtMachInst, StaticInstPtr> InstMap;$/;"	t	namespace:DecodeCache
InstPrefetchOp	op_class.hh	/^const OpClass InstPrefetchOp = Enums::InstPrefetch;$/;"	v
InstQueue	o3/rename.hh	/^    typedef std::deque<DynInstPtr> InstQueue;$/;"	t	class:DefaultRename
InstQueue	ozone/back_end.hh	/^    class InstQueue {$/;"	c	class:BackEnd
InstQueue	ozone/back_end_impl.hh	/^BackEnd<Impl>::InstQueue::InstQueue(Params *params)$/;"	f	class:BackEnd::InstQueue
InstQueue	ozone/inst_queue.hh	/^class InstQueue$/;"	c
InstQueue	ozone/inst_queue_impl.hh	/^InstQueue<Impl>::InstQueue(Params *params)$/;"	f	class:InstQueue
InstQueue	ozone/ozone_impl.hh	/^    typedef InstQueue<OzoneImpl> InstQueue;$/;"	t	struct:OzoneImpl
InstResult	inorder/inorder_dyn_inst.hh	/^        InstResult()$/;"	f	struct:InOrderDynInst::InstResult
InstResult	inorder/inorder_dyn_inst.hh	/^    struct InstResult {$/;"	s	class:InOrderDynInst
InstSeqNum	inst_seq.hh	/^typedef uint64_t InstSeqNum;$/;"	t
InstTag	inst_seq.hh	/^typedef unsigned int InstTag;$/;"	t
InstValue	inorder/inorder_dyn_inst.hh	/^        InstValue()$/;"	f	struct:InOrderDynInst::InstValue
InstValue	inorder/inorder_dyn_inst.hh	/^    struct InstValue {$/;"	s	class:InOrderDynInst
InstructionQueue	o3/inst_queue.hh	/^class InstructionQueue$/;"	c
InstructionQueue	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::InstructionQueue(O3CPU *cpu_ptr, IEW *iew_ptr,$/;"	f	class:InstructionQueue
IntALU	o3/FuncUnitConfig.py	/^class IntALU(FUDesc):$/;"	c
IntAluOp	op_class.hh	/^const OpClass IntAluOp = Enums::IntAlu;$/;"	v
IntDivOp	op_class.hh	/^const OpClass IntDivOp = Enums::IntDiv;$/;"	v
IntMultDiv	o3/FuncUnitConfig.py	/^class IntMultDiv(FUDesc):$/;"	c
IntMultOp	op_class.hh	/^const OpClass IntMultOp = Enums::IntMult;$/;"	v
IntReg	exec_context.hh	/^    typedef TheISA::IntReg IntReg;$/;"	t	class:ExecContext
IntReg	inorder/cpu.hh	/^    typedef TheISA::IntReg IntReg;$/;"	t	class:InOrderCPU
IntReg	inorder/inorder_dyn_inst.hh	/^    typedef TheISA::IntReg IntReg;$/;"	t	class:InOrderDynInst
IntReg	o3/dyn_inst.hh	/^    typedef TheISA::IntReg   IntReg;$/;"	t	class:BaseO3DynInst
IntReg	o3/regfile.hh	/^    typedef TheISA::IntReg IntReg;$/;"	t	class:PhysRegFile
IntReg	ozone/lsq_unit.hh	/^    typedef TheISA::IntReg IntReg;$/;"	t	class:OzoneLSQ
IntReg	ozone/lw_lsq.hh	/^    typedef TheISA::IntReg IntReg;$/;"	t	class:OzoneLWLSQ
IntReg	thread_context.hh	/^    typedef TheISA::IntReg IntReg;$/;"	t	class:ThreadContext
IntRegClass	reg_class.hh	/^    IntRegClass,        \/\/\/< Integer register$/;"	e	enum:RegClass
Integer	inorder/inorder_dyn_inst.hh	/^        Integer,$/;"	e	enum:InOrderDynInst::ResultType
IntelTrace	IntelTrace.py	/^class IntelTrace(InstTracer):$/;"	c
IntelTrace	inteltrace.hh	/^    IntelTrace(const IntelTraceParams *p) : InstTracer(p)$/;"	f	class:Trace::IntelTrace
IntelTrace	inteltrace.hh	/^class IntelTrace : public InstTracer$/;"	c	namespace:Trace
IntelTraceRecord	inteltrace.hh	/^    IntelTraceRecord(Tick _when, ThreadContext *_thread,$/;"	f	class:Trace::IntelTraceRecord
IntelTraceRecord	inteltrace.hh	/^class IntelTraceRecord : public InstRecord$/;"	c	namespace:Trace
InterStageStruct	inorder/comm.hh	/^struct InterStageStruct {$/;"	s
Interrupt	minor/pipe_data.hh	/^        Interrupt,$/;"	e	enum:Minor::BranchData::Reason
IntrControl	IntrControl.py	/^class IntrControl(SimObject):$/;"	c
IntrControl	intr_control.cc	/^IntrControl::IntrControl(const Params *p)$/;"	f	class:IntrControl
IntrControl	intr_control.hh	/^class IntrControl : public SimObject$/;"	c
IntrControl	intr_control_noisa.cc	/^IntrControl::IntrControl(const Params *p)$/;"	f	class:IntrControl
InvalidateGenerator	testers/directedtest/InvalidateGenerator.cc	/^InvalidateGenerator::InvalidateGenerator(const Params *p)$/;"	f	class:InvalidateGenerator
InvalidateGenerator	testers/directedtest/InvalidateGenerator.hh	/^class InvalidateGenerator : public DirectedGenerator $/;"	c
InvalidateGenerator	testers/directedtest/RubyDirectedTester.py	/^class InvalidateGenerator(DirectedGenerator):$/;"	c
IprAccessOp	op_class.hh	/^const OpClass IprAccessOp = Enums::IprAccess;$/;"	v
IprEvent	simple/timing.cc	/^TimingSimpleCPU::IprEvent::IprEvent(Packet *_pkt, TimingSimpleCPU *_cpu,$/;"	f	class:TimingSimpleCPU::IprEvent
IprEvent	simple/timing.hh	/^    struct IprEvent : Event {$/;"	s	class:TimingSimpleCPU
IprPort	o3/FuncUnitConfig.py	/^class IprPort(FUDesc):$/;"	c
IqEntry	base_dyn_inst.hh	/^        IqEntry,                 \/\/\/ Instruction is in the IQ$/;"	e	enum:BaseDynInst::Status
IqEntry	inorder/inorder_dyn_inst.hh	/^        IqEntry,                 \/\/\/ Instruction is in the IQ$/;"	e	enum:InOrderDynInst::Status
IsUncacheable	base_dyn_inst.hh	/^        IsUncacheable,$/;"	e	enum:BaseDynInst::Flags
IssueStruct	o3/comm.hh	/^struct IssueStruct {$/;"	s
IssueStruct	o3/cpu_policy.hh	/^    typedef ::IssueStruct<Impl> IssueStruct;$/;"	t	struct:SimpleCPUPolicy
IssueStruct	o3/iew.hh	/^    typedef typename CPUPol::IssueStruct IssueStruct;$/;"	t	class:DefaultIEW
IssueStruct	o3/inst_queue.hh	/^    typedef typename Impl::CPUPol::IssueStruct IssueStruct;$/;"	t	class:InstructionQueue
IssueStruct	o3/lsq_unit.hh	/^    typedef typename Impl::CPUPol::IssueStruct IssueStruct;$/;"	t	class:LSQUnit
IssueStruct	ozone/inst_queue.hh	/^    typedef typename Impl::IssueStruct IssueStruct;$/;"	t	class:InstQueue
IssueStruct	ozone/lsq_unit.hh	/^    typedef typename Impl::IssueStruct IssueStruct;$/;"	t	class:OzoneLSQ
IssueStruct	ozone/lw_lsq.hh	/^    typedef typename Impl::IssueStruct IssueStruct;$/;"	t	class:OzoneLWLSQ
IssueStruct	ozone/ozone_impl.hh	/^    typedef uint64_t IssueStruct;$/;"	t	struct:OzoneImpl
IssueStruct	ozone/simple_impl.hh	/^    typedef uint64_t IssueStruct;$/;"	t	struct:SimpleImpl
IssueToExec	ozone/back_end.hh	/^    typedef SizeStruct IssueToExec;$/;"	t	class:BackEnd
IssueToExec	ozone/lw_back_end.hh	/^    typedef SizeStruct IssueToExec;$/;"	t	class:LWBackEnd
Issued	base_dyn_inst.hh	/^        Issued,                  \/\/\/ Instruction has issued$/;"	e	enum:BaseDynInst::Status
Issued	inorder/inorder_dyn_inst.hh	/^        Issued,                  \/\/\/ Instruction has issued$/;"	e	enum:InOrderDynInst::Status
ItlbWait	o3/fetch.hh	/^        ItlbWait,$/;"	e	enum:DefaultFetch::ThreadStatus
KVMCpuPort	kvm/base.hh	/^        KVMCpuPort(const std::string &_name, BaseKvmCPU *_cpu)$/;"	f	class:BaseKvmCPU::KVMCpuPort
KVMCpuPort	kvm/base.hh	/^    class KVMCpuPort : public MasterPort$/;"	c	class:BaseKvmCPU
KVM_KICK_SIGNAL	kvm/base.hh	56;"	d
Kernel	checker/thread_context.hh	/^    namespace Kernel {$/;"	n	namespace:TheISA
Kernel	inorder/thread_context.hh	/^namespace Kernel {$/;"	n
Kernel	o3/thread_context.hh	/^namespace Kernel {$/;"	n
Kernel	ozone/cpu.hh	/^    namespace Kernel {$/;"	n	namespace:TheISA
Kernel	simple_thread.hh	/^    namespace Kernel {$/;"	n	namespace:TheISA
Kernel	thread_context.hh	/^    namespace Kernel {$/;"	n	namespace:TheISA
Kernel	thread_state.hh	/^    namespace Kernel {$/;"	n	namespace:TheISA
Kvm	kvm/vm.cc	/^Kvm::Kvm()$/;"	f	class:Kvm
Kvm	kvm/vm.hh	/^class Kvm$/;"	c
KvmCoreMiscRegInfo	kvm/arm_cpu.hh	/^    struct KvmCoreMiscRegInfo {$/;"	s	class:ArmKvmCPU
KvmIntRegInfo	kvm/arm_cpu.hh	/^    struct KvmIntRegInfo {$/;"	s	class:ArmKvmCPU
KvmMSRVector	kvm/x86_cpu.hh	/^    typedef std::vector<struct kvm_msr_entry> KvmMSRVector;$/;"	t	class:X86KvmCPU
KvmVM	kvm/KvmVM.py	/^class KvmVM(SimObject):$/;"	c
KvmVM	kvm/vm.cc	/^KvmVM::KvmVM(KvmVMParams *params)$/;"	f	class:KvmVM
KvmVM	kvm/vm.hh	/^class KvmVM : public SimObject$/;"	c
LFST	o3/store_set.hh	/^    std::vector<InstSeqNum> LFST;$/;"	m	class:StoreSet
LFSTSize	o3/O3CPU.py	/^    LFSTSize = Param.Unsigned(1024, "Last fetched store table size")$/;"	v	class:DerivO3CPU
LFSTSize	o3/store_set.hh	/^    int LFSTSize;$/;"	m	class:StoreSet
LFSTSize	ozone/OzoneCPU.py	/^    LFSTSize = Param.Unsigned("Last fetched store table size")$/;"	v	class:DerivOzoneCPU
LFSTSize	ozone/SimpleOzoneCPU.py	/^    LFSTSize = Param.Unsigned("Last fetched store table size")$/;"	v	class:SimpleOzoneCPU
LFSTSize	ozone/simple_params.hh	/^    unsigned LFSTSize;$/;"	m	class:SimpleParams
LQ	o3/rename.hh	/^        LQ,$/;"	e	enum:DefaultRename::FullSource
LQEntries	o3/O3CPU.py	/^    LQEntries = Param.Unsigned(32, "Number of load queue entries")$/;"	v	class:DerivO3CPU
LQEntries	o3/lsq.hh	/^    unsigned LQEntries;$/;"	m	class:LSQ
LQEntries	o3/lsq_unit.hh	/^    unsigned LQEntries;$/;"	m	class:LSQUnit
LQEntries	ozone/OzoneCPU.py	/^    LQEntries = Param.Unsigned("Number of load queue entries")$/;"	v	class:DerivOzoneCPU
LQEntries	ozone/SimpleOzoneCPU.py	/^    LQEntries = Param.Unsigned("Number of load queue entries")$/;"	v	class:SimpleOzoneCPU
LQEntries	ozone/lsq_unit.hh	/^    unsigned LQEntries;$/;"	m	class:OzoneLSQ
LQEntries	ozone/lw_lsq.hh	/^    unsigned LQEntries;$/;"	m	class:OzoneLWLSQ
LQEntries	ozone/simple_params.hh	/^    unsigned LQEntries;$/;"	m	class:SimpleParams
LQHashIt	ozone/lw_lsq.hh	/^    typedef typename m5::hash_map<int, LQIt, HashFn>::iterator LQHashIt;$/;"	t	class:OzoneLWLSQ
LQIndices	ozone/lw_lsq.hh	/^    std::queue<int> LQIndices;$/;"	m	class:OzoneLWLSQ
LQIt	ozone/lw_lsq.hh	/^    typedef typename std::list<DynInstPtr>::iterator LQIt;$/;"	t	class:OzoneLWLSQ
LQItHash	ozone/lw_lsq.hh	/^    m5::hash_map<int, LQIt, HashFn> LQItHash;$/;"	m	class:OzoneLWLSQ
LSQ	minor/lsq.cc	/^LSQ::LSQ(std::string name_, std::string dcache_port_name_,$/;"	f	class:Minor::LSQ
LSQ	minor/lsq.hh	/^class LSQ : public Named$/;"	c	namespace:Minor
LSQ	o3/cpu_policy.hh	/^    typedef ::LSQ<Impl> LSQ;$/;"	t	struct:SimpleCPUPolicy
LSQ	o3/fetch.hh	/^        LSQ$/;"	e	enum:DefaultFetch::FetchPriority
LSQ	o3/iew.hh	/^    typedef typename CPUPol::LSQ LSQ;$/;"	t	class:DefaultIEW
LSQ	o3/lsq.hh	/^class LSQ {$/;"	c
LSQ	o3/lsq_impl.hh	/^LSQ<Impl>::LSQ(O3CPU *cpu_ptr, IEW *iew_ptr, DerivO3CPUParams *params)$/;"	f	class:LSQ
LSQ	o3/lsq_unit.hh	/^    typedef typename Impl::CPUPol::LSQ LSQ;$/;"	t	class:LSQUnit
LSQ	ozone/back_end.hh	/^    LdstQueue LSQ;$/;"	m	class:BackEnd
LSQ	ozone/lw_back_end.hh	/^    LdstQueue LSQ;$/;"	m	class:LWBackEnd
LSQCheckLoads	o3/O3CPU.py	/^    LSQCheckLoads = Param.Bool(True,$/;"	v	class:DerivO3CPU
LSQDepCheckShift	o3/O3CPU.py	/^    LSQDepCheckShift = Param.Unsigned(4, "Number of places to shift addr before check")$/;"	v	class:DerivO3CPU
LSQPolicy	o3/lsq.hh	/^    enum LSQPolicy {$/;"	g	class:LSQ
LSQQueue	minor/lsq.hh	/^        LSQQueue;$/;"	t	class:Minor::LSQ
LSQRequest	minor/lsq.cc	/^LSQ::LSQRequest::LSQRequest(LSQ &port_, MinorDynInstPtr inst_, bool isLoad_,$/;"	f	class:Minor::LSQ::LSQRequest
LSQRequest	minor/lsq.hh	/^    class LSQRequest :$/;"	c	class:Minor::LSQ
LSQRequestPtr	minor/lsq.hh	/^    typedef LSQRequest *LSQRequestPtr;$/;"	t	class:Minor::LSQ
LSQRequestState	minor/lsq.hh	/^        enum LSQRequestState$/;"	g	class:Minor::LSQ::LSQRequest
LSQSenderState	o3/lsq_unit.hh	/^        LSQSenderState()$/;"	f	class:LSQUnit::LSQSenderState
LSQSenderState	o3/lsq_unit.hh	/^    class LSQSenderState : public Packet::SenderState$/;"	c	class:LSQUnit
LSQSenderState	ozone/lw_lsq.hh	/^        LSQSenderState()$/;"	f	class:OzoneLWLSQ::LSQSenderState
LSQSenderState	ozone/lw_lsq.hh	/^    class LSQSenderState : public Packet::SenderState$/;"	c	class:OzoneLWLSQ
LSQUnit	o3/cpu_policy.hh	/^    typedef ::LSQUnit<Impl> LSQUnit;$/;"	t	struct:SimpleCPUPolicy
LSQUnit	o3/lsq.hh	/^    typedef typename Impl::CPUPol::LSQUnit LSQUnit;$/;"	t	class:LSQ
LSQUnit	o3/lsq_unit.hh	/^class LSQUnit {$/;"	c
LSQUnit	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::LSQUnit()$/;"	f	class:LSQUnit
LWBackEnd	ozone/lw_back_end.hh	/^class LWBackEnd$/;"	c
LWBackEnd	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::LWBackEnd(Params *params)$/;"	f	class:LWBackEnd
Latch	minor/buffers.hh	/^    Latch(const std::string &name,$/;"	f	class:Minor::Latch
Latch	minor/buffers.hh	/^class Latch$/;"	c	namespace:Minor
LdMapIt	ozone/lsq_unit.hh	/^    typedef typename std::map<InstSeqNum, DynInstPtr>::iterator LdMapIt;$/;"	t	class:OzoneLSQ
LdMapIt	ozone/lw_lsq.hh	/^    typedef typename std::map<InstSeqNum, DynInstPtr>::iterator LdMapIt;$/;"	t	class:OzoneLWLSQ
LdWritebackEvent	ozone/back_end.hh	/^    class LdWritebackEvent : public Event {$/;"	c	class:BackEnd
LdWritebackEvent	ozone/back_end_impl.hh	/^BackEnd<Impl>::LdWritebackEvent::LdWritebackEvent(DynInstPtr &_inst,$/;"	f	class:BackEnd::LdWritebackEvent
LdstQueue	ozone/back_end.hh	/^    typedef typename Impl::LdstQueue LdstQueue;$/;"	t	class:BackEnd
LdstQueue	ozone/lw_back_end.hh	/^    typedef typename Impl::LdstQueue LdstQueue;$/;"	t	class:LWBackEnd
LdstQueue	ozone/ozone_impl.hh	/^    typedef OzoneLWLSQ<OzoneImpl> LdstQueue;$/;"	t	struct:OzoneImpl
LegionTrace	LegionTrace.py	/^class LegionTrace(InstTracer):$/;"	c
LegionTrace	legiontrace.hh	/^    LegionTrace(const Params *p) : InstTracer(p)$/;"	f	class:Trace::LegionTrace
LegionTrace	legiontrace.hh	/^class LegionTrace : public InstTracer$/;"	c	namespace:Trace
LegionTraceRecord	legiontrace.hh	/^    LegionTraceRecord(Tick _when, ThreadContext *_thread,$/;"	f	class:Trace::LegionTraceRecord
LegionTraceRecord	legiontrace.hh	/^class LegionTraceRecord : public InstRecord$/;"	c	namespace:Trace
LinearGen	testers/traffic_gen/generators.hh	/^    LinearGen(const std::string& _name, MasterID master_id, Tick _duration,$/;"	f	class:LinearGen
LinearGen	testers/traffic_gen/generators.hh	/^class LinearGen : public BaseGen$/;"	c
ListIt	base_dyn_inst.hh	/^    typedef typename std::list<DynInstPtr>::iterator ListIt;$/;"	t	class:BaseDynInst
ListIt	inorder/cpu.hh	/^    typedef std::list<DynInstPtr>::iterator ListIt;$/;"	t	class:InOrderCPU
ListIt	inorder/inorder_dyn_inst.hh	/^    typedef std::list<DynInstPtr>::iterator ListIt;$/;"	t	class:InOrderDynInst
ListIt	inorder/resources/fetch_seq_unit.hh	/^    typedef std::list<DynInstPtr>::iterator ListIt;$/;"	t	class:FetchSeqUnit
ListIt	o3/cpu.hh	/^    typedef typename std::list<DynInstPtr>::iterator ListIt;$/;"	t	class:FullO3CPU
ListIt	o3/inst_queue.hh	/^    typedef typename std::list<DynInstPtr>::iterator ListIt;$/;"	t	class:InstructionQueue
ListIt	o3/mem_dep_unit.hh	/^    typedef typename std::list<DynInstPtr>::iterator ListIt;$/;"	t	class:MemDepUnit
ListIt	ozone/dyn_inst.hh	/^    typedef typename std::list<DynInstPtr>::iterator ListIt;$/;"	t	class:OzoneDynInst
ListIt	ozone/inst_queue.hh	/^    typedef typename std::list<DynInstPtr>::iterator ListIt;$/;"	t	class:InstQueue
ListOrderEntry	o3/inst_queue.hh	/^    struct ListOrderEntry {$/;"	s	class:InstructionQueue
ListOrderIt	o3/inst_queue.hh	/^    typedef typename std::list<ListOrderEntry>::iterator ListOrderIt;$/;"	t	class:InstructionQueue
LocalBP	pred/2bit_local.cc	/^LocalBP::LocalBP(const Params *params)$/;"	f	class:LocalBP
LocalBP	pred/2bit_local.hh	/^class LocalBP : public BPredUnit$/;"	c
LsqEntry	base_dyn_inst.hh	/^        LsqEntry,                \/\/\/ Instruction is in the LSQ$/;"	e	enum:BaseDynInst::Status
LsqEntry	inorder/inorder_dyn_inst.hh	/^        LsqEntry,                \/\/\/ Instruction is in the LSQ$/;"	e	enum:InOrderDynInst::Status
M5_ATTR_PACKED	kvm/x86_cpu.cc	/^} M5_ATTR_PACKED;$/;"	v	typeref:struct:FXSave
MAX_FORWARD_INSTS	minor/pipe_data.hh	/^const unsigned int MAX_FORWARD_INSTS = 16;$/;"	m	namespace:Minor
MDU	inorder/pipeline_traits.hh	/^       MDU,$/;"	e	enum:ThePipeline::ResourceId
MDUEvent	inorder/resources/mult_div_unit.cc	/^MDUEvent::MDUEvent()$/;"	f	class:MDUEvent
MDUEvent	inorder/resources/mult_div_unit.hh	/^class MDUEvent : public ResourceEvent$/;"	c
MINORINST	minor/trace.hh	66;"	d
MINORLINE	minor/trace.hh	70;"	d
MINORTRACE	minor/trace.hh	62;"	d
MIN_HOST_CYCLES	kvm/timer.cc	/^static const uint64_t MIN_HOST_CYCLES = 1000;$/;"	v	file:
MSRIndexVector	kvm/vm.hh	/^    typedef std::vector<uint32_t> MSRIndexVector;$/;"	t	class:Kvm
MSR_TSC	kvm/x86_cpu.cc	51;"	d	file:
MachInst	checker/cpu.hh	/^    typedef TheISA::MachInst MachInst;$/;"	t	class:CheckerCPU
MachInst	inorder/inorder_dyn_inst.hh	/^    typedef TheISA::MachInst MachInst;$/;"	t	class:InOrderDynInst
MachInst	o3/dyn_inst.hh	/^    typedef TheISA::MachInst MachInst;$/;"	t	class:BaseO3DynInst
MachInst	o3/fetch.hh	/^    typedef TheISA::MachInst MachInst;$/;"	t	class:DefaultFetch
MachInst	o3/impl.hh	/^    typedef TheISA::MachInst MachInst;$/;"	t	struct:O3CPUImpl
MachInst	ozone/dyn_inst.hh	/^    typedef TheISA::MachInst MachInst;$/;"	t	class:OzoneDynInst
MachInst	simple_thread.hh	/^    typedef TheISA::MachInst MachInst;$/;"	t	class:SimpleThread
MachInst	thread_context.hh	/^    typedef TheISA::MachInst MachInst;$/;"	t	class:ThreadContext
MapCompare	pc_event.hh	/^    class MapCompare {$/;"	c	class:PCEventQueue
MarkDestRegs	inorder/resources/use_def.hh	/^        MarkDestRegs$/;"	e	enum:UseDefUnit::Command
MaxFlags	base_dyn_inst.hh	/^        MaxFlags$/;"	e	enum:BaseDynInst::Flags
MaxInstDestRegs	base_dyn_inst.hh	/^        MaxInstDestRegs = TheISA::MaxInstDestRegs       \/\/\/ Max dest regs$/;"	e	enum:BaseDynInst::__anon1
MaxInstDestRegs	inorder/inorder_dyn_inst.hh	/^        MaxInstDestRegs = TheISA::MaxInstDestRegs       \/\/\/ Max dest regs$/;"	e	enum:InOrderDynInst::__anon3
MaxInstDestRegs	o3/dyn_inst.hh	/^        MaxInstDestRegs = TheISA::MaxInstDestRegs       \/\/< Max dest regs$/;"	e	enum:BaseO3DynInst::__anon10
MaxInstDestRegs	ozone/dyn_inst.hh	/^        MaxInstDestRegs = TheISA::MaxInstDestRegs$/;"	e	enum:OzoneDynInst::__anon13
MaxInstDestRegs	static_inst.hh	/^        MaxInstDestRegs = TheISA::MaxInstDestRegs       \/\/< Max dest regs$/;"	e	enum:StaticInst::__anon16
MaxInstSrcRegs	base_dyn_inst.hh	/^        MaxInstSrcRegs = TheISA::MaxInstSrcRegs,        \/\/\/ Max source regs$/;"	e	enum:BaseDynInst::__anon1
MaxInstSrcRegs	inorder/inorder_dyn_inst.hh	/^        MaxInstSrcRegs = TheISA::MaxInstSrcRegs,        \/\/\/ Max source regs$/;"	e	enum:InOrderDynInst::__anon3
MaxInstSrcRegs	o3/dyn_inst.hh	/^        MaxInstSrcRegs = TheISA::MaxInstSrcRegs,        \/\/< Max source regs$/;"	e	enum:BaseO3DynInst::__anon10
MaxInstSrcRegs	ozone/dyn_inst.hh	/^        MaxInstSrcRegs = TheISA::MaxInstSrcRegs,$/;"	e	enum:OzoneDynInst::__anon13
MaxInstSrcRegs	static_inst.hh	/^        MaxInstSrcRegs = TheISA::MaxInstSrcRegs,        \/\/< Max source regs$/;"	e	enum:StaticInst::__anon16
MaxThreads	inorder/pipeline_traits.5stage.hh	/^    const unsigned MaxThreads = 3;$/;"	m	namespace:ThePipeline
MaxThreads	inorder/pipeline_traits.9stage.hh	/^    const unsigned MaxThreads = 3;$/;"	m	namespace:ThePipeline
MaxThreads	inorder/pipeline_traits.9stage.smt2.hh	/^    const unsigned MaxThreads = 2;$/;"	m	namespace:ThePipeline
MaxThreads	inorder/pipeline_traits.hh	/^    const ThreadID MaxThreads = 1;$/;"	m	namespace:ThePipeline
MaxThreads	o3/impl.hh	/^      MaxThreads = 4$/;"	e	enum:O3CPUImpl::__anon11
MaxThreads	ozone/ozone_impl.hh	/^        MaxThreads = 1$/;"	e	enum:OzoneImpl::__anon14
MaxThreads	ozone/simple_impl.hh	/^        MaxThreads = 1$/;"	e	enum:SimpleImpl::__anon12
MaxWidth	o3/impl.hh	/^      MaxWidth = 8,$/;"	e	enum:O3CPUImpl::__anon11
MemAccessComplete	inorder/pipeline_stage.hh	/^        MemAccessComplete$/;"	e	enum:PipelineStage::ThreadStatus
MemDepEntry	o3/mem_dep_unit.hh	/^        MemDepEntry(DynInstPtr &new_inst)$/;"	f	class:MemDepUnit::MemDepEntry
MemDepEntry	o3/mem_dep_unit.hh	/^    class MemDepEntry : public RefCounted {$/;"	c	class:MemDepUnit
MemDepEntryPtr	o3/mem_dep_unit.hh	/^    typedef RefCountingPtr<MemDepEntry> MemDepEntryPtr;$/;"	t	class:MemDepUnit
MemDepHash	o3/mem_dep_unit.hh	/^    typedef m5::hash_map<InstSeqNum, MemDepEntryPtr, SNHash> MemDepHash;$/;"	t	class:MemDepUnit
MemDepHashIt	o3/mem_dep_unit.hh	/^    typedef typename MemDepHash::iterator MemDepHashIt;$/;"	t	class:MemDepUnit
MemDepUnit	inorder/resources/mem_dep_unit.hh	/^class MemDepUnit : public Resource {$/;"	c
MemDepUnit	o3/cpu_policy.hh	/^    typedef ::MemDepUnit<StoreSet, Impl> MemDepUnit;$/;"	t	struct:SimpleCPUPolicy
MemDepUnit	o3/inst_queue.hh	/^    typedef typename Impl::CPUPol::MemDepUnit MemDepUnit;$/;"	t	class:InstructionQueue
MemDepUnit	o3/mem_dep_unit.hh	/^class MemDepUnit$/;"	c
MemDepUnit	o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::MemDepUnit()$/;"	f	class:MemDepUnit
MemDepUnit	o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::MemDepUnit(DerivO3CPUParams *params)$/;"	f	class:MemDepUnit
MemIt	ozone/lw_back_end.hh	/^    typedef std::set<InstSeqNum>::iterator MemIt;$/;"	t	class:LWBackEnd
MemOpDone	base_dyn_inst.hh	/^        MemOpDone,$/;"	e	enum:BaseDynInst::Flags
MemReadOp	op_class.hh	/^const OpClass MemReadOp = Enums::MemRead;$/;"	v
MemTest	testers/memtest/MemTest.py	/^class MemTest(MemObject):$/;"	c
MemTest	testers/memtest/memtest.cc	/^MemTest::MemTest(const Params *p)$/;"	f	class:MemTest
MemTest	testers/memtest/memtest.hh	/^class MemTest : public MemObject$/;"	c
MemTestSenderState	testers/memtest/memtest.hh	/^        MemTestSenderState(uint8_t *_data)$/;"	f	class:MemTest::MemTestSenderState
MemTestSenderState	testers/memtest/memtest.hh	/^    class MemTestSenderState : public Packet::SenderState$/;"	c	class:MemTest
MemWaitResponse	inorder/pipeline_stage.hh	/^        MemWaitResponse,$/;"	e	enum:PipelineStage::ThreadStatus
MemWaitRetry	inorder/pipeline_stage.hh	/^        MemWaitRetry,$/;"	e	enum:PipelineStage::ThreadStatus
MemWriteOp	op_class.hh	/^const OpClass MemWriteOp = Enums::MemWrite;$/;"	v
MemoryNeedsRetry	minor/lsq.hh	/^        MemoryNeedsRetry \/* Request rejected, will be asked to retry *\/$/;"	e	enum:Minor::LSQ::MemoryState
MemoryRunning	minor/lsq.hh	/^        MemoryRunning, \/* Default. Step dcache queues when possible. *\/$/;"	e	enum:Minor::LSQ::MemoryState
MemoryState	minor/lsq.hh	/^    enum MemoryState$/;"	g	class:Minor::LSQ
Minor	minor/activity.cc	/^namespace Minor$/;"	n	file:
Minor	minor/activity.hh	/^namespace Minor$/;"	n
Minor	minor/buffers.hh	/^namespace Minor$/;"	n
Minor	minor/cpu.hh	/^namespace Minor$/;"	n
Minor	minor/decode.cc	/^namespace Minor$/;"	n	file:
Minor	minor/decode.hh	/^namespace Minor$/;"	n
Minor	minor/dyn_inst.cc	/^namespace Minor$/;"	n	file:
Minor	minor/dyn_inst.hh	/^namespace Minor$/;"	n
Minor	minor/exec_context.hh	/^namespace Minor$/;"	n
Minor	minor/execute.cc	/^namespace Minor$/;"	n	file:
Minor	minor/execute.hh	/^namespace Minor$/;"	n
Minor	minor/fetch1.cc	/^namespace Minor$/;"	n	file:
Minor	minor/fetch1.hh	/^namespace Minor$/;"	n
Minor	minor/fetch2.cc	/^namespace Minor$/;"	n	file:
Minor	minor/fetch2.hh	/^namespace Minor$/;"	n
Minor	minor/func_unit.cc	/^namespace Minor$/;"	n	file:
Minor	minor/func_unit.hh	/^namespace Minor$/;"	n
Minor	minor/lsq.cc	/^namespace Minor$/;"	n	file:
Minor	minor/lsq.hh	/^namespace Minor$/;"	n
Minor	minor/pipe_data.cc	/^namespace Minor$/;"	n	file:
Minor	minor/pipe_data.hh	/^namespace Minor$/;"	n
Minor	minor/pipeline.cc	/^namespace Minor$/;"	n	file:
Minor	minor/pipeline.hh	/^namespace Minor$/;"	n
Minor	minor/scoreboard.cc	/^namespace Minor$/;"	n	file:
Minor	minor/scoreboard.hh	/^namespace Minor$/;"	n
Minor	minor/stats.cc	/^namespace Minor$/;"	n	file:
Minor	minor/stats.hh	/^namespace Minor$/;"	n
Minor	minor/trace.hh	/^namespace Minor$/;"	n
MinorActivityRecorder	minor/activity.hh	/^    MinorActivityRecorder(const std::string &name, int num_stages,$/;"	f	class:Minor::MinorActivityRecorder
MinorActivityRecorder	minor/activity.hh	/^class MinorActivityRecorder : public ActivityRecorder$/;"	c	namespace:Minor
MinorBuffer	minor/buffers.hh	/^    MinorBuffer(const std::string &name,$/;"	f	class:Minor::MinorBuffer
MinorBuffer	minor/buffers.hh	/^class MinorBuffer : public Named, public TimeBuffer<ElemType>$/;"	c	namespace:Minor
MinorCPU	minor/MinorCPU.py	/^class MinorCPU(BaseCPU):$/;"	c
MinorCPU	minor/cpu.cc	/^MinorCPU::MinorCPU(MinorCPUParams *params) :$/;"	f	class:MinorCPU
MinorCPU	minor/cpu.hh	/^class MinorCPU : public BaseCPU$/;"	c
MinorCPUPort	minor/cpu.hh	/^        MinorCPUPort(const std::string& name_, MinorCPU &cpu_)$/;"	f	class:MinorCPU::MinorCPUPort
MinorCPUPort	minor/cpu.hh	/^    class MinorCPUPort : public MasterPort$/;"	c	class:MinorCPU
MinorDefaultFUPool	minor/MinorCPU.py	/^class MinorDefaultFUPool(MinorFUPool):$/;"	c
MinorDefaultFloatSimdFU	minor/MinorCPU.py	/^class MinorDefaultFloatSimdFU(MinorFU):$/;"	c
MinorDefaultIntDivFU	minor/MinorCPU.py	/^class MinorDefaultIntDivFU(MinorFU):$/;"	c
MinorDefaultIntFU	minor/MinorCPU.py	/^class MinorDefaultIntFU(MinorFU):$/;"	c
MinorDefaultIntMulFU	minor/MinorCPU.py	/^class MinorDefaultIntMulFU(MinorFU):$/;"	c
MinorDefaultMemFU	minor/MinorCPU.py	/^class MinorDefaultMemFU(MinorFU):$/;"	c
MinorDefaultMiscFU	minor/MinorCPU.py	/^class MinorDefaultMiscFU(MinorFU):$/;"	c
MinorDynInst	minor/dyn_inst.hh	/^    MinorDynInst(InstId id_ = InstId(), Fault fault_ = NoFault) :$/;"	f	class:Minor::MinorDynInst
MinorDynInst	minor/dyn_inst.hh	/^class MinorDynInst : public RefCounted$/;"	c	namespace:Minor
MinorDynInstPtr	minor/dyn_inst.hh	/^typedef RefCountingPtr<MinorDynInst> MinorDynInstPtr;$/;"	t	namespace:Minor
MinorFU	minor/MinorCPU.py	/^class MinorFU(SimObject):$/;"	c
MinorFU	minor/func_unit.hh	/^    MinorFU(const MinorFUParams *params) :$/;"	f	class:MinorFU
MinorFU	minor/func_unit.hh	/^class MinorFU : public SimObject$/;"	c
MinorFUPool	minor/MinorCPU.py	/^class MinorFUPool(SimObject):$/;"	c
MinorFUPool	minor/func_unit.hh	/^    MinorFUPool(const MinorFUPoolParams *params) :$/;"	f	class:MinorFUPool
MinorFUPool	minor/func_unit.hh	/^class MinorFUPool : public SimObject$/;"	c
MinorFUTiming	minor/MinorCPU.py	/^class MinorFUTiming(SimObject):$/;"	c
MinorFUTiming	minor/func_unit.cc	/^MinorFUTiming::MinorFUTiming($/;"	f	class:MinorFUTiming
MinorFUTiming	minor/func_unit.hh	/^class MinorFUTiming: public SimObject$/;"	c
MinorOpClass	minor/MinorCPU.py	/^class MinorOpClass(SimObject):$/;"	c
MinorOpClass	minor/func_unit.hh	/^    MinorOpClass(const MinorOpClassParams *params) :$/;"	f	class:MinorOpClass
MinorOpClass	minor/func_unit.hh	/^class MinorOpClass : public SimObject$/;"	c
MinorOpClassSet	minor/MinorCPU.py	/^class MinorOpClassSet(SimObject):$/;"	c
MinorOpClassSet	minor/func_unit.cc	/^MinorOpClassSet::MinorOpClassSet(const MinorOpClassSetParams *params) :$/;"	f	class:MinorOpClassSet
MinorOpClassSet	minor/func_unit.hh	/^class MinorOpClassSet : public SimObject$/;"	c
MinorStats	minor/stats.cc	/^MinorStats::MinorStats()$/;"	f	class:Minor::MinorStats
MinorStats	minor/stats.hh	/^class MinorStats$/;"	c	namespace:Minor
MinorThread	minor/cpu.hh	/^typedef SimpleThread MinorThread;$/;"	t	namespace:Minor
MiscReg	checker/cpu.hh	/^    typedef TheISA::MiscReg MiscReg;$/;"	t	class:CheckerCPU
MiscReg	exec_context.hh	/^    typedef TheISA::MiscReg MiscReg;$/;"	t	class:ExecContext
MiscReg	inorder/cpu.hh	/^    typedef TheISA::MiscReg MiscReg;$/;"	t	class:InOrderCPU
MiscReg	inorder/inorder_dyn_inst.hh	/^    typedef TheISA::MiscReg MiscReg;$/;"	t	class:InOrderDynInst
MiscReg	o3/dyn_inst.hh	/^    typedef TheISA::MiscReg  MiscReg;$/;"	t	class:BaseO3DynInst
MiscReg	ozone/cpu.hh	/^    typedef TheISA::MiscReg MiscReg;$/;"	t	class:OzoneCPU
MiscReg	ozone/dyn_inst.hh	/^    typedef TheISA::MiscReg MiscReg;$/;"	t	class:OzoneDynInst
MiscReg	ozone/thread_state.hh	/^    typedef TheISA::MiscReg MiscReg;$/;"	t	struct:OzoneThreadState
MiscReg	simple/base.hh	/^    typedef TheISA::MiscReg MiscReg;$/;"	t	class:BaseSimpleCPU
MiscReg	simple_thread.hh	/^    typedef TheISA::MiscReg MiscReg;$/;"	t	class:SimpleThread
MiscReg	thread_context.hh	/^    typedef TheISA::MiscReg MiscReg;$/;"	t	class:ThreadContext
MiscRegClass	reg_class.hh	/^    MiscRegClass        \/\/\/< Control (misc) register$/;"	e	enum:RegClass
MultDiv	inorder/resources/mult_div_unit.hh	/^        MultDiv$/;"	e	enum:MultDivUnit::Command
MultDivUnit	inorder/resources/mult_div_unit.cc	/^MultDivUnit::MultDivUnit(string res_name, int res_id, int res_width,$/;"	f	class:MultDivUnit
MultDivUnit	inorder/resources/mult_div_unit.hh	/^class MultDivUnit : public Resource {$/;"	c
NONE	o3/rename.hh	/^        NONE$/;"	e	enum:DefaultRename::FullSource
NativeTrace	NativeTrace.py	/^class NativeTrace(ExeTracer):$/;"	c
NativeTrace	nativetrace.cc	/^NativeTrace::NativeTrace(const Params *p)$/;"	f	class:Trace::NativeTrace
NativeTrace	nativetrace.hh	/^class NativeTrace : public ExeTracer$/;"	c	namespace:Trace
NativeTraceRecord	nativetrace.hh	/^    NativeTraceRecord(NativeTrace * _parent,$/;"	f	class:Trace::NativeTraceRecord
NativeTraceRecord	nativetrace.hh	/^class NativeTraceRecord : public ExeTracerRecord$/;"	c	namespace:Trace
NetworkTest	testers/networktest/NetworkTest.py	/^class NetworkTest(MemObject):$/;"	c
NetworkTest	testers/networktest/networktest.cc	/^NetworkTest::NetworkTest(const Params *p)$/;"	f	class:NetworkTest
NetworkTest	testers/networktest/networktest.hh	/^class NetworkTest : public MemObject$/;"	c
NetworkTestSenderState	testers/networktest/networktest.hh	/^        NetworkTestSenderState(uint8_t *_data)$/;"	f	class:NetworkTest::NetworkTestSenderState
NetworkTestSenderState	testers/networktest/networktest.hh	/^    class NetworkTestSenderState : public Packet::SenderState$/;"	c	class:NetworkTest
NoAddrRangeCoverage	minor/lsq.hh	/^        NoAddrRangeCoverage \/* Two ranges are disjoint *\/$/;"	e	enum:Minor::LSQ::AddrRangeCoverage
NoBranch	minor/pipe_data.hh	/^        NoBranch,$/;"	e	enum:Minor::BranchData::Reason
NoBubbleTraits	minor/buffers.hh	/^class NoBubbleTraits$/;"	c	namespace:Minor
NoGoodAddr	o3/fetch.hh	/^        NoGoodAddr$/;"	e	enum:DefaultFetch::ThreadStatus
NonSpec	ozone/back_end.hh	/^            NonSpec,$/;"	e	enum:BackEnd::InstQueue::queue
NonSpecMapIt	o3/inst_queue.hh	/^    typedef typename std::map<InstSeqNum, DynInstPtr>::iterator NonSpecMapIt;$/;"	t	class:InstructionQueue
NonSpecMapIt	ozone/inst_queue.hh	/^    typedef typename std::map<InstSeqNum, DynInstPtr>::iterator NonSpecMapIt;$/;"	t	class:InstQueue
None	inorder/inorder_dyn_inst.hh	/^        None,$/;"	e	enum:InOrderDynInst::ResultType
NotDraining	minor/execute.hh	/^        NotDraining, \/* Not draining, possibly running *\/$/;"	e	enum:Minor::Execute::DrainState
NotIssued	minor/fetch1.hh	/^            NotIssued, \/* Just been made *\/$/;"	e	enum:Minor::Fetch1::FetchRequest::FetchRequestState
NotIssued	minor/lsq.hh	/^            NotIssued, \/* Newly created *\/$/;"	e	enum:Minor::LSQ::LSQRequest::LSQRequestState
NullPredictor	ozone/null_predictor.hh	/^    NullPredictor(Params *p) { }$/;"	f	class:NullPredictor
NullPredictor	ozone/null_predictor.hh	/^class NullPredictor$/;"	c
NumCPUEvents	inorder/cpu.hh	/^        NumCPUEvents$/;"	e	enum:InOrderCPU::CPUEventType
NumRegClasses	reg_class.hh	/^const int NumRegClasses = MiscRegClass + 1;$/;"	v
NumStages	inorder/pipeline_traits.5stage.hh	/^    const unsigned NumStages = 5;$/;"	m	namespace:ThePipeline
NumStages	inorder/pipeline_traits.9stage.hh	/^    const unsigned NumStages = 9;$/;"	m	namespace:ThePipeline
NumStages	inorder/pipeline_traits.9stage.smt2.hh	/^    const unsigned NumStages = 9;$/;"	m	namespace:ThePipeline
NumStages	inorder/pipeline_traits.hh	/^    const unsigned NumStages = 5;$/;"	m	namespace:ThePipeline
NumStages	o3/cpu.hh	/^        NumStages };$/;"	e	enum:FullO3CPU::StageIdx
NumStatus	base_dyn_inst.hh	/^        NumStatus$/;"	e	enum:BaseDynInst::Status
NumStatus	inorder/inorder_dyn_inst.hh	/^        NumStatus$/;"	e	enum:InOrderDynInst::Status
Num_OpClasses	op_class.hh	/^const OpClass Num_OpClasses = Num_OpClass;$/;"	v
Num_StageId	minor/pipeline.hh	/^        Num_StageId \/* Stage count *\/$/;"	e	enum:Minor::Pipeline::StageId
O3CPU	o3/commit.hh	/^    typedef typename Impl::O3CPU O3CPU;$/;"	t	class:DefaultCommit
O3CPU	o3/cpu.hh	/^    typedef typename Impl::O3CPU O3CPU;$/;"	t	class:FullO3CPU
O3CPU	o3/decode.hh	/^    typedef typename Impl::O3CPU O3CPU;$/;"	t	class:DefaultDecode
O3CPU	o3/dyn_inst.hh	/^    typedef typename Impl::O3CPU O3CPU;$/;"	t	class:BaseO3DynInst
O3CPU	o3/fetch.hh	/^    typedef typename Impl::O3CPU O3CPU;$/;"	t	class:DefaultFetch
O3CPU	o3/iew.hh	/^    typedef typename Impl::O3CPU O3CPU;$/;"	t	class:DefaultIEW
O3CPU	o3/impl.hh	/^    typedef FullO3CPU<O3CPUImpl> O3CPU;$/;"	t	struct:O3CPUImpl
O3CPU	o3/inst_queue.hh	/^    typedef typename Impl::O3CPU O3CPU;$/;"	t	class:InstructionQueue
O3CPU	o3/lsq.hh	/^    typedef typename Impl::O3CPU O3CPU;$/;"	t	class:LSQ
O3CPU	o3/lsq_unit.hh	/^    typedef typename Impl::O3CPU O3CPU;$/;"	t	class:LSQUnit
O3CPU	o3/rename.hh	/^    typedef typename Impl::O3CPU O3CPU;$/;"	t	class:DefaultRename
O3CPU	o3/rob.hh	/^    typedef typename Impl::O3CPU O3CPU;$/;"	t	class:ROB
O3CPU	o3/thread_context.hh	/^    typedef typename Impl::O3CPU O3CPU;$/;"	t	class:O3ThreadContext
O3CPU	o3/thread_state.hh	/^    typedef typename Impl::O3CPU O3CPU;$/;"	t	struct:O3ThreadState
O3CPUImpl	o3/impl.hh	/^struct O3CPUImpl$/;"	s
O3Checker	o3/O3Checker.py	/^class O3Checker(CheckerCPU):$/;"	c
O3Checker	o3/checker.hh	/^    O3Checker(Params *p)$/;"	f	class:O3Checker
O3Checker	o3/checker.hh	/^class O3Checker : public Checker<O3CPUImpl>$/;"	c
O3ThreadContext	o3/thread_context.hh	/^class O3ThreadContext : public ThreadContext$/;"	c
O3ThreadState	o3/thread_state.hh	/^    O3ThreadState(O3CPU *_cpu, int _thread_num, Process *_process)$/;"	f	struct:O3ThreadState
O3ThreadState	o3/thread_state.hh	/^struct O3ThreadState : public ThreadState {$/;"	s
OPDDiterator	func_unit.hh	/^typedef std::vector<OpDesc *>::const_iterator OPDDiterator;$/;"	t
OWN_LEGION	m5legion_interface.h	35;"	d
OWN_M5	m5legion_interface.h	34;"	d
OldestReady	o3/commit.hh	/^        OldestReady$/;"	e	enum:DefaultCommit::CommitPolicy
OpClass	FuncUnit.py	/^class OpClass(Enum):$/;"	c
OpDesc	FuncUnit.py	/^class OpDesc(SimObject):$/;"	c
OpDesc	func_unit.hh	/^    OpDesc(const OpDescParams *p)$/;"	f	class:OpDesc
OpDesc	func_unit.hh	/^class OpDesc : public SimObject$/;"	c
Output	minor/buffers.hh	/^        Output(typename Buffer::wire output_wire) :$/;"	f	class:Minor::Latch::Output
Output	minor/buffers.hh	/^    class Output$/;"	c	class:Minor::Latch
OzoneCPU	ozone/cpu.hh	/^class OzoneCPU : public BaseCPU$/;"	c
OzoneCPU	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneCPU(Params *p)$/;"	f	class:OzoneCPU
OzoneCPU	ozone/dyn_inst.hh	/^    typedef typename Impl::OzoneCPU OzoneCPU;$/;"	t	class:OzoneDynInst
OzoneCPU	ozone/lw_back_end.hh	/^    typedef typename Impl::OzoneCPU OzoneCPU;$/;"	t	class:LWBackEnd
OzoneCPU	ozone/lw_lsq.hh	/^    typedef typename Impl::OzoneCPU OzoneCPU;$/;"	t	class:OzoneLWLSQ
OzoneCPU	ozone/ozone_impl.hh	/^    typedef OzoneCPU<OzoneImpl> OzoneCPU;$/;"	t	struct:OzoneImpl
OzoneCPU	ozone/simple_impl.hh	/^    typedef OzoneCPU<SimpleImpl> OzoneCPU;$/;"	t	struct:SimpleImpl
OzoneChecker	ozone/OzoneChecker.py	/^class OzoneChecker(BaseCPU):$/;"	c
OzoneChecker	ozone/checker_builder.cc	/^    OzoneChecker(Params *p)$/;"	f	class:OzoneChecker
OzoneChecker	ozone/checker_builder.cc	/^class OzoneChecker :$/;"	c	file:
OzoneDynInst	ozone/dyn_inst.hh	/^class OzoneDynInst : public BaseDynInst<Impl>$/;"	c
OzoneDynInst	ozone/dyn_inst_impl.hh	/^OzoneDynInst<Impl>::OzoneDynInst(OzoneCPU *cpu)$/;"	f	class:OzoneDynInst
OzoneDynInst	ozone/dyn_inst_impl.hh	/^OzoneDynInst<Impl>::OzoneDynInst(StaticInstPtr _staticInst)$/;"	f	class:OzoneDynInst
OzoneImpl	ozone/ozone_impl.hh	/^struct OzoneImpl {$/;"	s
OzoneLSQ	ozone/lsq_unit.hh	/^class OzoneLSQ {$/;"	c
OzoneLSQ	ozone/lsq_unit_impl.hh	/^OzoneLSQ<Impl>::OzoneLSQ()$/;"	f	class:OzoneLSQ
OzoneLWLSQ	ozone/lw_lsq.hh	/^class OzoneLWLSQ {$/;"	c
OzoneLWLSQ	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::OzoneLWLSQ()$/;"	f	class:OzoneLWLSQ
OzoneTC	ozone/cpu.hh	/^    class OzoneTC : public ThreadContext {$/;"	c	class:OzoneCPU
OzoneTC	ozone/front_end.hh	/^    typedef typename Impl::CPUType::OzoneTC OzoneTC;$/;"	t	class:FrontEnd
OzoneTC	ozone/inorder_back_end.hh	/^    typedef typename FullCPU::OzoneTC OzoneTC;$/;"	t	class:InorderBackEnd
OzoneThreadState	ozone/thread_state.hh	/^    OzoneThreadState(CPUType *_cpu, int _thread_num)$/;"	f	struct:OzoneThreadState
OzoneThreadState	ozone/thread_state.hh	/^    OzoneThreadState(CPUType *_cpu, int _thread_num, Process *_process)$/;"	f	struct:OzoneThreadState
OzoneThreadState	ozone/thread_state.hh	/^struct OzoneThreadState : public ThreadState {$/;"	s
PAGE_SIZE	kvm/base.cc	64;"	d	file:
PC	ozone/front_end.hh	/^    Addr PC;$/;"	m	class:FrontEnd
PC	ozone/null_predictor.hh	/^        Addr PC;$/;"	m	struct:NullPredictor::BPredInfo
PC	ozone/thread_state.hh	/^    Addr PC;$/;"	m	struct:OzoneThreadState
PCEvent	pc_event.hh	/^PCEvent::PCEvent(PCEventQueue *q, const std::string &desc, Addr pc)$/;"	f	class:PCEvent
PCEvent	pc_event.hh	/^class PCEvent$/;"	c
PCEventQueue	pc_event.cc	/^PCEventQueue::PCEventQueue()$/;"	f	class:PCEventQueue
PCEventQueue	pc_event.hh	/^class PCEventQueue$/;"	c
PCMask	base.hh	/^    static const Addr PCMask = ~((Addr)sizeof(TheISA::MachInst) - 1);$/;"	m	class:BaseCPU
PCState	exec_context.hh	/^    typedef TheISA::PCState PCState;$/;"	t	class:ExecContext
PageIt	decode_cache.hh	/^    typedef typename PageMap::iterator PageIt;$/;"	t	class:DecodeCache::AddrMap
PageMap	decode_cache.hh	/^    typedef typename m5::hash_map<Addr, CachePage *> PageMap;$/;"	t	class:DecodeCache::AddrMap
PanicPCEvent	pc_event.cc	/^PanicPCEvent::PanicPCEvent(PCEventQueue *q, const std::string &desc, Addr pc)$/;"	f	class:PanicPCEvent
PanicPCEvent	pc_event.hh	/^class PanicPCEvent : public PCEvent$/;"	c
Params	base.hh	/^    typedef BaseCPUParams Params;$/;"	t	class:BaseCPU
Params	checker/cpu.hh	/^    typedef CheckerCPUParams Params;$/;"	t	class:CheckerCPU
Params	exetrace.hh	/^    typedef ExeTracerParams Params;$/;"	t	class:Trace::ExeTracer
Params	inorder/cpu.hh	/^    typedef ThePipeline::Params Params;$/;"	t	class:InOrderCPU
Params	inorder/pipeline_stage.hh	/^    typedef ThePipeline::Params Params;$/;"	t	class:PipelineStage
Params	inorder/pipeline_traits.5stage.hh	/^    typedef InOrderCPUParams Params;$/;"	t	namespace:ThePipeline
Params	inorder/pipeline_traits.9stage.hh	/^    typedef InOrderCPUParams Params;$/;"	t	namespace:ThePipeline
Params	inorder/pipeline_traits.9stage.smt2.hh	/^    typedef InOrderCPUParams Params;$/;"	t	namespace:ThePipeline
Params	inorder/pipeline_traits.hh	/^    typedef InOrderCPUParams Params;$/;"	t	namespace:ThePipeline
Params	intr_control.hh	/^    typedef IntrControlParams Params;$/;"	t	class:IntrControl
Params	legiontrace.hh	/^    typedef LegionTraceParams Params;$/;"	t	class:Trace::LegionTrace
Params	o3/fu_pool.hh	/^    typedef FUPoolParams Params;$/;"	t	class:FUPool
Params	ozone/back_end.hh	/^    typedef typename Impl::Params Params;$/;"	t	class:BackEnd
Params	ozone/cpu.hh	/^    typedef typename Impl::Params Params;$/;"	t	class:OzoneCPU
Params	ozone/front_end.hh	/^    typedef typename Impl::Params Params;$/;"	t	class:FrontEnd
Params	ozone/inorder_back_end.hh	/^    typedef typename Impl::Params Params;$/;"	t	class:InorderBackEnd
Params	ozone/inst_queue.hh	/^    typedef typename Impl::Params Params;$/;"	t	class:InstQueue
Params	ozone/lsq_unit.hh	/^    typedef typename Impl::Params Params;$/;"	t	class:OzoneLSQ
Params	ozone/lw_back_end.hh	/^    typedef typename Impl::Params Params;$/;"	t	class:LWBackEnd
Params	ozone/lw_lsq.hh	/^    typedef typename Impl::Params Params;$/;"	t	class:OzoneLWLSQ
Params	ozone/null_predictor.hh	/^    typedef typename Impl::Params Params;$/;"	t	class:NullPredictor
Params	ozone/ozone_impl.hh	/^    typedef SimpleParams Params;$/;"	t	struct:OzoneImpl
Params	ozone/simple_impl.hh	/^    typedef SimpleParams Params;$/;"	t	struct:SimpleImpl
Params	pred/bpred_unit.hh	/^      typedef BranchPredictorParams Params;$/;"	t	class:BPredUnit
Params	testers/directedtest/DirectedGenerator.hh	/^    typedef DirectedGeneratorParams Params;$/;"	t	class:DirectedGenerator
Params	testers/directedtest/InvalidateGenerator.hh	/^    typedef InvalidateGeneratorParams Params;$/;"	t	class:InvalidateGenerator
Params	testers/directedtest/RubyDirectedTester.hh	/^    typedef RubyDirectedTesterParams Params;$/;"	t	class:RubyDirectedTester
Params	testers/directedtest/SeriesRequestGenerator.hh	/^    typedef SeriesRequestGeneratorParams Params;$/;"	t	class:SeriesRequestGenerator
Params	testers/memtest/memtest.hh	/^    typedef MemTestParams Params;$/;"	t	class:MemTest
Params	testers/networktest/networktest.hh	/^    typedef NetworkTestParams Params;$/;"	t	class:NetworkTest
Params	testers/rubytest/RubyTester.hh	/^    typedef RubyTesterParams Params;$/;"	t	class:RubyTester
PartialAddrRangeCoverage	minor/lsq.hh	/^        PartialAddrRangeCoverage, \/* Two ranges partly overlap *\/$/;"	e	enum:Minor::LSQ::AddrRangeCoverage
Partitioned	o3/inst_queue.hh	/^        Partitioned,$/;"	e	enum:InstructionQueue::IQPolicy
Partitioned	o3/lsq.hh	/^        Partitioned,$/;"	e	enum:LSQ::LSQPolicy
Partitioned	o3/rob.hh	/^        Partitioned,$/;"	e	enum:ROB::ROBPolicy
PerfKvmCounter	kvm/perfevent.cc	/^PerfKvmCounter::PerfKvmCounter()$/;"	f	class:PerfKvmCounter
PerfKvmCounter	kvm/perfevent.cc	/^PerfKvmCounter::PerfKvmCounter(PerfKvmCounterConfig &config, pid_t tid)$/;"	f	class:PerfKvmCounter
PerfKvmCounter	kvm/perfevent.cc	/^PerfKvmCounter::PerfKvmCounter(PerfKvmCounterConfig &config,$/;"	f	class:PerfKvmCounter
PerfKvmCounter	kvm/perfevent.hh	/^class PerfKvmCounter$/;"	c
PerfKvmCounterConfig	kvm/perfevent.cc	/^PerfKvmCounterConfig::PerfKvmCounterConfig(uint32_t type, uint64_t config)$/;"	f	class:PerfKvmCounterConfig
PerfKvmCounterConfig	kvm/perfevent.hh	/^class PerfKvmCounterConfig$/;"	c
PerfKvmTimer	kvm/timer.cc	/^PerfKvmTimer::PerfKvmTimer(PerfKvmCounter &ctr,$/;"	f	class:PerfKvmTimer
PerfKvmTimer	kvm/timer.hh	/^class PerfKvmTimer : public BaseKvmTimer$/;"	c
PhysFloatReg	o3/regfile.hh	/^    } PhysFloatReg;$/;"	t	class:PhysRegFile	typeref:union:PhysRegFile::__anon9
PhysRegFile	o3/regfile.cc	/^PhysRegFile::PhysRegFile(unsigned _numPhysicalIntRegs,$/;"	f	class:PhysRegFile
PhysRegFile	o3/regfile.hh	/^class PhysRegFile$/;"	c
PhysRegIndex	inorder/inorder_dyn_inst.hh	/^    typedef short int PhysRegIndex;$/;"	t	class:InOrderDynInst
PhysRegIndex	o3/comm.hh	/^typedef short int PhysRegIndex;$/;"	t
Pipeline	minor/pipeline.cc	/^Pipeline::Pipeline(MinorCPU &cpu_, MinorCPUParams &params) :$/;"	f	class:Minor::Pipeline
Pipeline	minor/pipeline.hh	/^class Pipeline : public Ticked$/;"	c	namespace:Minor
PipelineStage	inorder/pipeline_stage.cc	/^PipelineStage::PipelineStage(Params *params, unsigned stage_num)$/;"	f	class:PipelineStage
PipelineStage	inorder/pipeline_stage.hh	/^class PipelineStage$/;"	c
PosixKvmTimer	kvm/timer.cc	/^PosixKvmTimer::PosixKvmTimer(int signo, clockid_t clockID,$/;"	f	class:PosixKvmTimer
PosixKvmTimer	kvm/timer.hh	/^class PosixKvmTimer : public BaseKvmTimer$/;"	c
PossibleLoadViolation	base_dyn_inst.hh	/^        PossibleLoadViolation,$/;"	e	enum:BaseDynInst::Flags
PredTaken	base_dyn_inst.hh	/^        PredTaken,$/;"	e	enum:BaseDynInst::Flags
Predicate	base_dyn_inst.hh	/^        Predicate,$/;"	e	enum:BaseDynInst::Flags
PredictBranch	inorder/resources/branch_predictor.hh	/^        PredictBranch,$/;"	e	enum:BranchPredictor::Command
PredictorHistory	pred/bpred_unit.hh	/^        PredictorHistory(const InstSeqNum &seq_num, Addr instPC,$/;"	f	struct:BPredUnit::PredictorHistory
PredictorHistory	pred/bpred_unit.hh	/^    struct PredictorHistory {$/;"	s	class:BPredUnit
ProfileEvent	base.cc	/^BaseCPU::ProfileEvent::ProfileEvent(BaseCPU *_cpu, Tick _interval)$/;"	f	class:BaseCPU::ProfileEvent
ProfileEvent	base.hh	/^    class ProfileEvent : public Event$/;"	c	class:BaseCPU
ProfileNode	profile.cc	/^ProfileNode::ProfileNode()$/;"	f	class:ProfileNode
ProfileNode	profile.hh	/^class ProfileNode$/;"	c
ProxyThreadContext	thread_context.hh	/^    ProxyThreadContext(TC *actual_tc)$/;"	f	class:ProxyThreadContext
ProxyThreadContext	thread_context.hh	/^class ProxyThreadContext : public ThreadContext$/;"	c
Queue	minor/buffers.hh	/^    Queue(const std::string &name, const std::string &data_name,$/;"	f	class:Minor::Queue
Queue	minor/buffers.hh	/^class Queue : public Named, public Reservable$/;"	c	namespace:Minor
QueuedInst	minor/func_unit.hh	/^    QueuedInst(MinorDynInstPtr inst_ = MinorDynInst::bubble()) :$/;"	f	class:Minor::QueuedInst
QueuedInst	minor/func_unit.hh	/^class QueuedInst$/;"	c	namespace:Minor
QuiescePending	o3/fetch.hh	/^        QuiescePending,$/;"	e	enum:DefaultFetch::ThreadStatus
QuiescePending	ozone/front_end.hh	/^        QuiescePending,$/;"	e	enum:FrontEnd::Status
RAS	pred/bpred_unit.hh	/^    std::vector<ReturnAddrStack> RAS;$/;"	m	class:BPredUnit
RASIncorrect	pred/bpred_unit.hh	/^    Stats::Scalar RASIncorrect;$/;"	m	class:BPredUnit
RASIndex	pred/bpred_unit.hh	/^        unsigned RASIndex;$/;"	m	struct:BPredUnit::PredictorHistory
RASSize	ozone/OzoneCPU.py	/^    RASSize = Param.Unsigned("RAS size")$/;"	v	class:DerivOzoneCPU
RASSize	ozone/SimpleOzoneCPU.py	/^    RASSize = Param.Unsigned("RAS size")$/;"	v	class:SimpleOzoneCPU
RASSize	ozone/simple_params.hh	/^    unsigned RASSize;$/;"	m	class:SimpleParams
RASSize	pred/BranchPredictor.py	/^    RASSize = Param.Unsigned(16, "RAS size")$/;"	v	class:BranchPredictor
RASTarget	pred/bpred_unit.hh	/^        TheISA::PCState RASTarget;$/;"	m	struct:BPredUnit::PredictorHistory
REG_CORE32	kvm/arm_cpu.cc	118;"	d	file:
REG_CORE_IDX	kvm/arm_cpu.cc	86;"	d	file:
REG_CP	kvm/arm_cpu.cc	89;"	d	file:
REG_CP32	kvm/arm_cpu.cc	104;"	d	file:
REG_CP64	kvm/arm_cpu.cc	112;"	d	file:
REG_CRM	kvm/arm_cpu.cc	98;"	d	file:
REG_CRN	kvm/arm_cpu.cc	92;"	d	file:
REG_DEMUX32	kvm/arm_cpu.cc	131;"	d	file:
REG_IS_32BIT	kvm/arm_cpu.cc	62;"	d	file:
REG_IS_64BIT	kvm/arm_cpu.cc	65;"	d	file:
REG_IS_ARM	kvm/arm_cpu.cc	59;"	d	file:
REG_IS_CORE	kvm/arm_cpu.cc	71;"	d	file:
REG_IS_CP	kvm/arm_cpu.cc	68;"	d	file:
REG_IS_DEMUX	kvm/arm_cpu.cc	80;"	d	file:
REG_IS_VFP	kvm/arm_cpu.cc	73;"	d	file:
REG_IS_VFP_CTRL	kvm/arm_cpu.cc	78;"	d	file:
REG_IS_VFP_REG	kvm/arm_cpu.cc	77;"	d	file:
REG_OPC1	kvm/arm_cpu.cc	95;"	d	file:
REG_OPC2	kvm/arm_cpu.cc	101;"	d	file:
REG_VFP32	kvm/arm_cpu.cc	123;"	d	file:
REG_VFP64	kvm/arm_cpu.cc	127;"	d	file:
REG_VFP_REG	kvm/arm_cpu.cc	74;"	d	file:
ROB	o3/commit.hh	/^    typedef typename CPUPol::ROB ROB;$/;"	t	class:DefaultCommit
ROB	o3/cpu_policy.hh	/^    typedef ::ROB<Impl> ROB;$/;"	t	struct:SimpleCPUPolicy
ROB	o3/rename.hh	/^        ROB,$/;"	e	enum:DefaultRename::FullSource
ROB	o3/rob.hh	/^class ROB$/;"	c
ROB	o3/rob_impl.hh	/^ROB<Impl>::ROB(O3CPU *_cpu, DerivO3CPUParams *params)$/;"	f	class:ROB
ROBCount	ozone/lw_back_end.hh	/^    Stats::Vector  ROBCount;   \/\/ cumulative ROB occupancy$/;"	m	class:LWBackEnd
ROBFcount	ozone/lw_back_end.hh	/^    Stats::Scalar ROBFcount;$/;"	m	class:LWBackEnd
ROBFullRate	ozone/lw_back_end.hh	/^    Stats::Formula ROBFullRate;$/;"	m	class:LWBackEnd
ROBOccRate	ozone/lw_back_end.hh	/^    Stats::Formula ROBOccRate;$/;"	m	class:LWBackEnd
ROBPolicy	o3/rob.hh	/^    enum ROBPolicy{$/;"	g	class:ROB
ROBSquashedInsts	ozone/lw_back_end.hh	/^    Stats::Vector ROBSquashedInsts;$/;"	m	class:LWBackEnd
ROBSquashing	o3/commit.hh	/^        ROBSquashing,$/;"	e	enum:DefaultCommit::ThreadStatus
ROBSquashing	o3/rob.hh	/^        ROBSquashing$/;"	e	enum:ROB::Status
ROB_count	ozone/back_end.hh	/^    Stats::Vector  ROB_count;  \/\/ cumulative ROB occupancy$/;"	m	class:BackEnd
ROB_fcount	ozone/back_end.hh	/^    Stats::Scalar ROB_fcount;$/;"	m	class:BackEnd
ROB_full_rate	ozone/back_end.hh	/^    Stats::Formula ROB_full_rate;$/;"	m	class:BackEnd
ROB_occ_dist	ozone/back_end.hh	/^    Stats::VectorDistribution ROB_occ_dist;$/;"	m	class:BackEnd
ROB_occ_rate	ozone/back_end.hh	/^    Stats::Formula ROB_occ_rate;$/;"	m	class:BackEnd
RSkedIt	inorder/resource_sked.hh	/^    RSkedIt()$/;"	f	class:RSkedIt
RSkedIt	inorder/resource_sked.hh	/^class RSkedIt$/;"	c
RSkedPtr	inorder/inorder_dyn_inst.hh	/^    typedef ThePipeline::RSkedPtr RSkedPtr;$/;"	t	class:InOrderDynInst
RSkedPtr	inorder/pipeline_traits.hh	/^    typedef ResourceSked* RSkedPtr;$/;"	t	namespace:ThePipeline
RandomGen	testers/traffic_gen/generators.hh	/^    RandomGen(const std::string& _name, MasterID master_id, Tick _duration,$/;"	f	class:RandomGen
RandomGen	testers/traffic_gen/generators.hh	/^class RandomGen : public BaseGen$/;"	c
RdWrPort	o3/FuncUnitConfig.py	/^class RdWrPort(FUDesc):$/;"	c
ReadPort	o3/FuncUnitConfig.py	/^class ReadPort(FUDesc):$/;"	c
ReadSrcReg	inorder/resources/use_def.hh	/^        ReadSrcReg,$/;"	e	enum:UseDefUnit::Command
ReadyInstMap	ozone/inst_queue.hh	/^    typedef std::map<DynInstPtr, pqCompare> ReadyInstMap;$/;"	t	class:InstQueue
ReadyInstQueue	o3/inst_queue.hh	/^    ReadyInstQueue;$/;"	t	class:InstructionQueue
ReadyInstQueue	ozone/back_end.hh	/^        typedef typename std::priority_queue<DynInstPtr, std::vector<DynInstPtr>, pqCompare> ReadyInstQueue;$/;"	t	class:BackEnd::InstQueue
ReadyInstQueue	ozone/inst_queue.hh	/^    ReadyInstQueue;$/;"	t	class:InstQueue
ReadyInstQueue	ozone/lw_back_end.hh	/^    typedef typename std::priority_queue<DynInstPtr, std::vector<DynInstPtr>, pqCompare> ReadyInstQueue;$/;"	t	class:LWBackEnd
ReadyList	ozone/back_end.hh	/^            ReadyList,$/;"	e	enum:BackEnd::InstQueue::queue
ReadyMapIt	ozone/inst_queue.hh	/^    typedef typename std::map<DynInstPtr, pqCompare>::iterator ReadyMapIt;$/;"	t	class:InstQueue
Reason	minor/pipe_data.hh	/^    enum Reason$/;"	g	class:Minor::BranchData
RecordResult	base_dyn_inst.hh	/^        RecordResult,$/;"	e	enum:BaseDynInst::Flags
RecoverInst	base_dyn_inst.hh	/^        RecoverInst,             \/\/\/ Is a recover instruction$/;"	e	enum:BaseDynInst::Status
RecoverInst	inorder/inorder_dyn_inst.hh	/^        RecoverInst,             \/\/\/ Is a recover instruction$/;"	e	enum:InOrderDynInst::Status
RegClass	reg_class.hh	/^enum RegClass {$/;"	g
RegClassStrings	reg_class.cc	/^const char *RegClassStrings[] = {$/;"	v
RegDepMap	inorder/reg_dep_map.cc	/^RegDepMap::RegDepMap(int size)$/;"	f	class:RegDepMap
RegDepMap	inorder/reg_dep_map.hh	/^class RegDepMap$/;"	c
RegDepMapEntry	inorder/inorder_dyn_inst.hh	/^        RegDepMapEntry,          \/\/\/ Instruction is entered onto the RegDepMap$/;"	e	enum:InOrderDynInst::Status
RegIndex	base_dyn_inst.hh	/^    typedef TheISA::RegIndex RegIndex;$/;"	t	class:BaseDynInst
RegIndex	inorder/cpu.hh	/^    typedef TheISA::RegIndex RegIndex;$/;"	t	class:InOrderCPU
RegIndex	inorder/inorder_dyn_inst.hh	/^    typedef TheISA::RegIndex RegIndex;$/;"	t	class:InOrderDynInst
RegIndex	inorder/reg_dep_map.hh	/^    typedef TheISA::RegIndex RegIndex;$/;"	t	class:RegDepMap
RegIndex	inorder/resources/use_def.hh	/^    typedef TheISA::RegIndex RegIndex;$/;"	t	class:UseDefUnit
RegIndex	minor/scoreboard.hh	/^    typedef TheISA::RegIndex RegIndex;$/;"	t	class:Minor::Scoreboard
RegIndex	o3/dyn_inst.hh	/^    typedef TheISA::RegIndex RegIndex;$/;"	t	class:BaseO3DynInst
RegIndex	o3/rename.hh	/^    typedef TheISA::RegIndex RegIndex;$/;"	t	class:DefaultRename
RegIndex	o3/rename_map.hh	/^    typedef TheISA::RegIndex RegIndex;$/;"	t	class:SimpleRenameMap
RegIndex	o3/rename_map.hh	/^    typedef TheISA::RegIndex RegIndex;$/;"	t	class:UnifiedRenameMap
RegIndex	o3/rob.hh	/^    typedef TheISA::RegIndex RegIndex;$/;"	t	class:ROB
RegIndex	static_inst.hh	/^    typedef TheISA::RegIndex RegIndex;$/;"	t	class:StaticInst
RegIndexVector	kvm/arm_cpu.hh	/^    typedef std::vector<uint64_t> RegIndexVector;$/;"	t	class:ArmKvmCPU
RegManager	inorder/pipeline_traits.5stage.hh	/^       RegManager,$/;"	e	enum:ThePipeline::ResourceList
RegManager	inorder/pipeline_traits.9stage.hh	/^       RegManager,$/;"	e	enum:ThePipeline::ResourceList
RegManager	inorder/pipeline_traits.9stage.smt2.hh	/^       RegManager,$/;"	e	enum:ThePipeline::ResourceList
RegManager	inorder/pipeline_traits.hh	/^       RegManager,$/;"	e	enum:ThePipeline::ResourceId
RemoveAddr	inorder/resources/inst_buffer.hh	/^        RemoveAddr,$/;"	e	enum:InstBuffer::Command
RemoveInst	inorder/resources/inst_buffer.hh	/^        RemoveInst,$/;"	e	enum:InstBuffer::Command
RemoveList	inorder/inorder_dyn_inst.hh	/^        RemoveList,               \/\/\/ Is Instruction on Remove List?$/;"	e	enum:InOrderDynInst::Status
Rename	o3/cpu_policy.hh	/^    typedef DefaultRename<Impl> Rename;$/;"	t	struct:SimpleCPUPolicy
RenameBlocked	ozone/front_end.hh	/^        RenameBlocked,$/;"	e	enum:FrontEnd::Status
RenameHistory	o3/rename.hh	/^        RenameHistory(InstSeqNum _instSeqNum, RegIndex _archReg,$/;"	f	struct:DefaultRename::RenameHistory
RenameHistory	o3/rename.hh	/^    struct RenameHistory {$/;"	s	class:DefaultRename
RenameIdx	o3/cpu.hh	/^        RenameIdx,$/;"	e	enum:FullO3CPU::StageIdx
RenameInfo	o3/rename_map.hh	/^    typedef SimpleRenameMap::RenameInfo RenameInfo;$/;"	t	class:UnifiedRenameMap
RenameInfo	o3/rename_map.hh	/^    typedef std::pair<PhysRegIndex, PhysRegIndex> RenameInfo;$/;"	t	class:SimpleRenameMap
RenameMap	o3/commit.hh	/^    typedef typename CPUPol::RenameMap RenameMap;$/;"	t	class:DefaultCommit
RenameMap	o3/cpu_policy.hh	/^    typedef UnifiedRenameMap RenameMap;$/;"	t	struct:SimpleCPUPolicy
RenameMap	o3/iew.hh	/^    typedef typename CPUPol::RenameMap RenameMap;$/;"	t	class:DefaultIEW
RenameMap	o3/rename.hh	/^    typedef typename CPUPol::RenameMap RenameMap;$/;"	t	class:DefaultRename
RenameStatus	o3/rename.hh	/^    enum RenameStatus {$/;"	g	class:DefaultRename
RenameStruct	o3/commit.hh	/^    typedef typename CPUPol::RenameStruct RenameStruct;$/;"	t	class:DefaultCommit
RenameStruct	o3/cpu.hh	/^    typedef typename CPUPolicy::RenameStruct RenameStruct;$/;"	t	class:FullO3CPU
RenameStruct	o3/cpu_policy.hh	/^    typedef DefaultRenameDefaultIEW<Impl> RenameStruct;$/;"	t	struct:SimpleCPUPolicy
RenameStruct	o3/iew.hh	/^    typedef typename CPUPol::RenameStruct RenameStruct;$/;"	t	class:DefaultIEW
RenameStruct	o3/rename.hh	/^    typedef typename CPUPol::RenameStruct RenameStruct;$/;"	t	class:DefaultRename
RenameTable	ozone/rename_table.hh	/^class RenameTable {$/;"	c
RenameTable	ozone/rename_table_impl.hh	/^RenameTable<Impl>::RenameTable()$/;"	f	class:RenameTable
ReplayList	ozone/back_end.hh	/^            ReplayList$/;"	e	enum:BackEnd::InstQueue::queue
ReportIF	minor/buffers.hh	/^class ReportIF$/;"	c	namespace:Minor
ReportTraitsAdaptor	minor/buffers.hh	/^class ReportTraitsAdaptor$/;"	c	namespace:Minor
ReportTraitsPtrAdaptor	minor/buffers.hh	/^class ReportTraitsPtrAdaptor$/;"	c	namespace:Minor
ReqMade	base_dyn_inst.hh	/^        ReqMade,$/;"	e	enum:BaseDynInst::Flags
RequestIssuing	minor/fetch1.hh	/^            RequestIssuing, \/* Issued to memory, must wait for response *\/$/;"	e	enum:Minor::Fetch1::FetchRequest::FetchRequestState
RequestIssuing	minor/lsq.hh	/^            RequestIssuing, \/* Load\/store issued to memory in the requests$/;"	e	enum:Minor::LSQ::LSQRequest::LSQRequestState
RequestNeedsRetry	minor/lsq.hh	/^            RequestNeedsRetry, \/* Retry needed for load *\/$/;"	e	enum:Minor::LSQ::LSQRequest::LSQRequestState
ResGrad_Pri	inorder/resource_pool.hh	/^        ResGrad_Pri,$/;"	e	enum:ResourcePool::ResPoolEventPri
ResPoolEvent	inorder/resource_pool.9stage.cc	/^ResourcePool::ResPoolEvent::ResPoolEvent(ResourcePool *_resPool)$/;"	f	class:ResourcePool::ResPoolEvent
ResPoolEvent	inorder/resource_pool.cc	/^ResourcePool::ResPoolEvent::ResPoolEvent(ResourcePool *_resPool,$/;"	f	class:ResourcePool::ResPoolEvent
ResPoolEvent	inorder/resource_pool.hh	/^    class ResPoolEvent : public Event$/;"	c	class:ResourcePool
ResPoolEventPri	inorder/resource_pool.hh	/^    enum ResPoolEventPri {$/;"	g	class:ResourcePool
ResPoolEventType	inorder/resource_pool.hh	/^    enum ResPoolEventType {$/;"	g	class:ResourcePool
ResPool_Pri	inorder/resource_pool.hh	/^        ResPool_Pri =  InOrderCPU::InOrderCPU_Pri - 5,$/;"	e	enum:ResourcePool::ResPoolEventPri
ResReq	inorder/resource.hh	/^typedef ResourceRequest ResReq;$/;"	t
ResReqPtr	inorder/resource.hh	/^typedef ResourceRequest* ResReqPtr;$/;"	t
ResSchedule	inorder/pipeline_traits.5stage.hh	/^                                         entryCompare> ResSchedule;$/;"	t	namespace:ThePipeline
ResSchedule	inorder/pipeline_traits.9stage.hh	/^                                         entryCompare> ResSchedule;$/;"	t	namespace:ThePipeline
ResSchedule	inorder/pipeline_traits.9stage.smt2.hh	/^                                         entryCompare> ResSchedule;$/;"	t	namespace:ThePipeline
ResSchedule	inorder/pipeline_traits.hh	/^    typedef ResourceSked ResSchedule;$/;"	t	namespace:ThePipeline
ResSquash_Pri	inorder/resource_pool.hh	/^        ResSquash_Pri$/;"	e	enum:ResourcePool::ResPoolEventPri
Reservable	minor/buffers.hh	/^class Reservable$/;"	c	namespace:Minor
Resource	inorder/resource.cc	/^Resource::Resource(string res_name, int res_id, int res_width,$/;"	f	class:Resource
Resource	inorder/resource.hh	/^class Resource {$/;"	c
ResourceEvent	inorder/resource.cc	/^ResourceEvent::ResourceEvent()$/;"	f	class:ResourceEvent
ResourceEvent	inorder/resource.cc	/^ResourceEvent::ResourceEvent(Resource *res, int slot_idx)$/;"	f	class:ResourceEvent
ResourceEvent	inorder/resource.hh	/^class ResourceEvent : public Event$/;"	c
ResourceId	inorder/pipeline_traits.hh	/^    enum ResourceId {$/;"	g	namespace:ThePipeline
ResourceList	inorder/pipeline_traits.5stage.hh	/^    enum ResourceList {$/;"	g	namespace:ThePipeline
ResourceList	inorder/pipeline_traits.9stage.hh	/^    enum ResourceList {$/;"	g	namespace:ThePipeline
ResourceList	inorder/pipeline_traits.9stage.smt2.hh	/^    enum ResourceList {$/;"	g	namespace:ThePipeline
ResourcePool	inorder/resource_pool.9stage.cc	/^ResourcePool::ResourcePool(InOrderCPU *_cpu, InOrderCPUParams *params)$/;"	f	class:ResourcePool
ResourcePool	inorder/resource_pool.cc	/^ResourcePool::ResourcePool(InOrderCPU *_cpu, ThePipeline::Params *params)$/;"	f	class:ResourcePool
ResourcePool	inorder/resource_pool.hh	/^class ResourcePool {$/;"	c
ResourceRequest	inorder/resource.cc	/^ResourceRequest::ResourceRequest(Resource *_res)$/;"	f	class:ResourceRequest
ResourceRequest	inorder/resource.hh	/^class ResourceRequest$/;"	c
ResourceSked	inorder/resource_sked.cc	/^ResourceSked::ResourceSked()$/;"	f	class:ResourceSked
ResourceSked	inorder/resource_sked.hh	/^class ResourceSked {$/;"	c
Resource_Event_Pri	inorder/resource.hh	/^        Resource_Event_Pri = 45$/;"	e	enum:ResourceEvent::InOrderPriority
Result	base_dyn_inst.hh	/^    union Result {$/;"	u	class:BaseDynInst
Result	checker/cpu.hh	/^    union Result {$/;"	u	class:CheckerCPU
ResultReady	base_dyn_inst.hh	/^        ResultReady,             \/\/\/ Instruction has its result$/;"	e	enum:BaseDynInst::Status
ResultReady	inorder/inorder_dyn_inst.hh	/^        ResultReady,             \/\/\/ Instruction has its result$/;"	e	enum:InOrderDynInst::Status
ResultType	inorder/inorder_dyn_inst.hh	/^    enum ResultType {$/;"	g	class:InOrderDynInst
ReturnAddrStack	pred/ras.hh	/^    ReturnAddrStack() {}$/;"	f	class:ReturnAddrStack
ReturnAddrStack	pred/ras.hh	/^class ReturnAddrStack$/;"	c
RobEntry	base_dyn_inst.hh	/^        RobEntry,                \/\/\/ Instruction is in the ROB$/;"	e	enum:BaseDynInst::Status
RobEntry	inorder/inorder_dyn_inst.hh	/^        RobEntry,                \/\/\/ Instruction is in the ROB$/;"	e	enum:InOrderDynInst::Status
RoundRobin	inorder/first_stage.hh	/^        RoundRobin$/;"	e	enum:FirstStage::FetchPriority
RoundRobin	o3/commit.hh	/^        RoundRobin,$/;"	e	enum:DefaultCommit::CommitPolicy
RoundRobin	o3/fetch.hh	/^        RoundRobin,$/;"	e	enum:DefaultFetch::FetchPriority
RubyDirectedTester	testers/directedtest/RubyDirectedTester.cc	/^RubyDirectedTester::RubyDirectedTester(const Params *p)$/;"	f	class:RubyDirectedTester
RubyDirectedTester	testers/directedtest/RubyDirectedTester.hh	/^class RubyDirectedTester : public MemObject$/;"	c
RubyDirectedTester	testers/directedtest/RubyDirectedTester.py	/^class RubyDirectedTester(MemObject):$/;"	c
RubyTester	testers/rubytest/RubyTester.cc	/^RubyTester::RubyTester(const Params *p)$/;"	f	class:RubyTester
RubyTester	testers/rubytest/RubyTester.hh	/^class RubyTester : public MemObject$/;"	c
RubyTester	testers/rubytest/RubyTester.py	/^class RubyTester(MemObject):$/;"	c
Running	inorder/cpu.hh	/^        Running,$/;"	e	enum:InOrderCPU::Status
Running	inorder/pipeline_stage.hh	/^        Running,$/;"	e	enum:PipelineStage::ThreadStatus
Running	kvm/base.hh	/^        Running,$/;"	e	enum:BaseKvmCPU::Status
Running	o3/commit.hh	/^        Running,$/;"	e	enum:DefaultCommit::ThreadStatus
Running	o3/cpu.hh	/^        Running,$/;"	e	enum:FullO3CPU::Status
Running	o3/decode.hh	/^        Running,$/;"	e	enum:DefaultDecode::ThreadStatus
Running	o3/fetch.hh	/^        Running,$/;"	e	enum:DefaultFetch::ThreadStatus
Running	o3/iew.hh	/^        Running,$/;"	e	enum:DefaultIEW::StageStatus
Running	o3/rename.hh	/^        Running,$/;"	e	enum:DefaultRename::ThreadStatus
Running	o3/rob.hh	/^        Running,$/;"	e	enum:ROB::Status
Running	ozone/back_end.hh	/^        Running,$/;"	e	enum:BackEnd::Status
Running	ozone/cpu.hh	/^        Running,$/;"	e	enum:OzoneCPU::Status
Running	ozone/front_end.hh	/^        Running,$/;"	e	enum:FrontEnd::Status
Running	ozone/inorder_back_end.hh	/^        Running,$/;"	e	enum:InorderBackEnd::Status
Running	ozone/lsq_unit.hh	/^        Running,$/;"	e	enum:OzoneLSQ::Status
Running	ozone/lw_back_end.hh	/^        Running,$/;"	e	enum:LWBackEnd::Status
Running	ozone/lw_lsq.hh	/^        Running,$/;"	e	enum:OzoneLWLSQ::Status
Running	simple/base.hh	/^        Running,$/;"	e	enum:BaseSimpleCPU::Status
RunningService	kvm/base.hh	/^        RunningService,$/;"	e	enum:BaseKvmCPU::Status
RunningServiceCompletion	kvm/base.hh	/^        RunningServiceCompletion,$/;"	e	enum:BaseKvmCPU::Status
SEG_CS_TYPE_ACCESSED	kvm/x86_cpu.cc	62;"	d	file:
SEG_CS_TYPE_READ_ACCESSED	kvm/x86_cpu.cc	64;"	d	file:
SEG_SYS_TYPE_TSS_AVAILABLE	kvm/x86_cpu.cc	57;"	d	file:
SEG_SYS_TYPE_TSS_BUSY	kvm/x86_cpu.cc	59;"	d	file:
SEG_TYPE_BIT_ACCESSED	kvm/x86_cpu.cc	68;"	d	file:
SIMD_Unit	o3/FuncUnitConfig.py	/^class SIMD_Unit(FUDesc):$/;"	c
SMT	inorder/cpu.hh	/^        SMT,$/;"	e	enum:InOrderCPU::ThreadModel
SMT_MAX_THREADS	smt.hh	43;"	d
SNHash	o3/mem_dep_unit.hh	/^struct SNHash {$/;"	s
SQ	o3/rename.hh	/^        SQ,$/;"	e	enum:DefaultRename::FullSource
SQEntries	o3/O3CPU.py	/^    SQEntries = Param.Unsigned(32, "Number of store queue entries")$/;"	v	class:DerivO3CPU
SQEntries	o3/lsq.hh	/^    unsigned SQEntries;$/;"	m	class:LSQ
SQEntries	o3/lsq_unit.hh	/^    unsigned SQEntries;$/;"	m	class:LSQUnit
SQEntries	ozone/OzoneCPU.py	/^    SQEntries = Param.Unsigned("Number of store queue entries")$/;"	v	class:DerivOzoneCPU
SQEntries	ozone/SimpleOzoneCPU.py	/^    SQEntries = Param.Unsigned("Number of store queue entries")$/;"	v	class:SimpleOzoneCPU
SQEntries	ozone/lsq_unit.hh	/^    unsigned SQEntries;$/;"	m	class:OzoneLSQ
SQEntries	ozone/lw_lsq.hh	/^    unsigned SQEntries;$/;"	m	class:OzoneLWLSQ
SQEntries	ozone/simple_params.hh	/^    unsigned SQEntries;$/;"	m	class:SimpleParams
SQEntry	o3/lsq_unit.hh	/^        SQEntry()$/;"	f	struct:LSQUnit::SQEntry
SQEntry	o3/lsq_unit.hh	/^        SQEntry(DynInstPtr &_inst)$/;"	f	struct:LSQUnit::SQEntry
SQEntry	o3/lsq_unit.hh	/^    struct SQEntry {$/;"	s	class:LSQUnit
SQEntry	ozone/lsq_unit.hh	/^        SQEntry()$/;"	f	struct:OzoneLSQ::SQEntry
SQEntry	ozone/lsq_unit.hh	/^        SQEntry(DynInstPtr &_inst)$/;"	f	struct:OzoneLSQ::SQEntry
SQEntry	ozone/lsq_unit.hh	/^    struct SQEntry {$/;"	s	class:OzoneLSQ
SQEntry	ozone/lw_lsq.hh	/^        SQEntry()$/;"	f	struct:OzoneLWLSQ::SQEntry
SQEntry	ozone/lw_lsq.hh	/^        SQEntry(DynInstPtr &_inst)$/;"	f	struct:OzoneLWLSQ::SQEntry
SQEntry	ozone/lw_lsq.hh	/^    struct SQEntry {$/;"	s	class:OzoneLWLSQ
SQHashIt	ozone/lw_lsq.hh	/^    typedef typename m5::hash_map<int, SQIt, HashFn>::iterator SQHashIt;$/;"	t	class:OzoneLWLSQ
SQIndices	ozone/lw_lsq.hh	/^    std::queue<int> SQIndices;$/;"	m	class:OzoneLWLSQ
SQIt	ozone/lw_lsq.hh	/^    typedef typename std::list<SQEntry>::iterator SQIt;$/;"	t	class:OzoneLWLSQ
SQItHash	ozone/lw_lsq.hh	/^    m5::hash_map<int, SQIt, HashFn> SQItHash;$/;"	m	class:OzoneLWLSQ
SSID	o3/store_set.hh	/^    typedef unsigned SSID;$/;"	t	class:StoreSet
SSIT	o3/store_set.hh	/^    std::vector<SSID> SSIT;$/;"	m	class:StoreSet
SSITSize	o3/O3CPU.py	/^    SSITSize = Param.Unsigned(1024, "Store set ID table size")$/;"	v	class:DerivO3CPU
SSITSize	o3/store_set.hh	/^    int SSITSize;$/;"	m	class:StoreSet
SSITSize	ozone/OzoneCPU.py	/^    SSITSize = Param.Unsigned("Store set ID table size")$/;"	v	class:DerivOzoneCPU
SSITSize	ozone/SimpleOzoneCPU.py	/^    SSITSize = Param.Unsigned("Store set ID table size")$/;"	v	class:SimpleOzoneCPU
SSITSize	ozone/simple_params.hh	/^    unsigned SSITSize;$/;"	m	class:SimpleParams
SatCounter	pred/sat_counter.hh	/^    SatCounter()$/;"	f	class:SatCounter
SatCounter	pred/sat_counter.hh	/^    SatCounter(unsigned bits)$/;"	f	class:SatCounter
SatCounter	pred/sat_counter.hh	/^    SatCounter(unsigned bits, uint8_t initial_val)$/;"	f	class:SatCounter
SatCounter	pred/sat_counter.hh	/^class SatCounter$/;"	c
ScheduleEntry	inorder/pipeline_traits.5stage.hh	/^        ScheduleEntry(int stage_num, int _priority, int res_num, int _cmd = 0,$/;"	f	struct:ThePipeline::ScheduleEntry
ScheduleEntry	inorder/pipeline_traits.5stage.hh	/^    struct ScheduleEntry {$/;"	s	namespace:ThePipeline
ScheduleEntry	inorder/pipeline_traits.9stage.hh	/^        ScheduleEntry(int stage_num, int _priority, int res_num, int _cmd = 0,$/;"	f	struct:ThePipeline::ScheduleEntry
ScheduleEntry	inorder/pipeline_traits.9stage.hh	/^    struct ScheduleEntry {$/;"	s	namespace:ThePipeline
ScheduleEntry	inorder/pipeline_traits.9stage.smt2.hh	/^        ScheduleEntry(int stage_num, int _priority, int res_num, int _cmd = 0,$/;"	f	struct:ThePipeline::ScheduleEntry
ScheduleEntry	inorder/pipeline_traits.9stage.smt2.hh	/^    struct ScheduleEntry {$/;"	s	namespace:ThePipeline
ScheduleEntry	inorder/resource_sked.hh	/^    ScheduleEntry(int stage_num, int _priority, int res_num, int _cmd = 0,$/;"	f	class:ScheduleEntry
ScheduleEntry	inorder/resource_sked.hh	/^class ScheduleEntry {$/;"	c
ScheduleOrBypass	inorder/resources/inst_buffer.hh	/^        ScheduleOrBypass$/;"	e	enum:InstBuffer::Command
Scoreboard	minor/scoreboard.hh	/^    Scoreboard(const std::string &name) :$/;"	f	class:Minor::Scoreboard
Scoreboard	minor/scoreboard.hh	/^class Scoreboard : public Named$/;"	c	namespace:Minor
Scoreboard	o3/scoreboard.cc	/^Scoreboard::Scoreboard(const std::string &_my_name,$/;"	f	class:Scoreboard
Scoreboard	o3/scoreboard.hh	/^class Scoreboard$/;"	c
SelfStallingPipeline	minor/buffers.hh	/^    SelfStallingPipeline(const std::string &name,$/;"	f	class:Minor::SelfStallingPipeline
SelfStallingPipeline	minor/buffers.hh	/^class SelfStallingPipeline : public MinorBuffer<ElemType, ReportTraits>$/;"	c	namespace:Minor
SenderState	testers/rubytest/Check.cc	/^typedef RubyTester::SenderState SenderState;$/;"	t	file:
SenderState	testers/rubytest/RubyTester.hh	/^        SenderState(Address addr, int size) : subBlock(addr, size) {}$/;"	f	struct:RubyTester::SenderState
SenderState	testers/rubytest/RubyTester.hh	/^    struct SenderState : public Packet::SenderState$/;"	s	class:RubyTester
SeqNumMapIt	o3/store_set.hh	/^    typedef std::map<InstSeqNum, int, ltseqnum>::iterator SeqNumMapIt;$/;"	t	class:StoreSet
SerializeAfter	base_dyn_inst.hh	/^        SerializeAfter,          \/\/\/ Needs to serialize instructions behind it$/;"	e	enum:BaseDynInst::Status
SerializeAfter	inorder/inorder_dyn_inst.hh	/^        SerializeAfter,          \/\/\/ Needs to serialize instructions behind it$/;"	e	enum:InOrderDynInst::Status
SerializeBefore	base_dyn_inst.hh	/^        SerializeBefore,         \/\/\/ Needs to serialize on$/;"	e	enum:BaseDynInst::Status
SerializeBefore	inorder/inorder_dyn_inst.hh	/^        SerializeBefore,         \/\/\/ Needs to serialize on$/;"	e	enum:InOrderDynInst::Status
SerializeBlocked	ozone/front_end.hh	/^        SerializeBlocked,$/;"	e	enum:FrontEnd::Status
SerializeComplete	ozone/front_end.hh	/^        SerializeComplete,$/;"	e	enum:FrontEnd::Status
SerializeHandled	base_dyn_inst.hh	/^        SerializeHandled,        \/\/\/ Serialization has been handled$/;"	e	enum:BaseDynInst::Status
SerializeHandled	inorder/inorder_dyn_inst.hh	/^        SerializeHandled,        \/\/\/ Serialization has been handled$/;"	e	enum:InOrderDynInst::Status
SerializeStall	o3/rename.hh	/^        SerializeStall$/;"	e	enum:DefaultRename::ThreadStatus
SeriesRequestGenerator	testers/directedtest/RubyDirectedTester.py	/^class SeriesRequestGenerator(DirectedGenerator):$/;"	c
SeriesRequestGenerator	testers/directedtest/SeriesRequestGenerator.cc	/^SeriesRequestGenerator::SeriesRequestGenerator(const Params *p)$/;"	f	class:SeriesRequestGenerator
SeriesRequestGenerator	testers/directedtest/SeriesRequestGenerator.hh	/^class SeriesRequestGenerator : public DirectedGenerator $/;"	c
SharedData	m5legion_interface.h	/^} SharedData;$/;"	t	typeref:struct:__anon8
SimPoint	simple/probes/SimPoint.py	/^class SimPoint(ProbeListenerObject):$/;"	c
SimPoint	simple/probes/simpoint.cc	/^SimPoint::SimPoint(const SimPointParams *p)$/;"	f	class:SimPoint
SimPoint	simple/probes/simpoint.hh	/^class SimPoint : public ProbeListenerObject$/;"	c
SimdAddAccOp	op_class.hh	/^const OpClass SimdAddAccOp = Enums::SimdAddAcc;$/;"	v
SimdAddOp	op_class.hh	/^const OpClass SimdAddOp = Enums::SimdAdd;$/;"	v
SimdAluOp	op_class.hh	/^const OpClass SimdAluOp = Enums::SimdAlu;$/;"	v
SimdCmpOp	op_class.hh	/^const OpClass SimdCmpOp = Enums::SimdCmp;$/;"	v
SimdCvtOp	op_class.hh	/^const OpClass SimdCvtOp = Enums::SimdCvt;$/;"	v
SimdFloatAddOp	op_class.hh	/^const OpClass SimdFloatAddOp = Enums::SimdFloatAdd;$/;"	v
SimdFloatAluOp	op_class.hh	/^const OpClass SimdFloatAluOp = Enums::SimdFloatAlu;$/;"	v
SimdFloatCmpOp	op_class.hh	/^const OpClass SimdFloatCmpOp = Enums::SimdFloatCmp;$/;"	v
SimdFloatCvtOp	op_class.hh	/^const OpClass SimdFloatCvtOp = Enums::SimdFloatCvt;$/;"	v
SimdFloatDivOp	op_class.hh	/^const OpClass SimdFloatDivOp = Enums::SimdFloatDiv;$/;"	v
SimdFloatMiscOp	op_class.hh	/^const OpClass SimdFloatMiscOp = Enums::SimdFloatMisc;$/;"	v
SimdFloatMultAccOp	op_class.hh	/^const OpClass SimdFloatMultAccOp = Enums::SimdFloatMultAcc;$/;"	v
SimdFloatMultOp	op_class.hh	/^const OpClass SimdFloatMultOp = Enums::SimdFloatMult;$/;"	v
SimdFloatSqrtOp	op_class.hh	/^const OpClass SimdFloatSqrtOp = Enums::SimdFloatSqrt;$/;"	v
SimdMiscOp	op_class.hh	/^const OpClass SimdMiscOp = Enums::SimdMisc;$/;"	v
SimdMultAccOp	op_class.hh	/^const OpClass SimdMultAccOp = Enums::SimdMultAcc;$/;"	v
SimdMultOp	op_class.hh	/^const OpClass SimdMultOp = Enums::SimdMult;$/;"	v
SimdShiftAccOp	op_class.hh	/^const OpClass SimdShiftAccOp = Enums::SimdShiftAcc;$/;"	v
SimdShiftOp	op_class.hh	/^const OpClass SimdShiftOp = Enums::SimdShift;$/;"	v
SimdSqrtOp	op_class.hh	/^const OpClass SimdSqrtOp = Enums::SimdSqrt;$/;"	v
SimpleCPUPolicy	o3/cpu_policy.hh	/^struct SimpleCPUPolicy$/;"	s
SimpleFreeList	o3/free_list.hh	/^    SimpleFreeList() {};$/;"	f	class:SimpleFreeList
SimpleFreeList	o3/free_list.hh	/^class SimpleFreeList$/;"	c
SimpleImpl	ozone/simple_impl.hh	/^struct SimpleImpl {$/;"	s
SimpleOzoneCPU	ozone/SimpleOzoneCPU.py	/^class SimpleOzoneCPU(BaseCPU):$/;"	c
SimpleOzoneCPU	ozone/simple_cpu_builder.cc	/^    SimpleOzoneCPU(SimpleParams *p)$/;"	f	class:SimpleOzoneCPU
SimpleOzoneCPU	ozone/simple_cpu_builder.cc	/^class SimpleOzoneCPU : public OzoneCPU<SimpleImpl>$/;"	c	file:
SimpleParams	ozone/simple_params.hh	/^class SimpleParams : public BaseCPU::Params$/;"	c
SimpleRenameMap	o3/rename_map.cc	/^SimpleRenameMap::SimpleRenameMap()$/;"	f	class:SimpleRenameMap
SimpleRenameMap	o3/rename_map.hh	/^class SimpleRenameMap$/;"	c
SimpleThread	simple_thread.cc	/^SimpleThread::SimpleThread(BaseCPU *_cpu, int _thread_num, System *_sys,$/;"	f	class:SimpleThread
SimpleThread	simple_thread.hh	/^class SimpleThread : public ThreadState$/;"	c
SimpleTrace	o3/probe/SimpleTrace.py	/^class SimpleTrace(ProbeListenerObject):$/;"	c
SimpleTrace	o3/probe/simple_trace.hh	/^    SimpleTrace(const SimpleTraceParams *params):$/;"	f	class:SimpleTrace
SimpleTrace	o3/probe/simple_trace.hh	/^class SimpleTrace : public ProbeListenerObject {$/;"	c
Single	inorder/cpu.hh	/^        Single,$/;"	e	enum:InOrderCPU::ThreadModel
SingleDataRequest	minor/lsq.hh	/^        SingleDataRequest(LSQ &port_, MinorDynInstPtr inst_,$/;"	f	class:Minor::LSQ::SingleDataRequest
SingleDataRequest	minor/lsq.hh	/^    class SingleDataRequest : public LSQRequest$/;"	c	class:Minor::LSQ
SingleThread	inorder/first_stage.hh	/^        SingleThread,$/;"	e	enum:FirstStage::FetchPriority
SingleThread	o3/fetch.hh	/^        SingleThread,$/;"	e	enum:DefaultFetch::FetchPriority
SizeStruct	ozone/back_end.hh	/^    struct SizeStruct {$/;"	s	class:BackEnd
SizeStruct	ozone/lw_back_end.hh	/^    struct SizeStruct {$/;"	s	class:LWBackEnd
SkedCacheIt	inorder/cpu.hh	/^    typedef m5::hash_map<SkedID, ThePipeline::RSkedPtr>::iterator SkedCacheIt;$/;"	t	class:InOrderCPU
SkedID	inorder/cpu.hh	/^    typedef uint32_t SkedID;$/;"	t	class:InOrderCPU
SkedIt	inorder/resource_sked.hh	/^    typedef std::list<ScheduleEntry*>::iterator SkedIt;$/;"	t	class:ResourceSked
SpecialDataRequest	minor/lsq.hh	/^        SpecialDataRequest(LSQ &port_, MinorDynInstPtr inst_) :$/;"	f	class:Minor::LSQ::SpecialDataRequest
SpecialDataRequest	minor/lsq.hh	/^    class SpecialDataRequest : public LSQRequest$/;"	c	class:Minor::LSQ
SplitDataRequest	minor/lsq.cc	/^LSQ::SplitDataRequest::SplitDataRequest(LSQ &port_, MinorDynInstPtr inst_,$/;"	f	class:Minor::LSQ::SplitDataRequest
SplitDataRequest	minor/lsq.hh	/^    class SplitDataRequest : public LSQRequest$/;"	c	class:Minor::LSQ
SplitFragmentSenderState	simple/timing.hh	/^        SplitFragmentSenderState(PacketPtr _bigPkt, int _index) :$/;"	f	class:TimingSimpleCPU::SplitFragmentSenderState
SplitFragmentSenderState	simple/timing.hh	/^    class SplitFragmentSenderState : public Packet::SenderState$/;"	c	class:TimingSimpleCPU
SplitMainSenderState	simple/timing.hh	/^    class SplitMainSenderState : public Packet::SenderState$/;"	c	class:TimingSimpleCPU
SquashAfterPending	o3/commit.hh	/^        SquashAfterPending, \/\/< Committing instructions before a squash.$/;"	e	enum:DefaultCommit::ThreadStatus
SquashAll	inorder/resource_pool.hh	/^        SquashAll,$/;"	e	enum:ResourcePool::ResPoolEventType
SquashFromMemStall	inorder/cpu.hh	/^        SquashFromMemStall,$/;"	e	enum:InOrderCPU::CPUEventType
Squashed	base_dyn_inst.hh	/^        Squashed,                \/\/\/ Instruction is squashed$/;"	e	enum:BaseDynInst::Status
Squashed	inorder/inorder_dyn_inst.hh	/^        Squashed,                \/\/\/ Instruction is squashed$/;"	e	enum:InOrderDynInst::Status
SquashedInIQ	base_dyn_inst.hh	/^        SquashedInIQ,            \/\/\/ Instruction is squashed in the IQ$/;"	e	enum:BaseDynInst::Status
SquashedInIQ	inorder/inorder_dyn_inst.hh	/^        SquashedInIQ,            \/\/\/ Instruction is squashed in the IQ$/;"	e	enum:InOrderDynInst::Status
SquashedInLSQ	base_dyn_inst.hh	/^        SquashedInLSQ,           \/\/\/ Instruction is squashed in the LSQ$/;"	e	enum:BaseDynInst::Status
SquashedInLSQ	inorder/inorder_dyn_inst.hh	/^        SquashedInLSQ,           \/\/\/ Instruction is squashed in the LSQ$/;"	e	enum:InOrderDynInst::Status
SquashedInROB	base_dyn_inst.hh	/^        SquashedInROB,           \/\/\/ Instruction is squashed in the ROB$/;"	e	enum:BaseDynInst::Status
SquashedInROB	inorder/inorder_dyn_inst.hh	/^        SquashedInROB,           \/\/\/ Instruction is squashed in the ROB$/;"	e	enum:InOrderDynInst::Status
Squashing	inorder/pipeline_stage.hh	/^        Squashing,$/;"	e	enum:PipelineStage::ThreadStatus
Squashing	o3/decode.hh	/^        Squashing,$/;"	e	enum:DefaultDecode::ThreadStatus
Squashing	o3/fetch.hh	/^        Squashing,$/;"	e	enum:DefaultFetch::ThreadStatus
Squashing	o3/iew.hh	/^        Squashing,$/;"	e	enum:DefaultIEW::StageStatus
Squashing	o3/rename.hh	/^        Squashing,$/;"	e	enum:DefaultRename::ThreadStatus
StageComm	inorder/comm.hh	/^        StageComm()$/;"	f	struct:TimeStruct::StageComm
StageComm	inorder/comm.hh	/^    struct StageComm {$/;"	s	struct:TimeStruct
StageId	minor/pipeline.hh	/^    enum StageId$/;"	g	class:Minor::Pipeline
StageIdx	o3/cpu.hh	/^    enum StageIdx {$/;"	g	class:FullO3CPU
StageList	inorder/resource_sked.hh	/^    typedef std::vector<std::list<ScheduleEntry*> > StageList;$/;"	t	class:ResourceSked
StageQueue	inorder/cpu.hh	/^    typedef TimeBuffer<InterStageStruct> StageQueue;$/;"	t	class:InOrderCPU
StageScheduler	inorder/cpu.hh	/^        StageScheduler(ThePipeline::RSkedPtr _rsked, int stage_num)$/;"	f	class:InOrderCPU::StageScheduler
StageScheduler	inorder/cpu.hh	/^    class StageScheduler {$/;"	c	class:InOrderCPU
StageStatus	inorder/pipeline_stage.hh	/^    enum StageStatus {$/;"	g	class:PipelineStage
StageStatus	o3/iew.hh	/^    enum StageStatus {$/;"	g	class:DefaultIEW
StageWidth	inorder/pipeline_traits.5stage.hh	/^    const unsigned StageWidth = 1;$/;"	m	namespace:ThePipeline
StageWidth	inorder/pipeline_traits.9stage.hh	/^    const unsigned StageWidth = 2;$/;"	m	namespace:ThePipeline
StageWidth	inorder/pipeline_traits.9stage.smt2.hh	/^    const unsigned StageWidth = 1;$/;"	m	namespace:ThePipeline
Stalls	inorder/pipeline_stage.hh	/^    struct Stalls {$/;"	s	class:PipelineStage
Stalls	o3/decode.hh	/^    struct Stalls {$/;"	s	class:DefaultDecode
Stalls	o3/fetch.hh	/^    struct Stalls {$/;"	s	class:DefaultFetch
Stalls	o3/rename.hh	/^    struct Stalls {$/;"	s	class:DefaultRename
StartMultDiv	inorder/resources/mult_div_unit.hh	/^        StartMultDiv,$/;"	e	enum:MultDivUnit::Command
StartSquash	inorder/pipeline_stage.hh	/^        StartSquash,$/;"	e	enum:PipelineStage::ThreadStatus
StartSquash	o3/decode.hh	/^        StartSquash,$/;"	e	enum:DefaultDecode::ThreadStatus
StartSquash	o3/iew.hh	/^        StartSquash,$/;"	e	enum:DefaultIEW::StageStatus
StartSquash	o3/rename.hh	/^        StartSquash,$/;"	e	enum:DefaultRename::ThreadStatus
StaticInst	static_inst.hh	/^    StaticInst(const char *_mnemonic, ExtMachInst _machInst, OpClass __opClass)$/;"	f	class:StaticInst
StaticInst	static_inst.hh	/^class StaticInst : public RefCounted, public StaticInstFlags$/;"	c
StaticInstFlags	StaticInstFlags.py	/^class StaticInstFlags(Enum):$/;"	c
StaticInstPtr	static_inst_fwd.hh	/^typedef RefCountingPtr<StaticInst> StaticInstPtr;$/;"	t
Status	base_dyn_inst.hh	/^    enum Status {$/;"	g	class:BaseDynInst
Status	inorder/cpu.hh	/^    enum Status {$/;"	g	class:InOrderCPU
Status	inorder/inorder_dyn_inst.hh	/^    enum Status {$/;"	g	class:InOrderDynInst
Status	inorder/thread_state.hh	/^    typedef ThreadContext::Status Status;$/;"	t	class:InOrderThreadState
Status	kvm/base.hh	/^    enum Status {$/;"	g	class:BaseKvmCPU
Status	o3/cpu.hh	/^    enum Status {$/;"	g	class:FullO3CPU
Status	o3/iew.hh	/^    enum Status {$/;"	g	class:DefaultIEW
Status	o3/rob.hh	/^    enum Status {$/;"	g	class:ROB
Status	o3/thread_state.hh	/^    typedef ThreadContext::Status Status;$/;"	t	struct:O3ThreadState
Status	ozone/back_end.hh	/^    enum Status {$/;"	g	class:BackEnd
Status	ozone/cpu.hh	/^    enum Status {$/;"	g	class:OzoneCPU
Status	ozone/front_end.hh	/^    enum Status {$/;"	g	class:FrontEnd
Status	ozone/inorder_back_end.hh	/^    enum Status {$/;"	g	class:InorderBackEnd
Status	ozone/lsq_unit.hh	/^    enum Status {$/;"	g	class:OzoneLSQ
Status	ozone/lw_back_end.hh	/^    enum Status {$/;"	g	class:LWBackEnd
Status	ozone/lw_lsq.hh	/^    enum Status {$/;"	g	class:OzoneLWLSQ
Status	ozone/thread_state.hh	/^    typedef typename ThreadContext::Status Status;$/;"	t	struct:OzoneThreadState
Status	simple/base.hh	/^    enum Status {$/;"	g	class:BaseSimpleCPU
Status	simple_thread.hh	/^    typedef ThreadContext::Status Status;$/;"	t	class:SimpleThread
Status	thread_context.hh	/^    enum Status$/;"	g	class:ThreadContext
Status	thread_state.hh	/^    typedef ThreadContext::Status Status;$/;"	t	struct:ThreadState
StoreBuffer	minor/lsq.cc	/^LSQ::StoreBuffer::StoreBuffer(std::string name_, LSQ &lsq_,$/;"	f	class:Minor::LSQ::StoreBuffer
StoreBuffer	minor/lsq.hh	/^    class StoreBuffer : public Named$/;"	c	class:Minor::LSQ
StoreBufferIssuing	minor/lsq.hh	/^            StoreBufferIssuing, \/* Store in store buffer and has been$/;"	e	enum:Minor::LSQ::LSQRequest::LSQRequestState
StoreBufferNeedsRetry	minor/lsq.hh	/^            StoreBufferNeedsRetry, \/* Retry needed for store *\/$/;"	e	enum:Minor::LSQ::LSQRequest::LSQRequestState
StoreCompletionEvent	ozone/lsq_unit.hh	/^    class StoreCompletionEvent : public Event {$/;"	c	class:OzoneLSQ
StoreCompletionEvent	ozone/lsq_unit_impl.hh	/^OzoneLSQ<Impl>::StoreCompletionEvent::StoreCompletionEvent(int store_idx,$/;"	f	class:OzoneLSQ::StoreCompletionEvent
StoreInStoreBuffer	minor/lsq.hh	/^            StoreInStoreBuffer, \/* Store in the store buffer, before issuing$/;"	e	enum:Minor::LSQ::LSQRequest::LSQRequestState
StoreSet	o3/store_set.cc	/^StoreSet::StoreSet(uint64_t clear_period, int _SSIT_size, int _LFST_size)$/;"	f	class:StoreSet
StoreSet	o3/store_set.hh	/^    StoreSet() { };$/;"	f	class:StoreSet
StoreSet	o3/store_set.hh	/^class StoreSet$/;"	c
StoreToStoreBuffer	minor/lsq.hh	/^            StoreToStoreBuffer, \/* Store in transfers on its way to the$/;"	e	enum:Minor::LSQ::LSQRequest::LSQRequestState
SuspendThread	inorder/cpu.hh	/^        SuspendThread,$/;"	e	enum:InOrderCPU::CPUEventType
SuspendThread	minor/pipe_data.hh	/^        SuspendThread,$/;"	e	enum:Minor::BranchData::Reason
Suspended	thread_context.hh	/^        Suspended,$/;"	e	enum:ThreadContext::Status
SwitchOnCacheMiss	inorder/cpu.hh	/^        SwitchOnCacheMiss$/;"	e	enum:InOrderCPU::ThreadModel
SwitchedOut	inorder/cpu.hh	/^        SwitchedOut$/;"	e	enum:InOrderCPU::Status
SwitchedOut	o3/cpu.hh	/^        SwitchedOut$/;"	e	enum:FullO3CPU::Status
SwitchedOut	ozone/cpu.hh	/^        SwitchedOut$/;"	e	enum:OzoneCPU::Status
Syscall	inorder/cpu.hh	/^        Syscall,$/;"	e	enum:InOrderCPU::CPUEventType
Syscall_Pri	inorder/cpu.hh	/^        Syscall_Pri                    = Event::CPU_Tick_Pri + 9,$/;"	e	enum:InOrderCPU::CPUEventPri
TESTER_ALLOCATOR	testers/memtest/memtest.cc	/^int TESTER_ALLOCATOR=0;$/;"	v
TESTER_NETWORK	testers/networktest/networktest.cc	/^int TESTER_NETWORK=0;$/;"	v
TLBCommand	inorder/resources/tlb_unit.hh	/^    enum TLBCommand {$/;"	g	class:TLBUnit
TLBUnit	inorder/resources/tlb_unit.cc	/^TLBUnit::TLBUnit(string res_name, int res_id, int res_width,$/;"	f	class:TLBUnit
TLBUnit	inorder/resources/tlb_unit.hh	/^class TLBUnit : public Resource$/;"	c
TLBUnitEvent	inorder/resources/tlb_unit.cc	/^TLBUnitEvent::TLBUnitEvent()$/;"	f	class:TLBUnitEvent
TLBUnitEvent	inorder/resources/tlb_unit.hh	/^class TLBUnitEvent : public ResourceEvent {$/;"	c
TLBUnitRequest	inorder/resources/tlb_unit.hh	/^    TLBUnitRequest(TLBUnit *res)$/;"	f	class:TLBUnitRequest
TLBUnitRequest	inorder/resources/tlb_unit.hh	/^class TLBUnitRequest : public ResourceRequest {$/;"	c
TheISA	checker/cpu.hh	/^namespace TheISA$/;"	n
TheISA	checker/thread_context.hh	/^namespace TheISA {$/;"	n
TheISA	decode_cache.hh	/^namespace TheISA$/;"	n
TheISA	ozone/cpu.hh	/^namespace TheISA {$/;"	n
TheISA	ozone/simple_params.hh	/^namespace TheISA$/;"	n
TheISA	simple/base.hh	/^namespace TheISA$/;"	n
TheISA	simple_thread.hh	/^namespace TheISA {$/;"	n
TheISA	thread_context.hh	/^namespace TheISA {$/;"	n
TheISA	thread_context.hh	/^namespace TheISA$/;"	n
TheISA	thread_state.hh	/^namespace TheISA {$/;"	n
ThePipeline	inorder/pipeline_traits.5stage.cc	/^namespace ThePipeline {$/;"	n	file:
ThePipeline	inorder/pipeline_traits.5stage.hh	/^namespace ThePipeline {$/;"	n
ThePipeline	inorder/pipeline_traits.9stage.cc	/^namespace ThePipeline {$/;"	n	file:
ThePipeline	inorder/pipeline_traits.9stage.hh	/^namespace ThePipeline {$/;"	n
ThePipeline	inorder/pipeline_traits.9stage.smt2.cc	/^namespace ThePipeline {$/;"	n	file:
ThePipeline	inorder/pipeline_traits.9stage.smt2.hh	/^namespace ThePipeline {$/;"	n
ThePipeline	inorder/pipeline_traits.hh	/^namespace ThePipeline {$/;"	n
Thread	inorder/cpu.hh	/^    typedef InOrderThreadState Thread;$/;"	t	class:InOrderCPU
Thread	o3/commit.hh	/^    typedef O3ThreadState<Impl> Thread;$/;"	t	class:DefaultCommit
Thread	o3/cpu.hh	/^    typedef O3ThreadState<Impl> Thread;$/;"	t	class:FullO3CPU
Thread	ozone/back_end.hh	/^    typedef OzoneThreadState<Impl> Thread;$/;"	t	class:BackEnd
Thread	ozone/lw_back_end.hh	/^    typedef OzoneThreadState<Impl> Thread;$/;"	t	class:LWBackEnd
ThreadContext	thread_context.hh	/^class ThreadContext$/;"	c
ThreadModel	inorder/InOrderCPU.py	/^class ThreadModel(Enum):$/;"	c
ThreadModel	inorder/cpu.hh	/^    enum ThreadModel {$/;"	g	class:InOrderCPU
ThreadState	thread_state.cc	/^ThreadState::ThreadState(BaseCPU *cpu, ThreadID _tid, Process *_process)$/;"	f	class:ThreadState
ThreadState	thread_state.hh	/^struct ThreadState {$/;"	s
ThreadStatus	inorder/pipeline_stage.hh	/^    enum ThreadStatus {$/;"	g	class:PipelineStage
ThreadStatus	o3/commit.hh	/^    enum ThreadStatus {$/;"	g	class:DefaultCommit
ThreadStatus	o3/decode.hh	/^    enum ThreadStatus {$/;"	g	class:DefaultDecode
ThreadStatus	o3/fetch.hh	/^    enum ThreadStatus {$/;"	g	class:DefaultFetch
ThreadStatus	o3/rename.hh	/^    enum ThreadStatus {$/;"	g	class:DefaultRename
ThreadsyncWait	base_dyn_inst.hh	/^        ThreadsyncWait,          \/\/\/ Is a thread synchronization instruction$/;"	e	enum:BaseDynInst::Status
ThreadsyncWait	inorder/inorder_dyn_inst.hh	/^        ThreadsyncWait,          \/\/\/ Is a thread synchronization instruction$/;"	e	enum:InOrderDynInst::Status
Threshold	o3/inst_queue.hh	/^        Threshold$/;"	e	enum:InstructionQueue::IQPolicy
Threshold	o3/lsq.hh	/^        Threshold$/;"	e	enum:LSQ::LSQPolicy
Threshold	o3/rob.hh	/^        Threshold$/;"	e	enum:ROB::ROBPolicy
TickEvent	inorder/cpu.cc	/^InOrderCPU::TickEvent::TickEvent(InOrderCPU *c)$/;"	f	class:InOrderCPU::TickEvent
TickEvent	inorder/cpu.hh	/^    class TickEvent : public Event$/;"	c	class:InOrderCPU
TickEvent	kvm/base.hh	/^        TickEvent(BaseKvmCPU &c)$/;"	f	struct:BaseKvmCPU::TickEvent
TickEvent	kvm/base.hh	/^    struct TickEvent : public Event$/;"	s	class:BaseKvmCPU
TickEvent	o3/cpu.cc	/^FullO3CPU<Impl>::TickEvent::TickEvent(FullO3CPU<Impl> *c)$/;"	f	class:FullO3CPU::TickEvent
TickEvent	o3/cpu.hh	/^    class TickEvent : public Event$/;"	c	class:FullO3CPU
TickEvent	ozone/cpu.hh	/^    struct TickEvent : public Event$/;"	s	class:OzoneCPU
TickEvent	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::TickEvent::TickEvent(OzoneCPU *c, int w)$/;"	f	class:OzoneCPU::TickEvent
TickEvent	simple/atomic.cc	/^AtomicSimpleCPU::TickEvent::TickEvent(AtomicSimpleCPU *c)$/;"	f	class:AtomicSimpleCPU::TickEvent
TickEvent	simple/atomic.hh	/^    struct TickEvent : public Event$/;"	s	class:AtomicSimpleCPU
TickEvent	simple/timing.hh	/^            TickEvent(TimingSimpleCPU *_cpu) : pkt(NULL), cpu(_cpu) {}$/;"	f	struct:TimingSimpleCPU::TimingCPUPort::TickEvent
TickEvent	simple/timing.hh	/^        struct TickEvent : public Event$/;"	s	class:TimingSimpleCPU::TimingCPUPort
TickEvent	testers/memtest/memtest.hh	/^        TickEvent(MemTest *c) : Event(CPU_Tick_Pri), cpu(c) {}$/;"	f	class:MemTest::TickEvent
TickEvent	testers/memtest/memtest.hh	/^    class TickEvent : public Event$/;"	c	class:MemTest
TickEvent	testers/networktest/networktest.hh	/^        TickEvent(NetworkTest *c) : Event(CPU_Tick_Pri), cpu(c) {}$/;"	f	class:NetworkTest::TickEvent
TickEvent	testers/networktest/networktest.hh	/^    class TickEvent : public Event$/;"	c	class:NetworkTest
TimeBufStruct	o3/comm.hh	/^struct TimeBufStruct {$/;"	s
TimeBuffer	timebuf.hh	/^    TimeBuffer()$/;"	f	class:TimeBuffer
TimeBuffer	timebuf.hh	/^    TimeBuffer(int p, int f)$/;"	f	class:TimeBuffer
TimeBuffer	timebuf.hh	/^class TimeBuffer$/;"	c
TimeStruct	inorder/comm.hh	/^    TimeStruct()$/;"	f	struct:TimeStruct
TimeStruct	inorder/comm.hh	/^struct TimeStruct {$/;"	s
TimeStruct	o3/commit.hh	/^    typedef typename CPUPol::TimeStruct TimeStruct;$/;"	t	class:DefaultCommit
TimeStruct	o3/cpu.hh	/^    typedef typename CPUPolicy::TimeStruct TimeStruct;$/;"	t	class:FullO3CPU
TimeStruct	o3/cpu_policy.hh	/^    typedef TimeBufStruct<Impl> TimeStruct;$/;"	t	struct:SimpleCPUPolicy
TimeStruct	o3/decode.hh	/^    typedef typename CPUPol::TimeStruct TimeStruct;$/;"	t	class:DefaultDecode
TimeStruct	o3/fetch.hh	/^    typedef typename CPUPol::TimeStruct TimeStruct;$/;"	t	class:DefaultFetch
TimeStruct	o3/iew.hh	/^    typedef typename CPUPol::TimeStruct TimeStruct;$/;"	t	class:DefaultIEW
TimeStruct	o3/inst_queue.hh	/^    typedef typename Impl::CPUPol::TimeStruct TimeStruct;$/;"	t	class:InstructionQueue
TimeStruct	o3/rename.hh	/^    typedef typename CPUPol::TimeStruct TimeStruct;$/;"	t	class:DefaultRename
TimingCPUPort	simple/timing.hh	/^        TimingCPUPort(const std::string& _name, TimingSimpleCPU* _cpu)$/;"	f	class:TimingSimpleCPU::TimingCPUPort
TimingCPUPort	simple/timing.hh	/^    class TimingCPUPort : public MasterPort$/;"	c	class:TimingSimpleCPU
TimingExpr	TimingExpr.py	/^class TimingExpr(SimObject):$/;"	c
TimingExpr	timing_expr.hh	/^    TimingExpr(const TimingExprParams *params) :$/;"	f	class:TimingExpr
TimingExpr	timing_expr.hh	/^class TimingExpr : public SimObject$/;"	c
TimingExpr0	TimingExpr.py	/^class TimingExpr0(TimingExprLiteral):$/;"	c
TimingExprBin	TimingExpr.py	/^class TimingExprBin(TimingExpr):$/;"	c
TimingExprBin	timing_expr.hh	/^    TimingExprBin(const TimingExprBinParams *params) :$/;"	f	class:TimingExprBin
TimingExprBin	timing_expr.hh	/^class TimingExprBin : public TimingExpr$/;"	c
TimingExprEvalContext	timing_expr.cc	/^TimingExprEvalContext::TimingExprEvalContext(const StaticInstPtr &inst_,$/;"	f	class:TimingExprEvalContext
TimingExprEvalContext	timing_expr.hh	/^class TimingExprEvalContext$/;"	c
TimingExprIf	TimingExpr.py	/^class TimingExprIf(TimingExpr):$/;"	c
TimingExprIf	timing_expr.hh	/^    TimingExprIf(const TimingExprIfParams *params) :$/;"	f	class:TimingExprIf
TimingExprIf	timing_expr.hh	/^class TimingExprIf : public TimingExpr$/;"	c
TimingExprLet	TimingExpr.py	/^class TimingExprLet(TimingExpr):$/;"	c
TimingExprLet	timing_expr.hh	/^    TimingExprLet(const TimingExprLetParams *params) :$/;"	f	class:TimingExprLet
TimingExprLet	timing_expr.hh	/^class TimingExprLet : public TimingExpr$/;"	c
TimingExprLiteral	TimingExpr.py	/^class TimingExprLiteral(TimingExpr):$/;"	c
TimingExprLiteral	timing_expr.hh	/^    TimingExprLiteral(const TimingExprLiteralParams *params) :$/;"	f	class:TimingExprLiteral
TimingExprLiteral	timing_expr.hh	/^class TimingExprLiteral : public TimingExpr$/;"	c
TimingExprOp	TimingExpr.py	/^class TimingExprOp(Enum):$/;"	c
TimingExprReadIntReg	TimingExpr.py	/^class TimingExprReadIntReg(TimingExpr):$/;"	c
TimingExprReadIntReg	timing_expr.hh	/^    TimingExprReadIntReg(const TimingExprReadIntRegParams *params) :$/;"	f	class:TimingExprReadIntReg
TimingExprReadIntReg	timing_expr.hh	/^class TimingExprReadIntReg : public TimingExpr$/;"	c
TimingExprRef	TimingExpr.py	/^class TimingExprRef(TimingExpr):$/;"	c
TimingExprRef	timing_expr.hh	/^    TimingExprRef(const TimingExprRefParams *params) :$/;"	f	class:TimingExprRef
TimingExprRef	timing_expr.hh	/^class TimingExprRef : public TimingExpr$/;"	c
TimingExprSrcReg	TimingExpr.py	/^class TimingExprSrcReg(TimingExpr):$/;"	c
TimingExprSrcReg	timing_expr.hh	/^    TimingExprSrcReg(const TimingExprSrcRegParams *params) :$/;"	f	class:TimingExprSrcReg
TimingExprSrcReg	timing_expr.hh	/^class TimingExprSrcReg : public TimingExpr$/;"	c
TimingExprUn	TimingExpr.py	/^class TimingExprUn(TimingExpr):$/;"	c
TimingExprUn	timing_expr.hh	/^    TimingExprUn(const TimingExprUnParams *params) :$/;"	f	class:TimingExprUn
TimingExprUn	timing_expr.hh	/^class TimingExprUn : public TimingExpr$/;"	c
TimingSimpleCPU	simple/TimingSimpleCPU.py	/^class TimingSimpleCPU(BaseSimpleCPU):$/;"	c
TimingSimpleCPU	simple/timing.cc	/^TimingSimpleCPU::TimingSimpleCPU(TimingSimpleCPUParams *p)$/;"	f	class:TimingSimpleCPU
TimingSimpleCPU	simple/timing.hh	/^class TimingSimpleCPU : public BaseSimpleCPU$/;"	c
ToBeScheduled	ozone/back_end.hh	/^            ToBeScheduled,$/;"	e	enum:BackEnd::InstQueue::queue
TournamentBP	pred/tournament.cc	/^TournamentBP::TournamentBP(const Params *params)$/;"	f	class:TournamentBP
TournamentBP	pred/tournament.hh	/^class TournamentBP : public BPredUnit$/;"	c
Trace	exetrace.cc	/^namespace Trace {$/;"	n	file:
Trace	exetrace.hh	/^namespace Trace {$/;"	n
Trace	inorder/inorder_trace.cc	/^namespace Trace {$/;"	n	file:
Trace	inorder/inorder_trace.hh	/^namespace Trace {$/;"	n
Trace	inteltrace.cc	/^namespace Trace {$/;"	n	file:
Trace	inteltrace.hh	/^namespace Trace {$/;"	n
Trace	legiontrace.cc	/^namespace Trace {$/;"	n	file:
Trace	legiontrace.hh	/^namespace Trace {$/;"	n
Trace	nativetrace.cc	/^namespace Trace {$/;"	n	file:
Trace	nativetrace.hh	/^namespace Trace {$/;"	n
Trace	ozone/cpu.hh	/^namespace Trace {$/;"	n
Trace	simple/base.hh	/^namespace Trace {$/;"	n
Trace	static_inst.hh	/^namespace Trace {$/;"	n
TraceElement	testers/traffic_gen/generators.hh	/^    struct TraceElement {$/;"	s	class:TraceGen
TraceGen	testers/traffic_gen/generators.hh	/^    TraceGen(const std::string& _name, MasterID master_id, Tick _duration,$/;"	f	class:TraceGen
TraceGen	testers/traffic_gen/generators.hh	/^class TraceGen : public BaseGen$/;"	c
TrafficGen	testers/traffic_gen/TrafficGen.py	/^class TrafficGen(MemObject):$/;"	c
TrafficGen	testers/traffic_gen/traffic_gen.cc	/^TrafficGen::TrafficGen(const TrafficGenParams* p)$/;"	f	class:TrafficGen
TrafficGen	testers/traffic_gen/traffic_gen.hh	/^class TrafficGen : public MemObject$/;"	c
TrafficGenPort	testers/traffic_gen/traffic_gen.hh	/^        TrafficGenPort(const std::string& name, TrafficGen& traffic_gen)$/;"	f	class:TrafficGen::TrafficGenPort
TrafficGenPort	testers/traffic_gen/traffic_gen.hh	/^    class TrafficGenPort : public MasterPort$/;"	c	class:TrafficGen
Transition	testers/traffic_gen/traffic_gen.hh	/^    struct Transition {$/;"	s	class:TrafficGen
Translated	minor/fetch1.hh	/^            Translated, \/* Translation complete *\/$/;"	e	enum:Minor::Fetch1::FetchRequest::FetchRequestState
Translated	minor/lsq.hh	/^            Translated, \/* Finished address translation *\/$/;"	e	enum:Minor::LSQ::LSQRequest::LSQRequestState
TranslationCompleted	base_dyn_inst.hh	/^        TranslationCompleted,$/;"	e	enum:BaseDynInst::Flags
TranslationEvent	minor/lsq.hh	/^            TranslationEvent(SplitDataRequest &owner_)$/;"	f	class:Minor::LSQ::SplitDataRequest::TranslationEvent
TranslationEvent	minor/lsq.hh	/^        class TranslationEvent : public Event$/;"	c	class:Minor::LSQ::SplitDataRequest
TranslationStarted	base_dyn_inst.hh	/^        TranslationStarted,$/;"	e	enum:BaseDynInst::Flags
Trap	inorder/cpu.hh	/^        Trap,$/;"	e	enum:InOrderCPU::CPUEventType
TrapEvent	o3/commit.hh	/^    class TrapEvent : public Event {$/;"	c	class:DefaultCommit
TrapEvent	o3/commit_impl.hh	/^DefaultCommit<Impl>::TrapEvent::TrapEvent(DefaultCommit<Impl> *_commit,$/;"	f	class:DefaultCommit::TrapEvent
TrapEvent	ozone/lw_back_end.hh	/^    class TrapEvent : public Event {$/;"	c	class:LWBackEnd
TrapEvent	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::TrapEvent::TrapEvent(LWBackEnd<Impl> *_be)$/;"	f	class:LWBackEnd::TrapEvent
TrapPending	o3/commit.hh	/^        TrapPending,$/;"	e	enum:DefaultCommit::ThreadStatus
TrapPending	o3/fetch.hh	/^        TrapPending,$/;"	e	enum:DefaultFetch::ThreadStatus
TrapPending	ozone/front_end.hh	/^        TrapPending,$/;"	e	enum:FrontEnd::Status
TrapPending	ozone/lw_back_end.hh	/^        TrapPending$/;"	e	enum:LWBackEnd::Status
Unblocking	inorder/pipeline_stage.hh	/^        Unblocking,$/;"	e	enum:PipelineStage::ThreadStatus
Unblocking	o3/decode.hh	/^        Unblocking$/;"	e	enum:DefaultDecode::ThreadStatus
Unblocking	o3/iew.hh	/^        Unblocking$/;"	e	enum:DefaultIEW::StageStatus
Unblocking	o3/rename.hh	/^        Unblocking,$/;"	e	enum:DefaultRename::ThreadStatus
UnifiedFreeList	o3/free_list.cc	/^UnifiedFreeList::UnifiedFreeList(const std::string &_my_name,$/;"	f	class:UnifiedFreeList
UnifiedFreeList	o3/free_list.hh	/^class UnifiedFreeList$/;"	c
UnifiedRenameMap	o3/rename_map.hh	/^    UnifiedRenameMap() {};$/;"	f	class:UnifiedRenameMap
UnifiedRenameMap	o3/rename_map.hh	/^class UnifiedRenameMap$/;"	c
UnmapInfo	o3/rob.hh	/^    typedef std::pair<RegIndex, PhysRegIndex> UnmapInfo;$/;"	t	class:ROB
UnpredictedBranch	minor/pipe_data.hh	/^        UnpredictedBranch,$/;"	e	enum:Minor::BranchData::Reason
UpdateAfterContextSwitch	inorder/resource_pool.hh	/^        UpdateAfterContextSwitch,$/;"	e	enum:ResourcePool::ResPoolEventType
UpdatePCs	inorder/cpu.hh	/^        UpdatePCs,$/;"	e	enum:InOrderCPU::CPUEventType
UpdatePredictor	inorder/resources/branch_predictor.hh	/^        UpdatePredictor$/;"	e	enum:BranchPredictor::Command
UpdateTargetPC	inorder/resources/fetch_seq_unit.hh	/^        UpdateTargetPC$/;"	e	enum:FetchSeqUnit::Command
UseDefRequest	inorder/resources/use_def.hh	/^        UseDefRequest(UseDefUnit *res)$/;"	f	class:UseDefUnit::UseDefRequest
UseDefRequest	inorder/resources/use_def.hh	/^    class UseDefRequest : public ResourceRequest {$/;"	c	class:UseDefUnit
UseDefUnit	inorder/resources/use_def.cc	/^UseDefUnit::UseDefUnit(string res_name, int res_id, int res_width,$/;"	f	class:UseDefUnit
UseDefUnit	inorder/resources/use_def.hh	/^class UseDefUnit : public Resource {$/;"	c
VERSION	m5legion_interface.h	33;"	d
WakeupFetch	minor/pipe_data.hh	/^        WakeupFetch,$/;"	e	enum:Minor::BranchData::Reason
WholeTranslationState	translation.hh	/^    WholeTranslationState(RequestPtr _req, RequestPtr _sreqLow,$/;"	f	class:WholeTranslationState
WholeTranslationState	translation.hh	/^    WholeTranslationState(RequestPtr _req, uint8_t *_data, uint64_t *_res,$/;"	f	class:WholeTranslationState
WholeTranslationState	translation.hh	/^class WholeTranslationState$/;"	c
WriteDestReg	inorder/resources/use_def.hh	/^        WriteDestReg,$/;"	e	enum:UseDefUnit::Command
WritePort	o3/FuncUnitConfig.py	/^class WritePort(FUDesc):$/;"	c
Writeback	ozone/back_end.hh	/^    typedef SizeStruct Writeback;$/;"	t	class:BackEnd
Writeback	ozone/lw_back_end.hh	/^    typedef SizeStruct Writeback;$/;"	t	class:LWBackEnd
WritebackEvent	o3/lsq_unit.hh	/^    class WritebackEvent : public Event {$/;"	c	class:LSQUnit
WritebackEvent	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::WritebackEvent::WritebackEvent(DynInstPtr &_inst, PacketPtr _pkt,$/;"	f	class:LSQUnit::WritebackEvent
WritebackEvent	ozone/lw_lsq.hh	/^    class WritebackEvent : public Event {$/;"	c	class:OzoneLWLSQ
WritebackEvent	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::WritebackEvent::WritebackEvent(DynInstPtr &_inst, PacketPtr _pkt,$/;"	f	class:OzoneLWLSQ::WritebackEvent
X86KvmCPU	kvm/X86KvmCPU.py	/^class X86KvmCPU(BaseKvmCPU):$/;"	c
X86KvmCPU	kvm/x86_cpu.cc	/^X86KvmCPU::X86KvmCPU(X86KvmCPUParams *params)$/;"	f	class:X86KvmCPU
X86KvmCPU	kvm/x86_cpu.hh	/^class X86KvmCPU : public BaseKvmCPU$/;"	c
__BASE_TIMEBUF_HH__	timebuf.hh	33;"	d
__CPU_ACTIVITY_HH__	activity.hh	32;"	d
__CPU_BASE_DYN_INST_HH__	base_dyn_inst.hh	47;"	d
__CPU_BASE_DYN_INST_IMPL_HH__	base_dyn_inst_impl.hh	44;"	d
__CPU_BASE_HH__	base.hh	47;"	d
__CPU_CHECKER_CPU_HH__	checker/cpu.hh	45;"	d
__CPU_CHECKER_CPU_IMPL_HH__	checker/cpu_impl.hh	46;"	d
__CPU_CHECKER_THREAD_CONTEXT_HH__	checker/thread_context.hh	45;"	d
__CPU_CPUEVENT_HH__	cpuevent.hh	32;"	d
__CPU_DECODE_CACHE_HH__	decode_cache.hh	32;"	d
__CPU_DIRECTEDTEST_DIRECTEDGENERATOR_HH__	testers/directedtest/DirectedGenerator.hh	30;"	d
__CPU_DIRECTEDTEST_INVALIDATEGENERATOR_HH__	testers/directedtest/InvalidateGenerator.hh	36;"	d
__CPU_DIRECTEDTEST_RUBYDIRECTEDTESTER_HH__	testers/directedtest/RubyDirectedTester.hh	31;"	d
__CPU_DIRECTEDTEST_SERIESREQUESTGENERATOR_HH__	testers/directedtest/SeriesRequestGenerator.hh	36;"	d
__CPU_DUMMY_CHECKER_HH__	dummy_checker.hh	41;"	d
__CPU_EA_LIST_HH__	ozone/ea_list.hh	33;"	d
__CPU_EXEC_CONTEXT_HH__	exec_context.hh	45;"	d
__CPU_EXETRACE_HH__	exetrace.hh	33;"	d
__CPU_FUNC_UNIT_HH__	func_unit.hh	32;"	d
__CPU_INORDER_AGEN_UNIT_HH__	inorder/resources/agen_unit.hh	33;"	d
__CPU_INORDER_BRANCH_PREDICTOR_HH__	inorder/resources/branch_predictor.hh	33;"	d
__CPU_INORDER_CACHE_UNIT_HH__	inorder/resources/cache_unit.hh	33;"	d
__CPU_INORDER_COMM_HH__	inorder/comm.hh	33;"	d
__CPU_INORDER_CPU_HH__	inorder/cpu.hh	46;"	d
__CPU_INORDER_DECODE_UNIT_HH__	inorder/resources/decode_unit.hh	33;"	d
__CPU_INORDER_DYN_INST_HH__	inorder/inorder_dyn_inst.hh	35;"	d
__CPU_INORDER_EXECUTION_UNIT_HH__	inorder/resources/execution_unit.hh	33;"	d
__CPU_INORDER_FETCH_SEQ_UNIT_HH__	inorder/resources/fetch_seq_unit.hh	33;"	d
__CPU_INORDER_FETCH_UNIT_HH__	inorder/resources/fetch_unit.hh	33;"	d
__CPU_INORDER_FIRST_STAGE_HH__	inorder/first_stage.hh	33;"	d
__CPU_INORDER_GRAD_UNIT_HH__	inorder/resources/graduation_unit.hh	33;"	d
__CPU_INORDER_INORDER_TRACE_HH__	inorder/inorder_trace.hh	33;"	d
__CPU_INORDER_INST_BUFF_UNIT_HH__	inorder/resources/inst_buffer.hh	33;"	d
__CPU_INORDER_MEM_DEP_UNIT_HH__	inorder/resources/mem_dep_unit.hh	33;"	d
__CPU_INORDER_MULT_DIV_UNIT_HH__	inorder/resources/mult_div_unit.hh	33;"	d
__CPU_INORDER_PIPELINE_IMPL_HH__	inorder/pipeline_traits.5stage.hh	33;"	d
__CPU_INORDER_PIPELINE_IMPL_HH__	inorder/pipeline_traits.9stage.hh	33;"	d
__CPU_INORDER_PIPELINE_IMPL_HH__	inorder/pipeline_traits.9stage.smt2.hh	33;"	d
__CPU_INORDER_PIPELINE_IMPL_HH__	inorder/pipeline_traits.hh	33;"	d
__CPU_INORDER_PIPELINE_STAGE_HH__	inorder/pipeline_stage.hh	33;"	d
__CPU_INORDER_RESOURCE_HH__	inorder/resource.hh	33;"	d
__CPU_INORDER_RESOURCE_POOL_HH__	inorder/resource_pool.hh	45;"	d
__CPU_INORDER_RESOURCE_SKED_HH__	inorder/resource_sked.hh	33;"	d
__CPU_INORDER_THREAD_CONTEXT_HH__	inorder/thread_context.hh	46;"	d
__CPU_INORDER_THREAD_STATE_HH__	inorder/thread_state.hh	32;"	d
__CPU_INORDER_TLB_UNIT_HH__	inorder/resources/tlb_unit.hh	33;"	d
__CPU_INORDER_USE_DEF_UNIT_HH__	inorder/resources/use_def.hh	33;"	d
__CPU_INTELTRACE_HH__	inteltrace.hh	33;"	d
__CPU_KVM_ARM_CPU_HH__	kvm/arm_cpu.hh	41;"	d
__CPU_KVM_BASE_HH__	kvm/base.hh	41;"	d
__CPU_KVM_KVMVM_HH__	kvm/vm.hh	41;"	d
__CPU_KVM_PERFEVENT_HH__	kvm/perfevent.hh	41;"	d
__CPU_KVM_TIMER_HH__	kvm/timer.hh	41;"	d
__CPU_KVM_X86_CPU_HH__	kvm/x86_cpu.hh	32;"	d
__CPU_LEGIONTRACE_HH__	legiontrace.hh	33;"	d
__CPU_MEMTEST_MEMTEST_HH__	testers/memtest/memtest.hh	33;"	d
__CPU_MINOR_ACTIVITY_HH__	minor/activity.hh	48;"	d
__CPU_MINOR_BUFFERS_HH__	minor/buffers.hh	47;"	d
__CPU_MINOR_CPU_HH__	minor/cpu.hh	47;"	d
__CPU_MINOR_DECODE_HH__	minor/decode.hh	48;"	d
__CPU_MINOR_DYN_INST_HH__	minor/dyn_inst.hh	49;"	d
__CPU_MINOR_EXECUTE_HH__	minor/execute.hh	48;"	d
__CPU_MINOR_EXEC_CONTEXT_HH__	minor/exec_context.hh	54;"	d
__CPU_MINOR_FETCH1_HH__	minor/fetch1.hh	48;"	d
__CPU_MINOR_FETCH2_HH__	minor/fetch2.hh	48;"	d
__CPU_MINOR_FUNC_UNIT_HH__	minor/func_unit.hh	47;"	d
__CPU_MINOR_NEW_LSQ_HH__	minor/lsq.hh	48;"	d
__CPU_MINOR_PIPELINE_HH__	minor/pipeline.hh	48;"	d
__CPU_MINOR_PIPE_DATA_HH__	minor/pipe_data.hh	53;"	d
__CPU_MINOR_SCOREBOARD_HH__	minor/scoreboard.hh	47;"	d
__CPU_MINOR_STATS_HH__	minor/stats.hh	47;"	d
__CPU_MINOR_TRACE_HH__	minor/trace.hh	51;"	d
__CPU_NATIVETRACE_HH__	nativetrace.hh	32;"	d
__CPU_NETWORKTEST_NETWORKTEST_HH__	testers/networktest/networktest.hh	32;"	d
__CPU_O3_CHECKER_HH__	o3/checker.hh	44;"	d
__CPU_O3_COMMIT_HH__	o3/commit.hh	45;"	d
__CPU_O3_COMMIT_IMPL_HH__	o3/commit_impl.hh	44;"	d
__CPU_O3_COMM_HH__	o3/comm.hh	45;"	d
__CPU_O3_CPU_HH__	o3/cpu.hh	48;"	d
__CPU_O3_CPU_POLICY_HH__	o3/cpu_policy.hh	33;"	d
__CPU_O3_DECODE_HH__	o3/decode.hh	44;"	d
__CPU_O3_DECODE_IMPL_HH__	o3/decode_impl.hh	44;"	d
__CPU_O3_DEP_GRAPH_HH__	o3/dep_graph.hh	44;"	d
__CPU_O3_DERIV_HH__	o3/deriv.hh	32;"	d
__CPU_O3_DYN_INST_HH__	o3/dyn_inst.hh	45;"	d
__CPU_O3_DYN_INST_IMPL_HH__	o3/dyn_inst_impl.hh	44;"	d
__CPU_O3_FETCH_HH__	o3/fetch.hh	45;"	d
__CPU_O3_FETCH_IMPL_HH__	o3/fetch_impl.hh	45;"	d
__CPU_O3_FREE_LIST_HH__	o3/free_list.hh	33;"	d
__CPU_O3_FU_POOL_HH__	o3/fu_pool.hh	44;"	d
__CPU_O3_IEW_HH__	o3/iew.hh	44;"	d
__CPU_O3_IEW_IMPL_IMPL_HH__	o3/iew_impl.hh	45;"	d
__CPU_O3_IMPL_HH__	o3/impl.hh	32;"	d
__CPU_O3_INST_QUEUE_HH__	o3/inst_queue.hh	45;"	d
__CPU_O3_INST_QUEUE_IMPL_HH__	o3/inst_queue_impl.hh	46;"	d
__CPU_O3_LSQ_HH__	o3/lsq.hh	45;"	d
__CPU_O3_LSQ_IMPL_HH__	o3/lsq_impl.hh	45;"	d
__CPU_O3_LSQ_UNIT_HH__	o3/lsq_unit.hh	46;"	d
__CPU_O3_LSQ_UNIT_IMPL_HH__	o3/lsq_unit_impl.hh	47;"	d
__CPU_O3_MEM_DEP_UNIT_HH__	o3/mem_dep_unit.hh	44;"	d
__CPU_O3_MEM_DEP_UNIT_IMPL_HH__	o3/mem_dep_unit_impl.hh	44;"	d
__CPU_O3_PROBE_SIMPLE_TRACE_HH__	o3/probe/simple_trace.hh	47;"	d
__CPU_O3_REGFILE_HH__	o3/regfile.hh	34;"	d
__CPU_O3_RENAME_HH__	o3/rename.hh	45;"	d
__CPU_O3_RENAME_IMPL_HH__	o3/rename_impl.hh	46;"	d
__CPU_O3_RENAME_MAP_HH__	o3/rename_map.hh	38;"	d
__CPU_O3_ROB_HH__	o3/rob.hh	45;"	d
__CPU_O3_ROB_IMPL_HH__	o3/rob_impl.hh	45;"	d
__CPU_O3_SCOREBOARD_HH__	o3/scoreboard.hh	35;"	d
__CPU_O3_STORE_SET_HH__	o3/store_set.hh	32;"	d
__CPU_O3_THREAD_CONTEXT_HH__	o3/thread_context.hh	45;"	d
__CPU_O3_THREAD_CONTEXT_IMPL_HH__	o3/thread_context_impl.hh	46;"	d
__CPU_O3_THREAD_STATE_HH__	o3/thread_state.hh	44;"	d
__CPU_OZONE_BACK_END_HH__	ozone/back_end.hh	32;"	d
__CPU_OZONE_BACK_END_IMPL_HH__	ozone/back_end_impl.hh	32;"	d
__CPU_OZONE_BACK_END_IMPL_HH__	ozone/front_end_impl.hh	31;"	d
__CPU_OZONE_CPU_HH__	ozone/cpu.hh	32;"	d
__CPU_OZONE_CPU_IMPL_HH__	ozone/cpu_impl.hh	34;"	d
__CPU_OZONE_DYN_INST_HH__	ozone/dyn_inst.hh	32;"	d
__CPU_OZONE_DYN_INST_IMPL_HH__	ozone/dyn_inst_impl.hh	32;"	d
__CPU_OZONE_FRONT_END_HH__	ozone/front_end.hh	32;"	d
__CPU_OZONE_INORDER_BACK_END_HH__	ozone/inorder_back_end.hh	32;"	d
__CPU_OZONE_INORDER_BACK_END_IMPL_HH__	ozone/inorder_back_end_impl.hh	32;"	d
__CPU_OZONE_INST_QUEUE_HH__	ozone/inst_queue.hh	32;"	d
__CPU_OZONE_INST_QUEUE_IMPL_HH__	ozone/inst_queue_impl.hh	32;"	d
__CPU_OZONE_LSQ_UNIT_HH__	ozone/lsq_unit.hh	32;"	d
__CPU_OZONE_LSQ_UNIT_IMPL_HH__	ozone/lsq_unit_impl.hh	31;"	d
__CPU_OZONE_LW_BACK_END_HH__	ozone/lw_back_end.hh	32;"	d
__CPU_OZONE_LW_BACK_END_IMPL_HH__	ozone/lw_back_end_impl.hh	31;"	d
__CPU_OZONE_LW_LSQ_HH__	ozone/lw_lsq.hh	32;"	d
__CPU_OZONE_LW_LSQ_IMPL_HH__	ozone/lw_lsq_impl.hh	32;"	d
__CPU_OZONE_NULL_PREDICTOR_HH__	ozone/null_predictor.hh	32;"	d
__CPU_OZONE_OZONE_IMPL_HH__	ozone/ozone_impl.hh	32;"	d
__CPU_OZONE_RENAME_TABLE_HH__	ozone/rename_table.hh	32;"	d
__CPU_OZONE_RENAME_TABLE_IMPL_HH__	ozone/rename_table_impl.hh	31;"	d
__CPU_OZONE_SIMPLE_IMPL_HH__	ozone/simple_impl.hh	32;"	d
__CPU_OZONE_SIMPLE_PARAMS_HH__	ozone/simple_params.hh	32;"	d
__CPU_OZONE_THREAD_STATE_HH__	ozone/thread_state.hh	32;"	d
__CPU_PRED_2BIT_LOCAL_PRED_HH__	pred/2bit_local.hh	45;"	d
__CPU_PRED_BI_MODE_PRED_HH__	pred/bi_mode.hh	36;"	d
__CPU_PRED_BPRED_UNIT_HH__	pred/bpred_unit.hh	48;"	d
__CPU_PRED_BPRED_UNIT_IMPL_HH__	pred/bpred_unit_impl.hh	46;"	d
__CPU_PRED_BTB_HH__	pred/btb.hh	32;"	d
__CPU_PRED_RAS_HH__	pred/ras.hh	32;"	d
__CPU_PRED_SAT_COUNTER_HH__	pred/sat_counter.hh	32;"	d
__CPU_PRED_TOURNAMENT_PRED_HH__	pred/tournament.hh	46;"	d
__CPU_PROFILE_HH__	profile.hh	32;"	d
__CPU_QUIESCE_EVENT_HH__	quiesce_event.hh	32;"	d
__CPU_RUBYTEST_CHECKTABLE_HH__	testers/rubytest/CheckTable.hh	31;"	d
__CPU_RUBYTEST_CHECK_HH__	testers/rubytest/Check.hh	31;"	d
__CPU_RUBYTEST_RUBYTESTER_HH__	testers/rubytest/RubyTester.hh	43;"	d
__CPU_SIMPLE_ATOMIC_HH__	simple/atomic.hh	44;"	d
__CPU_SIMPLE_BASE_HH__	simple/base.hh	47;"	d
__CPU_SIMPLE_PROBES_SIMPOINT_HH__	simple/probes/simpoint.hh	42;"	d
__CPU_SIMPLE_THREAD_HH__	simple_thread.hh	46;"	d
__CPU_SIMPLE_TIMING_HH__	simple/timing.hh	44;"	d
__CPU_STATIC_INST_FWD_HH__	static_inst_fwd.hh	32;"	d
__CPU_STATIC_INST_HH__	static_inst.hh	33;"	d
__CPU_THREAD_CONTEXT_HH__	thread_context.hh	45;"	d
__CPU_THREAD_STATE_HH__	thread_state.hh	32;"	d
__CPU_TIMING_EXPR_HH__	timing_expr.hh	50;"	d
__CPU_TRAFFIC_GEN_GENERATORS_HH__	testers/traffic_gen/generators.hh	51;"	d
__CPU_TRAFFIC_GEN_TRAFFIC_GEN_HH__	testers/traffic_gen/traffic_gen.hh	42;"	d
__CPU_TRANSLATION_HH__	translation.hh	46;"	d
__CPU__OP_CLASS_HH__	op_class.hh	44;"	d
__CPU__REG_CLASS_HH__	reg_class.hh	32;"	d
__INTR_CONTROL_HH__	intr_control.hh	33;"	d
__PC_EVENT_HH__	pc_event.hh	33;"	d
__SMT_HH__	smt.hh	37;"	d
__STD_TYPES_HH__	inst_seq.hh	33;"	d
_cacheLineSize	base.hh	/^    const unsigned int _cacheLineSize;$/;"	m	class:BaseCPU
_cached_ports	BaseCPU.py	/^    _cached_ports = ['icache_port', 'dcache_port']$/;"	v
_contextId	thread_state.hh	/^    int _contextId;$/;"	m	struct:ThreadState
_cpuId	base.hh	/^    int _cpuId;$/;"	m	class:BaseCPU
_dataMasterId	base.hh	/^    MasterID _dataMasterId;$/;"	m	class:BaseCPU
_defaultNumPhysCCRegs	o3/O3CPU.py	/^    _defaultNumPhysCCRegs = 0$/;"	v	class:DerivO3CPU
_destMiscRegIdx	o3/dyn_inst.hh	/^    short _destMiscRegIdx[TheISA::MaxMiscDestRegs];$/;"	m	class:BaseO3DynInst
_destMiscRegVal	o3/dyn_inst.hh	/^    MiscReg _destMiscRegVal[TheISA::MaxMiscDestRegs];$/;"	m	class:BaseO3DynInst
_destRegIdx	base_dyn_inst.hh	/^    PhysRegIndex _destRegIdx[TheISA::MaxInstDestRegs];$/;"	m	class:BaseDynInst
_destRegIdx	inorder/inorder_dyn_inst.hh	/^    PhysRegIndex _destRegIdx[MaxInstDestRegs];$/;"	m	class:InOrderDynInst
_destRegIdx	static_inst.hh	/^    RegIndex _destRegIdx[MaxInstDestRegs];$/;"	m	class:StaticInst
_flatDestRegIdx	base_dyn_inst.hh	/^    TheISA::RegIndex _flatDestRegIdx[TheISA::MaxInstDestRegs];$/;"	m	class:BaseDynInst
_flatDestRegIdx	inorder/inorder_dyn_inst.hh	/^    TheISA::RegIndex _flatDestRegIdx[TheISA::MaxInstDestRegs];$/;"	m	class:InOrderDynInst
_flatSrcRegIdx	inorder/inorder_dyn_inst.hh	/^    TheISA::RegIndex _flatSrcRegIdx[TheISA::MaxInstSrcRegs];$/;"	m	class:InOrderDynInst
_hasKernelIRQChip	kvm/vm.hh	/^    bool _hasKernelIRQChip;$/;"	m	class:KvmVM
_id	timebuf.hh	/^    int _id;$/;"	m	class:TimeBuffer
_instMasterId	base.hh	/^    MasterID _instMasterId;$/;"	m	class:BaseCPU
_interval	base.hh	/^    Tick _interval;$/;"	m	class:CPUProgressEvent
_kvmRun	kvm/base.hh	/^    struct kvm_run *_kvmRun;$/;"	m	class:BaseKvmCPU	typeref:struct:BaseKvmCPU::kvm_run
_masterId	testers/rubytest/RubyTester.hh	/^    MasterID _masterId;$/;"	m	class:RubyTester
_name	activity.hh	/^    std::string _name;$/;"	m	class:ActivityRecorder
_name	o3/free_list.hh	/^    const std::string _name;$/;"	m	class:UnifiedFreeList
_name	o3/mem_dep_unit.hh	/^    std::string _name;$/;"	m	class:MemDepUnit
_name	o3/scoreboard.hh	/^    const std::string _name;$/;"	m	class:Scoreboard
_name	testers/traffic_gen/generators.hh	/^    const std::string _name;$/;"	m	class:BaseGen
_nextStatus	o3/commit.hh	/^    CommitStatus _nextStatus;$/;"	m	class:DefaultCommit
_numCCDestRegs	static_inst.hh	/^    int8_t _numCCDestRegs;$/;"	m	class:StaticInst
_numDestMiscRegs	o3/dyn_inst.hh	/^    uint8_t _numDestMiscRegs;$/;"	m	class:BaseO3DynInst
_numDestRegs	static_inst.hh	/^    int8_t _numDestRegs;$/;"	m	class:StaticInst
_numFPDestRegs	static_inst.hh	/^    int8_t _numFPDestRegs;$/;"	m	class:StaticInst
_numIntDestRegs	static_inst.hh	/^    int8_t _numIntDestRegs;$/;"	m	class:StaticInst
_numSrcRegs	static_inst.hh	/^    int8_t _numSrcRegs;$/;"	m	class:StaticInst
_opClass	static_inst.hh	/^    OpClass _opClass;$/;"	m	class:StaticInst
_pcState	simple_thread.hh	/^    TheISA::PCState _pcState;$/;"	m	class:SimpleThread
_pid	base.hh	/^    uint32_t _pid;$/;"	m	class:BaseCPU
_prevDestRegIdx	base_dyn_inst.hh	/^    PhysRegIndex _prevDestRegIdx[TheISA::MaxInstDestRegs];$/;"	m	class:BaseDynInst
_prevDestRegIdx	inorder/inorder_dyn_inst.hh	/^    PhysRegIndex _prevDestRegIdx[MaxInstDestRegs];$/;"	m	class:InOrderDynInst
_readySrcRegIdx	base_dyn_inst.hh	/^    std::bitset<MaxInstSrcRegs> _readySrcRegIdx;$/;"	m	class:BaseDynInst
_readySrcRegIdx	inorder/inorder_dyn_inst.hh	/^    bool _readySrcRegIdx[MaxInstSrcRegs];$/;"	m	class:InOrderDynInst
_regIndexList	kvm/arm_cpu.hh	/^    mutable RegIndexVector _regIndexList;$/;"	m	class:ArmKvmCPU
_repeatEvent	base.hh	/^    bool _repeatEvent;$/;"	m	class:CPUProgressEvent
_resolution	kvm/timer.hh	/^    mutable Tick _resolution;$/;"	m	class:BaseKvmTimer
_socketId	base.hh	/^    const uint32_t _socketId;$/;"	m	class:BaseCPU
_srcRegIdx	base_dyn_inst.hh	/^    PhysRegIndex _srcRegIdx[TheISA::MaxInstSrcRegs];$/;"	m	class:BaseDynInst
_srcRegIdx	inorder/inorder_dyn_inst.hh	/^    PhysRegIndex _srcRegIdx[MaxInstSrcRegs];$/;"	m	class:InOrderDynInst
_srcRegIdx	static_inst.hh	/^    RegIndex _srcRegIdx[MaxInstSrcRegs];$/;"	m	class:StaticInst
_status	inorder/cpu.hh	/^    Status _status;$/;"	m	class:InOrderCPU
_status	inorder/pipeline_stage.hh	/^    StageStatus _status;$/;"	m	class:PipelineStage
_status	kvm/base.hh	/^    Status _status;$/;"	m	class:BaseKvmCPU
_status	o3/commit.hh	/^    CommitStatus _status;$/;"	m	class:DefaultCommit
_status	o3/cpu.hh	/^    Status _status;$/;"	m	class:FullO3CPU
_status	o3/decode.hh	/^    DecodeStatus _status;$/;"	m	class:DefaultDecode
_status	o3/fetch.hh	/^    FetchStatus _status;$/;"	m	class:DefaultFetch
_status	o3/iew.hh	/^    Status _status;$/;"	m	class:DefaultIEW
_status	o3/rename.hh	/^    RenameStatus _status;$/;"	m	class:DefaultRename
_status	ozone/cpu.hh	/^    Status _status;$/;"	m	class:OzoneCPU
_status	ozone/lsq_unit.hh	/^    Status _status;$/;"	m	class:OzoneLSQ
_status	ozone/lw_lsq.hh	/^    Status _status;$/;"	m	class:OzoneLWLSQ
_status	simple/base.hh	/^    Status _status;$/;"	m	class:BaseSimpleCPU
_status	thread_state.hh	/^    ThreadContext::Status _status;$/;"	m	struct:ThreadState
_switchedOut	base.hh	/^    bool _switchedOut;$/;"	m	class:BaseCPU
_taskId	base.hh	/^    uint32_t _taskId;$/;"	m	class:BaseCPU
_threadId	thread_state.hh	/^    ThreadID _threadId;$/;"	m	struct:ThreadState
_tlb	inorder/resources/cache_unit.hh	/^    TheISA::TLB *_tlb;$/;"	m	class:CacheUnit
_tlb	inorder/resources/tlb_unit.hh	/^    TheISA::TLB *_tlb;$/;"	m	class:TLBUnit
_uncached_master_ports	BaseCPU.py	/^    _uncached_master_ports = []$/;"	v
_uncached_slave_ports	BaseCPU.py	/^    _uncached_slave_ports = []$/;"	v
abstract	BaseCPU.py	/^    abstract = True$/;"	v	class:BaseCPU
abstract	CheckerCPU.py	/^    abstract = True$/;"	v	class:CheckerCPU
abstract	NativeTrace.py	/^    abstract = True$/;"	v	class:NativeTrace
abstract	TimingExpr.py	/^    abstract = True;$/;"	v	class:TimingExpr
abstract	kvm/BaseKvmCPU.py	/^    abstract = True$/;"	v	class:BaseKvmCPU
abstract	simple/BaseSimpleCPU.py	/^    abstract = True$/;"	v	class:BaseSimpleCPU
abstract	testers/directedtest/RubyDirectedTester.py	/^    abstract = True$/;"	v	class:DirectedGenerator
access	timebuf.hh	/^    T *access(int idx)$/;"	f	class:TimeBuffer
accessRetry	testers/memtest/memtest.hh	/^    bool accessRetry;$/;"	m	class:MemTest
accessesInFlight	minor/lsq.hh	/^    bool accessesInFlight() const$/;"	f	class:Minor::LSQ
activate	checker/thread_context.hh	/^    void activate() { actualTC->activate(); }$/;"	f	class:CheckerThreadContext
activate	inorder/thread_context.cc	/^InOrderThreadContext::activate()$/;"	f	class:InOrderThreadContext
activate	o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::activate()$/;"	f	class:O3ThreadContext
activate	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::activate(int delay)$/;"	f	class:OzoneCPU::OzoneTC
activate	simple_thread.cc	/^SimpleThread::activate()$/;"	f	class:SimpleThread
activate	thread_context.hh	/^    void activate() { actualTC->activate(); }$/;"	f	class:ProxyThreadContext
activateAll	inorder/resource_pool.9stage.cc	/^ResourcePool::activateAll(ThreadID tid)$/;"	f	class:ResourcePool
activateContext	base.hh	/^    virtual void activateContext(ThreadID thread_num) {}$/;"	f	class:BaseCPU
activateContext	inorder/cpu.cc	/^InOrderCPU::activateContext(ThreadID tid)$/;"	f	class:InOrderCPU
activateContext	inorder/thread_context.hh	/^    void activateContext()$/;"	f	class:InOrderThreadContext
activateContext	kvm/base.cc	/^BaseKvmCPU::activateContext(ThreadID thread_num)$/;"	f	class:BaseKvmCPU
activateContext	minor/cpu.cc	/^MinorCPU::activateContext(ThreadID thread_id)$/;"	f	class:MinorCPU
activateContext	o3/cpu.cc	/^FullO3CPU<Impl>::activateContext(ThreadID tid)$/;"	f	class:FullO3CPU
activateContext	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::activateContext(int thread_num, int delay)$/;"	f	class:OzoneCPU
activateContext	simple/atomic.cc	/^AtomicSimpleCPU::activateContext(ThreadID thread_num)$/;"	f	class:AtomicSimpleCPU
activateContext	simple/timing.cc	/^TimingSimpleCPU::activateContext(ThreadID thread_num)$/;"	f	class:TimingSimpleCPU
activateNextReadyContext	inorder/cpu.cc	/^InOrderCPU::activateNextReadyContext()$/;"	f	class:InOrderCPU
activateNextReadyThread	inorder/cpu.cc	/^InOrderCPU::activateNextReadyThread()$/;"	f	class:InOrderCPU
activateStage	activity.cc	/^ActivityRecorder::activateStage(const int idx)$/;"	f	class:ActivityRecorder
activateStage	inorder/cpu.hh	/^    void activateStage(const int idx)$/;"	f	class:InOrderCPU
activateStage	o3/cpu.hh	/^    void activateStage(const StageIdx idx)$/;"	f	class:FullO3CPU
activateStage	o3/iew_impl.hh	/^DefaultIEW<Impl>::activateStage()$/;"	f	class:DefaultIEW
activateThread	inorder/cpu.cc	/^InOrderCPU::activateThread(ThreadID tid)$/;"	f	class:InOrderCPU
activateThread	inorder/pipeline_stage.cc	/^PipelineStage::activateThread(ThreadID tid)$/;"	f	class:PipelineStage
activateThread	inorder/resource.hh	/^    virtual void activateThread(ThreadID tid) { }$/;"	f	class:Resource
activateThread	inorder/resource_pool.cc	/^ResourcePool::activateThread(ThreadID tid)$/;"	f	class:ResourcePool
activateThread	inorder/resources/fetch_seq_unit.cc	/^FetchSeqUnit::activateThread(ThreadID tid)$/;"	f	class:FetchSeqUnit
activateThread	o3/cpu.cc	/^FullO3CPU<Impl>::activateThread(ThreadID tid)$/;"	f	class:FullO3CPU
activateThreadInPipeline	inorder/cpu.cc	/^InOrderCPU::activateThreadInPipeline(ThreadID tid)$/;"	f	class:InOrderCPU
active	activity.hh	/^    bool active() { return activityCount; }$/;"	f	class:ActivityRecorder
activeInstPeriod	kvm/base.hh	/^    uint64_t activeInstPeriod;$/;"	m	class:BaseKvmCPU
activeThreadId	inorder/cpu.hh	/^    ThreadID activeThreadId() $/;"	f	class:InOrderCPU
activeThreads	inorder/cpu.hh	/^    std::list<ThreadID> activeThreads;$/;"	m	class:InOrderCPU
activeThreads	inorder/pipeline_stage.hh	/^    std::list<ThreadID> *activeThreads;$/;"	m	class:PipelineStage
activeThreads	o3/commit.hh	/^    std::list<ThreadID> *activeThreads;$/;"	m	class:DefaultCommit
activeThreads	o3/cpu.hh	/^    std::list<ThreadID> activeThreads;$/;"	m	class:FullO3CPU
activeThreads	o3/decode.hh	/^    std::list<ThreadID> *activeThreads;$/;"	m	class:DefaultDecode
activeThreads	o3/fetch.hh	/^    std::list<ThreadID> *activeThreads;$/;"	m	class:DefaultFetch
activeThreads	o3/iew.hh	/^    std::list<ThreadID> *activeThreads;$/;"	m	class:DefaultIEW
activeThreads	o3/inst_queue.hh	/^    std::list<ThreadID> *activeThreads;$/;"	m	class:InstructionQueue
activeThreads	o3/lsq.hh	/^    std::list<ThreadID> *activeThreads;$/;"	m	class:LSQ
activeThreads	o3/rename.hh	/^    std::list<ThreadID> *activeThreads;$/;"	m	class:DefaultRename
activeThreads	o3/rob.hh	/^    std::list<ThreadID> *activeThreads;$/;"	m	class:ROB
activity	activity.cc	/^ActivityRecorder::activity()$/;"	f	class:ActivityRecorder
activity	inorder/InOrderCPU.py	/^    activity = Param.Unsigned(0, "Initial count")$/;"	v	class:InOrderCPU
activity	inorder/cpu.hh	/^    Stats::Formula activity;$/;"	m	class:InOrderCPU
activity	o3/O3CPU.py	/^    activity = Param.Unsigned(0, "Initial count")$/;"	v	class:DerivO3CPU
activityBuffer	activity.hh	/^    TimeBuffer<bool> activityBuffer;$/;"	m	class:ActivityRecorder
activityCount	activity.hh	/^    int activityCount;$/;"	m	class:ActivityRecorder
activityRec	inorder/cpu.hh	/^    ActivityRecorder activityRec;$/;"	m	class:InOrderCPU
activityRec	o3/cpu.hh	/^    ActivityRecorder activityRec;$/;"	m	class:FullO3CPU
activityRecorder	minor/cpu.hh	/^    Minor::MinorActivityRecorder *activityRecorder;$/;"	m	class:MinorCPU
activityRecorder	minor/pipeline.hh	/^    MinorActivityRecorder activityRecorder;$/;"	m	class:Minor::Pipeline
activityThisCycle	inorder/cpu.hh	/^    void activityThisCycle() { activityRec.activity(); }$/;"	f	class:InOrderCPU
activityThisCycle	o3/cpu.hh	/^    void activityThisCycle() { activityRec.activity(); }$/;"	f	class:FullO3CPU
activityThisCycle	o3/iew_impl.hh	/^DefaultIEW<Impl>::activityThisCycle()$/;"	f	class:DefaultIEW
actualTC	checker/thread_context.hh	/^    TC *actualTC;$/;"	m	class:CheckerThreadContext
actualTC	thread_context.hh	/^    TC *actualTC;$/;"	m	class:ProxyThreadContext
addAddr	ozone/ea_list.cc	/^EAList::addAddr(const InstSeqNum &new_sn, const Addr &new_ea)$/;"	f	class:EAList
addCCReg	o3/free_list.hh	/^    void addCCReg(PhysRegIndex freed_reg) { ccList.addReg(freed_reg); }$/;"	f	class:UnifiedFreeList
addCapability	func_unit.cc	/^FuncUnit::addCapability(OpClass cap, unsigned oplat, unsigned issuelat)$/;"	f	class:FuncUnit
addCheck	testers/rubytest/CheckTable.cc	/^CheckTable::addCheck(const Address& address)$/;"	f	class:CheckTable
addCheckerCpu	BaseCPU.py	/^    def addCheckerCpu(self):$/;"	f
addCheckerCpu	minor/MinorCPU.py	/^    def addCheckerCpu(self):$/;"	m	class:MinorCPU
addCheckerCpu	o3/O3CPU.py	/^    def addCheckerCpu(self):$/;"	m	class:DerivO3CPU
addCheckerCpu	simple/BaseSimpleCPU.py	/^    def addCheckerCpu(self):$/;"	m	class:BaseSimpleCPU
addDcacheMiss	ozone/lw_back_end.hh	/^    void addDcacheMiss(DynInstPtr &inst)$/;"	f	class:LWBackEnd
addDependent	ozone/dyn_inst_impl.hh	/^OzoneDynInst<Impl>::addDependent(DynInstPtr &dependent_inst)$/;"	f	class:OzoneDynInst
addFU	o3/fu_pool.cc	/^FUPool::FUIdxQueue::addFU(int fu_idx)$/;"	f	class:FUPool::FUIdxQueue
addFloatReg	o3/free_list.hh	/^    void addFloatReg(PhysRegIndex freed_reg) { floatList.addReg(freed_reg); }$/;"	f	class:UnifiedFreeList
addFreeRegs	ozone/front_end_impl.hh	/^FrontEnd<Impl>::addFreeRegs(int num_freed)$/;"	f	class:FrontEnd
addIfReady	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::addIfReady(DynInstPtr &inst)$/;"	f	class:InstructionQueue
addIfReady	ozone/inst_queue_impl.hh	/^InstQueue<Impl>::addIfReady(DynInstPtr &inst)$/;"	f	class:InstQueue
addInst	inorder/cpu.cc	/^InOrderCPU::addInst(DynInstPtr inst)$/;"	f	class:InOrderCPU
addInst	o3/cpu.cc	/^FullO3CPU<Impl>::addInst(DynInstPtr &inst)$/;"	f	class:FullO3CPU
addIntReg	o3/free_list.hh	/^    void addIntReg(PhysRegIndex freed_reg) { intList.addReg(freed_reg); }$/;"	f	class:UnifiedFreeList
addMemDependent	ozone/dyn_inst.hh	/^    void addMemDependent(DynInstPtr &inst) { memDependents.push_back(inst); }$/;"	f	class:OzoneDynInst
addPrivateSplitL1Caches	BaseCPU.py	/^    def addPrivateSplitL1Caches(self, ic, dc, iwc = None, dwc = None):$/;"	f
addReadyMemInst	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::addReadyMemInst(DynInstPtr &ready_inst)$/;"	f	class:InstructionQueue
addReadyMemInst	ozone/inst_queue_impl.hh	/^InstQueue<Impl>::addReadyMemInst(DynInstPtr &ready_inst)$/;"	f	class:InstQueue
addReg	o3/free_list.hh	/^    void addReg(PhysRegIndex reg) { freeRegs.push(reg); }$/;"	f	class:SimpleFreeList
addReg	o3/free_list.hh	/^UnifiedFreeList::addReg(PhysRegIndex freed_reg)$/;"	f	class:UnifiedFreeList
addSimPointProbe	simple/AtomicSimpleCPU.py	/^    def addSimPointProbe(self, interval):$/;"	m	class:AtomicSimpleCPU
addSrcMemInst	ozone/dyn_inst.hh	/^    void addSrcMemInst(DynInstPtr &inst) { srcMemInsts.push_back(inst); }$/;"	f	class:OzoneDynInst
addToDependents	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::addToDependents(DynInstPtr &new_inst)$/;"	f	class:InstructionQueue
addToIQ	ozone/back_end_impl.hh	/^BackEnd<Impl>::addToIQ(DynInstPtr &inst)$/;"	f	class:BackEnd
addToLSQ	ozone/back_end_impl.hh	/^BackEnd<Impl>::addToLSQ(DynInstPtr &inst)$/;"	f	class:BackEnd
addToLSQ	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::addToLSQ(DynInstPtr &inst)$/;"	f	class:LWBackEnd
addToOrderList	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::addToOrderList(OpClass op_class)$/;"	f	class:InstructionQueue
addToProducers	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::addToProducers(DynInstPtr &new_inst)$/;"	f	class:InstructionQueue
addToRemoveList	inorder/cpu.cc	/^InOrderCPU::addToRemoveList(DynInstPtr inst)$/;"	f	class:InOrderCPU
addToSkedCache	inorder/cpu.hh	/^    void addToSkedCache(DynInstPtr inst, ThePipeline::RSkedPtr inst_sked)$/;"	f	class:InOrderCPU
addTwoLevelCacheHierarchy	BaseCPU.py	/^    def addTwoLevelCacheHierarchy(self, ic, dc, l2c, iwc = None, dwc = None):$/;"	f
addWaitingMemOp	ozone/lw_back_end.hh	/^    void addWaitingMemOp(DynInstPtr &inst)$/;"	f	class:LWBackEnd
addr	inorder/resources/fetch_unit.hh	/^        Addr addr;$/;"	m	struct:FetchUnit::FetchBlock
addr	testers/traffic_gen/generators.hh	/^        Addr addr;$/;"	m	struct:TraceGen::TraceElement
addr	testers/traffic_gen/generators.hh	/^    Addr addr;$/;"	m	class:DramGen
addrBlockOffset	minor/lsq.cc	/^addrBlockOffset(Addr addr, unsigned int block_size)$/;"	f	namespace:Minor
addrList	inorder/resources/cache_unit.hh	/^    std::list<Addr> addrList[ThePipeline::MaxThreads];$/;"	m	class:CacheUnit
addrMap	inorder/resources/cache_unit.hh	/^    m5::hash_map<Addr, InstSeqNum> addrMap[ThePipeline::MaxThreads];$/;"	m	class:CacheUnit
addrMapping	testers/traffic_gen/generators.hh	/^    unsigned int addrMapping;$/;"	m	class:DramGen
addrOffset	testers/traffic_gen/generators.hh	/^    Addr addrOffset;$/;"	m	class:TraceGen
addrStack	pred/ras.hh	/^    std::vector<TheISA::PCState> addrStack;$/;"	m	class:ReturnAddrStack
addr_increment_size	testers/directedtest/RubyDirectedTester.py	/^    addr_increment_size = Param.Int(64, "address increment size")$/;"	v	class:InvalidateGenerator
addr_increment_size	testers/directedtest/RubyDirectedTester.py	/^    addr_increment_size = Param.Int(64, "address increment size")$/;"	v	class:SeriesRequestGenerator
adoptPacketData	minor/pipe_data.cc	/^ForwardLineData::adoptPacketData(Packet *packet)$/;"	f	class:Minor::ForwardLineData
advance	activity.cc	/^ActivityRecorder::advance()$/;"	f	class:ActivityRecorder
advance	minor/buffers.hh	/^    advance()$/;"	f	class:Minor::SelfStallingPipeline
advance	minor/func_unit.cc	/^FUPipeline::advance()$/;"	f	class:Minor::FUPipeline
advance	timebuf.hh	/^    advance()$/;"	f	class:TimeBuffer
advanceInst	simple/timing.cc	/^TimingSimpleCPU::advanceInst(const Fault &fault)$/;"	f	class:TimingSimpleCPU
advancePC	checker/cpu_impl.hh	/^Checker<Impl>::advancePC(const Fault &fault)$/;"	f	class:Checker
advancePC	simple/base.cc	/^BaseSimpleCPU::advancePC(const Fault &fault)$/;"	f	class:BaseSimpleCPU
agens	inorder/resources/agen_unit.hh	/^    Stats::Scalar agens;$/;"	m	class:AGENUnit
allocVCPUID	kvm/vm.cc	/^KvmVM::allocVCPUID()$/;"	f	class:KvmVM
allocateLine	minor/pipe_data.cc	/^ForwardLineData::allocateLine(unsigned int width_)$/;"	f	class:Minor::ForwardLineData
allowEarlyMemIssue	minor/execute.hh	/^    bool allowEarlyMemIssue;$/;"	m	class:Minor::Execute
allow_idling	minor/pipeline.hh	/^    bool allow_idling;$/;"	m	class:Minor::Pipeline
alreadyPushed	minor/buffers.hh	/^    bool alreadyPushed() { return !BubbleTraits::isBubble(*pushWire); }$/;"	f	class:Minor::SelfStallingPipeline
annotateMemoryUnits	o3/fu_pool.cc	/^FUPool::annotateMemoryUnits(Cycles hit_latency)$/;"	f	class:FUPool
apiVersion	kvm/vm.hh	/^    int apiVersion;$/;"	m	class:Kvm
archIsDrained	kvm/base.hh	/^    virtual bool archIsDrained() const { return true; }$/;"	f	class:BaseKvmCPU
archIsDrained	kvm/x86_cpu.cc	/^X86KvmCPU::archIsDrained() const$/;"	f	class:X86KvmCPU
archReg	o3/rename.hh	/^        RegIndex archReg;$/;"	m	struct:DefaultRename::RenameHistory
archRegDepMap	inorder/cpu.hh	/^    RegDepMap archRegDepMap[ThePipeline::MaxThreads];$/;"	m	class:InOrderCPU
arg	TimingExpr.py	/^    arg = Param.TimingExpr("expression")$/;"	v	class:TimingExprUn
arg	timing_expr.hh	/^    TimingExpr *arg;$/;"	m	class:TimingExprUn
arm	kvm/timer.cc	/^PerfKvmTimer::arm(Tick ticks)$/;"	f	class:PerfKvmTimer
arm	kvm/timer.cc	/^PosixKvmTimer::arm(Tick ticks)$/;"	f	class:PosixKvmTimer
asi	m5legion_interface.h	/^    uint8_t asi;$/;"	m	struct:__anon8
asid	base_dyn_inst.hh	/^    short asid;$/;"	m	class:BaseDynInst
asid	inorder/cpu.hh	/^    ThreadID asid[ThePipeline::MaxThreads];$/;"	m	class:InOrderCPU
asid	inorder/inorder_dyn_inst.hh	/^    short asid;$/;"	m	class:InOrderDynInst
asid	inorder/resources/fetch_unit.hh	/^        int asid;$/;"	m	struct:FetchUnit::FetchBlock
atomic	testers/memtest/MemTest.py	/^    atomic = Param.Bool(False, "Execute tester in atomic mode? (or timing)\\n")$/;"	v	class:MemTest
atomic	testers/memtest/memtest.hh	/^    bool atomic;$/;"	m	class:MemTest
attach	kvm/perfevent.cc	/^PerfKvmCounter::attach(PerfKvmCounterConfig &config,$/;"	f	class:PerfKvmCounter
attach	kvm/perfevent.hh	/^    void attach(PerfKvmCounterConfig &config, pid_t tid) {$/;"	f	class:PerfKvmCounter
attach	kvm/perfevent.hh	/^    void attach(PerfKvmCounterConfig &config,$/;"	f	class:PerfKvmCounter
attached	kvm/perfevent.hh	/^    bool attached() const { return fd != -1; }$/;"	f	class:PerfKvmCounter
attr	kvm/perfevent.hh	/^    struct perf_event_attr attr;$/;"	m	class:PerfKvmCounterConfig	typeref:struct:PerfKvmCounterConfig::perf_event_attr
availSlots	inorder/resource.hh	/^    std::vector<int> availSlots;$/;"	m	class:Resource
avg_residency	ozone/back_end.hh	/^        Stats::Formula avg_residency;$/;"	m	class:BackEnd::InstQueue
avoidQuiesceLiveLock	o3/commit.hh	/^    bool avoidQuiesceLiveLock;$/;"	m	class:DefaultCommit
backComSize	o3/O3CPU.py	/^    backComSize = Param.Unsigned(5, "Time buffer size for backwards communication")$/;"	v	class:DerivO3CPU
backEnd	ozone/cpu.hh	/^    BackEnd *backEnd;$/;"	m	class:OzoneCPU
backEnd	ozone/front_end.hh	/^    BackEnd *backEnd;$/;"	m	class:FrontEnd
backEndLatency	ozone/OzoneCPU.py	/^    backEndLatency = Param.Unsigned("Back end latency")$/;"	v	class:DerivOzoneCPU
backEndLatency	ozone/SimpleOzoneCPU.py	/^    backEndLatency = Param.Unsigned("Back end latency")$/;"	v	class:SimpleOzoneCPU
backEndLatency	ozone/simple_params.hh	/^    unsigned backEndLatency;$/;"	m	class:SimpleParams
backEndSquashLatency	ozone/OzoneCPU.py	/^    backEndSquashLatency = Param.Unsigned("Back end squash latency")$/;"	v	class:DerivOzoneCPU
backEndSquashLatency	ozone/SimpleOzoneCPU.py	/^    backEndSquashLatency = Param.Unsigned("Back end squash latency")$/;"	v	class:SimpleOzoneCPU
backEndSquashLatency	ozone/simple_params.hh	/^    unsigned backEndSquashLatency;$/;"	m	class:SimpleParams
backEndWidth	ozone/OzoneCPU.py	/^    backEndWidth = Param.Unsigned("Back end width")$/;"	v	class:DerivOzoneCPU
backEndWidth	ozone/SimpleOzoneCPU.py	/^    backEndWidth = Param.Unsigned("Back end width")$/;"	v	class:SimpleOzoneCPU
backEndWidth	ozone/simple_params.hh	/^    unsigned backEndWidth;$/;"	m	class:SimpleParams
backSked	inorder/inorder_dyn_inst.hh	/^    RSkedPtr backSked;$/;"	m	class:InOrderDynInst
backSked_end	inorder/inorder_dyn_inst.hh	/^    RSkedIt backSked_end;$/;"	m	class:InOrderDynInst
bankBits	testers/traffic_gen/generators.hh	/^    const unsigned int bankBits;$/;"	m	class:DramGen
barrierInst	ozone/front_end.hh	/^    DynInstPtr barrierInst;$/;"	m	class:FrontEnd
base	timebuf.hh	/^    unsigned base;$/;"	m	class:TimeBuffer
baseAddr1	testers/memtest/memtest.hh	/^    Addr baseAddr1;             \/\/ fix this to option$/;"	m	class:MemTest
baseAddr2	testers/memtest/memtest.hh	/^    Addr baseAddr2;             \/\/ fix this to option$/;"	m	class:MemTest
baseCCRegIndex	o3/regfile.hh	/^    unsigned baseCCRegIndex;$/;"	m	class:PhysRegFile
baseCpu	thread_state.hh	/^    BaseCPU *baseCpu;$/;"	m	struct:ThreadState
baseFloatRegIndex	o3/regfile.hh	/^    unsigned baseFloatRegIndex;$/;"	m	class:PhysRegFile
bbMap	simple/probes/simpoint.hh	/^    m5::hash_map<BasicBlockRange, BBInfo> bbMap;$/;"	m	class:SimPoint
bdelayDoneSeqNum	inorder/pipeline_stage.hh	/^    Addr bdelayDoneSeqNum[ThePipeline::MaxThreads];$/;"	m	class:PipelineStage
bdelayDoneSeqNum	o3/decode.hh	/^    Addr bdelayDoneSeqNum[Impl::MaxThreads];$/;"	m	class:DefaultDecode
be	ozone/back_end.hh	/^        BackEnd *be;$/;"	m	class:BackEnd::DCacheCompletionEvent
be	ozone/back_end.hh	/^        BackEnd *be;$/;"	m	class:BackEnd::InstQueue
be	ozone/back_end.hh	/^        BackEnd *be;$/;"	m	class:BackEnd::LdWritebackEvent
be	ozone/inorder_back_end.hh	/^        InorderBackEnd *be;$/;"	m	class:InorderBackEnd::DCacheCompletionEvent
be	ozone/lsq_unit.hh	/^    BackEnd *be;$/;"	m	class:OzoneLSQ
be	ozone/lw_back_end.hh	/^        LWBackEnd<Impl> *be;$/;"	m	class:LWBackEnd::TrapEvent
be	ozone/lw_lsq.hh	/^    BackEnd *be;$/;"	m	class:OzoneLWLSQ
begin	inorder/resource_sked.cc	/^ResourceSked::begin()$/;"	f	class:ResourceSked
bigPkt	simple/timing.hh	/^        PacketPtr bigPkt;$/;"	m	class:TimingSimpleCPU::SplitFragmentSenderState
block	inorder/pipeline_stage.cc	/^PipelineStage::block(ThreadID tid)$/;"	f	class:PipelineStage
block	inorder/resources/fetch_unit.hh	/^        uint8_t *block;$/;"	m	struct:FetchUnit::FetchBlock
block	o3/decode_impl.hh	/^DefaultDecode<Impl>::block(ThreadID tid)$/;"	f	class:DefaultDecode
block	o3/iew_impl.hh	/^DefaultIEW<Impl>::block(ThreadID tid)$/;"	f	class:DefaultIEW
block	o3/rename_impl.hh	/^DefaultRename<Impl>::block(ThreadID tid)$/;"	f	class:DefaultRename
blockAddr	testers/memtest/memtest.hh	/^    Addr blockAddr(Addr addr)$/;"	f	class:MemTest
blockAddrMask	testers/memtest/memtest.hh	/^    Addr blockAddrMask;$/;"	m	class:MemTest
blockBits	testers/traffic_gen/generators.hh	/^    const unsigned int blockBits;$/;"	m	class:DramGen
blockDueToBuffer	inorder/pipeline_stage.cc	/^PipelineStage::blockDueToBuffer(ThreadID tid)$/;"	f	class:PipelineStage
blockMemInst	o3/iew_impl.hh	/^DefaultIEW<Impl>::blockMemInst(DynInstPtr& inst)$/;"	f	class:DefaultIEW
blockMemInst	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::blockMemInst(DynInstPtr &blocked_inst)$/;"	f	class:InstructionQueue
blockSize	testers/memtest/memtest.hh	/^    unsigned blockSize;$/;"	m	class:MemTest
blockSizeBits	testers/networktest/networktest.hh	/^    unsigned blockSizeBits;$/;"	m	class:NetworkTest
blockThisCycle	o3/rename.hh	/^    bool blockThisCycle;$/;"	m	class:DefaultRename
block_offset	testers/networktest/NetworkTest.py	/^    block_offset = Param.Int(6, "block offset in bits")$/;"	v	class:NetworkTest
blocked	minor/decode.hh	/^    bool blocked;$/;"	m	class:Minor::Decode
blocked	minor/fetch1.hh	/^    bool blocked;$/;"	m	class:Minor::Fetch1
blocked	minor/fetch2.hh	/^    bool blocked;$/;"	m	class:Minor::Fetch2
blockedLoadSeqNum	ozone/lw_lsq.hh	/^    InstSeqNum blockedLoadSeqNum;$/;"	m	class:OzoneLWLSQ
blockedMemInsts	o3/inst_queue.hh	/^    std::list<DynInstPtr> blockedMemInsts;$/;"	m	class:InstructionQueue
blocksInUse	inorder/resources/fetch_unit.cc	/^FetchUnit::blocksInUse()$/;"	f	class:FetchUnit
blocksize	testers/traffic_gen/generators.hh	/^        Addr blocksize;$/;"	m	struct:TraceGen::TraceElement
blocksize	testers/traffic_gen/generators.hh	/^    const Addr blocksize;$/;"	m	class:LinearGen
blocksize	testers/traffic_gen/generators.hh	/^    const Addr blocksize;$/;"	m	class:RandomGen
boxOpClass	minor/MinorCPU.py	/^    def boxOpClass(op_class):$/;"	f	function:minorMakeOpClassSet
bpHistory	pred/bpred_unit.hh	/^        void *bpHistory;$/;"	m	struct:BPredUnit::PredictorHistory
branchAddr	o3/comm.hh	/^        uint64_t branchAddr;$/;"	m	struct:TimeBufStruct::decodeComm
branchCount	o3/comm.hh	/^        unsigned branchCount;$/;"	m	struct:TimeBufStruct::decodeComm
branchCount	o3/fetch_impl.hh	/^DefaultFetch<Impl>::branchCount()$/;"	f	class:DefaultFetch
branchInp	minor/fetch2.hh	/^    Latch<BranchData>::Output branchInp;$/;"	m	class:Minor::Fetch2
branchMispredict	o3/comm.hh	/^        bool branchMispredict;$/;"	m	struct:TimeBufStruct::decodeComm
branchMispredict	o3/comm.hh	/^    bool branchMispredict[Impl::MaxThreads];$/;"	m	struct:DefaultIEWDefaultCommit
branchMispredicts	o3/commit.hh	/^    Stats::Scalar branchMispredicts;$/;"	m	class:DefaultCommit
branchMispredicts	o3/iew.hh	/^    Stats::Formula branchMispredicts;$/;"	m	class:DefaultIEW
branchPred	inorder/InOrderCPU.py	/^    branchPred = Param.BranchPredictor(BranchPredictor(numThreads =$/;"	v	class:InOrderCPU
branchPred	inorder/resources/branch_predictor.hh	/^    BPredUnit *branchPred;$/;"	m	class:BranchPredictor
branchPred	minor/MinorCPU.py	/^    branchPred = Param.BranchPredictor(BranchPredictor($/;"	v	class:MinorCPU
branchPred	o3/O3CPU.py	/^    branchPred = Param.BranchPredictor(BranchPredictor(numThreads =$/;"	v	class:DerivO3CPU
branchPred	o3/fetch.hh	/^    BPredUnit *branchPred;$/;"	m	class:DefaultFetch
branchPred	ozone/front_end.hh	/^    BranchPred branchPred;$/;"	m	class:FrontEnd
branchPred	simple/BaseSimpleCPU.py	/^    branchPred = Param.BranchPredictor(NULL, "Branch Predictor")$/;"	v	class:BaseSimpleCPU
branchPred	simple/base.hh	/^    BPredUnit *branchPred;$/;"	m	class:BaseSimpleCPU
branchPredictor	minor/fetch2.hh	/^    BPredUnit &branchPredictor;$/;"	m	class:Minor::Fetch2
branchRate	o3/fetch.hh	/^    Stats::Formula branchRate;$/;"	m	class:DefaultFetch
branchRate	ozone/front_end.hh	/^    Stats::Formula branchRate;$/;"	m	class:FrontEnd
branchTaken	o3/comm.hh	/^        bool branchTaken; \/\/ *F$/;"	m	struct:TimeBufStruct::commitComm
branchTaken	o3/comm.hh	/^        bool branchTaken;$/;"	m	struct:TimeBufStruct::decodeComm
branchTaken	o3/comm.hh	/^    bool branchTaken[Impl::MaxThreads];$/;"	m	struct:DefaultIEWDefaultCommit
branchTarget	base_dyn_inst.hh	/^    TheISA::PCState branchTarget() const$/;"	f	class:BaseDynInst
branchTarget	inorder/inorder_dyn_inst.hh	/^    TheISA::PCState branchTarget() const$/;"	f	class:InOrderDynInst
branchTarget	static_inst.cc	/^StaticInst::branchTarget(ThreadContext *tc) const$/;"	f	class:StaticInst
branchTarget	static_inst.cc	/^StaticInst::branchTarget(const TheISA::PCState &pc) const$/;"	f	class:StaticInst
btb	pred/btb.hh	/^    std::vector<BTBEntry> btb;$/;"	m	class:DefaultBTB
btbUpdate	pred/2bit_local.cc	/^LocalBP::btbUpdate(Addr branch_addr, void * &bp_history)$/;"	f	class:LocalBP
btbUpdate	pred/bi_mode.cc	/^BiModeBP::btbUpdate(Addr branchAddr, void * &bpHistory)$/;"	f	class:BiModeBP
btbUpdate	pred/tournament.cc	/^TournamentBP::btbUpdate(Addr branch_addr, void * &bp_history)$/;"	f	class:TournamentBP
bubble	minor/buffers.hh	/^    static ElemType bubble() { assert(false); }$/;"	f	class:Minor::NoBubbleTraits
bubble	minor/buffers.hh	/^    static ElemType bubble() { return ElemType::bubble(); }$/;"	f	class:Minor::BubbleTraitsAdaptor
bubble	minor/buffers.hh	/^    static PtrType bubble() { return ElemType::bubble(); }$/;"	f	class:Minor::BubbleTraitsPtrAdaptor
bubble	minor/dyn_inst.hh	/^    static MinorDynInstPtr bubble() { return bubbleInst; }$/;"	f	class:Minor::MinorDynInst
bubble	minor/func_unit.hh	/^    static QueuedInst bubble()$/;"	f	class:Minor::QueuedInst
bubble	minor/pipe_data.hh	/^    static BranchData bubble() { return BranchData(); }$/;"	f	class:Minor::BranchData
bubble	minor/pipe_data.hh	/^    static ForwardLineData bubble() { return ForwardLineData(); }$/;"	f	class:Minor::ForwardLineData
bubbleFill	minor/pipe_data.cc	/^ForwardInstData::bubbleFill()$/;"	f	class:Minor::ForwardInstData
bubbleFlag	minor/pipe_data.hh	/^    bool bubbleFlag;$/;"	m	class:Minor::ForwardLineData
bubbleInst	minor/dyn_inst.cc	/^MinorDynInstPtr MinorDynInst::bubbleInst = NULL;$/;"	m	class:Minor::MinorDynInst	file:
bubbleInst	minor/dyn_inst.hh	/^    static MinorDynInstPtr bubbleInst;$/;"	m	class:Minor::MinorDynInst
buffer	minor/buffers.hh	/^    Buffer buffer;$/;"	m	class:Minor::Latch
buffer	timebuf.hh	/^        TimeBuffer<T> *buffer;$/;"	m	class:TimeBuffer::wire
buildDataPacket	inorder/resources/cache_unit.cc	/^CacheUnit::buildDataPacket(CacheRequest *cache_req)$/;"	f	class:CacheUnit
buildInst	o3/fetch_impl.hh	/^DefaultFetch<Impl>::buildInst(ThreadID tid, StaticInstPtr staticInst,$/;"	f	class:DefaultFetch
buildPacket	simple/timing.cc	/^TimingSimpleCPU::buildPacket(PacketPtr &pkt, RequestPtr req, bool read)$/;"	f	class:TimingSimpleCPU
buildSplitPacket	simple/timing.cc	/^TimingSimpleCPU::buildSplitPacket(PacketPtr &pkt1, PacketPtr &pkt2,$/;"	f	class:TimingSimpleCPU
cacheBlkMask	inorder/resources/cache_unit.hh	/^    int cacheBlkMask;$/;"	m	class:CacheUnit
cacheBlkMask	ozone/front_end.hh	/^    Addr cacheBlkMask;$/;"	m	class:FrontEnd
cacheBlkPC	ozone/front_end.hh	/^    Addr cacheBlkPC;$/;"	m	class:FrontEnd
cacheBlkSize	inorder/resources/cache_unit.hh	/^    int cacheBlkSize;$/;"	m	class:CacheUnit
cacheBlkSize	o3/fetch.hh	/^    unsigned int cacheBlkSize;$/;"	m	class:DefaultFetch
cacheBlkSize	ozone/front_end.hh	/^    unsigned cacheBlkSize;$/;"	m	class:FrontEnd
cacheBlkValid	ozone/front_end.hh	/^    bool cacheBlkValid;$/;"	m	class:FrontEnd
cacheBlockAlign	inorder/resources/cache_unit.hh	/^    Addr cacheBlockAlign(Addr addr)$/;"	f	class:CacheUnit
cacheBlockAlignPC	inorder/resources/fetch_unit.hh	/^    Addr cacheBlockAlignPC(Addr addr)$/;"	f	class:FetchUnit
cacheBlockMask	minor/lsq.hh	/^    Addr cacheBlockMask;$/;"	m	class:Minor::LSQ
cacheBlockMask	o3/lsq_unit.hh	/^    Addr cacheBlockMask;$/;"	m	class:LSQUnit
cacheBlockMask	simple/atomic.hh	/^        Addr cacheBlockMask;$/;"	m	class:AtomicSimpleCPU::AtomicCPUDPort
cacheBlockMask	simple/timing.hh	/^        Addr cacheBlockMask;$/;"	m	class:TimingSimpleCPU::DcachePort
cacheBlocked	o3/fetch.hh	/^    bool cacheBlocked;$/;"	m	class:DefaultFetch
cacheBlocked	o3/lsq_unit.hh	/^        bool cacheBlocked;$/;"	m	class:LSQUnit::LSQSenderState
cacheBlocked	ozone/front_end.hh	/^    bool cacheBlocked;$/;"	m	class:FrontEnd
cacheCompletionEvent	ozone/back_end.hh	/^    DCacheCompletionEvent cacheCompletionEvent;$/;"	m	class:BackEnd
cacheCompletionEvent	ozone/inorder_back_end.hh	/^    DCacheCompletionEvent cacheCompletionEvent;$/;"	m	class:InorderBackEnd
cacheData	ozone/front_end.hh	/^    uint8_t *cacheData;$/;"	m	class:FrontEnd
cacheLineSize	base.hh	/^    inline unsigned int cacheLineSize() const { return _cacheLineSize; }$/;"	f	class:BaseCPU
cachePort	inorder/resources/cache_unit.hh	/^    MasterPort *cachePort;$/;"	m	class:CacheUnit
cachePort	testers/memtest/memtest.hh	/^    CpuPort cachePort;$/;"	m	class:MemTest
cachePort	testers/networktest/networktest.hh	/^    CpuPort cachePort;$/;"	m	class:NetworkTest
cachePortBlocked	inorder/resources/cache_unit.hh	/^    bool cachePortBlocked;$/;"	m	class:CacheUnit
cachePorts	inorder/InOrderCPU.py	/^    cachePorts = Param.Unsigned(2, "Cache Ports")$/;"	v	class:InOrderCPU
cachePorts	o3/O3CPU.py	/^    cachePorts = Param.Unsigned(200, "Cache Ports")$/;"	v	class:DerivO3CPU
cachePorts	o3/lsq_unit.hh	/^    int cachePorts;$/;"	m	class:LSQUnit
cachePorts	ozone/lsq_unit.hh	/^    int cachePorts;$/;"	m	class:OzoneLSQ
cachePorts	ozone/lw_lsq.hh	/^    int cachePorts;$/;"	m	class:OzoneLWLSQ
cachePorts	ozone/simple_params.hh	/^    unsigned cachePorts;$/;"	m	class:SimpleParams
cacheReq	inorder/resources/cache_unit.hh	/^    CacheRequest *cacheReq;$/;"	m	class:CacheReqPacket
cacheUnblocked	o3/iew_impl.hh	/^DefaultIEW<Impl>::cacheUnblocked()$/;"	f	class:DefaultIEW
cacheUnblocked	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::cacheUnblocked()$/;"	f	class:InstructionQueue
cacheUnit	inorder/cpu.hh	/^        CacheUnit *cacheUnit;$/;"	m	class:InOrderCPU::CachePort
cachedDisassembly	static_inst.hh	/^    mutable std::string *cachedDisassembly;$/;"	m	class:StaticInst
cachedMsrIntersection	kvm/x86_cpu.hh	/^    mutable Kvm::MSRIndexVector cachedMsrIntersection;$/;"	m	class:X86KvmCPU
calcEA	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::calcEA()$/;"	f	class:InOrderDynInst
calcEA	o3/dyn_inst.hh	/^    Fault calcEA()$/;"	f	class:BaseO3DynInst
calcFreeIQEntries	o3/rename_impl.hh	/^DefaultRename<Impl>::calcFreeIQEntries(ThreadID tid)$/;"	f	class:DefaultRename
calcFreeLQEntries	o3/rename_impl.hh	/^DefaultRename<Impl>::calcFreeLQEntries(ThreadID tid)$/;"	f	class:DefaultRename
calcFreeROBEntries	o3/rename_impl.hh	/^DefaultRename<Impl>::calcFreeROBEntries(ThreadID tid)$/;"	f	class:DefaultRename
calcFreeSQEntries	o3/rename_impl.hh	/^DefaultRename<Impl>::calcFreeSQEntries(ThreadID tid)$/;"	f	class:DefaultRename
calcIndex	o3/store_set.hh	/^    inline int calcIndex(Addr PC)$/;"	f	class:StoreSet
calcLocHistIdx	pred/tournament.cc	/^TournamentBP::calcLocHistIdx(Addr &branch_addr)$/;"	f	class:TournamentBP
calcResolution	kvm/timer.cc	/^PerfKvmTimer::calcResolution()$/;"	f	class:PerfKvmTimer
calcResolution	kvm/timer.cc	/^PosixKvmTimer::calcResolution()$/;"	f	class:PosixKvmTimer
calcSSID	o3/store_set.hh	/^    inline SSID calcSSID(Addr PC)$/;"	f	class:StoreSet
calculateVectorIndex	timebuf.hh	/^    inline int calculateVectorIndex(int idx) const$/;"	f	class:TimeBuffer
canCommit	o3/rob_impl.hh	/^ROB<Impl>::canCommit()$/;"	f	class:ROB
canEarlyIssue	minor/dyn_inst.hh	/^    bool canEarlyIssue;$/;"	m	class:Minor::MinorDynInst
canForward	inorder/reg_dep_map.cc	/^RegDepMap::canForward(uint8_t reg_type, unsigned reg_idx, DynInstPtr inst)$/;"	f	class:RegDepMap
canForwardDataToLoad	minor/lsq.cc	/^LSQ::StoreBuffer::canForwardDataToLoad(LSQRequestPtr request,$/;"	f	class:Minor::LSQ::StoreBuffer
canHandleInterrupts	o3/commit.hh	/^    bool canHandleInterrupts;$/;"	m	class:DefaultCommit
canInsert	minor/func_unit.cc	/^FUPipeline::canInsert() const$/;"	f	class:Minor::FUPipeline
canInsert	minor/lsq.cc	/^LSQ::StoreBuffer::canInsert() const$/;"	f	class:Minor::LSQ::StoreBuffer
canInstIssue	minor/scoreboard.cc	/^Scoreboard::canInstIssue(MinorDynInstPtr inst,$/;"	f	class:Minor::Scoreboard
canPushIntoStoreBuffer	minor/lsq.hh	/^    bool canPushIntoStoreBuffer() const { return storeBuffer.canInsert(); }$/;"	f	class:Minor::LSQ
canRead	inorder/reg_dep_map.cc	/^RegDepMap::canRead(uint8_t reg_type, RegIndex idx, DynInstPtr inst)$/;"	f	class:RegDepMap
canRequest	minor/lsq.hh	/^    bool canRequest() { return requests.unreservedRemainingSpace() != 0; }$/;"	f	class:Minor::LSQ
canReserve	minor/buffers.hh	/^    bool canReserve() const { return queue.canReserve(); }$/;"	f	class:Minor::InputBuffer
canReserve	minor/buffers.hh	/^    bool canReserve() const { return unreservedRemainingSpace() != 0; }$/;"	f	class:Minor::Queue
canSendInstToStage	inorder/pipeline_stage.cc	/^PipelineStage::canSendInstToStage(unsigned stage_num)$/;"	f	class:PipelineStage
canSendToMemorySystem	minor/lsq.cc	/^LSQ::canSendToMemorySystem()$/;"	f	class:Minor::LSQ
canWB	o3/lsq_unit.hh	/^        bool canWB;$/;"	m	struct:LSQUnit::SQEntry
canWB	ozone/lsq_unit.hh	/^        bool canWB;$/;"	m	struct:OzoneLSQ::SQEntry
canWB	ozone/lw_lsq.hh	/^        bool canWB;$/;"	m	struct:OzoneLWLSQ::SQEntry
canWrite	inorder/reg_dep_map.cc	/^RegDepMap::canWrite(uint8_t reg_type, RegIndex idx, DynInstPtr inst)$/;"	f	class:RegDepMap
canrestore	m5legion_interface.h	/^    uint8_t canrestore;$/;"	m	struct:__anon8
cansave	m5legion_interface.h	/^    uint8_t cansave;$/;"	m	struct:__anon8
cantForwardFromFUIndices	minor/MinorCPU.py	/^    cantForwardFromFUIndices = VectorParam.Unsigned([],$/;"	v	class:MinorFU
cantForwardFromFUIndices	minor/func_unit.hh	/^    std::vector<bool> cantForwardFromFUIndices;$/;"	m	class:Minor::FUPipeline
cantForwardFromFUIndices	minor/func_unit.hh	/^    std::vector<unsigned int> cantForwardFromFUIndices;$/;"	m	class:MinorFU
capCoalescedMMIO	kvm/vm.cc	/^Kvm::capCoalescedMMIO() const$/;"	f	class:Kvm
capDebugRegs	kvm/vm.cc	/^Kvm::capDebugRegs() const$/;"	f	class:Kvm
capExtendedCPUID	kvm/vm.cc	/^Kvm::capExtendedCPUID() const$/;"	f	class:Kvm
capIRQChip	kvm/vm.cc	/^Kvm::capIRQChip() const$/;"	f	class:Kvm
capOneReg	kvm/vm.cc	/^Kvm::capOneReg() const$/;"	f	class:Kvm
capSetTSSAddress	kvm/vm.cc	/^Kvm::capSetTSSAddress() const$/;"	f	class:Kvm
capUserMemory	kvm/vm.cc	/^Kvm::capUserMemory() const$/;"	f	class:Kvm
capUserNMI	kvm/vm.cc	/^Kvm::capUserNMI() const$/;"	f	class:Kvm
capVCPUEvents	kvm/vm.cc	/^Kvm::capVCPUEvents() const$/;"	f	class:Kvm
capXCRs	kvm/vm.cc	/^Kvm::capXCRs() const$/;"	f	class:Kvm
capXSave	kvm/vm.cc	/^Kvm::capXSave() const$/;"	f	class:Kvm
capabilities	func_unit.cc	/^FuncUnit::capabilities()$/;"	f	class:FuncUnit
capabilityList	func_unit.hh	/^    std::bitset<Num_OpClasses> capabilityList;$/;"	m	class:FuncUnit
capabilityList	minor/func_unit.hh	/^    std::bitset<Num_OpClasses> capabilityList;$/;"	m	class:Minor::FUPipeline
capabilityList	minor/func_unit.hh	/^    std::vector<bool> capabilityList;$/;"	m	class:MinorOpClassSet
capabilityList	o3/fu_pool.hh	/^    std::bitset<Num_OpClasses> capabilityList;$/;"	m	class:FUPool
capacity	minor/buffers.hh	/^    unsigned int capacity;$/;"	m	class:Minor::Queue
ccList	o3/free_list.hh	/^    SimpleFreeList ccList;$/;"	m	class:UnifiedFreeList
ccMap	o3/rename_map.hh	/^    SimpleRenameMap ccMap;$/;"	m	class:UnifiedRenameMap
ccRegFile	o3/regfile.hh	/^    std::vector<CCReg> ccRegFile;$/;"	m	class:PhysRegFile
ccRegfileReads	o3/cpu.hh	/^    Stats::Scalar ccRegfileReads;$/;"	m	class:FullO3CPU
ccRegfileWrites	o3/cpu.hh	/^    Stats::Scalar ccRegfileWrites;$/;"	m	class:FullO3CPU
ccRegs	inorder/cpu.hh	/^    TheISA::CCReg ccRegs[ThePipeline::MaxThreads][TheISA::NumCCRegs];$/;"	m	class:InOrderCPU
ccRegs	simple_thread.hh	/^    TheISA::CCReg ccRegs[TheISA::NumCCRegs];$/;"	m	class:SimpleThread
ccr	m5legion_interface.h	/^    uint8_t ccr;$/;"	m	struct:__anon8
changeAddress	testers/rubytest/Check.cc	/^Check::changeAddress(const Address& address)$/;"	f	class:Check
changeRegFileContext	inorder/thread_context.hh	/^    void changeRegFileContext(unsigned param,$/;"	f	class:InOrderThreadContext
changeStream	minor/fetch1.cc	/^Fetch1::changeStream(const BranchData &branch)$/;"	f	class:Minor::Fetch1
change_thread_state	simple/base.cc	/^change_thread_state(ThreadID tid, int activate, int priority)$/;"	f
changedPC	checker/cpu.hh	/^    bool changedPC;$/;"	m	class:CheckerCPU
changedROBEntries	o3/commit_impl.hh	/^DefaultCommit<Impl>::changedROBEntries()$/;"	f	class:DefaultCommit
changedROBNumEntries	o3/commit.hh	/^    bool changedROBNumEntries[Impl::MaxThreads];$/;"	m	class:DefaultCommit
checkBE	ozone/front_end_impl.hh	/^FrontEnd<Impl>::checkBE()$/;"	f	class:FrontEnd
checkClear	o3/store_set.cc	/^StoreSet::checkClear()$/;"	f	class:StoreSet
checkConflict	ozone/ea_list.cc	/^EAList::checkConflict(const InstSeqNum &check_sn, const Addr &check_ea) const$/;"	f	class:EAList
checkDispatchStatus	ozone/back_end_impl.hh	/^BackEnd<Impl>::checkDispatchStatus()$/;"	f	class:BackEnd
checkDispatchStatus	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::checkDispatchStatus()$/;"	f	class:LWBackEnd
checkEmptyROB	o3/commit.hh	/^    bool checkEmptyROB[Impl::MaxThreads];$/;"	m	class:DefaultCommit
checkExtension	kvm/vm.cc	/^Kvm::checkExtension(int extension) const$/;"	f	class:Kvm
checkFlags	checker/cpu.cc	/^CheckerCPU::checkFlags(Request *unverified_req, Addr vAddr,$/;"	f	class:CheckerCPU
checkForDeadlock	testers/rubytest/RubyTester.cc	/^RubyTester::checkForDeadlock()$/;"	f	class:RubyTester
checkForInterrupts	inorder/cpu.cc	/^InOrderCPU::checkForInterrupts()$/;"	f	class:InOrderCPU
checkForInterrupts	simple/base.cc	/^BaseSimpleCPU::checkForInterrupts()$/;"	f	class:BaseSimpleCPU
checkInst	o3/store_set.cc	/^StoreSet::checkInst(Addr PC)$/;"	f	class:StoreSet
checkInterrupt	o3/fetch.hh	/^    checkInterrupt(Addr pc)$/;"	f	class:DefaultFetch
checkInterrupts	base.hh	/^    checkInterrupts(ThreadContext *tc) const$/;"	f	class:BaseCPU
checkInterrupts	ozone/inorder_back_end_impl.hh	/^InorderBackEnd<Impl>::checkInterrupts()$/;"	f	class:InorderBackEnd
checkInterrupts	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::checkInterrupts()$/;"	f	class:LWBackEnd
checkLoads	o3/lsq_unit.hh	/^    bool checkLoads;$/;"	m	class:LSQUnit
checkMisprediction	o3/iew_impl.hh	/^DefaultIEW<Impl>::checkMisprediction(DynInstPtr &inst)$/;"	f	class:DefaultIEW
checkPcEventQueue	simple/base.hh	/^    inline void checkPcEventQueue() {$/;"	f	class:BaseSimpleCPU
checkReg	nativetrace.hh	/^    checkReg(const char * regName, T &val, T &realVal)$/;"	f	class:Trace::NativeTrace
checkSeg	kvm/x86_cpu.cc	/^checkSeg(const char *name, const int idx, const struct kvm_segment &seg,$/;"	f	file:
checkSignalsAndUpdate	inorder/pipeline_stage.cc	/^PipelineStage::checkSignalsAndUpdate(ThreadID tid)$/;"	f	class:PipelineStage
checkSignalsAndUpdate	o3/decode_impl.hh	/^DefaultDecode<Impl>::checkSignalsAndUpdate(ThreadID tid)$/;"	f	class:DefaultDecode
checkSignalsAndUpdate	o3/fetch_impl.hh	/^DefaultFetch<Impl>::checkSignalsAndUpdate(ThreadID tid)$/;"	f	class:DefaultFetch
checkSignalsAndUpdate	o3/iew_impl.hh	/^DefaultIEW<Impl>::checkSignalsAndUpdate(ThreadID tid)$/;"	f	class:DefaultIEW
checkSignalsAndUpdate	o3/rename_impl.hh	/^DefaultRename<Impl>::checkSignalsAndUpdate(ThreadID tid)$/;"	f	class:DefaultRename
checkSnoop	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::checkSnoop(PacketPtr pkt)$/;"	f	class:LSQUnit
checkStall	inorder/pipeline_stage.cc	/^PipelineStage::checkStall(ThreadID tid) const$/;"	f	class:PipelineStage
checkStall	o3/decode_impl.hh	/^DefaultDecode<Impl>::checkStall(ThreadID tid) const$/;"	f	class:DefaultDecode
checkStall	o3/fetch_impl.hh	/^DefaultFetch<Impl>::checkStall(ThreadID tid) const$/;"	f	class:DefaultFetch
checkStall	o3/iew_impl.hh	/^DefaultIEW<Impl>::checkStall(ThreadID tid)$/;"	f	class:DefaultIEW
checkStall	o3/rename_impl.hh	/^DefaultRename<Impl>::checkStall(ThreadID tid)$/;"	f	class:DefaultRename
checkStartEvent	testers/rubytest/RubyTester.hh	/^    CheckStartEvent checkStartEvent;$/;"	m	class:RubyTester
checkViolations	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::checkViolations(int load_idx, DynInstPtr &inst)$/;"	f	class:LSQUnit
check_flush	testers/rubytest/RubyTester.py	/^    check_flush = Param.Bool(False, "check cache flushing")$/;"	v	class:RubyTester
checker	BaseCPU.py	/^    checker = Param.BaseCPU(NULL, "checker CPU")$/;"	v
checker	o3/cpu.hh	/^    Checker<Impl> *checker;$/;"	m	class:FullO3CPU
checker	ozone/cpu.hh	/^    Checker<DynInstPtr> *checker;$/;"	m	class:OzoneCPU
checker	ozone/lw_back_end.hh	/^    Checker<DynInstPtr> *checker;$/;"	m	class:LWBackEnd
checker	simple/base.hh	/^    CheckerCPU *checker;$/;"	m	class:BaseSimpleCPU
checkerCPU	checker/thread_context.hh	/^    CheckerCPU *checkerCPU;$/;"	m	class:CheckerThreadContext
checkerTC	checker/thread_context.hh	/^    SimpleThread *checkerTC;$/;"	m	class:CheckerThreadContext
checkerTC	ozone/cpu.hh	/^    ThreadContext *checkerTC;$/;"	m	class:OzoneCPU
checks_to_complete	testers/rubytest/RubyTester.py	/^    checks_to_complete = Param.Int(100, "checks to complete")$/;"	v	class:RubyTester
children	profile.hh	/^    ChildList children;$/;"	m	class:ProfileNode
choiceCounters	pred/bi_mode.hh	/^    std::vector<SatCounter> choiceCounters;$/;"	m	class:BiModeBP
choiceCtrBits	ozone/OzoneCPU.py	/^    choiceCtrBits = Param.Unsigned("Bits of choice counters")$/;"	v	class:DerivOzoneCPU
choiceCtrBits	ozone/SimpleOzoneCPU.py	/^    choiceCtrBits = Param.Unsigned("Bits of choice counters")$/;"	v	class:SimpleOzoneCPU
choiceCtrBits	ozone/simple_params.hh	/^    unsigned choiceCtrBits;$/;"	m	class:SimpleParams
choiceCtrBits	pred/BranchPredictor.py	/^    choiceCtrBits = Param.Unsigned(2, "Bits of choice counters")$/;"	v	class:BranchPredictor
choiceCtrBits	pred/bi_mode.hh	/^    unsigned choiceCtrBits;$/;"	m	class:BiModeBP
choiceCtrBits	pred/tournament.hh	/^    unsigned choiceCtrBits;$/;"	m	class:TournamentBP
choiceCtrs	pred/tournament.hh	/^    std::vector<SatCounter> choiceCtrs;$/;"	m	class:TournamentBP
choiceHistoryMask	pred/bi_mode.hh	/^    unsigned choiceHistoryMask;$/;"	m	class:BiModeBP
choiceHistoryMask	pred/tournament.hh	/^    unsigned choiceHistoryMask;$/;"	m	class:TournamentBP
choicePredictorSize	ozone/OzoneCPU.py	/^    choicePredictorSize = Param.Unsigned("Size of choice predictor")$/;"	v	class:DerivOzoneCPU
choicePredictorSize	ozone/SimpleOzoneCPU.py	/^    choicePredictorSize = Param.Unsigned("Size of choice predictor")$/;"	v	class:SimpleOzoneCPU
choicePredictorSize	ozone/simple_params.hh	/^    unsigned choicePredictorSize;$/;"	m	class:SimpleParams
choicePredictorSize	pred/BranchPredictor.py	/^    choicePredictorSize = Param.Unsigned(8192, "Size of choice predictor")$/;"	v	class:BranchPredictor
choicePredictorSize	pred/bi_mode.hh	/^    unsigned choicePredictorSize;$/;"	m	class:BiModeBP
choicePredictorSize	pred/tournament.hh	/^    unsigned choicePredictorSize;$/;"	m	class:TournamentBP
choiceThreshold	pred/bi_mode.hh	/^    unsigned choiceThreshold;$/;"	m	class:BiModeBP
choiceThreshold	pred/tournament.hh	/^    unsigned choiceThreshold;$/;"	m	class:TournamentBP
cleanUpRemovedEvents	inorder/cpu.cc	/^InOrderCPU::cleanUpRemovedEvents()$/;"	f	class:InOrderCPU
cleanUpRemovedInsts	inorder/cpu.cc	/^InOrderCPU::cleanUpRemovedInsts()$/;"	f	class:InOrderCPU
cleanUpRemovedInsts	o3/cpu.cc	/^FullO3CPU<Impl>::cleanUpRemovedInsts()$/;"	f	class:FullO3CPU
cleanwin	m5legion_interface.h	/^    uint8_t cleanwin;$/;"	m	struct:__anon8
clear	inorder/reg_dep_map.cc	/^RegDepMap::clear()$/;"	f	class:RegDepMap
clear	intr_control.cc	/^IntrControl::clear(int cpu_id, int int_num, int index)$/;"	f	class:IntrControl
clear	intr_control.hh	/^    clear(int int_num, int index = 0)$/;"	f	class:IntrControl
clear	intr_control_noisa.cc	/^IntrControl::clear(int cpu_id, int int_num, int index)$/;"	f	class:IntrControl
clear	o3/store_set.cc	/^StoreSet::clear()$/;"	f	class:StoreSet
clear	ozone/ea_list.cc	/^EAList::clear()$/;"	f	class:EAList
clear	profile.cc	/^FunctionProfile::clear()$/;"	f	class:FunctionProfile
clear	profile.cc	/^ProfileNode::clear()$/;"	f	class:ProfileNode
clear	testers/traffic_gen/generators.hh	/^        void clear() {$/;"	f	struct:TraceGen::TraceElement
clearAddr	ozone/ea_list.cc	/^EAList::clearAddr(const InstSeqNum &sn_to_clear, const Addr &ea_to_clear)$/;"	f	class:EAList
clearArchRegs	checker/thread_context.hh	/^    void clearArchRegs()$/;"	f	class:CheckerThreadContext
clearArchRegs	inorder/thread_context.cc	/^InOrderThreadContext::clearArchRegs()$/;"	f	class:InOrderThreadContext
clearArchRegs	o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::clearArchRegs()$/;"	f	class:O3ThreadContext
clearArchRegs	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::clearArchRegs()$/;"	f	class:OzoneCPU::OzoneTC
clearArchRegs	simple_thread.hh	/^    void clearArchRegs()$/;"	f	class:SimpleThread
clearArchRegs	thread_context.hh	/^    void clearArchRegs() { actualTC->clearArchRegs(); }$/;"	f	class:ProxyThreadContext
clearCanCommit	base_dyn_inst.hh	/^    void clearCanCommit() { status.reset(CanCommit); }$/;"	f	class:BaseDynInst
clearCanCommit	inorder/inorder_dyn_inst.hh	/^    void clearCanCommit() { status.reset(CanCommit); }$/;"	f	class:InOrderDynInst
clearCanIssue	base_dyn_inst.hh	/^    void clearCanIssue() { status.reset(CanIssue); }$/;"	f	class:BaseDynInst
clearDependents	ozone/dyn_inst_impl.hh	/^OzoneDynInst<Impl>::clearDependents()$/;"	f	class:OzoneDynInst
clearFetchBuffer	inorder/resources/fetch_unit.cc	/^FetchUnit::clearFetchBuffer()$/;"	f	class:FetchUnit
clearFetchFault	o3/comm.hh	/^    bool clearFetchFault;$/;"	m	struct:DefaultFetchDefaultDecode
clearFromParent	simple/timing.hh	/^        clearFromParent()$/;"	f	class:TimingSimpleCPU::SplitFragmentSenderState
clearInIQ	base_dyn_inst.hh	/^    void clearInIQ() { status.reset(IqEntry); }$/;"	f	class:BaseDynInst
clearInROB	base_dyn_inst.hh	/^    void clearInROB() { status.reset(RobEntry); }$/;"	f	class:BaseDynInst
clearInst	o3/dep_graph.hh	/^    void clearInst(PhysRegIndex idx)$/;"	f	class:DependencyGraph
clearInstDests	minor/scoreboard.cc	/^Scoreboard::clearInstDests(MinorDynInstPtr inst, bool clear_unpredictable)$/;"	f	class:Minor::Scoreboard
clearInterrupt	base.hh	/^    clearInterrupt(int int_num, int index)$/;"	f	class:BaseCPU
clearInterrupt	o3/comm.hh	/^        bool clearInterrupt; \/\/ *F$/;"	m	struct:TimeBufStruct::commitComm
clearInterrupts	base.hh	/^    clearInterrupts()$/;"	f	class:BaseCPU
clearIssued	base_dyn_inst.hh	/^    void clearIssued() { status.reset(Issued); }$/;"	f	class:BaseDynInst
clearLQ	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::clearLQ()$/;"	f	class:LSQUnit
clearLQ	ozone/lsq_unit_impl.hh	/^OzoneLSQ<Impl>::clearLQ()$/;"	f	class:OzoneLSQ
clearLQ	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::clearLQ()$/;"	f	class:OzoneLWLSQ
clearLoadBlocked	ozone/lw_lsq.hh	/^    void clearLoadBlocked()$/;"	f	class:OzoneLWLSQ
clearMemBarrier	minor/lsq.cc	/^LSQ::clearMemBarrier(MinorDynInstPtr inst)$/;"	f	class:Minor::LSQ
clearMemDependents	ozone/dyn_inst_impl.hh	/^OzoneDynInst<Impl>::clearMemDependents()$/;"	f	class:OzoneDynInst
clearPeriod	o3/store_set.hh	/^    uint64_t clearPeriod;$/;"	m	class:StoreSet
clearRegDepEntry	inorder/inorder_dyn_inst.hh	/^    void clearRegDepEntry() { status.reset(RegDepMapEntry); }$/;"	f	class:InOrderDynInst
clearRequest	inorder/resource.cc	/^ResourceRequest::clearRequest()$/;"	f	class:ResourceRequest
clearRequest	inorder/resources/cache_unit.cc	/^CacheRequest::clearRequest()$/;"	f	class:CacheRequest
clearReservedSpace	minor/buffers.hh	/^    void clearReservedSpace() { numReservedSlots = 0; }$/;"	f	class:Minor::Queue
clearSQ	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::clearSQ()$/;"	f	class:LSQUnit
clearSQ	ozone/lsq_unit_impl.hh	/^OzoneLSQ<Impl>::clearSQ()$/;"	f	class:OzoneLSQ
clearSQ	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::clearSQ()$/;"	f	class:OzoneLWLSQ
clearSerializeAfter	base_dyn_inst.hh	/^    void clearSerializeAfter() { status.reset(SerializeAfter); }$/;"	f	class:BaseDynInst
clearSerializeAfter	inorder/inorder_dyn_inst.hh	/^    void clearSerializeAfter() { status.reset(SerializeAfter); }$/;"	f	class:InOrderDynInst
clearSerializeBefore	base_dyn_inst.hh	/^    void clearSerializeBefore() { status.reset(SerializeBefore); }$/;"	f	class:BaseDynInst
clearSerializeBefore	inorder/inorder_dyn_inst.hh	/^    void clearSerializeBefore() { status.reset(SerializeBefore); }$/;"	f	class:InOrderDynInst
clearStats	testers/directedtest/RubyDirectedTester.hh	/^    void clearStats() {}$/;"	f	class:RubyDirectedTester
clearStats	testers/rubytest/RubyTester.hh	/^    void clearStats() {}$/;"	f	class:RubyTester
clockID	kvm/timer.hh	/^    clockid_t clockID;$/;"	m	class:PosixKvmTimer
cmd	inorder/pipeline_traits.5stage.hh	/^        unsigned cmd;$/;"	m	struct:ThePipeline::ScheduleEntry
cmd	inorder/pipeline_traits.9stage.hh	/^        unsigned cmd;$/;"	m	struct:ThePipeline::ScheduleEntry
cmd	inorder/pipeline_traits.9stage.smt2.hh	/^        unsigned cmd;$/;"	m	struct:ThePipeline::ScheduleEntry
cmd	inorder/resource.hh	/^    unsigned cmd;$/;"	m	class:ResourceRequest
cmd	inorder/resource_sked.hh	/^    unsigned cmd;$/;"	m	class:ScheduleEntry
cmd	testers/traffic_gen/generators.hh	/^        MemCmd cmd;$/;"	m	struct:TraceGen::TraceElement
cnt	inorder/resources/fetch_unit.hh	/^        short cnt;$/;"	m	struct:FetchUnit::FetchBlock
coalesceMMIO	kvm/vm.cc	/^KvmVM::coalesceMMIO(Addr start, int size)$/;"	f	class:KvmVM
coalesceMMIO	kvm/vm.cc	/^KvmVM::coalesceMMIO(const AddrRange &range)$/;"	f	class:KvmVM
coalescedMMIO	kvm/KvmVM.py	/^    coalescedMMIO = VectorParam.AddrRange([], "memory ranges for coalesced MMIO")$/;"	v	class:KvmVM
comBranches	inorder/cpu.hh	/^    Stats::Scalar comBranches;$/;"	m	class:InOrderCPU
comFloats	inorder/cpu.hh	/^    Stats::Scalar comFloats;$/;"	m	class:InOrderCPU
comInstEventQueue	base.hh	/^    EventQueue **comInstEventQueue;$/;"	m	class:BaseCPU
comInts	inorder/cpu.hh	/^    Stats::Scalar comInts;$/;"	m	class:InOrderCPU
comLoadEventQueue	base.hh	/^    EventQueue **comLoadEventQueue;$/;"	m	class:BaseCPU
comLoads	inorder/cpu.hh	/^    Stats::Scalar comLoads;$/;"	m	class:InOrderCPU
comNonSpec	inorder/cpu.hh	/^    Stats::Scalar comNonSpec;$/;"	m	class:InOrderCPU
comNops	inorder/cpu.hh	/^    Stats::Scalar comNops;$/;"	m	class:InOrderCPU
comStores	inorder/cpu.hh	/^    Stats::Scalar comStores;$/;"	m	class:InOrderCPU
comm	ozone/back_end.hh	/^    TimeBuffer<CommStruct> *comm;$/;"	m	class:BackEnd
comm	ozone/cpu.hh	/^    TimeBuffer<CommStruct> comm;$/;"	m	class:OzoneCPU
comm	ozone/front_end.hh	/^    TimeBuffer<CommStruct> *comm;$/;"	m	class:FrontEnd
comm	ozone/inorder_back_end.hh	/^    TimeBuffer<CommStruct> *comm;$/;"	m	class:InorderBackEnd
comm	ozone/lw_back_end.hh	/^    TimeBuffer<CommStruct> *comm;$/;"	m	class:LWBackEnd
commit	minor/execute.cc	/^Execute::commit(bool only_commit_microops, bool discard, BranchData &branch)$/;"	f	class:Minor::Execute
commit	o3/commit.hh	/^        DefaultCommit<Impl> *commit;$/;"	m	class:DefaultCommit::TrapEvent
commit	o3/commit_impl.hh	/^DefaultCommit<Impl>::commit()$/;"	f	class:DefaultCommit
commit	o3/cpu.hh	/^    typename CPUPolicy::Commit commit;$/;"	m	class:FullO3CPU
commit	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::commit(const InstSeqNum &inst, ThreadID tid)$/;"	f	class:InstructionQueue
commit	o3/rename.hh	/^        bool commit;$/;"	m	struct:DefaultRename::Stalls
commit	ozone/back_end.hh	/^        void commit(const InstSeqNum &sn) {}$/;"	f	class:BackEnd::InstQueue
commit	ozone/ea_list.cc	/^EAList::commit(const InstSeqNum &commit_sn)$/;"	f	class:EAList
commit	ozone/inst_queue_impl.hh	/^InstQueue<Impl>::commit(const InstSeqNum &inst, ThreadID tid)$/;"	f	class:InstQueue
commitComm	o3/comm.hh	/^    struct commitComm {$/;"	s	struct:TimeBufStruct
commitDrained	o3/cpu.cc	/^FullO3CPU<Impl>::commitDrained(ThreadID tid)$/;"	f	class:FullO3CPU
commitEligible	o3/commit.hh	/^    Stats::Vector commitEligible;$/;"	m	class:DefaultCommit
commitEligible	ozone/lw_back_end.hh	/^    Stats::Vector commitEligible;$/;"	m	class:LWBackEnd
commitEligibleSamples	o3/commit.hh	/^    Stats::Scalar commitEligibleSamples;$/;"	m	class:DefaultCommit
commitEligibleSamples	ozone/lw_back_end.hh	/^    Stats::Scalar commitEligibleSamples;$/;"	m	class:LWBackEnd
commitHead	o3/commit_impl.hh	/^DefaultCommit<Impl>::commitHead(DynInstPtr &head_inst, unsigned inst_num)$/;"	f	class:DefaultCommit
commitInfo	o3/comm.hh	/^    commitComm commitInfo[Impl::MaxThreads];$/;"	m	struct:TimeBufStruct
commitInst	minor/execute.cc	/^Execute::commitInst(MinorDynInstPtr inst, bool early_memory_issue,$/;"	f	class:Minor::Execute
commitInst	ozone/back_end_impl.hh	/^BackEnd<Impl>::commitInst(int inst_num)$/;"	f	class:BackEnd
commitInst	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::commitInst(int inst_num)$/;"	f	class:LWBackEnd
commitInsts	o3/commit_impl.hh	/^DefaultCommit<Impl>::commitInsts()$/;"	f	class:DefaultCommit
commitInsts	ozone/back_end_impl.hh	/^BackEnd<Impl>::commitInsts()$/;"	f	class:BackEnd
commitInsts	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::commitInsts()$/;"	f	class:LWBackEnd
commitLimit	minor/execute.hh	/^    unsigned int commitLimit;$/;"	m	class:Minor::Execute
commitLoad	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::commitLoad()$/;"	f	class:LSQUnit
commitLoad	ozone/lsq_unit_impl.hh	/^OzoneLSQ<Impl>::commitLoad()$/;"	f	class:OzoneLSQ
commitLoad	ozone/lsq_unit_impl.hh	/^OzoneLSQ<Impl>::commitLoad(InstSeqNum &inst)$/;"	f	class:OzoneLSQ
commitLoad	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::commitLoad()$/;"	f	class:OzoneLWLSQ
commitLoads	o3/lsq.hh	/^    void commitLoads(InstSeqNum &youngest_inst, ThreadID tid)$/;"	f	class:LSQ
commitLoads	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::commitLoads(InstSeqNum &youngest_inst)$/;"	f	class:LSQUnit
commitLoads	ozone/lsq_unit_impl.hh	/^OzoneLSQ<Impl>::commitLoads(InstSeqNum &youngest_inst)$/;"	f	class:OzoneLSQ
commitLoads	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::commitLoads(InstSeqNum &youngest_inst)$/;"	f	class:OzoneLWLSQ
commitNonSpecStalls	o3/commit.hh	/^    Stats::Scalar commitNonSpecStalls;$/;"	m	class:DefaultCommit
commitPC	ozone/back_end.hh	/^    Addr commitPC;$/;"	m	class:BackEnd
commitPC	ozone/inorder_back_end.hh	/^    Addr commitPC;$/;"	m	class:InorderBackEnd
commitPC	ozone/lw_back_end.hh	/^    Addr commitPC;$/;"	m	class:LWBackEnd
commitPolicy	o3/commit.hh	/^    CommitPolicy commitPolicy;$/;"	m	class:DefaultCommit
commitRenameMap	o3/cpu.hh	/^    typename CPUPolicy::RenameMap commitRenameMap[Impl::MaxThreads];$/;"	m	class:FullO3CPU
commitRenameTable	ozone/back_end.hh	/^    RenameTable<Impl> commitRenameTable;$/;"	m	class:BackEnd
commitRenameTable	ozone/lw_back_end.hh	/^    RenameTable<Impl> commitRenameTable;$/;"	m	class:LWBackEnd
commitSquashEvents	o3/commit.hh	/^    Stats::Scalar commitSquashEvents;$/;"	m	class:DefaultCommit
commitSquashedInsts	o3/commit.hh	/^    Stats::Scalar commitSquashedInsts;$/;"	m	class:DefaultCommit
commitStatus	o3/commit.hh	/^    ThreadStatus commitStatus[Impl::MaxThreads];$/;"	m	class:DefaultCommit
commitStatus	ozone/lw_back_end.hh	/^    Status commitStatus;$/;"	m	class:LWBackEnd
commitStores	o3/lsq.hh	/^    void commitStores(InstSeqNum &youngest_inst, ThreadID tid)$/;"	f	class:LSQ
commitStores	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::commitStores(InstSeqNum &youngest_inst)$/;"	f	class:LSQUnit
commitStores	ozone/lsq_unit_impl.hh	/^OzoneLSQ<Impl>::commitStores(InstSeqNum &youngest_inst)$/;"	f	class:OzoneLSQ
commitStores	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::commitStores(InstSeqNum &youngest_inst)$/;"	f	class:OzoneLWLSQ
commitTick	o3/dyn_inst.hh	/^    int32_t commitTick;$/;"	m	class:BaseO3DynInst
commitToDecodeDelay	o3/O3CPU.py	/^    commitToDecodeDelay = Param.Cycles(1, "Commit to decode delay")$/;"	v	class:DerivO3CPU
commitToDecodeDelay	o3/decode.hh	/^    Cycles commitToDecodeDelay;$/;"	m	class:DefaultDecode
commitToDecodeDelay	ozone/OzoneCPU.py	/^    commitToDecodeDelay = Param.Unsigned("Commit to decode delay")$/;"	v	class:DerivOzoneCPU
commitToDecodeDelay	ozone/SimpleOzoneCPU.py	/^    commitToDecodeDelay = Param.Unsigned("Commit to decode delay")$/;"	v	class:SimpleOzoneCPU
commitToDecodeDelay	ozone/simple_params.hh	/^    unsigned commitToDecodeDelay;$/;"	m	class:SimpleParams
commitToFetchDelay	o3/O3CPU.py	/^    commitToFetchDelay = Param.Cycles(1, "Commit to fetch delay")$/;"	v	class:DerivO3CPU
commitToFetchDelay	o3/fetch.hh	/^    Cycles commitToFetchDelay;$/;"	m	class:DefaultFetch
commitToFetchDelay	ozone/OzoneCPU.py	/^    commitToFetchDelay = Param.Unsigned("Commit to fetch delay")$/;"	v	class:DerivOzoneCPU
commitToFetchDelay	ozone/SimpleOzoneCPU.py	/^    commitToFetchDelay = Param.Unsigned("Commit to fetch delay")$/;"	v	class:SimpleOzoneCPU
commitToFetchDelay	ozone/simple_params.hh	/^    unsigned commitToFetchDelay;$/;"	m	class:SimpleParams
commitToIEWDelay	o3/O3CPU.py	/^    commitToIEWDelay = Param.Cycles(1, "Commit to "$/;"	v	class:DerivO3CPU
commitToIEWDelay	o3/commit.hh	/^    Cycles commitToIEWDelay;$/;"	m	class:DefaultCommit
commitToIEWDelay	o3/iew.hh	/^    Cycles commitToIEWDelay;$/;"	m	class:DefaultIEW
commitToIEWDelay	o3/inst_queue.hh	/^    Cycles commitToIEWDelay;$/;"	m	class:InstructionQueue
commitToIEWDelay	ozone/OzoneCPU.py	/^    commitToIEWDelay = Param.Unsigned("Commit to "$/;"	v	class:DerivOzoneCPU
commitToIEWDelay	ozone/SimpleOzoneCPU.py	/^    commitToIEWDelay = Param.Unsigned("Commit to "$/;"	v	class:SimpleOzoneCPU
commitToIEWDelay	ozone/inst_queue.hh	/^    unsigned commitToIEWDelay;$/;"	m	class:InstQueue
commitToIEWDelay	ozone/simple_params.hh	/^    unsigned commitToIEWDelay;$/;"	m	class:SimpleParams
commitToRenameDelay	o3/O3CPU.py	/^    commitToRenameDelay = Param.Cycles(1, "Commit to rename delay")$/;"	v	class:DerivO3CPU
commitToRenameDelay	o3/rename.hh	/^    unsigned commitToRenameDelay;$/;"	m	class:DefaultRename
commitToRenameDelay	ozone/OzoneCPU.py	/^    commitToRenameDelay = Param.Unsigned("Commit to rename delay")$/;"	v	class:DerivOzoneCPU
commitToRenameDelay	ozone/SimpleOzoneCPU.py	/^    commitToRenameDelay = Param.Unsigned("Commit to rename delay")$/;"	v	class:SimpleOzoneCPU
commitToRenameDelay	ozone/simple_params.hh	/^    unsigned commitToRenameDelay;$/;"	m	class:SimpleParams
commitWidth	o3/O3CPU.py	/^    commitWidth = Param.Unsigned(8, "Commit width")$/;"	v	class:DerivO3CPU
commitWidth	o3/commit.hh	/^    unsigned commitWidth;$/;"	m	class:DefaultCommit
commitWidth	o3/rename.hh	/^    unsigned commitWidth;$/;"	m	class:DefaultRename
commitWidth	ozone/OzoneCPU.py	/^    commitWidth = Param.Unsigned("Commit width")$/;"	v	class:DerivOzoneCPU
commitWidth	ozone/SimpleOzoneCPU.py	/^    commitWidth = Param.Unsigned("Commit width")$/;"	v	class:SimpleOzoneCPU
commitWidth	ozone/back_end.hh	/^    int commitWidth;$/;"	m	class:BackEnd
commitWidth	ozone/lw_back_end.hh	/^    int commitWidth;$/;"	m	class:LWBackEnd
commitWidth	ozone/simple_params.hh	/^    unsigned commitWidth;$/;"	m	class:SimpleParams
commit_eligible	ozone/back_end.hh	/^    Stats::Vector commit_eligible;$/;"	m	class:BackEnd
commit_eligible_samples	ozone/back_end.hh	/^    Stats::Scalar commit_eligible_samples;$/;"	m	class:BackEnd
commit_ptr	o3/rename.hh	/^    Commit *commit_ptr;$/;"	m	class:DefaultRename
committed	o3/lsq_unit.hh	/^        bool committed;$/;"	m	struct:LSQUnit::SQEntry
committed	ozone/lsq_unit.hh	/^        bool committed;$/;"	m	struct:OzoneLSQ::SQEntry
committed	ozone/lw_lsq.hh	/^        bool committed;$/;"	m	struct:OzoneLWLSQ::SQEntry
committedInsts	inorder/cpu.hh	/^    Stats::Vector committedInsts;$/;"	m	class:InOrderCPU
committedInsts	o3/cpu.hh	/^    Stats::Vector committedInsts;$/;"	m	class:FullO3CPU
committedOps	inorder/cpu.hh	/^    Stats::Vector committedOps;$/;"	m	class:InOrderCPU
committedOps	o3/cpu.hh	/^    Stats::Vector committedOps;$/;"	m	class:FullO3CPU
committedStores	o3/commit.hh	/^    bool committedStores[Impl::MaxThreads];$/;"	m	class:DefaultCommit
compare	thread_context.cc	/^ThreadContext::compare(ThreadContext *one, ThreadContext *two)$/;"	f	class:ThreadContext
complete	o3/lsq_unit.hh	/^        inline bool complete() { return --outstanding == 0; }$/;"	f	class:LSQUnit::LSQSenderState
completeAcc	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::completeAcc(Packet *pkt)$/;"	f	class:InOrderDynInst
completeAcc	o3/dyn_inst_impl.hh	/^BaseO3DynInst<Impl>::completeAcc(PacketPtr pkt)$/;"	f	class:BaseO3DynInst
completeAcc	ozone/dyn_inst_impl.hh	/^OzoneDynInst<Impl>::completeAcc(PacketPtr pkt)$/;"	f	class:OzoneDynInst
completeAcc	static_inst.hh	/^    virtual Fault completeAcc(Packet *pkt, ExecContext *xc,$/;"	f	class:StaticInst
completeBarrier	o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::completeBarrier(DynInstPtr &inst)$/;"	f	class:MemDepUnit
completeDataAccess	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::completeDataAccess(PacketPtr pkt)$/;"	f	class:LSQUnit
completeDataAccess	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::completeDataAccess(PacketPtr pkt)$/;"	f	class:OzoneLWLSQ
completeDataAccess	simple/timing.cc	/^TimingSimpleCPU::completeDataAccess(PacketPtr pkt)$/;"	f	class:TimingSimpleCPU
completeIfetch	simple/timing.cc	/^TimingSimpleCPU::completeIfetch(PacketPtr pkt)$/;"	f	class:TimingSimpleCPU
completeMemBarrierInst	minor/lsq.cc	/^LSQ::completeMemBarrierInst(MinorDynInstPtr inst,$/;"	f	class:Minor::LSQ
completeMemInst	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::completeMemInst(DynInstPtr &completed_inst)$/;"	f	class:InstructionQueue
completeMemInst	ozone/back_end.hh	/^    void completeMemInst(DynInstPtr &inst)$/;"	f	class:BackEnd
completeMemInst	ozone/back_end_impl.hh	/^BackEnd<Impl>::InstQueue::completeMemInst(DynInstPtr &inst)$/;"	f	class:BackEnd::InstQueue
completeMemInst	ozone/inst_queue_impl.hh	/^InstQueue<Impl>::completeMemInst(DynInstPtr &completed_inst)$/;"	f	class:InstQueue
completeMemInst	ozone/lw_back_end.hh	/^    void completeMemInst(DynInstPtr &inst) { }$/;"	f	class:LWBackEnd
completeRequest	testers/memtest/memtest.cc	/^MemTest::completeRequest(PacketPtr pkt)$/;"	f	class:MemTest
completeRequest	testers/networktest/networktest.cc	/^NetworkTest::completeRequest(PacketPtr pkt)$/;"	f	class:NetworkTest
completeStore	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::completeStore(int store_idx)$/;"	f	class:LSQUnit
completeStore	ozone/lsq_unit_impl.hh	/^OzoneLSQ<Impl>::completeStore(int store_idx)$/;"	f	class:OzoneLSQ
completeStore	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::completeStore(DynInstPtr &inst)$/;"	f	class:OzoneLWLSQ
completeTick	o3/dyn_inst.hh	/^    int32_t completeTick;$/;"	m	class:BaseO3DynInst
completed	inorder/resource.hh	/^    bool completed;$/;"	m	class:ResourceRequest
completed	o3/lsq_unit.hh	/^        bool completed;$/;"	m	struct:LSQUnit::SQEntry
completed	o3/mem_dep_unit.hh	/^        bool completed;$/;"	m	class:MemDepUnit::MemDepEntry
completed	o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::completed(DynInstPtr &inst)$/;"	f	class:MemDepUnit
completed	ozone/lsq_unit.hh	/^        bool completed;$/;"	m	struct:OzoneLSQ::SQEntry
completed	ozone/lw_lsq.hh	/^        bool completed;$/;"	m	struct:OzoneLWLSQ::SQEntry
cond	TimingExpr.py	/^    cond = Param.TimingExpr("condition expression")$/;"	v	class:TimingExprIf
cond	timing_expr.hh	/^    TimingExpr *cond;$/;"	m	class:TimingExprIf
condIncorrect	pred/bpred_unit.hh	/^    Stats::Scalar condIncorrect;$/;"	m	class:BPredUnit
condPredicted	pred/bpred_unit.hh	/^    Stats::Scalar condPredicted;$/;"	m	class:BPredUnit
conditionalSquash	o3/thread_context.hh	/^    inline void conditionalSquash()$/;"	f	class:O3ThreadContext
configFile	testers/traffic_gen/traffic_gen.hh	/^    const std::string configFile;$/;"	m	class:TrafficGen
config_file	testers/traffic_gen/TrafficGen.py	/^    config_file = Param.String("Configuration file describing the behaviour")$/;"	v	class:TrafficGen
conflictingLoads	o3/mem_dep_unit.hh	/^    Stats::Scalar conflictingLoads;$/;"	m	class:MemDepUnit
conflictingStores	o3/mem_dep_unit.hh	/^    Stats::Scalar conflictingStores;$/;"	m	class:MemDepUnit
connectAllPorts	BaseCPU.py	/^    def connectAllPorts(self, cached_bus, uncached_bus = None):$/;"	f
connectCachedPorts	BaseCPU.py	/^    def connectCachedPorts(self, bus):$/;"	f
connectMemPorts	checker/thread_context.hh	/^    void connectMemPorts(ThreadContext *tc)$/;"	f	class:CheckerThreadContext
connectUncachedPorts	BaseCPU.py	/^    def connectUncachedPorts(self, bus):$/;"	f
constEAListIt	ozone/ea_list.hh	/^    typedef std::list<instEA>::const_iterator constEAListIt;$/;"	t	class:EAList
const_iterator	pc_event.hh	/^    typedef map_t::const_iterator const_iterator;$/;"	t	class:PCEventQueue
const_range_t	pc_event.hh	/^    typedef std::pair<const_iterator, const_iterator> const_range_t;$/;"	t	class:PCEventQueue
consume	profile.cc	/^FunctionProfile::consume(const vector<Addr> &stack)$/;"	f	class:FunctionProfile
consume	profile.hh	/^FunctionProfile::consume(ThreadContext *tc, const StaticInstPtr &inst)$/;"	f	class:FunctionProfile
consumerInst	o3/iew.hh	/^    Stats::Vector consumerInst;$/;"	m	class:DefaultIEW
consumerInst	ozone/lw_back_end.hh	/^    Stats::Vector consumerInst;$/;"	m	class:LWBackEnd
consumer_inst	ozone/back_end.hh	/^    Stats::Vector consumer_inst;$/;"	m	class:BackEnd
containsAddrRangeOf	minor/lsq.cc	/^LSQ::LSQRequest::containsAddrRangeOf($/;"	f	class:Minor::LSQ::LSQRequest
containsAddrRangeOf	minor/lsq.cc	/^LSQ::LSQRequest::containsAddrRangeOf(LSQRequestPtr other_request)$/;"	f	class:Minor::LSQ::LSQRequest
contextId	base_dyn_inst.hh	/^    int contextId() const { return thread->contextId(); }$/;"	f	class:BaseDynInst
contextId	checker/thread_context.hh	/^    int contextId() const { return actualTC->contextId(); }$/;"	f	class:CheckerThreadContext
contextId	inorder/cpu.hh	/^    contextId()$/;"	f	class:InOrderCPU
contextId	inorder/inorder_dyn_inst.hh	/^    int contextId() const { return thread->contextId(); }$/;"	f	class:InOrderDynInst
contextId	inorder/thread_context.hh	/^    int contextId() const { return thread->contextId(); }$/;"	f	class:InOrderThreadContext
contextId	minor/exec_context.hh	/^    int contextId() { return thread.contextId(); }$/;"	f	class:Minor::ExecContext
contextId	o3/thread_context.hh	/^    virtual int contextId() const { return thread->contextId(); }$/;"	f	class:O3ThreadContext
contextId	thread_context.hh	/^    int contextId() const { return actualTC->contextId(); }$/;"	f	class:ProxyThreadContext
contextId	thread_state.hh	/^    int contextId() const { return _contextId; }$/;"	f	struct:ThreadState
copyArchRegs	checker/thread_context.hh	/^    void copyArchRegs(ThreadContext *tc)$/;"	f	class:CheckerThreadContext
copyArchRegs	inorder/thread_context.cc	/^InOrderThreadContext::copyArchRegs(ThreadContext *src_tc)$/;"	f	class:InOrderThreadContext
copyArchRegs	o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::copyArchRegs(ThreadContext *tc)$/;"	f	class:O3ThreadContext
copyArchRegs	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::copyArchRegs(ThreadContext *tc)$/;"	f	class:OzoneCPU::OzoneTC
copyArchRegs	simple_thread.cc	/^SimpleThread::copyArchRegs(ThreadContext *src_tc)$/;"	f	class:SimpleThread
copyArchRegs	thread_context.hh	/^    void copyArchRegs(ThreadContext *tc) { actualTC->copyArchRegs(tc); }$/;"	f	class:ProxyThreadContext
copyFrom	ozone/rename_table_impl.hh	/^RenameTable<Impl>::copyFrom(const RenameTable<Impl> &table_to_copy)$/;"	f	class:RenameTable
copyResult	checker/cpu_impl.hh	/^Checker<Impl>::copyResult(DynInstPtr &inst, uint64_t mismatch_val,$/;"	f	class:Checker
copyState	simple_thread.cc	/^SimpleThread::copyState(ThreadContext *oldContext)$/;"	f	class:SimpleThread
coreType	inorder/cpu.hh	/^    std::string coreType;$/;"	m	class:InOrderCPU
count	FuncUnit.py	/^    count = Param.Int("number of these FU's available")$/;"	v	class:FUDesc
count	o3/FuncUnitConfig.py	/^    count = 0$/;"	v	class:ReadPort
count	o3/FuncUnitConfig.py	/^    count = 0$/;"	v	class:WritePort
count	o3/FuncUnitConfig.py	/^    count = 1$/;"	v	class:IprPort
count	o3/FuncUnitConfig.py	/^    count = 2$/;"	v	class:FP_MultDiv
count	o3/FuncUnitConfig.py	/^    count = 4$/;"	v	class:FP_ALU
count	o3/FuncUnitConfig.py	/^    count = 4$/;"	v	class:RdWrPort
count	o3/FuncUnitConfig.py	/^    count = 4$/;"	v	class:SIMD_Unit
count	o3/FuncUnitConfig.py	/^    count = 6$/;"	v	class:IntALU
count	o3/FuncUnitConfig.py	/^    count=2$/;"	v	class:IntMultDiv
count	o3/inst_queue.hh	/^    unsigned count[Impl::MaxThreads];$/;"	m	class:InstructionQueue
count	ozone/inst_queue.hh	/^    unsigned count[Impl::MaxThreads];$/;"	m	class:InstQueue
count	profile.hh	/^    Counter count;$/;"	m	class:ProfileNode
count	simple/probes/simpoint.hh	/^        uint64_t count;$/;"	m	struct:SimPoint::BBInfo
countInst	simple/base.hh	/^    void countInst()$/;"	f	class:BaseSimpleCPU
countInsts	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::countInsts()$/;"	f	class:InstructionQueue
countInsts	o3/rob_impl.hh	/^ROB<Impl>::countInsts()$/;"	f	class:ROB
countInsts	o3/rob_impl.hh	/^ROB<Impl>::countInsts(ThreadID tid)$/;"	f	class:ROB
countInsts	ozone/inst_queue_impl.hh	/^InstQueue<Impl>::countInsts()$/;"	f	class:InstQueue
countNumSeqPkts	testers/traffic_gen/generators.hh	/^    unsigned int countNumSeqPkts;$/;"	m	class:DramGen
counter	pred/sat_counter.hh	/^    uint8_t counter;$/;"	m	class:SatCounter
cpi	inorder/cpu.hh	/^    Stats::Formula cpi;$/;"	m	class:InOrderCPU
cpi	minor/stats.hh	/^    Stats::Formula cpi;$/;"	m	class:Minor::MinorStats
cpi	o3/cpu.hh	/^    Stats::Formula cpi;$/;"	m	class:FullO3CPU
cpu	base.hh	/^        BaseCPU *cpu;$/;"	m	class:BaseCPU::ProfileEvent
cpu	base.hh	/^    BaseCPU *cpu;$/;"	m	class:CPUProgressEvent
cpu	base_dyn_inst.hh	/^    ImplCPU *cpu;$/;"	m	class:BaseDynInst
cpu	inorder/cpu.hh	/^        InOrderCPU *cpu;$/;"	m	class:InOrderCPU::CPUEvent
cpu	inorder/cpu.hh	/^        InOrderCPU *cpu;$/;"	m	class:InOrderCPU::TickEvent
cpu	inorder/inorder_dyn_inst.hh	/^    InOrderCPU *cpu;$/;"	m	class:InOrderDynInst
cpu	inorder/pipeline_stage.hh	/^    InOrderCPU *cpu;$/;"	m	class:PipelineStage
cpu	inorder/reg_dep_map.hh	/^    InOrderCPU *cpu;$/;"	m	class:RegDepMap
cpu	inorder/resource.hh	/^    InOrderCPU *cpu;$/;"	m	class:Resource
cpu	inorder/resource_pool.hh	/^    InOrderCPU *cpu;$/;"	m	class:ResourcePool
cpu	inorder/thread_context.hh	/^    InOrderCPU *cpu;$/;"	m	class:InOrderThreadContext
cpu	inorder/thread_state.hh	/^    InOrderCPU *cpu;$/;"	m	class:InOrderThreadState
cpu	kvm/base.hh	/^        BaseKvmCPU &cpu;$/;"	m	struct:BaseKvmCPU::TickEvent
cpu	minor/cpu.hh	/^        MinorCPU &cpu;$/;"	m	class:MinorCPU::MinorCPUPort
cpu	minor/decode.hh	/^    MinorCPU &cpu;$/;"	m	class:Minor::Decode
cpu	minor/exec_context.hh	/^    MinorCPU &cpu;$/;"	m	class:Minor::ExecContext
cpu	minor/execute.hh	/^    MinorCPU &cpu;$/;"	m	class:Minor::Execute
cpu	minor/fetch1.hh	/^    MinorCPU &cpu;$/;"	m	class:Minor::Fetch1
cpu	minor/fetch2.hh	/^    MinorCPU &cpu;$/;"	m	class:Minor::Fetch2
cpu	minor/lsq.hh	/^    MinorCPU &cpu;$/;"	m	class:Minor::LSQ
cpu	minor/pipeline.hh	/^    MinorCPU &cpu;$/;"	m	class:Minor::Pipeline
cpu	o3/commit.hh	/^    O3CPU *cpu;$/;"	m	class:DefaultCommit
cpu	o3/cpu.hh	/^        FullO3CPU<Impl> *cpu;$/;"	m	class:FullO3CPU::TickEvent
cpu	o3/decode.hh	/^    O3CPU *cpu;$/;"	m	class:DefaultDecode
cpu	o3/fetch.hh	/^    O3CPU *cpu;$/;"	m	class:DefaultFetch
cpu	o3/iew.hh	/^    O3CPU *cpu;$/;"	m	class:DefaultIEW
cpu	o3/inst_queue.hh	/^    O3CPU *cpu;$/;"	m	class:InstructionQueue
cpu	o3/lsq.hh	/^    O3CPU *cpu;$/;"	m	class:LSQ
cpu	o3/lsq_unit.hh	/^    O3CPU *cpu;$/;"	m	class:LSQUnit
cpu	o3/rename.hh	/^    O3CPU *cpu;$/;"	m	class:DefaultRename
cpu	o3/rob.hh	/^    O3CPU *cpu;$/;"	m	class:ROB
cpu	o3/thread_context.hh	/^    O3CPU *cpu;$/;"	m	class:O3ThreadContext
cpu	o3/thread_state.hh	/^    O3CPU *cpu;$/;"	m	struct:O3ThreadState
cpu	ozone/back_end.hh	/^    FullCPU *cpu;$/;"	m	class:BackEnd
cpu	ozone/cpu.hh	/^        OzoneCPU *cpu;$/;"	m	struct:OzoneCPU::TickEvent
cpu	ozone/cpu.hh	/^        OzoneCPU<Impl> *cpu;$/;"	m	class:OzoneCPU::OzoneTC
cpu	ozone/front_end.hh	/^    CPUType *cpu;$/;"	m	class:FrontEnd
cpu	ozone/inorder_back_end.hh	/^    FullCPU *cpu;$/;"	m	class:InorderBackEnd
cpu	ozone/inst_queue.hh	/^    FullCPU *cpu;$/;"	m	class:InstQueue
cpu	ozone/lsq_unit.hh	/^    FullCPU *cpu;$/;"	m	class:OzoneLSQ
cpu	ozone/lw_back_end.hh	/^    OzoneCPU *cpu;$/;"	m	class:LWBackEnd
cpu	ozone/lw_lsq.hh	/^    OzoneCPU *cpu;$/;"	m	class:OzoneLWLSQ
cpu	ozone/thread_state.hh	/^    typename Impl::CPUType *cpu;$/;"	m	struct:OzoneThreadState
cpu	simple/atomic.hh	/^        AtomicSimpleCPU *cpu;$/;"	m	struct:AtomicSimpleCPU::TickEvent
cpu	simple/atomic.hh	/^        BaseSimpleCPU *cpu;$/;"	m	class:AtomicSimpleCPU::AtomicCPUDPort
cpu	simple/timing.hh	/^            TimingSimpleCPU *cpu;$/;"	m	struct:TimingSimpleCPU::TimingCPUPort::TickEvent
cpu	simple/timing.hh	/^        TimingSimpleCPU *cpu;$/;"	m	class:TimingSimpleCPU::FetchTranslation
cpu	simple/timing.hh	/^        TimingSimpleCPU *cpu;$/;"	m	struct:TimingSimpleCPU::IprEvent
cpu	simple/timing.hh	/^        TimingSimpleCPU* cpu;$/;"	m	class:TimingSimpleCPU::TimingCPUPort
cpu	testers/memtest/memtest.hh	/^        MemTest *cpu;$/;"	m	class:MemTest::TickEvent
cpu	testers/networktest/networktest.hh	/^        NetworkTest *cpu;$/;"	m	class:NetworkTest::TickEvent
cpuDataPort	testers/rubytest/RubyTester.py	/^    cpuDataPort = VectorMasterPort("the cpu data cache ports")$/;"	v	class:RubyTester
cpuEventList	cpuevent.cc	/^CpuEvent::CpuEventList CpuEvent::cpuEventList;$/;"	m	class:CpuEvent	file:
cpuEventList	cpuevent.hh	/^    static CpuEventList cpuEventList;$/;"	m	class:CpuEvent
cpuEventNum	inorder/cpu.hh	/^    InstSeqNum cpuEventNum;$/;"	m	class:InOrderCPU
cpuEventRemoveList	inorder/cpu.hh	/^    std::queue<Event*> cpuEventRemoveList;$/;"	m	class:InOrderCPU
cpuEventType	inorder/cpu.hh	/^        CPUEventType cpuEventType;$/;"	m	class:InOrderCPU::CPUEvent
cpuId	base.hh	/^    int cpuId() const { return _cpuId; }$/;"	f	class:BaseCPU
cpuId	base_dyn_inst.hh	/^    int cpuId() const { return cpu->cpuId(); }$/;"	f	class:BaseDynInst
cpuId	checker/thread_context.hh	/^    int cpuId() const { return actualTC->cpuId(); }$/;"	f	class:CheckerThreadContext
cpuId	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::cpuId() const$/;"	f	class:InOrderDynInst
cpuId	inorder/thread_context.hh	/^    int cpuId() const { return cpu->cpuId(); }$/;"	f	class:InOrderThreadContext
cpuId	o3/thread_context.hh	/^    virtual int cpuId() const { return cpu->cpuId(); }$/;"	f	class:O3ThreadContext
cpuId	thread_context.hh	/^    int cpuId() const { return actualTC->cpuId(); }$/;"	f	class:ProxyThreadContext
cpuId	thread_state.hh	/^    int cpuId() const { return baseCpu->cpuId(); }$/;"	f	struct:ThreadState
cpuInstPort	testers/rubytest/RubyTester.py	/^    cpuInstPort = VectorMasterPort("the cpu inst cache ports")$/;"	v	class:RubyTester
cpuList	base.hh	/^    static std::vector<BaseCPU *> cpuList;   \/\/!< Static global cpu list$/;"	m	class:BaseCPU
cpuPort	testers/directedtest/RubyDirectedTester.py	/^    cpuPort = VectorMasterPort("the cpu ports")$/;"	v	class:RubyDirectedTester
cpuStartup	kvm/vm.cc	/^KvmVM::cpuStartup()$/;"	f	class:KvmVM
cpuWaitList	o3/cpu.hh	/^    std::list<int> cpuWaitList;$/;"	m	class:FullO3CPU
cpu_id	BaseCPU.py	/^    cpu_id = Param.Int(-1, "CPU identifier")$/;"	v
cpu_id	inorder/cpu.hh	/^    int cpu_id;$/;"	m	class:InOrderCPU
cpu_params	inorder/cpu.hh	/^    Params *cpu_params;$/;"	m	class:InOrderCPU
create	dummy_checker.cc	/^DummyCheckerParams::create()$/;"	f	class:DummyCheckerParams
create	exetrace.cc	/^ExeTracerParams::create()$/;"	f	class:ExeTracerParams
create	func_unit.cc	/^FUDescParams::create()$/;"	f	class:FUDescParams
create	func_unit.cc	/^OpDescParams::create()$/;"	f	class:OpDescParams
create	inorder/inorder_cpu_builder.cc	/^InOrderCPUParams::create()$/;"	f	class:InOrderCPUParams
create	inorder/inorder_trace.cc	/^InOrderTraceParams::create()$/;"	f	class:InOrderTraceParams
create	inteltrace.cc	/^IntelTraceParams::create()$/;"	f	class:IntelTraceParams
create	intr_control.cc	/^IntrControlParams::create()$/;"	f	class:IntrControlParams
create	intr_control_noisa.cc	/^IntrControlParams::create()$/;"	f	class:IntrControlParams
create	kvm/arm_cpu.cc	/^ArmKvmCPUParams::create()$/;"	f	class:ArmKvmCPUParams
create	kvm/vm.cc	/^Kvm::create()$/;"	f	class:Kvm
create	kvm/vm.cc	/^KvmVMParams::create()$/;"	f	class:KvmVMParams
create	kvm/x86_cpu.cc	/^X86KvmCPUParams::create()$/;"	f	class:X86KvmCPUParams
create	legiontrace.cc	/^LegionTraceParams::create()$/;"	f	class:LegionTraceParams
create	minor/cpu.cc	/^MinorCPUParams::create()$/;"	f	class:MinorCPUParams
create	minor/func_unit.cc	/^MinorFUParams::create()$/;"	f	class:MinorFUParams
create	minor/func_unit.cc	/^MinorFUPoolParams::create()$/;"	f	class:MinorFUPoolParams
create	minor/func_unit.cc	/^MinorFUTimingParams::create()$/;"	f	class:MinorFUTimingParams
create	minor/func_unit.cc	/^MinorOpClassParams::create()$/;"	f	class:MinorOpClassParams
create	minor/func_unit.cc	/^MinorOpClassSetParams::create()$/;"	f	class:MinorOpClassSetParams
create	o3/checker.cc	/^O3CheckerParams::create()$/;"	f	class:O3CheckerParams
create	o3/deriv.cc	/^DerivO3CPUParams::create()$/;"	f	class:DerivO3CPUParams
create	o3/fu_pool.cc	/^FUPoolParams::create()$/;"	f	class:FUPoolParams
create	o3/probe/simple_trace.cc	/^SimpleTraceParams::create()$/;"	f	class:SimpleTraceParams
create	ozone/checker_builder.cc	/^OzoneCheckerParams::create()$/;"	f	class:OzoneCheckerParams
create	ozone/cpu_builder.cc	/^DerivOzoneCPUParams::create()$/;"	f	class:DerivOzoneCPUParams
create	ozone/simple_cpu_builder.cc	/^SimpleOzoneCPUParams::create()$/;"	f	class:SimpleOzoneCPUParams
create	pred/bpred_unit.cc	/^BranchPredictorParams::create()$/;"	f	class:BranchPredictorParams
create	simple/atomic.cc	/^AtomicSimpleCPUParams::create()$/;"	f	class:AtomicSimpleCPUParams
create	simple/probes/simpoint.cc	/^SimPointParams::create()$/;"	f	class:SimPointParams
create	simple/timing.cc	/^TimingSimpleCPUParams::create()$/;"	f	class:TimingSimpleCPUParams
create	testers/directedtest/InvalidateGenerator.cc	/^InvalidateGeneratorParams::create()$/;"	f	class:InvalidateGeneratorParams
create	testers/directedtest/RubyDirectedTester.cc	/^RubyDirectedTesterParams::create()$/;"	f	class:RubyDirectedTesterParams
create	testers/directedtest/SeriesRequestGenerator.cc	/^SeriesRequestGeneratorParams::create()$/;"	f	class:SeriesRequestGeneratorParams
create	testers/memtest/memtest.cc	/^MemTestParams::create()$/;"	f	class:MemTestParams
create	testers/networktest/networktest.cc	/^NetworkTestParams::create()$/;"	f	class:NetworkTestParams
create	testers/rubytest/RubyTester.cc	/^RubyTesterParams::create()$/;"	f	class:RubyTesterParams
create	testers/traffic_gen/traffic_gen.cc	/^TrafficGenParams::create()$/;"	f	class:TrafficGenParams
create	timing_expr.cc	/^TimingExprBinParams::create()$/;"	f	class:TimingExprBinParams
create	timing_expr.cc	/^TimingExprIfParams::create()$/;"	f	class:TimingExprIfParams
create	timing_expr.cc	/^TimingExprLetParams::create()$/;"	f	class:TimingExprLetParams
create	timing_expr.cc	/^TimingExprLiteralParams::create()$/;"	f	class:TimingExprLiteralParams
create	timing_expr.cc	/^TimingExprReadIntRegParams::create()$/;"	f	class:TimingExprReadIntRegParams
create	timing_expr.cc	/^TimingExprRefParams::create()$/;"	f	class:TimingExprRefParams
create	timing_expr.cc	/^TimingExprSrcRegParams::create()$/;"	f	class:TimingExprSrcRegParams
create	timing_expr.cc	/^TimingExprUnParams::create()$/;"	f	class:TimingExprUnParams
createBackEndSchedule	inorder/pipeline_traits.5stage.cc	/^bool createBackEndSchedule(DynInstPtr &inst)$/;"	f	namespace:ThePipeline
createBackEndSchedule	inorder/pipeline_traits.9stage.cc	/^bool createBackEndSchedule(DynInstPtr &inst)$/;"	f	namespace:ThePipeline
createBackEndSchedule	inorder/pipeline_traits.9stage.smt2.cc	/^bool createBackEndSchedule(DynInstPtr &inst)$/;"	f	namespace:ThePipeline
createBackEndSked	inorder/cpu.cc	/^InOrderCPU::createBackEndSked(DynInstPtr inst)$/;"	f	class:InOrderCPU
createFaultSked	inorder/cpu.cc	/^InOrderCPU::createFaultSked()$/;"	f	class:InOrderCPU
createFrontEndSchedule	inorder/pipeline_traits.5stage.cc	/^void createFrontEndSchedule(DynInstPtr &inst)$/;"	f	namespace:ThePipeline
createFrontEndSchedule	inorder/pipeline_traits.9stage.cc	/^void createFrontEndSchedule(DynInstPtr &inst)$/;"	f	namespace:ThePipeline
createFrontEndSchedule	inorder/pipeline_traits.9stage.smt2.cc	/^void createFrontEndSchedule(DynInstPtr &inst)$/;"	f	namespace:ThePipeline
createFrontEndSked	inorder/cpu.cc	/^InOrderCPU::createFrontEndSked()$/;"	f	class:InOrderCPU
createIRQChip	kvm/vm.cc	/^KvmVM::createIRQChip()$/;"	f	class:KvmVM
createInterruptController	BaseCPU.py	/^    def createInterruptController(self):$/;"	f
createMachInst	inorder/resources/fetch_unit.cc	/^FetchUnit::createMachInst(std::list<FetchBlock*>::iterator fetch_it,$/;"	f	class:FetchUnit
createThreads	BaseCPU.py	/^    def createThreads(self):$/;"	f
createVCPU	kvm/vm.cc	/^KvmVM::createVCPU(long vcpuID)$/;"	f	class:KvmVM
createVM	kvm/vm.cc	/^Kvm::createVM()$/;"	f	class:Kvm
ctrInsts	kvm/base.hh	/^    Counter ctrInsts;$/;"	m	class:BaseKvmCPU
ctrl32	kvm/x86_cpu.cc	/^        } ctrl32;$/;"	m	union:FXSave::__anon5	typeref:struct:FXSave::__anon5::__anon6	file:
ctrl64	kvm/x86_cpu.cc	/^        } ctrl64;$/;"	m	union:FXSave::__anon5	typeref:struct:FXSave::__anon5::__anon7	file:
curMacroStaticInst	checker/cpu.hh	/^    StaticInstPtr curMacroStaticInst;$/;"	m	class:CheckerCPU
curMacroStaticInst	simple/base.hh	/^    StaticInstPtr curMacroStaticInst;$/;"	m	class:BaseSimpleCPU
curResSlot	inorder/inorder_dyn_inst.hh	/^    unsigned curResSlot;$/;"	m	class:InOrderDynInst
curSkedEntry	inorder/inorder_dyn_inst.hh	/^    RSkedIt curSkedEntry;$/;"	m	class:InOrderDynInst
curSkedEntry	inorder/resource_sked.hh	/^    SkedIt curSkedEntry;$/;"	m	class:ResourceSked
curStage	inorder/resource_sked.hh	/^    int curStage;$/;"	m	class:RSkedIt
curStage_end	inorder/resource_sked.hh	/^    ResourceSked::SkedIt curStage_end;$/;"	m	class:RSkedIt
curStaticInst	checker/cpu.hh	/^    StaticInstPtr curStaticInst;$/;"	m	class:CheckerCPU
curStaticInst	simple/base.hh	/^    StaticInstPtr curStaticInst;$/;"	m	class:BaseSimpleCPU
currElement	testers/traffic_gen/generators.hh	/^    TraceElement currElement;$/;"	m	class:TraceGen
currState	testers/traffic_gen/traffic_gen.hh	/^    uint32_t currState;$/;"	m	class:TrafficGen
currentBBV	simple/probes/simpoint.hh	/^    BasicBlockRange currentBBV;$/;"	m	class:SimPoint
currentBBVInstCount	simple/probes/simpoint.hh	/^    uint64_t currentBBVInstCount;$/;"	m	class:SimPoint
currentFunctionEnd	base.hh	/^    Addr currentFunctionEnd;$/;"	m	class:BaseCPU
currentFunctionStart	base.hh	/^    Addr currentFunctionStart;$/;"	m	class:BaseCPU
current_count	ozone/back_end.hh	/^        Stats::Scalar current_count;$/;"	m	class:BackEnd::InstQueue
cwp	m5legion_interface.h	/^    uint8_t cwp;$/;"	m	struct:__anon8
cxx_class	ExeTracer.py	/^    cxx_class = 'Trace::ExeTracer'$/;"	v	class:ExeTracer
cxx_class	IntelTrace.py	/^    cxx_class = 'Trace::IntelTrace'$/;"	v	class:IntelTrace
cxx_class	LegionTrace.py	/^    cxx_class = 'Trace::LegionTrace'$/;"	v	class:LegionTrace
cxx_class	NativeTrace.py	/^    cxx_class = 'Trace::NativeTrace'$/;"	v	class:NativeTrace
cxx_class	inorder/InOrderTrace.py	/^    cxx_class = 'Trace::InOrderTrace'$/;"	v	class:InOrderTrace
cxx_class	pred/BranchPredictor.py	/^    cxx_class = 'BPredUnit'$/;"	v	class:BranchPredictor
cxx_header	BaseCPU.py	/^    cxx_header = "cpu\/base.hh"$/;"	v	class:BaseCPU
cxx_header	CheckerCPU.py	/^    cxx_header = "cpu\/checker\/cpu.hh"$/;"	v	class:CheckerCPU
cxx_header	DummyChecker.py	/^    cxx_header = 'cpu\/dummy_checker.hh'$/;"	v	class:DummyChecker
cxx_header	ExeTracer.py	/^    cxx_header = "cpu\/exetrace.hh"$/;"	v	class:ExeTracer
cxx_header	FuncUnit.py	/^    cxx_header = "cpu\/func_unit.hh"$/;"	v	class:FUDesc
cxx_header	FuncUnit.py	/^    cxx_header = "cpu\/func_unit.hh"$/;"	v	class:OpDesc
cxx_header	IntelTrace.py	/^    cxx_header = "cpu\/inteltrace.hh"$/;"	v	class:IntelTrace
cxx_header	IntrControl.py	/^    cxx_header = "cpu\/intr_control.hh"$/;"	v	class:IntrControl
cxx_header	LegionTrace.py	/^    cxx_header = "cpu\/legiontrace.hh"$/;"	v	class:LegionTrace
cxx_header	NativeTrace.py	/^    cxx_header = "cpu\/nativetrace.hh"$/;"	v	class:NativeTrace
cxx_header	TimingExpr.py	/^    cxx_header = 'cpu\/timing_expr.hh'$/;"	v	class:TimingExpr
cxx_header	TimingExpr.py	/^    cxx_header = 'cpu\/timing_expr.hh'$/;"	v	class:TimingExprBin
cxx_header	TimingExpr.py	/^    cxx_header = 'cpu\/timing_expr.hh'$/;"	v	class:TimingExprIf
cxx_header	TimingExpr.py	/^    cxx_header = 'cpu\/timing_expr.hh'$/;"	v	class:TimingExprLet
cxx_header	TimingExpr.py	/^    cxx_header = 'cpu\/timing_expr.hh'$/;"	v	class:TimingExprLiteral
cxx_header	TimingExpr.py	/^    cxx_header = 'cpu\/timing_expr.hh'$/;"	v	class:TimingExprReadIntReg
cxx_header	TimingExpr.py	/^    cxx_header = 'cpu\/timing_expr.hh'$/;"	v	class:TimingExprRef
cxx_header	TimingExpr.py	/^    cxx_header = 'cpu\/timing_expr.hh'$/;"	v	class:TimingExprSrcReg
cxx_header	TimingExpr.py	/^    cxx_header = 'cpu\/timing_expr.hh'$/;"	v	class:TimingExprUn
cxx_header	inorder/InOrderCPU.py	/^    cxx_header = "cpu\/inorder\/cpu.hh"$/;"	v	class:InOrderCPU
cxx_header	inorder/InOrderTrace.py	/^    cxx_header = "cpu\/inorder\/inorder_trace.hh"$/;"	v	class:InOrderTrace
cxx_header	kvm/ArmKvmCPU.py	/^    cxx_header = "cpu\/kvm\/arm_cpu.hh"$/;"	v	class:ArmKvmCPU
cxx_header	kvm/BaseKvmCPU.py	/^    cxx_header = "cpu\/kvm\/base.hh"$/;"	v	class:BaseKvmCPU
cxx_header	kvm/KvmVM.py	/^    cxx_header = "cpu\/kvm\/vm.hh"$/;"	v	class:KvmVM
cxx_header	kvm/X86KvmCPU.py	/^    cxx_header = "cpu\/kvm\/x86_cpu.hh"$/;"	v	class:X86KvmCPU
cxx_header	minor/MinorCPU.py	/^    cxx_header = "cpu\/minor\/cpu.hh"$/;"	v	class:MinorCPU
cxx_header	minor/MinorCPU.py	/^    cxx_header = "cpu\/minor\/func_unit.hh"$/;"	v	class:MinorFU
cxx_header	minor/MinorCPU.py	/^    cxx_header = "cpu\/minor\/func_unit.hh"$/;"	v	class:MinorFUPool
cxx_header	minor/MinorCPU.py	/^    cxx_header = "cpu\/minor\/func_unit.hh"$/;"	v	class:MinorFUTiming
cxx_header	minor/MinorCPU.py	/^    cxx_header = "cpu\/minor\/func_unit.hh"$/;"	v	class:MinorOpClass
cxx_header	minor/MinorCPU.py	/^    cxx_header = "cpu\/minor\/func_unit.hh"$/;"	v	class:MinorOpClassSet
cxx_header	o3/FUPool.py	/^    cxx_header = "cpu\/o3\/fu_pool.hh"$/;"	v	class:FUPool
cxx_header	o3/O3CPU.py	/^    cxx_header = 'cpu\/o3\/deriv.hh'$/;"	v	class:DerivO3CPU
cxx_header	o3/O3Checker.py	/^    cxx_header = 'cpu\/o3\/checker.hh'$/;"	v	class:O3Checker
cxx_header	o3/probe/SimpleTrace.py	/^    cxx_header = 'cpu\/o3\/probe\/simple_trace.hh'$/;"	v	class:SimpleTrace
cxx_header	pred/BranchPredictor.py	/^    cxx_header = "cpu\/pred\/bpred_unit.hh"$/;"	v	class:BranchPredictor
cxx_header	simple/AtomicSimpleCPU.py	/^    cxx_header = "cpu\/simple\/atomic.hh"$/;"	v	class:AtomicSimpleCPU
cxx_header	simple/BaseSimpleCPU.py	/^    cxx_header = "cpu\/simple\/base.hh"$/;"	v	class:BaseSimpleCPU
cxx_header	simple/TimingSimpleCPU.py	/^    cxx_header = "cpu\/simple\/timing.hh"$/;"	v	class:TimingSimpleCPU
cxx_header	simple/probes/SimPoint.py	/^    cxx_header = "cpu\/simple\/probes\/simpoint.hh"$/;"	v	class:SimPoint
cxx_header	testers/directedtest/RubyDirectedTester.py	/^    cxx_header = "cpu\/testers\/directedtest\/DirectedGenerator.hh"$/;"	v	class:DirectedGenerator
cxx_header	testers/directedtest/RubyDirectedTester.py	/^    cxx_header = "cpu\/testers\/directedtest\/InvalidateGenerator.hh"$/;"	v	class:InvalidateGenerator
cxx_header	testers/directedtest/RubyDirectedTester.py	/^    cxx_header = "cpu\/testers\/directedtest\/RubyDirectedTester.hh"$/;"	v	class:RubyDirectedTester
cxx_header	testers/directedtest/RubyDirectedTester.py	/^    cxx_header = "cpu\/testers\/directedtest\/SeriesRequestGenerator.hh"$/;"	v	class:SeriesRequestGenerator
cxx_header	testers/memtest/MemTest.py	/^    cxx_header = "cpu\/testers\/memtest\/memtest.hh"$/;"	v	class:MemTest
cxx_header	testers/networktest/NetworkTest.py	/^    cxx_header = "cpu\/testers\/networktest\/networktest.hh"$/;"	v	class:NetworkTest
cxx_header	testers/rubytest/RubyTester.py	/^    cxx_header = "cpu\/testers\/rubytest\/RubyTester.hh"$/;"	v	class:RubyTester
cxx_header	testers/traffic_gen/TrafficGen.py	/^    cxx_header = "cpu\/testers\/traffic_gen\/traffic_gen.hh"$/;"	v	class:TrafficGen
cycle_count	m5legion_interface.h	/^    uint64_t cycle_count;$/;"	m	struct:__anon8
cyclesBeforeInsert	minor/func_unit.cc	/^FUPipeline::cyclesBeforeInsert()$/;"	f	class:Minor::FUPipeline
cyclicIndexDec	minor/execute.cc	/^cyclicIndexDec(unsigned int index, unsigned int cycle_size)$/;"	f	namespace:Minor
cyclicIndexInc	minor/execute.cc	/^cyclicIndexInc(unsigned int index, unsigned int cycle_size)$/;"	f	namespace:Minor
d	o3/regfile.hh	/^        FloatReg d;$/;"	m	union:PhysRegFile::__anon9
d2i	ozone/back_end.hh	/^    TimeBuffer<DispatchToIssue> d2i;$/;"	m	class:BackEnd
d2i	ozone/lw_back_end.hh	/^    TimeBuffer<DispatchToIssue> d2i;$/;"	m	class:LWBackEnd
dToE	minor/pipeline.hh	/^    Latch<ForwardInstData> dToE;$/;"	m	class:Minor::Pipeline
data	minor/lsq.hh	/^        PacketDataPtr data;$/;"	m	class:Minor::LSQ::LSQRequest
data	o3/lsq_unit.hh	/^        char data[16];$/;"	m	struct:LSQUnit::SQEntry
data	ozone/lsq_unit.hh	/^        IntReg data;$/;"	m	struct:OzoneLSQ::SQEntry
data	ozone/lw_lsq.hh	/^        IntReg data;$/;"	m	struct:OzoneLWLSQ::SQEntry
data	testers/memtest/memtest.hh	/^        uint8_t *data;$/;"	m	class:MemTest::MemTestSenderState
data	testers/networktest/networktest.hh	/^        uint8_t *data;$/;"	m	class:NetworkTest::NetworkTestSenderState
data	timebuf.hh	/^    char *data;$/;"	m	class:TimeBuffer
data	translation.hh	/^    uint8_t *data;$/;"	m	class:WholeTranslationState
dataLimit	testers/traffic_gen/generators.hh	/^    const Addr dataLimit;$/;"	m	class:LinearGen
dataLimit	testers/traffic_gen/generators.hh	/^    const Addr dataLimit;$/;"	m	class:RandomGen
dataManipulated	testers/traffic_gen/generators.hh	/^    Addr dataManipulated;$/;"	m	class:LinearGen
dataManipulated	testers/traffic_gen/generators.hh	/^    Addr dataManipulated;$/;"	m	class:RandomGen
dataMasterId	base.hh	/^    MasterID dataMasterId() { return _dataMasterId; }$/;"	f	class:BaseCPU
dataMemReq	inorder/inorder_dyn_inst.hh	/^    RequestPtr dataMemReq;$/;"	m	class:InOrderDynInst
dataName	minor/buffers.hh	/^    std::string dataName;$/;"	m	class:Minor::MinorBuffer
dataName	minor/buffers.hh	/^    std::string dataName;$/;"	m	class:Minor::Queue
dataPkt	inorder/resources/cache_unit.hh	/^    CacheReqPacket *dataPkt;$/;"	m	class:CacheRequest
dataPort	inorder/cpu.hh	/^    CachePort dataPort;$/;"	m	class:InOrderCPU
dataPort	kvm/base.hh	/^    KVMCpuPort dataPort;$/;"	m	class:BaseKvmCPU
dataUnit	inorder/resource_pool.hh	/^    CacheUnit *dataUnit;$/;"	m	class:ResourcePool
data_read_req	simple/atomic.hh	/^    Request data_read_req;$/;"	m	class:AtomicSimpleCPU
data_write_req	simple/atomic.hh	/^    Request data_write_req;$/;"	m	class:AtomicSimpleCPU
dbg_vtophys	checker/cpu.cc	/^CheckerCPU::dbg_vtophys(Addr addr)$/;"	f	class:CheckerCPU
dbg_vtophys	minor/cpu.cc	/^MinorCPU::dbg_vtophys(Addr addr)$/;"	f	class:MinorCPU
dbg_vtophys	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::dbg_vtophys(Addr addr)$/;"	f	class:OzoneCPU
dbg_vtophys	simple/base.cc	/^BaseSimpleCPU::dbg_vtophys(Addr addr)$/;"	f	class:BaseSimpleCPU
dbl	base_dyn_inst.hh	/^        double dbl;$/;"	m	union:BaseDynInst::Result
dbl	checker/cpu.hh	/^        double dbl;$/;"	m	union:CheckerCPU::Result
dcacheInterface	o3/inst_queue.hh	/^    MemInterface *dcacheInterface;$/;"	m	class:InstructionQueue
dcacheInterface	ozone/back_end.hh	/^    MemInterface *dcacheInterface;$/;"	m	class:BackEnd
dcacheInterface	ozone/inst_queue.hh	/^    MemInterface *dcacheInterface;$/;"	m	class:InstQueue
dcacheInterface	ozone/lsq_unit.hh	/^    MemInterface *dcacheInterface;$/;"	m	class:OzoneLSQ
dcachePort	checker/cpu.hh	/^    MasterPort *dcachePort;$/;"	m	class:CheckerCPU
dcachePort	minor/lsq.hh	/^    DcachePort dcachePort;$/;"	m	class:Minor::LSQ
dcachePort	o3/cpu.hh	/^    DcachePort dcachePort;$/;"	m	class:FullO3CPU
dcachePort	o3/lsq_unit.hh	/^    MasterPort *dcachePort;$/;"	m	class:LSQUnit
dcachePort	ozone/lw_lsq.hh	/^    DcachePort dcachePort;$/;"	m	class:OzoneLWLSQ
dcachePort	simple/atomic.hh	/^    AtomicCPUDPort dcachePort;$/;"	m	class:AtomicSimpleCPU
dcachePort	simple/timing.hh	/^    DcachePort dcachePort;$/;"	m	class:TimingSimpleCPU
dcacheRetryCycles	simple/base.hh	/^    Stats::Scalar dcacheRetryCycles;$/;"	m	class:BaseSimpleCPU
dcacheStallCycles	ozone/inorder_back_end.hh	/^    Stats::Scalar dcacheStallCycles;$/;"	m	class:InorderBackEnd
dcacheStallCycles	simple/base.hh	/^    Stats::Scalar dcacheStallCycles;$/;"	m	class:BaseSimpleCPU
dcache_access	simple/atomic.hh	/^    bool dcache_access;$/;"	m	class:AtomicSimpleCPU
dcache_latency	simple/atomic.hh	/^    Tick dcache_latency;$/;"	m	class:AtomicSimpleCPU
dcache_pkt	simple/timing.hh	/^    PacketPtr dcache_pkt;$/;"	m	class:TimingSimpleCPU
dcache_port	BaseCPU.py	/^    dcache_port = MasterPort("Data Port")$/;"	v
deactivateAll	inorder/resource_pool.9stage.cc	/^ResourcePool::deactivateAll(ThreadID tid)$/;"	f	class:ResourcePool
deactivateContext	inorder/cpu.cc	/^InOrderCPU::deactivateContext(ThreadID tid)$/;"	f	class:InOrderCPU
deactivateStage	activity.cc	/^ActivityRecorder::deactivateStage(const int idx)$/;"	f	class:ActivityRecorder
deactivateStage	inorder/cpu.hh	/^    void deactivateStage(const int idx)$/;"	f	class:InOrderCPU
deactivateStage	o3/cpu.hh	/^    void deactivateStage(const StageIdx idx)$/;"	f	class:FullO3CPU
deactivateStage	o3/iew_impl.hh	/^DefaultIEW<Impl>::deactivateStage()$/;"	f	class:DefaultIEW
deactivateThread	inorder/cpu.cc	/^InOrderCPU::deactivateThread(ThreadID tid)$/;"	f	class:InOrderCPU
deactivateThread	inorder/resource.cc	/^Resource::deactivateThread(ThreadID tid)$/;"	f	class:Resource
deactivateThread	inorder/resource_pool.cc	/^ResourcePool::deactivateThread(ThreadID tid)$/;"	f	class:ResourcePool
deactivateThread	inorder/resources/fetch_seq_unit.cc	/^FetchSeqUnit::deactivateThread(ThreadID tid)$/;"	f	class:FetchSeqUnit
deactivateThread	o3/commit_impl.hh	/^DefaultCommit<Impl>::deactivateThread(ThreadID tid)$/;"	f	class:DefaultCommit
deactivateThread	o3/cpu.cc	/^FullO3CPU<Impl>::deactivateThread(ThreadID tid)$/;"	f	class:FullO3CPU
deactivateThread	o3/fetch_impl.hh	/^DefaultFetch<Impl>::deactivateThread(ThreadID tid)$/;"	f	class:DefaultFetch
deadlock_threshold	testers/rubytest/RubyTester.py	/^    deadlock_threshold = Param.Int(50000, "how often to check for deadlock")$/;"	v	class:RubyTester
deallocateContext	kvm/base.cc	/^BaseKvmCPU::deallocateContext(ThreadID thread_num)$/;"	f	class:BaseKvmCPU
deallocateContext	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::deallocateContext(int thread_num, int delay)$/;"	f	class:OzoneCPU
debugPrint	testers/rubytest/Check.cc	/^Check::debugPrint()$/;"	f	class:Check
decode	minor/pipeline.hh	/^    Decode decode;$/;"	m	class:Minor::Pipeline
decode	o3/cpu.hh	/^    typename CPUPolicy::Decode decode;$/;"	m	class:FullO3CPU
decode	o3/decode_impl.hh	/^DefaultDecode<Impl>::decode(bool &status_change, ThreadID tid)$/;"	f	class:DefaultDecode
decode	o3/fetch.hh	/^        bool decode;$/;"	m	struct:DefaultFetch::Stalls
decodeBlock	o3/comm.hh	/^    bool decodeBlock[Impl::MaxThreads];$/;"	m	struct:TimeBufStruct
decodeBlockedCycles	o3/decode.hh	/^    Stats::Scalar decodeBlockedCycles;$/;"	m	class:DefaultDecode
decodeBranchMispred	o3/decode.hh	/^    Stats::Scalar decodeBranchMispred;$/;"	m	class:DefaultDecode
decodeBranchResolved	o3/decode.hh	/^    Stats::Scalar decodeBranchResolved;$/;"	m	class:DefaultDecode
decodeCoProcReg	kvm/arm_cpu.cc	/^ArmKvmCPU::decodeCoProcReg(uint64_t id) const$/;"	f	class:ArmKvmCPU
decodeComm	o3/comm.hh	/^    struct decodeComm {$/;"	s	struct:TimeBufStruct
decodeControlMispred	o3/decode.hh	/^    Stats::Scalar decodeControlMispred;$/;"	m	class:DefaultDecode
decodeCycleInput	minor/MinorCPU.py	/^    decodeCycleInput = Param.Bool(True,$/;"	v	class:MinorCPU
decodeDecodedInsts	o3/decode.hh	/^    Stats::Scalar decodeDecodedInsts;$/;"	m	class:DefaultDecode
decodeIdleCycles	o3/decode.hh	/^    Stats::Scalar decodeIdleCycles;$/;"	m	class:DefaultDecode
decodeInfo	o3/comm.hh	/^    decodeComm decodeInfo[Impl::MaxThreads];$/;"	m	struct:TimeBufStruct
decodeInputBufferSize	minor/MinorCPU.py	/^    decodeInputBufferSize = Param.Unsigned(3,$/;"	v	class:MinorCPU
decodeInputWidth	minor/MinorCPU.py	/^    decodeInputWidth = Param.Unsigned(2,$/;"	v	class:MinorCPU
decodeInsts	o3/decode_impl.hh	/^DefaultDecode<Impl>::decodeInsts(ThreadID tid)$/;"	f	class:DefaultDecode
decodeQueue	o3/cpu.hh	/^    TimeBuffer<DecodeStruct> decodeQueue;$/;"	m	class:FullO3CPU
decodeQueue	o3/decode.hh	/^    TimeBuffer<DecodeStruct> *decodeQueue;$/;"	m	class:DefaultDecode
decodeQueue	o3/rename.hh	/^    TimeBuffer<DecodeStruct> *decodeQueue;$/;"	m	class:DefaultRename
decodeRunCycles	o3/decode.hh	/^    Stats::Scalar decodeRunCycles;$/;"	m	class:DefaultDecode
decodeSquashCycles	o3/decode.hh	/^    Stats::Scalar decodeSquashCycles;$/;"	m	class:DefaultDecode
decodeSquashedInsts	o3/decode.hh	/^    Stats::Scalar decodeSquashedInsts;$/;"	m	class:DefaultDecode
decodeStatus	o3/decode.hh	/^    ThreadStatus decodeStatus[Impl::MaxThreads];$/;"	m	class:DefaultDecode
decodeTick	o3/dyn_inst.hh	/^    int32_t decodeTick;  \/\/ instruction enters decode phase$/;"	m	class:BaseO3DynInst
decodeToExecuteForwardDelay	minor/MinorCPU.py	/^    decodeToExecuteForwardDelay = Param.Cycles(1,$/;"	v	class:MinorCPU
decodeToFetchDelay	o3/O3CPU.py	/^    decodeToFetchDelay = Param.Cycles(1, "Decode to fetch delay")$/;"	v	class:DerivO3CPU
decodeToFetchDelay	o3/fetch.hh	/^    Cycles decodeToFetchDelay;$/;"	m	class:DefaultFetch
decodeToFetchDelay	ozone/OzoneCPU.py	/^    decodeToFetchDelay = Param.Unsigned("Decode to fetch delay")$/;"	v	class:DerivOzoneCPU
decodeToFetchDelay	ozone/SimpleOzoneCPU.py	/^    decodeToFetchDelay = Param.Unsigned("Decode to fetch delay")$/;"	v	class:SimpleOzoneCPU
decodeToFetchDelay	ozone/simple_params.hh	/^    unsigned decodeToFetchDelay;$/;"	m	class:SimpleParams
decodeToRenameDelay	o3/O3CPU.py	/^    decodeToRenameDelay = Param.Cycles(1, "Decode to rename delay")$/;"	v	class:DerivO3CPU
decodeToRenameDelay	o3/rename.hh	/^    int decodeToRenameDelay;$/;"	m	class:DefaultRename
decodeToRenameDelay	ozone/OzoneCPU.py	/^    decodeToRenameDelay = Param.Unsigned("Decode to rename delay")$/;"	v	class:DerivOzoneCPU
decodeToRenameDelay	ozone/SimpleOzoneCPU.py	/^    decodeToRenameDelay = Param.Unsigned("Decode to rename delay")$/;"	v	class:SimpleOzoneCPU
decodeToRenameDelay	ozone/simple_params.hh	/^    unsigned decodeToRenameDelay;$/;"	m	class:SimpleParams
decodeUnblock	o3/comm.hh	/^    bool decodeUnblock[Impl::MaxThreads];$/;"	m	struct:TimeBufStruct
decodeUnblockCycles	o3/decode.hh	/^    Stats::Scalar decodeUnblockCycles;$/;"	m	class:DefaultDecode
decodeVFPCtrlReg	kvm/arm_cpu.cc	/^ArmKvmCPU::decodeVFPCtrlReg(uint64_t id) const$/;"	f	class:ArmKvmCPU
decodeWidth	o3/O3CPU.py	/^    decodeWidth = Param.Unsigned(8, "Decode width")$/;"	v	class:DerivO3CPU
decodeWidth	o3/decode.hh	/^    unsigned decodeWidth;$/;"	m	class:DefaultDecode
decodeWidth	o3/fetch.hh	/^    unsigned decodeWidth;$/;"	m	class:DefaultFetch
decodeWidth	ozone/OzoneCPU.py	/^    decodeWidth = Param.Unsigned("Decode width")$/;"	v	class:DerivOzoneCPU
decodeWidth	ozone/SimpleOzoneCPU.py	/^    decodeWidth = Param.Unsigned("Decode width")$/;"	v	class:SimpleOzoneCPU
decodeWidth	ozone/simple_params.hh	/^    unsigned decodeWidth;$/;"	m	class:SimpleParams
decoder	inorder/resources/fetch_unit.hh	/^    TheISA::Decoder *decoder[ThePipeline::MaxThreads];$/;"	m	class:FetchUnit
decoder	o3/fetch.hh	/^    TheISA::Decoder *decoder[Impl::MaxThreads];$/;"	m	class:DefaultFetch
decoder	simple_thread.hh	/^    TheISA::Decoder decoder;$/;"	m	class:SimpleThread
decoupledFrontEnd	ozone/cpu.hh	/^    bool decoupledFrontEnd;$/;"	m	class:OzoneCPU
decoupledFrontEnd	ozone/simple_params.hh	/^    bool decoupledFrontEnd;$/;"	m	class:SimpleParams
decrLdIdx	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::decrLdIdx(int &load_idx) const$/;"	f	class:LSQUnit
decrLdIdx	ozone/lsq_unit_impl.hh	/^OzoneLSQ<Impl>::decrLdIdx(int &load_idx)$/;"	f	class:OzoneLSQ
decrStIdx	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::decrStIdx(int &store_idx) const$/;"	f	class:LSQUnit
decrStIdx	ozone/lsq_unit_impl.hh	/^OzoneLSQ<Impl>::decrStIdx(int &store_idx)$/;"	f	class:OzoneLSQ
decrTos	pred/ras.hh	/^    inline void decrTos()$/;"	f	class:ReturnAddrStack
decrement	pred/sat_counter.hh	/^    void decrement()$/;"	f	class:SatCounter
default_tracer	BaseCPU.py	/^default_tracer = ExeTracer()$/;"	v
deferMemInst	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::deferMemInst(DynInstPtr &deferred_inst)$/;"	f	class:InstructionQueue
deferredMemInsts	o3/inst_queue.hh	/^    std::list<DynInstPtr> deferredMemInsts;$/;"	m	class:InstructionQueue
defns	TimingExpr.py	/^    defns = VectorParam.TimingExpr("expressions for bindings")$/;"	v	class:TimingExprLet
defns	timing_expr.hh	/^    std::vector<TimingExpr *> defns;$/;"	m	class:TimingExprLet
delay	minor/buffers.hh	/^    Cycles delay;$/;"	m	class:Minor::Latch
delay	translation.hh	/^    bool delay;$/;"	m	class:WholeTranslationState
delayedCommit	o3/fetch.hh	/^    bool delayedCommit[Impl::MaxThreads];$/;"	m	class:DefaultFetch
delayedStartup	kvm/vm.cc	/^KvmVM::delayedStartup()$/;"	f	class:KvmVM
deleteReqs	translation.hh	/^    deleteReqs()$/;"	f	class:WholeTranslationState
deleteRequest	minor/lsq.cc	/^LSQ::StoreBuffer::deleteRequest(LSQRequestPtr request)$/;"	f	class:Minor::LSQ::StoreBuffer
deliverInterrupts	kvm/x86_cpu.cc	/^X86KvmCPU::deliverInterrupts()$/;"	f	class:X86KvmCPU
demapDataPage	base_dyn_inst.hh	/^    void demapDataPage(Addr vaddr, uint64_t asn)$/;"	f	class:BaseDynInst
demapDataPage	checker/cpu.hh	/^    void demapDataPage(Addr vaddr, uint64_t asn)$/;"	f	class:CheckerCPU
demapDataPage	minor/exec_context.hh	/^    demapDataPage(Addr vaddr, uint64_t asn)$/;"	f	class:Minor::ExecContext
demapDataPage	o3/cpu.hh	/^    void demapDataPage(Addr vaddr, uint64_t asn)$/;"	f	class:FullO3CPU
demapDataPage	ozone/cpu.hh	/^    void demapDataPage(Addr vaddr, uint64_t asn)$/;"	f	class:OzoneCPU
demapDataPage	simple/base.hh	/^    void demapDataPage(Addr vaddr, uint64_t asn)$/;"	f	class:BaseSimpleCPU
demapDataPage	simple_thread.hh	/^    void demapDataPage(Addr vaddr, uint64_t asn)$/;"	f	class:SimpleThread
demapInstPage	base_dyn_inst.hh	/^    void demapInstPage(Addr vaddr, uint64_t asn)$/;"	f	class:BaseDynInst
demapInstPage	checker/cpu.hh	/^    void demapInstPage(Addr vaddr, uint64_t asn)$/;"	f	class:CheckerCPU
demapInstPage	minor/exec_context.hh	/^    demapInstPage(Addr vaddr, uint64_t asn)$/;"	f	class:Minor::ExecContext
demapInstPage	o3/cpu.hh	/^    void demapInstPage(Addr vaddr, uint64_t asn)$/;"	f	class:FullO3CPU
demapInstPage	ozone/cpu.hh	/^    void demapInstPage(Addr vaddr, uint64_t asn)$/;"	f	class:OzoneCPU
demapInstPage	simple/base.hh	/^    void demapInstPage(Addr vaddr, uint64_t asn)$/;"	f	class:BaseSimpleCPU
demapInstPage	simple_thread.hh	/^    void demapInstPage(Addr vaddr, uint64_t asn)$/;"	f	class:SimpleThread
demapPage	base_dyn_inst.hh	/^    void demapPage(Addr vaddr, uint64_t asn)$/;"	f	class:BaseDynInst
demapPage	checker/cpu.hh	/^    void demapPage(Addr vaddr, uint64_t asn)$/;"	f	class:CheckerCPU
demapPage	inorder/inorder_dyn_inst.hh	/^    void demapPage(Addr vaddr, uint64_t asn) {$/;"	f	class:InOrderDynInst
demapPage	minor/exec_context.hh	/^    demapPage(Addr vaddr, uint64_t asn)$/;"	f	class:Minor::ExecContext
demapPage	o3/cpu.hh	/^    void demapPage(Addr vaddr, uint64_t asn)$/;"	f	class:FullO3CPU
demapPage	ozone/cpu.hh	/^    void demapPage(Addr vaddr, uint64_t asn)$/;"	f	class:OzoneCPU
demapPage	simple/base.hh	/^    void demapPage(Addr vaddr, uint64_t asn)$/;"	f	class:BaseSimpleCPU
demapPage	simple_thread.hh	/^    void demapPage(Addr vaddr, uint64_t asn)$/;"	f	class:SimpleThread
deniedReq	inorder/resource.hh	/^    ResReqPtr deniedReq;$/;"	m	class:Resource
depCheckShift	o3/lsq_unit.hh	/^    unsigned depCheckShift;$/;"	m	class:LSQUnit
depPred	o3/mem_dep_unit.hh	/^    MemDepPred depPred;$/;"	m	class:MemDepUnit
dependGraph	o3/dep_graph.hh	/^    DepEntry *dependGraph;$/;"	m	class:DependencyGraph
dependGraph	o3/inst_queue.hh	/^    DependencyGraph<DynInstPtr> dependGraph;$/;"	m	class:InstructionQueue
dependInsts	o3/mem_dep_unit.hh	/^        std::vector<MemDepEntryPtr> dependInsts;$/;"	m	class:MemDepUnit::MemDepEntry
dependents	ozone/dyn_inst.hh	/^    std::vector<DynInstPtr> dependents;$/;"	m	class:OzoneDynInst
descr	pc_event.hh	/^    std::string descr() const { return description; }$/;"	f	class:PCEvent
description	base.cc	/^CPUProgressEvent::description() const$/;"	f	class:CPUProgressEvent
description	inorder/cpu.cc	/^InOrderCPU::CPUEvent::description() const$/;"	f	class:InOrderCPU::CPUEvent
description	inorder/cpu.cc	/^InOrderCPU::TickEvent::description() const$/;"	f	class:InOrderCPU::TickEvent
description	inorder/resource.cc	/^ResourceEvent::description() const$/;"	f	class:ResourceEvent
description	inorder/resource_pool.9stage.cc	/^ResourcePool::ResPoolEvent::description()$/;"	f	class:ResourcePool::ResPoolEvent
description	inorder/resource_pool.cc	/^ResourcePool::ResPoolEvent::description() const$/;"	f	class:ResourcePool::ResPoolEvent
description	kvm/base.hh	/^        const char *description() const {$/;"	f	struct:BaseKvmCPU::TickEvent
description	minor/MinorCPU.py	/^    description = Param.String('', "description string of the decoding\/inst."$/;"	v	class:MinorFUTiming
description	minor/func_unit.hh	/^    const MinorFU &description;$/;"	m	class:Minor::FUPipeline
description	minor/func_unit.hh	/^    std::string description;$/;"	m	class:MinorFUTiming
description	o3/commit_impl.hh	/^DefaultCommit<Impl>::TrapEvent::description() const$/;"	f	class:DefaultCommit::TrapEvent
description	o3/cpu.cc	/^FullO3CPU<Impl>::TickEvent::description() const$/;"	f	class:FullO3CPU::TickEvent
description	o3/fetch.hh	/^        const char *description() const$/;"	f	class:DefaultFetch::FinishTranslationEvent
description	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::FUCompletion::description() const$/;"	f	class:InstructionQueue::FUCompletion
description	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::WritebackEvent::description() const$/;"	f	class:LSQUnit::WritebackEvent
description	ozone/back_end_impl.hh	/^BackEnd<Impl>::DCacheCompletionEvent::description() const$/;"	f	class:BackEnd::DCacheCompletionEvent
description	ozone/back_end_impl.hh	/^BackEnd<Impl>::LdWritebackEvent::description() const$/;"	f	class:BackEnd::LdWritebackEvent
description	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::TickEvent::description() const$/;"	f	class:OzoneCPU::TickEvent
description	ozone/inorder_back_end_impl.hh	/^InorderBackEnd<Impl>::DCacheCompletionEvent::description() const$/;"	f	class:InorderBackEnd::DCacheCompletionEvent
description	ozone/lsq_unit_impl.hh	/^OzoneLSQ<Impl>::StoreCompletionEvent::description() const$/;"	f	class:OzoneLSQ::StoreCompletionEvent
description	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::TrapEvent::description() const$/;"	f	class:LWBackEnd::TrapEvent
description	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::WritebackEvent::description() const$/;"	f	class:OzoneLWLSQ::WritebackEvent
description	pc_event.hh	/^    std::string description;$/;"	m	class:PCEvent
description	quiesce_event.cc	/^EndQuiesceEvent::description() const$/;"	f	class:EndQuiesceEvent
description	simple/atomic.cc	/^AtomicSimpleCPU::TickEvent::description() const$/;"	f	class:AtomicSimpleCPU::TickEvent
description	simple/timing.cc	/^TimingSimpleCPU::IprEvent::description() const$/;"	f	class:TimingSimpleCPU::IprEvent
description	simple/timing.hh	/^            const char *description() const { return "Timing CPU dcache tick"; }$/;"	f	struct:TimingSimpleCPU::DcachePort::DTickEvent
description	simple/timing.hh	/^            const char *description() const { return "Timing CPU icache tick"; }$/;"	f	struct:TimingSimpleCPU::IcachePort::ITickEvent
description	simple/timing.hh	/^            const char *description() const { return "Timing CPU tick"; }$/;"	f	struct:TimingSimpleCPU::TimingCPUPort::TickEvent
description	testers/directedtest/RubyDirectedTester.hh	/^        virtual const char *description() const { return "Directed tick"; }$/;"	f	class:RubyDirectedTester::DirectedStartEvent
description	testers/memtest/memtest.hh	/^        virtual const char *description() const { return "MemTest tick"; }$/;"	f	class:MemTest::TickEvent
description	testers/networktest/networktest.hh	/^        virtual const char *description() const { return "NetworkTest tick"; }$/;"	f	class:NetworkTest::TickEvent
description	testers/rubytest/RubyTester.hh	/^        virtual const char *description() const { return "RubyTester tick"; }$/;"	f	class:RubyTester::CheckStartEvent
destRegIdx	base_dyn_inst.hh	/^    RegIndex destRegIdx(int i) const { return staticInst->destRegIdx(i); }$/;"	f	class:BaseDynInst
destRegIdx	inorder/inorder_dyn_inst.hh	/^    RegIndex destRegIdx(int i) const { return staticInst->destRegIdx(i); }$/;"	f	class:InOrderDynInst
destRegIdx	static_inst.hh	/^    RegIndex destRegIdx(int i) const { return _destRegIdx[i]; }$/;"	f	class:StaticInst
detach	kvm/perfevent.cc	/^PerfKvmCounter::detach()$/;"	f	class:PerfKvmCounter
diffcount	legiontrace.cc	/^static int diffcount = 0;$/;"	v	file:
directedStartEvent	testers/directedtest/RubyDirectedTester.hh	/^    DirectedStartEvent directedStartEvent;$/;"	m	class:RubyDirectedTester
disabled	kvm/perfevent.hh	/^    PerfKvmCounterConfig &disabled(bool val) {$/;"	f	class:PerfKvmCounterConfig
disarm	kvm/timer.cc	/^PerfKvmTimer::disarm()$/;"	f	class:PerfKvmTimer
disarm	kvm/timer.cc	/^PosixKvmTimer::disarm()$/;"	f	class:PosixKvmTimer
disassemble	static_inst.cc	/^StaticInst::disassemble(Addr pc, const SymbolTable *symtab) const$/;"	f	class:StaticInst
discardPendingSignal	kvm/base.cc	/^BaseKvmCPU::discardPendingSignal(int signum) const$/;"	f	class:BaseKvmCPU
dispatch	o3/iew_impl.hh	/^DefaultIEW<Impl>::dispatch(ThreadID tid)$/;"	f	class:DefaultIEW
dispatch	ozone/back_end.hh	/^    std::list<DynInstPtr> dispatch;$/;"	m	class:BackEnd
dispatchCountStat	ozone/front_end.hh	/^    Stats::Scalar dispatchCountStat;$/;"	m	class:FrontEnd
dispatchInsts	o3/iew_impl.hh	/^DefaultIEW<Impl>::dispatchInsts(ThreadID tid)$/;"	f	class:DefaultIEW
dispatchInsts	ozone/back_end_impl.hh	/^BackEnd<Impl>::dispatchInsts()$/;"	f	class:BackEnd
dispatchInsts	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::dispatchInsts()$/;"	f	class:LWBackEnd
dispatchRate	ozone/front_end.hh	/^    Stats::Formula dispatchRate;$/;"	m	class:FrontEnd
dispatchSerializeStallCycles	ozone/front_end.hh	/^    Stats::Scalar dispatchSerializeStallCycles;$/;"	m	class:FrontEnd
dispatchSize	ozone/back_end.hh	/^    int dispatchSize;$/;"	m	class:BackEnd
dispatchSize	ozone/lw_back_end.hh	/^    int dispatchSize;$/;"	m	class:LWBackEnd
dispatchStall	ozone/back_end_impl.hh	/^BackEnd<Impl>::dispatchStall()$/;"	f	class:BackEnd
dispatchStall	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::dispatchStall()$/;"	f	class:LWBackEnd
dispatchStatus	o3/iew.hh	/^    StageStatus dispatchStatus[Impl::MaxThreads];$/;"	m	class:DefaultIEW
dispatchStatus	ozone/back_end.hh	/^    Status dispatchStatus;$/;"	m	class:BackEnd
dispatchStatus	ozone/lw_back_end.hh	/^    Status dispatchStatus;$/;"	m	class:LWBackEnd
dispatchTick	o3/dyn_inst.hh	/^    int32_t dispatchTick;$/;"	m	class:BaseO3DynInst
dispatchWidth	o3/O3CPU.py	/^    dispatchWidth = Param.Unsigned(8, "Dispatch width")$/;"	v	class:DerivO3CPU
dispatchWidth	o3/iew.hh	/^    unsigned dispatchWidth;$/;"	m	class:DefaultIEW
dispatchWidth	ozone/back_end.hh	/^    int dispatchWidth;$/;"	m	class:BackEnd
dispatchWidth	ozone/lw_back_end.hh	/^    int dispatchWidth;$/;"	m	class:LWBackEnd
dispatchWidth	ozone/simple_params.hh	/^    int dispatchWidth;$/;"	m	class:SimpleParams
dispatched	o3/comm.hh	/^        unsigned dispatched;$/;"	m	struct:TimeBufStruct::iewComm
dispatchedSerializing	ozone/front_end.hh	/^    Stats::Scalar dispatchedSerializing;$/;"	m	class:FrontEnd
dispatchedTempSerializing	ozone/front_end.hh	/^    Stats::Scalar dispatchedTempSerializing;$/;"	m	class:FrontEnd
dispatchedToLQ	o3/comm.hh	/^        unsigned dispatchedToLQ;$/;"	m	struct:TimeBufStruct::iewComm
dispatchedToSQ	o3/comm.hh	/^        unsigned dispatchedToSQ;$/;"	m	struct:TimeBufStruct::iewComm
div16Latency	inorder/InOrderCPU.py	/^    div16Latency = Param.Cycles(1, "Latency for 16-bit Divide Operations")$/;"	v	class:InOrderCPU
div16Latency	inorder/resources/mult_div_unit.hh	/^    Cycles div16Latency;$/;"	m	class:MultDivUnit
div16RepeatRate	inorder/InOrderCPU.py	/^    div16RepeatRate = Param.Cycles(1, "Repeat Rate for 16-bit Divide Operations")$/;"	v	class:InOrderCPU
div16RepeatRate	inorder/resources/mult_div_unit.hh	/^    unsigned div16RepeatRate;$/;"	m	class:MultDivUnit
div24Latency	inorder/InOrderCPU.py	/^    div24Latency = Param.Cycles(1, "Latency for 24-bit Divide Operations")$/;"	v	class:InOrderCPU
div24Latency	inorder/resources/mult_div_unit.hh	/^    Cycles div24Latency;$/;"	m	class:MultDivUnit
div24RepeatRate	inorder/InOrderCPU.py	/^    div24RepeatRate = Param.Cycles(1, "Repeat Rate for 24-bit Divide Operations")$/;"	v	class:InOrderCPU
div24RepeatRate	inorder/resources/mult_div_unit.hh	/^    unsigned div24RepeatRate;$/;"	m	class:MultDivUnit
div32Latency	inorder/InOrderCPU.py	/^    div32Latency = Param.Cycles(1, "Latency for 32-bit Divide Operations")$/;"	v	class:InOrderCPU
div32Latency	inorder/resources/mult_div_unit.hh	/^    Cycles div32Latency;$/;"	m	class:MultDivUnit
div32RepeatRate	inorder/InOrderCPU.py	/^    div32RepeatRate = Param.Cycles(1, "Repeat Rate for 32-bit Divide Operations")$/;"	v	class:InOrderCPU
div32RepeatRate	inorder/resources/mult_div_unit.hh	/^    unsigned div32RepeatRate;$/;"	m	class:MultDivUnit
div8Latency	inorder/InOrderCPU.py	/^    div8Latency = Param.Cycles(1, "Latency for 8-bit Divide Operations")$/;"	v	class:InOrderCPU
div8Latency	inorder/resources/mult_div_unit.hh	/^    Cycles div8Latency;$/;"	m	class:MultDivUnit
div8RepeatRate	inorder/InOrderCPU.py	/^    div8RepeatRate = Param.Cycles(1, "Repeat Rate for 8-bit Divide Operations")$/;"	v	class:InOrderCPU
div8RepeatRate	inorder/resources/mult_div_unit.hh	/^    unsigned div8RepeatRate;$/;"	m	class:MultDivUnit
divides	inorder/resources/mult_div_unit.hh	/^    Stats::Scalar divides;$/;"	m	class:MultDivUnit
dmaOutstanding	testers/memtest/memtest.hh	/^    bool dmaOutstanding;$/;"	m	class:MemTest
doCacheAccess	inorder/resource.hh	/^    virtual void doCacheAccess(DynInstPtr inst, uint64_t *write_result = NULL,$/;"	f	class:Resource
doCacheAccess	inorder/resources/cache_unit.cc	/^CacheUnit::doCacheAccess(DynInstPtr inst, uint64_t *write_res,$/;"	f	class:CacheUnit
doFetchAccess	inorder/resource.hh	/^    virtual Fault doFetchAccess(DynInstPtr inst)$/;"	f	class:Resource
doInstCommitAccounting	minor/execute.cc	/^Execute::doInstCommitAccounting(MinorDynInstPtr inst)$/;"	f	class:Minor::Execute
doMMIOAccess	kvm/base.cc	/^BaseKvmCPU::doMMIOAccess(Addr paddr, void *data, int size, bool write)$/;"	f	class:BaseKvmCPU
doRetry	testers/memtest/memtest.cc	/^MemTest::doRetry()$/;"	f	class:MemTest
doRetry	testers/networktest/networktest.cc	/^NetworkTest::doRetry()$/;"	f	class:NetworkTest
doService	pc_event.cc	/^PCEventQueue::doService(ThreadContext *tc)$/;"	f	class:PCEventQueue
doSquash	o3/fetch_impl.hh	/^DefaultFetch<Impl>::doSquash(const TheISA::PCState &newPC,$/;"	f	class:DefaultFetch
doSquash	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::doSquash(ThreadID tid)$/;"	f	class:InstructionQueue
doSquash	o3/rename_impl.hh	/^DefaultRename<Impl>::doSquash(const InstSeqNum &squashed_seq_num, ThreadID tid)$/;"	f	class:DefaultRename
doSquash	o3/rob_impl.hh	/^ROB<Impl>::doSquash(ThreadID tid)$/;"	f	class:ROB
doSquash	ozone/inst_queue_impl.hh	/^InstQueue<Impl>::doSquash(ThreadID tid)$/;"	f	class:InstQueue
doSwitchOut	ozone/front_end_impl.hh	/^FrontEnd<Impl>::doSwitchOut()$/;"	f	class:FrontEnd
doSwitchOut	ozone/inorder_back_end.hh	/^    void doSwitchOut() { panic("Not implemented!"); }$/;"	f	class:InorderBackEnd
doSwitchOut	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::doSwitchOut()$/;"	f	class:LWBackEnd
doTLBAccess	inorder/resources/cache_unit.cc	/^CacheUnit::doTLBAccess(DynInstPtr inst, CacheReqPtr cache_req, int acc_size,$/;"	f	class:CacheUnit
do_checkpoint_insts	BaseCPU.py	/^    do_checkpoint_insts = Param.Bool(True,$/;"	v
do_quiesce	BaseCPU.py	/^    do_quiesce = Param.Bool(True, "enable quiesce instructions")$/;"	v
do_statistics_insts	BaseCPU.py	/^    do_statistics_insts = Param.Bool(True,$/;"	v
done	inorder/resource.cc	/^ResourceRequest::done(bool completed)$/;"	f	class:ResourceRequest
doneEACalc	base_dyn_inst.hh	/^    bool doneEACalc() { return instFlags[EACalcDone]; }$/;"	f	class:BaseDynInst
doneEACalc	inorder/inorder_dyn_inst.hh	/^    bool doneEACalc() { return eaCalcDone; }$/;"	f	class:InOrderDynInst
doneInResource	inorder/resource.hh	/^    bool doneInResource;$/;"	m	class:ResourceRequest
doneSeqNum	inorder/comm.hh	/^        InstSeqNum doneSeqNum;$/;"	m	struct:TimeStruct::StageComm
doneSeqNum	o3/comm.hh	/^        InstSeqNum doneSeqNum; \/\/ *F, I$/;"	m	struct:TimeBufStruct::commitComm
doneSeqNum	o3/comm.hh	/^        InstSeqNum doneSeqNum;$/;"	m	struct:TimeBufStruct::decodeComm
doneSeqNum	ozone/cpu.hh	/^        InstSeqNum doneSeqNum;$/;"	m	struct:OzoneCPU::CommStruct
doneSquashing	o3/rob.hh	/^    bool doneSquashing[Impl::MaxThreads];$/;"	m	class:ROB
doneTargCalc	base_dyn_inst.hh	/^    bool doneTargCalc() { return false; }$/;"	f	class:BaseDynInst
doneTargCalc	inorder/inorder_dyn_inst.hh	/^    bool doneTargCalc() { return false; }$/;"	f	class:InOrderDynInst
drain	kvm/base.cc	/^BaseKvmCPU::drain(DrainManager *dm)$/;"	f	class:BaseKvmCPU
drain	minor/cpu.cc	/^MinorCPU::drain(DrainManager *drain_manager)$/;"	f	class:MinorCPU
drain	minor/execute.cc	/^Execute::drain()$/;"	f	class:Minor::Execute
drain	minor/pipeline.cc	/^Pipeline::drain(DrainManager *manager)$/;"	f	class:Minor::Pipeline
drain	o3/commit_impl.hh	/^DefaultCommit<Impl>::drain()$/;"	f	class:DefaultCommit
drain	o3/cpu.cc	/^FullO3CPU<Impl>::drain(DrainManager *drain_manager)$/;"	f	class:FullO3CPU
drain	o3/fetch.hh	/^        bool drain;$/;"	m	struct:DefaultFetch::Stalls
drain	simple/atomic.cc	/^AtomicSimpleCPU::drain(DrainManager *dm)$/;"	f	class:AtomicSimpleCPU
drain	simple/timing.cc	/^TimingSimpleCPU::drain(DrainManager *drain_manager)$/;"	f	class:TimingSimpleCPU
drain	testers/traffic_gen/traffic_gen.cc	/^TrafficGen::drain(DrainManager *dm)$/;"	f	class:TrafficGen
drainCount	inorder/cpu.hh	/^    int drainCount;$/;"	m	class:InOrderCPU
drainImminent	o3/commit.hh	/^    bool drainImminent;$/;"	m	class:DefaultCommit
drainManager	kvm/base.hh	/^    DrainManager *drainManager;$/;"	m	class:BaseKvmCPU
drainManager	minor/cpu.hh	/^    DrainManager *drainManager;$/;"	m	class:MinorCPU
drainManager	o3/cpu.hh	/^    DrainManager *drainManager;$/;"	m	class:FullO3CPU
drainManager	simple/timing.hh	/^    DrainManager *drainManager;$/;"	m	class:TimingSimpleCPU
drainManager	testers/traffic_gen/traffic_gen.hh	/^    DrainManager* drainManager;$/;"	m	class:TrafficGen
drainPending	o3/commit.hh	/^    bool drainPending;$/;"	m	class:DefaultCommit
drainResume	inorder/cpu.cc	/^InOrderCPU::drainResume()$/;"	f	class:InOrderCPU
drainResume	kvm/base.cc	/^BaseKvmCPU::drainResume()$/;"	f	class:BaseKvmCPU
drainResume	minor/cpu.cc	/^MinorCPU::drainResume()$/;"	f	class:MinorCPU
drainResume	minor/execute.cc	/^Execute::drainResume()$/;"	f	class:Minor::Execute
drainResume	minor/pipeline.cc	/^Pipeline::drainResume()$/;"	f	class:Minor::Pipeline
drainResume	o3/commit_impl.hh	/^DefaultCommit<Impl>::drainResume()$/;"	f	class:DefaultCommit
drainResume	o3/cpu.cc	/^FullO3CPU<Impl>::drainResume()$/;"	f	class:FullO3CPU
drainResume	o3/fetch_impl.hh	/^DefaultFetch<Impl>::drainResume()$/;"	f	class:DefaultFetch
drainResume	simple/atomic.cc	/^AtomicSimpleCPU::drainResume()$/;"	f	class:AtomicSimpleCPU
drainResume	simple/timing.cc	/^TimingSimpleCPU::drainResume()$/;"	f	class:TimingSimpleCPU
drainSanityCheck	o3/commit_impl.hh	/^DefaultCommit<Impl>::drainSanityCheck() const$/;"	f	class:DefaultCommit
drainSanityCheck	o3/cpu.cc	/^FullO3CPU<Impl>::drainSanityCheck() const$/;"	f	class:FullO3CPU
drainSanityCheck	o3/decode_impl.hh	/^DefaultDecode<Impl>::drainSanityCheck() const$/;"	f	class:DefaultDecode
drainSanityCheck	o3/fetch_impl.hh	/^DefaultFetch<Impl>::drainSanityCheck() const$/;"	f	class:DefaultFetch
drainSanityCheck	o3/iew_impl.hh	/^DefaultIEW<Impl>::drainSanityCheck() const$/;"	f	class:DefaultIEW
drainSanityCheck	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::drainSanityCheck() const$/;"	f	class:InstructionQueue
drainSanityCheck	o3/lsq_impl.hh	/^LSQ<Impl>::drainSanityCheck() const$/;"	f	class:LSQ
drainSanityCheck	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::drainSanityCheck() const$/;"	f	class:LSQUnit
drainSanityCheck	o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::drainSanityCheck() const$/;"	f	class:MemDepUnit
drainSanityCheck	o3/rename_impl.hh	/^DefaultRename<Impl>::drainSanityCheck() const$/;"	f	class:DefaultRename
drainSanityCheck	o3/rob_impl.hh	/^ROB<Impl>::drainSanityCheck() const$/;"	f	class:ROB
drainSanityCheck	pred/bpred_unit_impl.hh	/^BPredUnit::drainSanityCheck() const$/;"	f	class:BPredUnit
drainStall	o3/fetch_impl.hh	/^DefaultFetch<Impl>::drainStall(ThreadID tid)$/;"	f	class:DefaultFetch
drainState	minor/execute.hh	/^    DrainState drainState;$/;"	m	class:Minor::Execute
drain_manager	simple/atomic.hh	/^    DrainManager *drain_manager;$/;"	m	class:AtomicSimpleCPU
dtb	checker/cpu.hh	/^    TheISA::TLB *dtb;$/;"	m	class:CheckerCPU
dtb	m5legion_interface.h	/^    uint64_t dtb[64];$/;"	m	struct:__anon8
dtb	o3/cpu.hh	/^    TheISA::TLB * dtb;$/;"	m	class:FullO3CPU
dtb	ozone/cpu.hh	/^    TheISA::TLB *dtb;$/;"	m	class:OzoneCPU
dtb	ozone/simple_params.hh	/^    TheISA::TLB *itb; TheISA::TLB *dtb;$/;"	m	class:SimpleParams
dtb	simple_thread.hh	/^    TheISA::TLB *dtb;$/;"	m	class:SimpleThread
dummyBufferInst	inorder/cpu.hh	/^    DynInstPtr dummyBufferInst;$/;"	m	class:InOrderCPU
dummyBufferInst	inorder/pipeline_stage.hh	/^    DynInstPtr dummyBufferInst;$/;"	m	class:PipelineStage
dummyInst	inorder/cpu.hh	/^    DynInstPtr dummyInst[ThePipeline::MaxThreads];$/;"	m	class:InOrderCPU
dummyInst	inorder/resource_pool.hh	/^    DynInstPtr dummyInst[ThePipeline::MaxThreads];$/;"	m	class:ResourcePool
dummyInst	o3/rob.hh	/^    DynInstPtr dummyInst;$/;"	m	class:ROB
dummyReq	inorder/cpu.hh	/^    ResourceRequest *dummyReq[ThePipeline::MaxThreads];$/;"	m	class:InOrderCPU
dummyReqInst	inorder/cpu.hh	/^    DynInstPtr dummyReqInst;$/;"	m	class:InOrderCPU
dummyTrapInst	inorder/cpu.hh	/^    DynInstPtr dummyTrapInst[ThePipeline::MaxThreads];$/;"	m	class:InOrderCPU
dump	activity.cc	/^ActivityRecorder::dump()$/;"	f	class:ActivityRecorder
dump	base_dyn_inst_impl.hh	/^BaseDynInst<Impl>::dump()$/;"	f	class:BaseDynInst
dump	base_dyn_inst_impl.hh	/^BaseDynInst<Impl>::dump(std::string &outstring)$/;"	f	class:BaseDynInst
dump	exetrace.cc	/^Trace::ExeTracerRecord::dump()$/;"	f	class:Trace::Trace::ExeTracerRecord
dump	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::dump()$/;"	f	class:InOrderDynInst
dump	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::dump(std::string &outstring)$/;"	f	class:InOrderDynInst
dump	inorder/reg_dep_map.cc	/^RegDepMap::dump()$/;"	f	class:RegDepMap
dump	inteltrace.cc	/^Trace::IntelTraceRecord::dump()$/;"	f	class:Trace::Trace::IntelTraceRecord
dump	kvm/arm_cpu.cc	/^ArmKvmCPU::dump()$/;"	f	class:ArmKvmCPU
dump	kvm/base.cc	/^BaseKvmCPU::dump()$/;"	f	class:BaseKvmCPU
dump	kvm/x86_cpu.cc	/^X86KvmCPU::dump()$/;"	f	class:X86KvmCPU
dump	legiontrace.cc	/^Trace::LegionTraceRecord::dump()$/;"	f	class:Trace::Trace::LegionTraceRecord
dump	nativetrace.cc	/^Trace::NativeTraceRecord::dump()$/;"	f	class:Trace::Trace::NativeTraceRecord
dump	o3/dep_graph.hh	/^DependencyGraph<DynInstPtr>::dump()$/;"	f	class:DependencyGraph
dump	o3/fu_pool.cc	/^FUPool::dump()$/;"	f	class:FUPool
dump	o3/store_set.cc	/^StoreSet::dump()$/;"	f	class:StoreSet
dump	pc_event.cc	/^PCEventQueue::dump() const$/;"	f	class:PCEventQueue
dump	pred/bpred_unit_impl.hh	/^BPredUnit::dump()$/;"	f	class:BPredUnit
dump	profile.cc	/^FunctionProfile::dump(ThreadContext *tc, ostream &os) const$/;"	f	class:FunctionProfile
dump	profile.cc	/^ProfileNode::dump(const string &symbol, uint64_t id, const SymbolTable *symtab,$/;"	f	class:ProfileNode
dumpAllInput	minor/fetch2.cc	/^Fetch2::dumpAllInput()$/;"	f	class:Minor::Fetch2
dumpAndExit	checker/cpu.cc	/^CheckerCPU::dumpAndExit()$/;"	f	class:CheckerCPU
dumpAndExit	checker/cpu_impl.hh	/^Checker<Impl>::dumpAndExit(DynInstPtr &inst)$/;"	f	class:Checker
dumpDebugRegs	kvm/x86_cpu.cc	/^X86KvmCPU::dumpDebugRegs() const$/;"	f	class:X86KvmCPU
dumpFpuCommon	kvm/x86_cpu.cc	/^dumpFpuCommon(const T &fpu)$/;"	f	file:
dumpFpuRegs	kvm/x86_cpu.cc	/^X86KvmCPU::dumpFpuRegs() const$/;"	f	class:X86KvmCPU
dumpFpuSpec	kvm/x86_cpu.cc	/^dumpFpuSpec(const struct FXSave &xs)$/;"	f	file:
dumpFpuSpec	kvm/x86_cpu.cc	/^dumpFpuSpec(const struct kvm_fpu &fpu)$/;"	f	file:
dumpFuncProfile	checker/thread_context.hh	/^    void dumpFuncProfile() { actualTC->dumpFuncProfile(); }$/;"	f	class:CheckerThreadContext
dumpFuncProfile	inorder/thread_context.cc	/^InOrderThreadContext::dumpFuncProfile()$/;"	f	class:InOrderThreadContext
dumpFuncProfile	inorder/thread_state.cc	/^InOrderThreadState::dumpFuncProfile()    $/;"	f	class:InOrderThreadState
dumpFuncProfile	o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::dumpFuncProfile()$/;"	f	class:O3ThreadContext
dumpFuncProfile	o3/thread_state.hh	/^    void dumpFuncProfile()$/;"	f	struct:O3ThreadState
dumpFuncProfile	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::dumpFuncProfile()$/;"	f	class:OzoneCPU::OzoneTC
dumpFuncProfile	ozone/thread_state.hh	/^    void dumpFuncProfile()$/;"	f	struct:OzoneThreadState
dumpFuncProfile	simple_thread.cc	/^SimpleThread::dumpFuncProfile()$/;"	f	class:SimpleThread
dumpFuncProfile	thread_context.hh	/^    void dumpFuncProfile() { actualTC->dumpFuncProfile(); }$/;"	f	class:ProxyThreadContext
dumpHistory	o3/rename_impl.hh	/^DefaultRename<Impl>::dumpHistory()$/;"	f	class:DefaultRename
dumpInsts	checker/cpu_impl.hh	/^Checker<Impl>::dumpInsts()$/;"	f	class:Checker
dumpInsts	inorder/cpu.cc	/^InOrderCPU::dumpInsts()$/;"	f	class:InOrderCPU
dumpInsts	inorder/pipeline_stage.cc	/^PipelineStage::dumpInsts()$/;"	f	class:PipelineStage
dumpInsts	o3/cpu.cc	/^FullO3CPU<Impl>::dumpInsts()$/;"	f	class:FullO3CPU
dumpInsts	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::dumpInsts()$/;"	f	class:InstructionQueue
dumpInsts	o3/lsq.hh	/^    void dumpInsts(ThreadID tid) const$/;"	f	class:LSQ
dumpInsts	o3/lsq_impl.hh	/^LSQ<Impl>::dumpInsts() const$/;"	f	class:LSQ
dumpInsts	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::dumpInsts() const$/;"	f	class:LSQUnit
dumpInsts	ozone/back_end_impl.hh	/^BackEnd<Impl>::InstQueue::dumpInsts()$/;"	f	class:BackEnd::InstQueue
dumpInsts	ozone/back_end_impl.hh	/^BackEnd<Impl>::dumpInsts()$/;"	f	class:BackEnd
dumpInsts	ozone/cpu.hh	/^    void dumpInsts() { frontEnd->dumpInsts(); }$/;"	f	class:OzoneCPU
dumpInsts	ozone/front_end_impl.hh	/^FrontEnd<Impl>::dumpInsts()$/;"	f	class:FrontEnd
dumpInsts	ozone/inorder_back_end_impl.hh	/^InorderBackEnd<Impl>::dumpInsts()$/;"	f	class:InorderBackEnd
dumpInsts	ozone/inst_queue_impl.hh	/^InstQueue<Impl>::dumpInsts()$/;"	f	class:InstQueue
dumpInsts	ozone/lsq_unit_impl.hh	/^OzoneLSQ<Impl>::dumpInsts()$/;"	f	class:OzoneLSQ
dumpInsts	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::dumpInsts()$/;"	f	class:LWBackEnd
dumpInsts	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::dumpInsts()$/;"	f	class:OzoneLWLSQ
dumpIntRegs	kvm/x86_cpu.cc	/^X86KvmCPU::dumpIntRegs() const$/;"	f	class:X86KvmCPU
dumpKvm	kvm/x86_cpu.cc	/^dumpKvm(const char *reg_name, const struct kvm_dtable &dtable)$/;"	f	file:
dumpKvm	kvm/x86_cpu.cc	/^dumpKvm(const char *reg_name, const struct kvm_segment &seg)$/;"	f	file:
dumpKvm	kvm/x86_cpu.cc	/^dumpKvm(const struct kvm_debugregs &regs)$/;"	f	file:
dumpKvm	kvm/x86_cpu.cc	/^dumpKvm(const struct kvm_fpu &fpu)$/;"	f	file:
dumpKvm	kvm/x86_cpu.cc	/^dumpKvm(const struct kvm_msrs &msrs)$/;"	f	file:
dumpKvm	kvm/x86_cpu.cc	/^dumpKvm(const struct kvm_regs &regs)$/;"	f	file:
dumpKvm	kvm/x86_cpu.cc	/^dumpKvm(const struct kvm_sregs &sregs)$/;"	f	file:
dumpKvm	kvm/x86_cpu.cc	/^dumpKvm(const struct kvm_vcpu_events &events)$/;"	f	file:
dumpKvm	kvm/x86_cpu.cc	/^dumpKvm(const struct kvm_xcrs &regs)$/;"	f	file:
dumpKvm	kvm/x86_cpu.cc	/^dumpKvm(const struct kvm_xsave &xsave)$/;"	f	file:
dumpKvmStateCoProc	kvm/arm_cpu.cc	/^ArmKvmCPU::dumpKvmStateCoProc(uint64_t id)$/;"	f	class:ArmKvmCPU
dumpKvmStateCore	kvm/arm_cpu.cc	/^ArmKvmCPU::dumpKvmStateCore()$/;"	f	class:ArmKvmCPU
dumpKvmStateMisc	kvm/arm_cpu.cc	/^ArmKvmCPU::dumpKvmStateMisc()$/;"	f	class:ArmKvmCPU
dumpKvmStateVFP	kvm/arm_cpu.cc	/^ArmKvmCPU::dumpKvmStateVFP(uint64_t id)$/;"	f	class:ArmKvmCPU
dumpLists	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::dumpLists()$/;"	f	class:InstructionQueue
dumpLists	o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::dumpLists()$/;"	f	class:MemDepUnit
dumpLists	ozone/inst_queue_impl.hh	/^InstQueue<Impl>::dumpLists()$/;"	f	class:InstQueue
dumpMSRs	kvm/x86_cpu.cc	/^X86KvmCPU::dumpMSRs() const$/;"	f	class:X86KvmCPU
dumpSNList	base_dyn_inst_impl.hh	/^BaseDynInst<Impl>::dumpSNList()$/;"	f	class:BaseDynInst
dumpSpecRegs	kvm/x86_cpu.cc	/^X86KvmCPU::dumpSpecRegs() const$/;"	f	class:X86KvmCPU
dumpTicks	exetrace.cc	/^ExeTracerRecord::dumpTicks(ostream &outs)$/;"	f	class:Trace::ExeTracerRecord
dumpTicks	inorder/inorder_trace.cc	/^Trace::InOrderTraceRecord::dumpTicks(std::ostream &outs)$/;"	f	class:Trace::Trace::InOrderTraceRecord
dumpVCpuEvents	kvm/x86_cpu.cc	/^X86KvmCPU::dumpVCpuEvents() const$/;"	f	class:X86KvmCPU
dumpXCRs	kvm/x86_cpu.cc	/^X86KvmCPU::dumpXCRs() const$/;"	f	class:X86KvmCPU
dumpXSave	kvm/x86_cpu.cc	/^X86KvmCPU::dumpXSave() const$/;"	f	class:X86KvmCPU
duration	testers/traffic_gen/generators.hh	/^    const Tick duration;$/;"	m	class:BaseGen
dynInstAddTracing	minor/decode.cc	/^dynInstAddTracing(MinorDynInstPtr inst, StaticInstPtr static_inst,$/;"	f	namespace:Minor
e2c	ozone/back_end.hh	/^    TimeBuffer<ExecToCommit> e2c;$/;"	m	class:BackEnd
e2c	ozone/lw_back_end.hh	/^    TimeBuffer<ExecToCommit> e2c;$/;"	m	class:LWBackEnd
eToF1	minor/pipeline.hh	/^    Latch<BranchData> eToF1;$/;"	m	class:Minor::Pipeline
ea	minor/dyn_inst.hh	/^    Addr ea;$/;"	m	class:Minor::MinorDynInst
eaCalcDone	inorder/inorder_dyn_inst.hh	/^    bool eaCalcDone;$/;"	m	class:InOrderDynInst
eaComp	static_inst.hh	/^    virtual Fault eaComp(ExecContext *xc,$/;"	f	class:StaticInst
eaCompInst	static_inst.hh	/^    StaticInstPtr &eaCompInst() const { return nullStaticInstPtr; }$/;"	f	class:StaticInst
eaList	ozone/ea_list.hh	/^    std::list<instEA> eaList;$/;"	m	class:EAList
eaListIt	ozone/ea_list.hh	/^    typedef std::list<instEA>::iterator eaListIt;$/;"	t	class:EAList
eaSrcsReady	base_dyn_inst_impl.hh	/^BaseDynInst<Impl>::eaSrcsReady()$/;"	f	class:BaseDynInst
eaSrcsReady	inorder/inorder_dyn_inst.hh	/^    bool eaSrcsReady()$/;"	f	class:InOrderDynInst
eaSrcsReady	ozone/dyn_inst_impl.hh	/^OzoneDynInst<Impl>::eaSrcsReady()$/;"	f	class:OzoneDynInst
effAddr	base_dyn_inst.hh	/^    Addr effAddr;$/;"	m	class:BaseDynInst
effAddr	inorder/inorder_dyn_inst.hh	/^    Addr effAddr;$/;"	m	class:InOrderDynInst
effAddrValid	base_dyn_inst.hh	/^    bool effAddrValid() const { return instFlags[EffAddrValid]; }$/;"	f	class:BaseDynInst
effSize	base_dyn_inst.hh	/^    uint8_t effSize;$/;"	m	class:BaseDynInst
elasticReq	testers/traffic_gen/traffic_gen.hh	/^    const bool elasticReq;$/;"	m	class:TrafficGen
elastic_req	testers/traffic_gen/TrafficGen.py	/^    elastic_req = Param.Bool(False,$/;"	v	class:TrafficGen
elementPtr	minor/buffers.hh	/^    mutable ElemType *elementPtr;$/;"	m	class:Minor::InputBuffer
empty	inorder/resource_sked.cc	/^ResourceSked::empty()$/;"	f	class:ResourceSked
empty	minor/buffers.hh	/^    bool empty() const { return !elementPtr && queue.empty(); }$/;"	f	class:Minor::InputBuffer
empty	minor/buffers.hh	/^    bool empty() const { return buffer.empty(); }$/;"	f	class:Minor::Latch
empty	minor/buffers.hh	/^    bool empty() const { return queue.empty(); }$/;"	f	class:Minor::Queue
empty	minor/buffers.hh	/^    empty() const$/;"	f	class:Minor::MinorBuffer
empty	o3/dep_graph.hh	/^    bool empty(PhysRegIndex idx) const { return !dependGraph[idx].next; }$/;"	f	class:DependencyGraph
empty	o3/dep_graph.hh	/^DependencyGraph<DynInstPtr>::empty() const$/;"	f	class:DependencyGraph
empty	pred/ras.hh	/^     bool empty() { return usedEntries == 0; }$/;"	f	class:ReturnAddrStack
emptyROB	o3/comm.hh	/^        bool emptyROB; \/\/ *R$/;"	m	struct:TimeBufStruct::commitComm
emptyROB	o3/rename.hh	/^    bool emptyROB[Impl::MaxThreads];$/;"	m	class:DefaultRename
emptyRenameInsts	o3/iew_impl.hh	/^DefaultIEW<Impl>::emptyRenameInsts(ThreadID tid)$/;"	f	class:DefaultIEW
empty_count	ozone/back_end.hh	/^        Stats::Scalar empty_count;$/;"	m	class:BackEnd::InstQueue
empty_rate	ozone/back_end.hh	/^        Stats::Formula empty_rate;$/;"	m	class:BackEnd::InstQueue
enableFunctionTrace	base.cc	/^BaseCPU::enableFunctionTrace()$/;"	f	class:BaseCPU
enableIdling	minor/MinorCPU.py	/^    enableIdling = Param.Bool(True,$/;"	v	class:MinorCPU
enableSignals	kvm/perfevent.cc	/^PerfKvmCounter::enableSignals(pid_t tid, int signal)$/;"	f	class:PerfKvmCounter
enableSignals	kvm/perfevent.hh	/^    void enableSignals(int signal) { enableSignals(gettid(), signal); }$/;"	f	class:PerfKvmCounter
end	inorder/resource_sked.cc	/^ResourceSked::end()$/;"	f	class:ResourceSked
end	inorder/resource_sked.cc	/^ResourceSked::end(int stage_num)$/;"	f	class:ResourceSked
endAddr	testers/traffic_gen/generators.hh	/^    const Addr endAddr;$/;"	m	class:LinearGen
endAddr	testers/traffic_gen/generators.hh	/^    const Addr endAddr;$/;"	m	class:RandomGen
endOfSkedIt	inorder/cpu.hh	/^    SkedCacheIt endOfSkedIt;$/;"	m	class:InOrderCPU
enter	testers/traffic_gen/generators.cc	/^LinearGen::enter()$/;"	f	class:LinearGen
enter	testers/traffic_gen/generators.cc	/^RandomGen::enter()$/;"	f	class:RandomGen
enter	testers/traffic_gen/generators.cc	/^TraceGen::enter()$/;"	f	class:TraceGen
enter	testers/traffic_gen/generators.hh	/^    void enter() { }$/;"	f	class:IdleGen
enterState	testers/traffic_gen/traffic_gen.cc	/^TrafficGen::enterState(uint32_t newState)$/;"	f	class:TrafficGen
entryAmount	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::entryAmount(ThreadID num_threads)$/;"	f	class:InstructionQueue
entryAmount	o3/lsq_impl.hh	/^LSQ<Impl>::entryAmount(ThreadID num_threads)$/;"	f	class:LSQ
entryAmount	o3/rob_impl.hh	/^ROB<Impl>::entryAmount(ThreadID num_threads)$/;"	f	class:ROB
entryCompare	inorder/pipeline_traits.5stage.hh	/^    struct entryCompare {$/;"	s	namespace:ThePipeline
entryCompare	inorder/pipeline_traits.9stage.hh	/^    struct entryCompare {$/;"	s	namespace:ThePipeline
entryCompare	inorder/pipeline_traits.9stage.smt2.hh	/^    struct entryCompare {$/;"	s	namespace:ThePipeline
enum_name	StaticInstFlags.py	/^    enum_name = 'Flags'$/;"	v	class:StaticInstFlags
equal_range	pc_event.cc	/^PCEventQueue::equal_range(Addr pc)$/;"	f	class:PCEventQueue
equal_range	pc_event.hh	/^    range_t equal_range(PCEvent *event) { return equal_range(event->pc()); }$/;"	f	class:PCEventQueue
eval	timing_expr.cc	/^uint64_t TimingExprBin::eval(TimingExprEvalContext &context)$/;"	f	class:TimingExprBin
eval	timing_expr.cc	/^uint64_t TimingExprIf::eval(TimingExprEvalContext &context)$/;"	f	class:TimingExprIf
eval	timing_expr.cc	/^uint64_t TimingExprLet::eval(TimingExprEvalContext &context)$/;"	f	class:TimingExprLet
eval	timing_expr.cc	/^uint64_t TimingExprReadIntReg::eval(TimingExprEvalContext &context)$/;"	f	class:TimingExprReadIntReg
eval	timing_expr.cc	/^uint64_t TimingExprRef::eval(TimingExprEvalContext &context)$/;"	f	class:TimingExprRef
eval	timing_expr.cc	/^uint64_t TimingExprSrcReg::eval(TimingExprEvalContext &context)$/;"	f	class:TimingExprSrcReg
eval	timing_expr.cc	/^uint64_t TimingExprUn::eval(TimingExprEvalContext &context)$/;"	f	class:TimingExprUn
eval	timing_expr.hh	/^    uint64_t eval(TimingExprEvalContext &context) { return value; }$/;"	f	class:TimingExprLiteral
evaluate	minor/activity.hh	/^    void evaluate() { advance(); }$/;"	f	class:Minor::MinorActivityRecorder
evaluate	minor/buffers.hh	/^    void evaluate() { buffer.advance(); }$/;"	f	class:Minor::Latch
evaluate	minor/decode.cc	/^Decode::evaluate()$/;"	f	class:Minor::Decode
evaluate	minor/execute.cc	/^Execute::evaluate()$/;"	f	class:Minor::Execute
evaluate	minor/fetch1.cc	/^Fetch1::evaluate()$/;"	f	class:Minor::Fetch1
evaluate	minor/fetch2.cc	/^Fetch2::evaluate()$/;"	f	class:Minor::Fetch2
evaluate	minor/pipeline.cc	/^Pipeline::evaluate()$/;"	f	class:Minor::Pipeline
eventNames	inorder/cpu.cc	/^std::string InOrderCPU::eventNames[NumCPUEvents] =$/;"	m	class:InOrderCPU	file:
eventNames	inorder/cpu.hh	/^    static std::string eventNames[NumCPUEvents];$/;"	m	class:InOrderCPU
eventType	inorder/resource_pool.hh	/^        InOrderCPU::CPUEventType eventType;$/;"	m	class:ResourcePool::ResPoolEvent
evpc	pc_event.hh	/^    Addr evpc;$/;"	m	class:PCEvent
exactFullStall	ozone/back_end.hh	/^    bool exactFullStall;$/;"	m	class:BackEnd
exactFullStall	ozone/lw_back_end.hh	/^    bool exactFullStall;$/;"	m	class:LWBackEnd
exclude_host	kvm/perfevent.hh	/^    PerfKvmCounterConfig &exclude_host(bool val) {$/;"	f	class:PerfKvmCounterConfig
exclude_hv	kvm/perfevent.hh	/^    PerfKvmCounterConfig &exclude_hv(bool val) {$/;"	f	class:PerfKvmCounterConfig
exeBranches	ozone/lw_back_end.hh	/^    Stats::Vector exeBranches;$/;"	m	class:LWBackEnd
exeInst	ozone/lw_back_end.hh	/^    Stats::Vector exeInst;$/;"	m	class:LWBackEnd
exeList	ozone/lw_back_end.hh	/^    ReadyInstQueue exeList;$/;"	m	class:LWBackEnd
exeLoads	ozone/lw_back_end.hh	/^    Stats::Vector exeLoads;$/;"	m	class:LWBackEnd
exeMulDiv	inorder/resources/mult_div_unit.cc	/^MultDivUnit::exeMulDiv(int slot_num)$/;"	f	class:MultDivUnit
exeNop	ozone/lw_back_end.hh	/^    Stats::Vector exeNop;$/;"	m	class:LWBackEnd
exeRefs	ozone/lw_back_end.hh	/^    Stats::Vector exeRefs;$/;"	m	class:LWBackEnd
exeStatus	o3/iew.hh	/^    StageStatus exeStatus;$/;"	m	class:DefaultIEW
exeSwp	ozone/lw_back_end.hh	/^    Stats::Vector exeSwp;$/;"	m	class:LWBackEnd
exe_branches	ozone/back_end.hh	/^    Stats::Vector exe_branches;$/;"	m	class:BackEnd
exe_inst	ozone/back_end.hh	/^    Stats::Vector exe_inst;$/;"	m	class:BackEnd
exe_loads	ozone/back_end.hh	/^    Stats::Vector exe_loads;$/;"	m	class:BackEnd
exe_nop	ozone/back_end.hh	/^    Stats::Vector exe_nop;$/;"	m	class:BackEnd
exe_refs	ozone/back_end.hh	/^    Stats::Vector exe_refs;$/;"	m	class:BackEnd
exe_swp	ozone/back_end.hh	/^    Stats::Vector exe_swp;$/;"	m	class:BackEnd
execSeqNum	minor/decode.hh	/^    InstSeqNum execSeqNum;$/;"	m	class:Minor::Decode
execSeqNum	minor/dyn_inst.hh	/^    InstSeqNum execSeqNum;$/;"	m	class:Minor::InstId
execSeqNumToWaitFor	minor/scoreboard.cc	/^Scoreboard::execSeqNumToWaitFor(MinorDynInstPtr inst,$/;"	f	class:Minor::Scoreboard
execute	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::execute()$/;"	f	class:InOrderDynInst
execute	inorder/resource.cc	/^Resource::execute(int slot_idx)$/;"	f	class:Resource
execute	inorder/resources/agen_unit.cc	/^AGENUnit::execute(int slot_num)$/;"	f	class:AGENUnit
execute	inorder/resources/branch_predictor.cc	/^BranchPredictor::execute(int slot_num)$/;"	f	class:BranchPredictor
execute	inorder/resources/cache_unit.cc	/^CacheUnit::execute(int slot_num)$/;"	f	class:CacheUnit
execute	inorder/resources/decode_unit.cc	/^DecodeUnit::execute(int slot_num)$/;"	f	class:DecodeUnit
execute	inorder/resources/execution_unit.cc	/^ExecutionUnit::execute(int slot_num)$/;"	f	class:ExecutionUnit
execute	inorder/resources/fetch_seq_unit.cc	/^FetchSeqUnit::execute(int slot_num)$/;"	f	class:FetchSeqUnit
execute	inorder/resources/fetch_unit.cc	/^FetchUnit::execute(int slot_num)$/;"	f	class:FetchUnit
execute	inorder/resources/graduation_unit.cc	/^GraduationUnit::execute(int slot_num)$/;"	f	class:GraduationUnit
execute	inorder/resources/inst_buffer.cc	/^InstBuffer::execute(int slot_idx)$/;"	f	class:InstBuffer
execute	inorder/resources/mult_div_unit.cc	/^MultDivUnit::execute(int slot_num)$/;"	f	class:MultDivUnit
execute	inorder/resources/tlb_unit.cc	/^TLBUnit::execute(int slot_idx)$/;"	f	class:TLBUnit
execute	inorder/resources/use_def.cc	/^UseDefUnit::execute(int slot_idx)$/;"	f	class:UseDefUnit
execute	minor/exec_context.hh	/^    Execute &execute;$/;"	m	class:Minor::ExecContext
execute	minor/lsq.hh	/^    Execute &execute;$/;"	m	class:Minor::LSQ
execute	minor/pipeline.hh	/^    Execute execute;$/;"	m	class:Minor::Pipeline
execute	o3/dyn_inst_impl.hh	/^BaseO3DynInst<Impl>::execute()$/;"	f	class:BaseO3DynInst
execute	ozone/dyn_inst_impl.hh	/^OzoneDynInst<Impl>::execute()$/;"	f	class:OzoneDynInst
executeAllowEarlyMemoryIssue	minor/MinorCPU.py	/^    executeAllowEarlyMemoryIssue = Param.Bool(True,$/;"	v	class:MinorCPU
executeBranchDelay	minor/MinorCPU.py	/^    executeBranchDelay = Param.Cycles(1,$/;"	v	class:MinorCPU
executeBranchWidth	ozone/OzoneCPU.py	/^    executeBranchWidth = Param.Unsigned("Branch execute width")$/;"	v	class:DerivOzoneCPU
executeBranchWidth	ozone/SimpleOzoneCPU.py	/^    executeBranchWidth = Param.Unsigned("Branch execute width")$/;"	v	class:SimpleOzoneCPU
executeBranchWidth	ozone/simple_params.hh	/^    unsigned executeBranchWidth;$/;"	m	class:SimpleParams
executeCommitLimit	minor/MinorCPU.py	/^    executeCommitLimit = Param.Unsigned(2,$/;"	v	class:MinorCPU
executeCycleInput	minor/MinorCPU.py	/^    executeCycleInput = Param.Bool(True,$/;"	v	class:MinorCPU
executeEAComp	ozone/dyn_inst.hh	/^    Fault executeEAComp()$/;"	f	class:OzoneDynInst
executeFloatWidth	ozone/OzoneCPU.py	/^    executeFloatWidth = Param.Unsigned("Floating point execute width")$/;"	v	class:DerivOzoneCPU
executeFloatWidth	ozone/SimpleOzoneCPU.py	/^    executeFloatWidth = Param.Unsigned("Floating point execute width")$/;"	v	class:SimpleOzoneCPU
executeFloatWidth	ozone/simple_params.hh	/^    unsigned executeFloatWidth;$/;"	m	class:SimpleParams
executeFuncUnits	minor/MinorCPU.py	/^    executeFuncUnits = Param.MinorFUPool(MinorDefaultFUPool(),$/;"	v	class:MinorCPU
executeInputBufferSize	minor/MinorCPU.py	/^    executeInputBufferSize = Param.Unsigned(7,$/;"	v	class:MinorCPU
executeInputWidth	minor/MinorCPU.py	/^    executeInputWidth = Param.Unsigned(2,$/;"	v	class:MinorCPU
executeInsts	o3/iew_impl.hh	/^DefaultIEW<Impl>::executeInsts()$/;"	f	class:DefaultIEW
executeInsts	ozone/back_end_impl.hh	/^BackEnd<Impl>::executeInsts()$/;"	f	class:BackEnd
executeInsts	ozone/inorder_back_end_impl.hh	/^InorderBackEnd<Impl>::executeInsts()$/;"	f	class:InorderBackEnd
executeInsts	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::executeInsts()$/;"	f	class:LWBackEnd
executeIntWidth	ozone/OzoneCPU.py	/^    executeIntWidth = Param.Unsigned("Integer execute width")$/;"	v	class:DerivOzoneCPU
executeIntWidth	ozone/SimpleOzoneCPU.py	/^    executeIntWidth = Param.Unsigned("Integer execute width")$/;"	v	class:SimpleOzoneCPU
executeIntWidth	ozone/simple_params.hh	/^    unsigned executeIntWidth;$/;"	m	class:SimpleParams
executeIssueLimit	minor/MinorCPU.py	/^    executeIssueLimit = Param.Unsigned(2,$/;"	v	class:MinorCPU
executeLSQMaxStoreBufferStoresPerCycle	minor/MinorCPU.py	/^    executeLSQMaxStoreBufferStoresPerCycle = Param.Unsigned(2,$/;"	v	class:MinorCPU
executeLSQRequestsQueueSize	minor/MinorCPU.py	/^    executeLSQRequestsQueueSize = Param.Unsigned(1,$/;"	v	class:MinorCPU
executeLSQStoreBufferSize	minor/MinorCPU.py	/^    executeLSQStoreBufferSize = Param.Unsigned(5,$/;"	v	class:MinorCPU
executeLSQTransfersQueueSize	minor/MinorCPU.py	/^    executeLSQTransfersQueueSize = Param.Unsigned(2,$/;"	v	class:MinorCPU
executeLoad	o3/lsq_impl.hh	/^LSQ<Impl>::executeLoad(DynInstPtr &inst)$/;"	f	class:LSQ
executeLoad	o3/lsq_unit.hh	/^    Fault executeLoad(int lq_idx) { panic("Not implemented"); return NoFault; }$/;"	f	class:LSQUnit
executeLoad	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::executeLoad(DynInstPtr &inst)$/;"	f	class:LSQUnit
executeLoad	ozone/lsq_unit_impl.hh	/^OzoneLSQ<Impl>::executeLoad(DynInstPtr &inst)$/;"	f	class:OzoneLSQ
executeLoad	ozone/lsq_unit_impl.hh	/^OzoneLSQ<Impl>::executeLoad(int lq_idx)$/;"	f	class:OzoneLSQ
executeLoad	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::executeLoad(DynInstPtr &inst)$/;"	f	class:OzoneLWLSQ
executeMaxAccessesInMemory	minor/MinorCPU.py	/^    executeMaxAccessesInMemory = Param.Unsigned(2,$/;"	v	class:MinorCPU
executeMemAcc	ozone/dyn_inst.hh	/^    Fault executeMemAcc()$/;"	f	class:OzoneDynInst
executeMemRefInst	minor/execute.cc	/^Execute::executeMemRefInst(MinorDynInstPtr inst, BranchData &branch,$/;"	f	class:Minor::Execute
executeMemoryCommitLimit	minor/MinorCPU.py	/^    executeMemoryCommitLimit = Param.Unsigned(1,$/;"	v	class:MinorCPU
executeMemoryIssueLimit	minor/MinorCPU.py	/^    executeMemoryIssueLimit = Param.Unsigned(1,$/;"	v	class:MinorCPU
executeMemoryWidth	minor/MinorCPU.py	/^    executeMemoryWidth = Param.Unsigned(0,$/;"	v	class:MinorCPU
executeMemoryWidth	ozone/OzoneCPU.py	/^    executeMemoryWidth = Param.Unsigned("Memory execute width")$/;"	v	class:DerivOzoneCPU
executeMemoryWidth	ozone/SimpleOzoneCPU.py	/^    executeMemoryWidth = Param.Unsigned("Memory execute width")$/;"	v	class:SimpleOzoneCPU
executeMemoryWidth	ozone/simple_params.hh	/^    unsigned executeMemoryWidth;$/;"	m	class:SimpleParams
executeSetTraceTimeOnCommit	minor/MinorCPU.py	/^    executeSetTraceTimeOnCommit = Param.Bool(True,$/;"	v	class:MinorCPU
executeSetTraceTimeOnIssue	minor/MinorCPU.py	/^    executeSetTraceTimeOnIssue = Param.Bool(False,$/;"	v	class:MinorCPU
executeStore	o3/lsq_impl.hh	/^LSQ<Impl>::executeStore(DynInstPtr &inst)$/;"	f	class:LSQ
executeStore	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::executeStore(DynInstPtr &store_inst)$/;"	f	class:LSQUnit
executeStore	ozone/lsq_unit_impl.hh	/^OzoneLSQ<Impl>::executeStore(DynInstPtr &store_inst)$/;"	f	class:OzoneLSQ
executeStore	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::executeStore(DynInstPtr &store_inst)$/;"	f	class:OzoneLWLSQ
executeWidth	ozone/OzoneCPU.py	/^    executeWidth = Param.Unsigned("Execute width")$/;"	v	class:DerivOzoneCPU
executeWidth	ozone/SimpleOzoneCPU.py	/^    executeWidth = Param.Unsigned("Execute width")$/;"	v	class:SimpleOzoneCPU
executeWidth	ozone/simple_params.hh	/^    unsigned executeWidth;$/;"	m	class:SimpleParams
executions	inorder/resources/execution_unit.hh	/^    Stats::Scalar executions;$/;"	m	class:ExecutionUnit
exit	testers/traffic_gen/generators.cc	/^TraceGen::exit()$/;"	f	class:TraceGen
exit	testers/traffic_gen/generators.hh	/^    virtual void exit() { };$/;"	f	class:BaseGen
exit	thread_context.hh	/^    virtual int exit() { return 1; };$/;"	f	class:ThreadContext
exitOnError	CheckerCPU.py	/^    exitOnError = Param.Bool(False, "Exit on an error")$/;"	v	class:CheckerCPU
exitOnError	checker/cpu.hh	/^    bool exitOnError;$/;"	m	class:CheckerCPU
exitOnError	ozone/OzoneChecker.py	/^    exitOnError = Param.Bool(False, "Exit on an error")$/;"	v	class:OzoneChecker
expectedLineSeqNum	minor/fetch1.hh	/^    InstSeqNum expectedLineSeqNum;$/;"	m	class:Minor::Fetch1
expectedStreamSeqNum	minor/fetch2.hh	/^    InstSeqNum expectedStreamSeqNum;$/;"	m	class:Minor::Fetch2
export_method_cxx_predecls	kvm/BaseKvmCPU.py	/^    def export_method_cxx_predecls(cls, code):$/;"	m	class:BaseKvmCPU
export_methods	BaseCPU.py	/^    def export_methods(cls, code):$/;"	m	class:BaseCPU
export_methods	kvm/BaseKvmCPU.py	/^    def export_methods(cls, code):$/;"	m	class:BaseKvmCPU
export_methods	kvm/X86KvmCPU.py	/^    def export_methods(cls, code):$/;"	m	class:X86KvmCPU
expr	TimingExpr.py	/^    expr = Param.TimingExpr("body expression")$/;"	v	class:TimingExprLet
expr	timing_expr.hh	/^    TimingExpr *expr;$/;"	m	class:TimingExprLet
extraAssumedLat	minor/MinorCPU.py	/^    extraAssumedLat = Param.Cycles(0, "extra cycles to add to scoreboard"$/;"	v	class:MinorFUTiming
extraAssumedLat	minor/func_unit.hh	/^    Cycles extraAssumedLat;$/;"	m	class:MinorFUTiming
extraCommitDelay	minor/dyn_inst.hh	/^    Cycles extraCommitDelay;$/;"	m	class:Minor::MinorDynInst
extraCommitDelayExpr	minor/dyn_inst.hh	/^    TimingExpr *extraCommitDelayExpr;$/;"	m	class:Minor::MinorDynInst
extraCommitLat	minor/MinorCPU.py	/^    extraCommitLat = Param.Cycles(0, "extra cycles to stall commit for"$/;"	v	class:MinorFUTiming
extraCommitLat	minor/func_unit.hh	/^    Cycles extraCommitLat;$/;"	m	class:MinorFUTiming
extraCommitLatExpr	minor/MinorCPU.py	/^    extraCommitLatExpr = Param.TimingExpr(NULL, "extra cycles as a"$/;"	v	class:MinorFUTiming
extraCommitLatExpr	minor/func_unit.hh	/^    TimingExpr *extraCommitLatExpr;$/;"	m	class:MinorFUTiming
f	inorder/cpu.hh	/^        FloatReg f[ThePipeline::MaxThreads][TheISA::NumFloatRegs];$/;"	m	union:InOrderCPU::__anon2
f	inorder/inorder_dyn_inst.hh	/^            FloatReg f;$/;"	m	union:InOrderDynInst::InstValue::__anon4
f	simple_thread.hh	/^        FloatReg f[TheISA::NumFloatRegs];$/;"	m	union:SimpleThread::__anon15
f1ToF2	minor/pipeline.hh	/^    Latch<ForwardLineData> f1ToF2;$/;"	m	class:Minor::Pipeline
f2ToD	minor/pipeline.hh	/^    Latch<ForwardInstData> f2ToD;$/;"	m	class:Minor::Pipeline
f2ToF1	minor/pipeline.hh	/^    Latch<BranchData> f2ToF1;$/;"	m	class:Minor::Pipeline
falseExpr	TimingExpr.py	/^    falseExpr = Param.TimingExpr("false expression")$/;"	v	class:TimingExprIf
falseExpr	timing_expr.hh	/^    TimingExpr *falseExpr;$/;"	m	class:TimingExprIf
fastmem	simple/AtomicSimpleCPU.py	/^    fastmem = Param.Bool(False, "Access memory directly")$/;"	v	class:AtomicSimpleCPU
fastmem	simple/atomic.hh	/^    bool fastmem;$/;"	m	class:AtomicSimpleCPU
fault	base_dyn_inst.hh	/^    Fault fault;$/;"	m	class:BaseDynInst
fault	inorder/cpu.hh	/^        Fault fault;$/;"	m	class:InOrderCPU::CPUEvent
fault	inorder/inorder_dyn_inst.hh	/^    Fault fault;$/;"	m	class:InOrderDynInst
fault	minor/dyn_inst.hh	/^    Fault fault;$/;"	m	class:Minor::MinorDynInst
fault	minor/fetch1.hh	/^        Fault fault;$/;"	m	class:Minor::Fetch1::FetchRequest
fault	minor/lsq.hh	/^        Fault fault;$/;"	m	class:Minor::LSQ::LSQRequest
fault	minor/pipe_data.hh	/^    Fault fault;$/;"	m	class:Minor::ForwardLineData
fault	o3/fetch.hh	/^        Fault fault;$/;"	m	class:DefaultFetch::FinishTranslationEvent
faultFromFetch	ozone/back_end.hh	/^    Fault faultFromFetch;$/;"	m	class:BackEnd
faultFromFetch	ozone/inorder_back_end.hh	/^    Fault faultFromFetch;$/;"	m	class:InorderBackEnd
faultSked	inorder/cpu.hh	/^    ThePipeline::RSkedPtr faultSked;$/;"	m	class:InOrderCPU
faults	translation.hh	/^    Fault faults[2];$/;"	m	class:WholeTranslationState
fcntl	kvm/perfevent.cc	/^PerfKvmCounter::fcntl(int cmd, long p1)$/;"	f	class:PerfKvmCounter
fcntl	kvm/perfevent.hh	/^    int fcntl(int cmd, void *p1) { return fcntl(cmd, (long)p1); }$/;"	f	class:PerfKvmCounter
fcw	kvm/x86_cpu.cc	/^    uint16_t fcw;$/;"	m	struct:FXSave	file:
fd	kvm/perfevent.hh	/^    int fd;$/;"	m	class:PerfKvmCounter
fd	nativetrace.hh	/^    int fd;$/;"	m	class:Trace::NativeTrace
fe	ozone/front_end.hh	/^        FrontEnd<Impl> *fe;$/;"	m	class:FrontEnd::IcachePort
feBuffer	ozone/front_end.hh	/^    InstBuff feBuffer;$/;"	m	class:FrontEnd
fetch	minor/fetch1.hh	/^        Fetch1 &fetch;$/;"	m	class:Minor::Fetch1::FetchRequest
fetch	minor/fetch1.hh	/^        Fetch1 &fetch;$/;"	m	class:Minor::Fetch1::IcachePort
fetch	o3/cpu.hh	/^        DefaultFetch<Impl> *fetch;$/;"	m	class:FullO3CPU::IcachePort
fetch	o3/cpu.hh	/^    typename CPUPolicy::Fetch fetch;$/;"	m	class:FullO3CPU
fetch	o3/fetch.hh	/^        DefaultFetch<Impl> *fetch;$/;"	m	class:DefaultFetch::FetchTranslation
fetch	o3/fetch.hh	/^        DefaultFetch<Impl> *fetch;$/;"	m	class:DefaultFetch::FinishTranslationEvent
fetch	o3/fetch_impl.hh	/^DefaultFetch<Impl>::fetch(bool &status_change)$/;"	f	class:DefaultFetch
fetch	simple/timing.cc	/^TimingSimpleCPU::fetch()$/;"	f	class:TimingSimpleCPU
fetch1	minor/pipeline.hh	/^    Fetch1 fetch1;$/;"	m	class:Minor::Pipeline
fetch1FetchLimit	minor/MinorCPU.py	/^    fetch1FetchLimit = Param.Unsigned(1,$/;"	v	class:MinorCPU
fetch1LineSnapWidth	minor/MinorCPU.py	/^    fetch1LineSnapWidth = Param.Unsigned(0,$/;"	v	class:MinorCPU
fetch1LineWidth	minor/MinorCPU.py	/^    fetch1LineWidth = Param.Unsigned(0,$/;"	v	class:MinorCPU
fetch1ToFetch2BackwardDelay	minor/MinorCPU.py	/^    fetch1ToFetch2BackwardDelay = Param.Cycles(1,$/;"	v	class:MinorCPU
fetch1ToFetch2ForwardDelay	minor/MinorCPU.py	/^    fetch1ToFetch2ForwardDelay = Param.Cycles(1,$/;"	v	class:MinorCPU
fetch2	minor/pipeline.hh	/^    Fetch2 fetch2;$/;"	m	class:Minor::Pipeline
fetch2CycleInput	minor/MinorCPU.py	/^    fetch2CycleInput = Param.Bool(True,$/;"	v	class:MinorCPU
fetch2InputBufferSize	minor/MinorCPU.py	/^    fetch2InputBufferSize = Param.Unsigned(2,$/;"	v	class:MinorCPU
fetch2ToDecodeForwardDelay	minor/MinorCPU.py	/^    fetch2ToDecodeForwardDelay = Param.Cycles(1,$/;"	v	class:MinorCPU
fetchBlockedCycles	o3/fetch.hh	/^    Stats::Scalar fetchBlockedCycles;$/;"	m	class:DefaultFetch
fetchBlockedCycles	ozone/front_end.hh	/^    Stats::Scalar fetchBlockedCycles;$/;"	m	class:FrontEnd
fetchBuffSize	inorder/InOrderCPU.py	/^    fetchBuffSize = Param.Unsigned(4, "Fetch Buffer Size (Number of Cache Blocks Stored)")$/;"	v	class:InOrderCPU
fetchBuffSize	inorder/resources/fetch_unit.hh	/^    int fetchBuffSize;$/;"	m	class:FetchUnit
fetchBuffer	inorder/resources/fetch_unit.hh	/^    std::list<FetchBlock*> fetchBuffer;$/;"	m	class:FetchUnit
fetchBuffer	o3/fetch.hh	/^    uint8_t *fetchBuffer[Impl::MaxThreads];$/;"	m	class:DefaultFetch
fetchBufferAlignPC	o3/fetch.hh	/^    Addr fetchBufferAlignPC(Addr addr)$/;"	f	class:DefaultFetch
fetchBufferFill	inorder/resources/cache_unit.hh	/^    bool fetchBufferFill;$/;"	m	class:CacheRequest
fetchBufferMask	o3/fetch.hh	/^    Addr fetchBufferMask;$/;"	m	class:DefaultFetch
fetchBufferPC	o3/fetch.hh	/^    Addr fetchBufferPC[Impl::MaxThreads];$/;"	m	class:DefaultFetch
fetchBufferSize	o3/O3CPU.py	/^    fetchBufferSize = Param.Unsigned(64, "Fetch buffer size in bytes")$/;"	v	class:DerivO3CPU
fetchBufferSize	o3/fetch.hh	/^    unsigned fetchBufferSize;$/;"	m	class:DefaultFetch
fetchBufferValid	o3/fetch.hh	/^    bool fetchBufferValid[Impl::MaxThreads];$/;"	m	class:DefaultFetch
fetchCacheLine	o3/fetch_impl.hh	/^DefaultFetch<Impl>::fetchCacheLine(Addr vaddr, ThreadID tid, Addr pc)$/;"	f	class:DefaultFetch
fetchCacheLine	ozone/front_end_impl.hh	/^FrontEnd<Impl>::fetchCacheLine()$/;"	f	class:FrontEnd
fetchCacheLineNextCycle	ozone/front_end.hh	/^    bool fetchCacheLineNextCycle;$/;"	m	class:FrontEnd
fetchCycles	o3/fetch.hh	/^    Stats::Scalar fetchCycles;$/;"	m	class:DefaultFetch
fetchCycles	ozone/front_end.hh	/^    Stats::Scalar fetchCycles;$/;"	m	class:FrontEnd
fetchEvent	simple/timing.hh	/^    FetchEvent fetchEvent;$/;"	m	class:TimingSimpleCPU
fetchFault	o3/comm.hh	/^    Fault fetchFault;$/;"	m	struct:DefaultFetchDefaultDecode
fetchFault	ozone/back_end_impl.hh	/^BackEnd<Impl>::fetchFault(Fault &fault)$/;"	f	class:BackEnd
fetchFault	ozone/front_end.hh	/^    Fault fetchFault;$/;"	m	class:FrontEnd
fetchFault	ozone/inorder_back_end_impl.hh	/^InorderBackEnd<Impl>::fetchFault(Fault &fault)$/;"	f	class:InorderBackEnd
fetchFaultSN	o3/comm.hh	/^    InstSeqNum fetchFaultSN;$/;"	m	struct:DefaultFetchDefaultDecode
fetchIcacheSquashes	o3/fetch.hh	/^    Stats::Scalar fetchIcacheSquashes;$/;"	m	class:DefaultFetch
fetchIcacheSquashes	ozone/front_end.hh	/^    Stats::Scalar fetchIcacheSquashes;$/;"	m	class:FrontEnd
fetchIcacheWaitRetryStallCycles	o3/fetch.hh	/^    Stats::Scalar fetchIcacheWaitRetryStallCycles;$/;"	m	class:DefaultFetch
fetchIdleCycles	o3/fetch.hh	/^    Stats::Scalar fetchIdleCycles;$/;"	m	class:DefaultFetch
fetchIdleCycles	ozone/front_end.hh	/^    Stats::Scalar fetchIdleCycles;$/;"	m	class:FrontEnd
fetchInstsValid	o3/decode_impl.hh	/^DefaultDecode<Impl>::fetchInstsValid()$/;"	f	class:DefaultDecode
fetchLimit	minor/fetch1.hh	/^    unsigned int fetchLimit;$/;"	m	class:Minor::Fetch1
fetchLine	minor/fetch1.cc	/^Fetch1::fetchLine()$/;"	f	class:Minor::Fetch1
fetchMemReq	inorder/inorder_dyn_inst.hh	/^    RequestPtr fetchMemReq;$/;"	m	class:InOrderDynInst
fetchMicroop	static_inst.cc	/^StaticInst::fetchMicroop(MicroPC upc) const$/;"	f	class:StaticInst
fetchMiscStallCycles	o3/fetch.hh	/^    Stats::Scalar fetchMiscStallCycles;$/;"	m	class:DefaultFetch
fetchNisnDist	o3/fetch.hh	/^    Stats::Distribution fetchNisnDist;$/;"	m	class:DefaultFetch
fetchNisnDist	ozone/front_end.hh	/^    Stats::Distribution fetchNisnDist;$/;"	m	class:FrontEnd
fetchNoActiveThreadStallCycles	o3/fetch.hh	/^    Stats::Scalar fetchNoActiveThreadStallCycles;$/;"	m	class:DefaultFetch
fetchOffset	o3/fetch.hh	/^    Addr fetchOffset[Impl::MaxThreads];$/;"	m	class:DefaultFetch
fetchOffset	simple/base.hh	/^    Addr fetchOffset;$/;"	m	class:BaseSimpleCPU
fetchPendingDrainCycles	o3/fetch.hh	/^    Stats::Scalar fetchPendingDrainCycles;$/;"	m	class:DefaultFetch
fetchPendingQuiesceStallCycles	o3/fetch.hh	/^    Stats::Scalar fetchPendingQuiesceStallCycles;$/;"	m	class:DefaultFetch
fetchPendingTrapStallCycles	o3/fetch.hh	/^    Stats::Scalar fetchPendingTrapStallCycles;$/;"	m	class:DefaultFetch
fetchPolicy	inorder/first_stage.hh	/^    FetchPriority fetchPolicy;$/;"	m	class:FirstStage
fetchPolicy	o3/fetch.hh	/^    FetchPriority fetchPolicy;$/;"	m	class:DefaultFetch
fetchPriorityList	inorder/cpu.hh	/^    std::list<ThreadID> fetchPriorityList;$/;"	m	class:InOrderCPU
fetchPriorityList	inorder/first_stage.hh	/^    std::list<ThreadID> *fetchPriorityList;$/;"	m	class:FirstStage
fetchQueue	o3/commit.hh	/^    TimeBuffer<FetchStruct> *fetchQueue;$/;"	m	class:DefaultCommit
fetchQueue	o3/cpu.hh	/^    TimeBuffer<FetchStruct> fetchQueue;$/;"	m	class:FullO3CPU
fetchQueue	o3/decode.hh	/^    TimeBuffer<FetchStruct> *fetchQueue;$/;"	m	class:DefaultDecode
fetchQueue	o3/fetch.hh	/^    std::deque<DynInstPtr> fetchQueue[Impl::MaxThreads];$/;"	m	class:DefaultFetch
fetchQueueSize	o3/O3CPU.py	/^    fetchQueueSize = Param.Unsigned(32, "Fetch queue size in micro-ops "$/;"	v	class:DerivO3CPU
fetchQueueSize	o3/fetch.hh	/^    unsigned fetchQueueSize;$/;"	m	class:DefaultFetch
fetchRate	o3/fetch.hh	/^    Stats::Formula fetchRate;$/;"	m	class:DefaultFetch
fetchRate	ozone/front_end.hh	/^    Stats::Formula fetchRate;$/;"	m	class:FrontEnd
fetchRedirect	o3/iew.hh	/^    bool fetchRedirect[Impl::MaxThreads];$/;"	m	class:DefaultIEW
fetchRedirect	ozone/back_end.hh	/^    bool fetchRedirect[Impl::MaxThreads];$/;"	m	class:BackEnd
fetchSeqNum	minor/dyn_inst.hh	/^    InstSeqNum fetchSeqNum;$/;"	m	class:Minor::InstId
fetchSeqNum	minor/fetch2.hh	/^    InstSeqNum fetchSeqNum;$/;"	m	class:Minor::Fetch2
fetchSquashCycles	o3/fetch.hh	/^    Stats::Scalar fetchSquashCycles;$/;"	m	class:DefaultFetch
fetchSquashCycles	ozone/front_end.hh	/^    Stats::Scalar fetchSquashCycles;$/;"	m	class:FrontEnd
fetchStatus	o3/fetch.hh	/^    ThreadStatus fetchStatus[Impl::MaxThreads];$/;"	m	class:DefaultFetch
fetchTick	o3/dyn_inst.hh	/^    Tick fetchTick;	     \/\/ instruction fetch is completed.$/;"	m	class:BaseO3DynInst
fetchTlbCycles	o3/fetch.hh	/^    Stats::Scalar fetchTlbCycles;$/;"	m	class:DefaultFetch
fetchTlbSquashes	o3/fetch.hh	/^    Stats::Scalar fetchTlbSquashes;$/;"	m	class:DefaultFetch
fetchToCommitDelay	o3/commit.hh	/^    Cycles fetchToCommitDelay;$/;"	m	class:DefaultCommit
fetchToDecodeDelay	o3/O3CPU.py	/^    fetchToDecodeDelay = Param.Cycles(1, "Fetch to decode delay")$/;"	v	class:DerivO3CPU
fetchToDecodeDelay	o3/decode.hh	/^    Cycles fetchToDecodeDelay;$/;"	m	class:DefaultDecode
fetchToDecodeDelay	ozone/OzoneCPU.py	/^    fetchToDecodeDelay = Param.Unsigned("Fetch to decode delay")$/;"	v	class:DerivOzoneCPU
fetchToDecodeDelay	ozone/SimpleOzoneCPU.py	/^    fetchToDecodeDelay = Param.Unsigned("Fetch to decode delay")$/;"	v	class:SimpleOzoneCPU
fetchToDecodeDelay	ozone/simple_params.hh	/^    unsigned fetchToDecodeDelay;$/;"	m	class:SimpleParams
fetchTranslation	simple/timing.hh	/^    FetchTranslation fetchTranslation;$/;"	m	class:TimingSimpleCPU
fetchTrapLatency	o3/O3CPU.py	/^    fetchTrapLatency = Param.Cycles(1, "Fetch trap latency")$/;"	v	class:DerivO3CPU
fetchWidth	o3/O3CPU.py	/^    fetchWidth = Param.Unsigned(8, "Fetch width")$/;"	v	class:DerivO3CPU
fetchWidth	o3/fetch.hh	/^    unsigned fetchWidth;$/;"	m	class:DefaultFetch
fetchWidth	ozone/OzoneCPU.py	/^    fetchWidth = Param.Unsigned("Fetch width")$/;"	v	class:DerivOzoneCPU
fetchWidth	ozone/SimpleOzoneCPU.py	/^    fetchWidth = Param.Unsigned("Fetch width")$/;"	v	class:SimpleOzoneCPU
fetchWidth	ozone/simple_params.hh	/^    unsigned fetchWidth;$/;"	m	class:SimpleParams
fetchedBranches	o3/fetch.hh	/^    Stats::Scalar fetchedBranches;$/;"	m	class:DefaultFetch
fetchedBranches	ozone/front_end.hh	/^    Stats::Scalar fetchedBranches;$/;"	m	class:FrontEnd
fetchedCacheLines	o3/fetch.hh	/^    Stats::Scalar fetchedCacheLines;$/;"	m	class:DefaultFetch
fetchedCacheLines	ozone/front_end.hh	/^    Stats::Scalar fetchedCacheLines;$/;"	m	class:FrontEnd
fetchedInsts	o3/fetch.hh	/^    Stats::Scalar fetchedInsts;$/;"	m	class:DefaultFetch
fetchedInsts	ozone/front_end.hh	/^    Stats::Scalar fetchedInsts;$/;"	m	class:FrontEnd
finalPred	pred/bi_mode.hh	/^        bool finalPred;$/;"	m	struct:BiModeBP::BPHistory
find	inorder/resource_sked.cc	/^ResourceSked::find(int stage_num, int cmd)$/;"	f	class:ResourceSked
find	ozone/back_end_impl.hh	/^BackEnd<Impl>::InstQueue::find(queue q, InstListIt it)$/;"	f	class:BackEnd::InstQueue
findBlock	inorder/resources/fetch_unit.cc	/^FetchUnit::findBlock(std::list<FetchBlock*> &fetch_blocks, int asid,$/;"	f	class:FetchUnit
findContext	base.cc	/^BaseCPU::findContext(ThreadContext *tc)$/;"	f	class:BaseCPU
findInHash	o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::findInHash(const DynInstPtr &inst)$/;"	f	class:MemDepUnit
findIndex	minor/scoreboard.cc	/^Scoreboard::findIndex(RegIndex reg, Index &scoreboard_index)$/;"	f	class:Minor::Scoreboard
findInst	inorder/cpu.cc	/^InOrderCPU::findInst(InstSeqNum seq_num, ThreadID tid)$/;"	f	class:InOrderCPU
findInst	o3/rob_impl.hh	/^ROB<Impl>::findInst(ThreadID tid, InstSeqNum squash_inst)$/;"	f	class:ROB
findIterByCommand	inorder/resource_sked.cc	/^ResourceSked::findIterByCommand(ScheduleEntry* sked_entry, int stage_num,$/;"	f	class:ResourceSked
findIterByPriority	inorder/resource_sked.cc	/^ResourceSked::findIterByPriority(ScheduleEntry* sked_entry, int stage_num)$/;"	f	class:ResourceSked
findReplacementBlock	inorder/resources/fetch_unit.cc	/^FetchUnit::findReplacementBlock()$/;"	f	class:FetchUnit
findRequest	inorder/resource.cc	/^Resource::findRequest(DynInstPtr inst)$/;"	f	class:Resource
findRequest	inorder/resources/cache_unit.cc	/^CacheUnit::findRequest(DynInstPtr inst)$/;"	f	class:CacheUnit
findRequest	inorder/resources/cache_unit.cc	/^CacheUnit::findRequest(DynInstPtr inst, int idx)$/;"	f	class:CacheUnit
findRequest	inorder/resources/use_def.cc	/^UseDefUnit::findRequest(DynInstPtr inst)$/;"	f	class:UseDefUnit
findResponse	minor/lsq.cc	/^LSQ::findResponse(MinorDynInstPtr inst)$/;"	f	class:Minor::LSQ
findSlot	inorder/resource.cc	/^Resource::findSlot(DynInstPtr inst)$/;"	f	class:Resource
findTiming	minor/func_unit.cc	/^FUPipeline::findTiming(const StaticInstPtr &inst)$/;"	f	class:Minor::FUPipeline
finish	minor/fetch1.cc	/^Fetch1::FetchRequest::finish(const Fault &fault_, RequestPtr request_,$/;"	f	class:Minor::Fetch1::FetchRequest
finish	minor/lsq.cc	/^LSQ::SingleDataRequest::finish(const Fault &fault_, RequestPtr request_,$/;"	f	class:Minor::LSQ::SingleDataRequest
finish	minor/lsq.cc	/^LSQ::SplitDataRequest::finish(const Fault &fault_, RequestPtr request_,$/;"	f	class:Minor::LSQ::SplitDataRequest
finish	minor/lsq.hh	/^        void finish(const Fault &fault_, RequestPtr request_,$/;"	f	class:Minor::LSQ::SpecialDataRequest
finish	o3/fetch.hh	/^        finish(const Fault &fault, RequestPtr req, ThreadContext *tc,$/;"	f	class:DefaultFetch::FetchTranslation
finish	simple/timing.hh	/^        finish(const Fault &fault, RequestPtr req, ThreadContext *tc,$/;"	f	class:TimingSimpleCPU::FetchTranslation
finish	translation.hh	/^    finish(const Fault &fault, RequestPtr req, ThreadContext *tc,$/;"	f	class:DataTranslation
finish	translation.hh	/^    finish(const Fault &fault, int index)$/;"	f	class:WholeTranslationState
finishCacheUnitReq	inorder/resources/cache_unit.cc	/^CacheUnit::finishCacheUnitReq(DynInstPtr inst, CacheRequest *cache_req)$/;"	f	class:CacheUnit
finishSkedEntry	inorder/inorder_dyn_inst.hh	/^    bool finishSkedEntry()$/;"	f	class:InOrderDynInst
finishTranslation	base_dyn_inst.hh	/^BaseDynInst<Impl>::finishTranslation(WholeTranslationState *state)$/;"	f	class:BaseDynInst
finishTranslation	o3/fetch_impl.hh	/^DefaultFetch<Impl>::finishTranslation(const Fault &fault, RequestPtr mem_req)$/;"	f	class:DefaultFetch
finishTranslation	simple/timing.cc	/^TimingSimpleCPU::finishTranslation(WholeTranslationState *state)$/;"	f	class:TimingSimpleCPU
finishTranslationEvent	o3/fetch.hh	/^    FinishTranslationEvent finishTranslationEvent;$/;"	m	class:DefaultFetch
fiqAsserted	kvm/arm_cpu.hh	/^    bool fiqAsserted;$/;"	m	class:ArmKvmCPU
firstExecSeqNum	minor/dyn_inst.hh	/^    static const InstSeqNum firstExecSeqNum = 1;$/;"	m	class:Minor::InstId
firstFetchSeqNum	minor/dyn_inst.hh	/^    static const InstSeqNum firstFetchSeqNum = 1;$/;"	m	class:Minor::InstId
firstLineSeqNum	minor/dyn_inst.hh	/^    static const InstSeqNum firstLineSeqNum = 1;$/;"	m	class:Minor::InstId
firstPredictionSeqNum	minor/dyn_inst.hh	/^    static const InstSeqNum firstPredictionSeqNum = 1;$/;"	m	class:Minor::InstId
firstStreamSeqNum	minor/dyn_inst.hh	/^    static const InstSeqNum firstStreamSeqNum = 1;$/;"	m	class:Minor::InstId
fixedPkts	testers/networktest/networktest.hh	/^    bool fixedPkts;$/;"	m	class:NetworkTest
fixed_pkts	testers/networktest/NetworkTest.py	/^    fixed_pkts = Param.Bool(False, "Send fixed number of packets")$/;"	v	class:NetworkTest
flags	m5legion_interface.h	/^    uint32_t flags;$/;"	m	struct:__anon8
flags	static_inst.hh	/^    std::bitset<Num_Flags> flags;$/;"	m	class:StaticInst
flags	testers/traffic_gen/generators.hh	/^        Request::FlagsType flags;$/;"	m	struct:TraceGen::TraceElement
flatDestRegIdx	minor/dyn_inst.hh	/^    TheISA::RegIndex flatDestRegIdx[TheISA::MaxInstDestRegs];$/;"	m	class:Minor::MinorDynInst
flattenCCIndex	checker/thread_context.hh	/^    int flattenCCIndex(int reg) { return actualTC->flattenCCIndex(reg); }$/;"	f	class:CheckerThreadContext
flattenCCIndex	inorder/thread_context.hh	/^    int flattenCCIndex(int reg)$/;"	f	class:InOrderThreadContext
flattenCCIndex	o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::flattenCCIndex(int reg)$/;"	f	class:O3ThreadContext
flattenCCIndex	simple_thread.hh	/^    flattenCCIndex(int reg)$/;"	f	class:SimpleThread
flattenCCIndex	thread_context.hh	/^    int flattenCCIndex(int reg)$/;"	f	class:ProxyThreadContext
flattenDestReg	base_dyn_inst.hh	/^    void flattenDestReg(int idx, TheISA::RegIndex flattened_dest)$/;"	f	class:BaseDynInst
flattenDestReg	inorder/inorder_dyn_inst.hh	/^    void flattenDestReg(int idx, TheISA::RegIndex flattened_dest)$/;"	f	class:InOrderDynInst
flattenFloatIndex	checker/thread_context.hh	/^    int flattenFloatIndex(int reg) { return actualTC->flattenFloatIndex(reg); }$/;"	f	class:CheckerThreadContext
flattenFloatIndex	inorder/thread_context.hh	/^    int flattenFloatIndex(int reg)$/;"	f	class:InOrderThreadContext
flattenFloatIndex	o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::flattenFloatIndex(int reg)$/;"	f	class:O3ThreadContext
flattenFloatIndex	simple_thread.hh	/^    flattenFloatIndex(int reg)$/;"	f	class:SimpleThread
flattenFloatIndex	thread_context.hh	/^    int flattenFloatIndex(int reg)$/;"	f	class:ProxyThreadContext
flattenIntIndex	checker/thread_context.hh	/^    int flattenIntIndex(int reg) { return actualTC->flattenIntIndex(reg); }$/;"	f	class:CheckerThreadContext
flattenIntIndex	inorder/thread_context.hh	/^    int flattenIntIndex(int reg)$/;"	f	class:InOrderThreadContext
flattenIntIndex	o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::flattenIntIndex(int reg)$/;"	f	class:O3ThreadContext
flattenIntIndex	simple_thread.hh	/^    flattenIntIndex(int reg)$/;"	f	class:SimpleThread
flattenIntIndex	thread_context.hh	/^    int flattenIntIndex(int reg)$/;"	f	class:ProxyThreadContext
flattenMiscIndex	checker/thread_context.hh	/^    int flattenMiscIndex(int reg) { return actualTC->flattenMiscIndex(reg); }$/;"	f	class:CheckerThreadContext
flattenMiscIndex	inorder/thread_context.hh	/^    int flattenMiscIndex(int reg)$/;"	f	class:InOrderThreadContext
flattenMiscIndex	o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::flattenMiscIndex(int reg)$/;"	f	class:O3ThreadContext
flattenMiscIndex	simple_thread.hh	/^    flattenMiscIndex(int reg)$/;"	f	class:SimpleThread
flattenMiscIndex	thread_context.hh	/^    int flattenMiscIndex(int reg)$/;"	f	class:ProxyThreadContext
flattenRegIdx	inorder/cpu.cc	/^InOrderCPU::flattenRegIdx(RegIndex reg_idx, RegClass &reg_type, ThreadID tid)$/;"	f	class:InOrderCPU
flattenRegIndex	minor/scoreboard.cc	/^flattenRegIndex(TheISA::RegIndex reg, ThreadContext *thread_context)$/;"	f	namespace:Minor
flattenSrcReg	inorder/inorder_dyn_inst.hh	/^    void flattenSrcReg(int idx, TheISA::RegIndex flattened_src)$/;"	f	class:InOrderDynInst
flattenedDestRegIdx	base_dyn_inst.hh	/^    TheISA::RegIndex flattenedDestRegIdx(int idx) const$/;"	f	class:BaseDynInst
flattenedDestRegIdx	inorder/inorder_dyn_inst.hh	/^    TheISA::RegIndex flattenedDestRegIdx(int idx) const$/;"	f	class:InOrderDynInst
flattenedSrcRegIdx	inorder/inorder_dyn_inst.hh	/^    TheISA::RegIndex flattenedSrcRegIdx(int idx) const$/;"	f	class:InOrderDynInst
floatList	o3/free_list.hh	/^    SimpleFreeList floatList;$/;"	m	class:UnifiedFreeList
floatMap	o3/rename_map.hh	/^    SimpleRenameMap floatMap;$/;"	m	class:UnifiedRenameMap
floatRegFile	o3/regfile.hh	/^    std::vector<PhysFloatReg> floatRegFile;$/;"	m	class:PhysRegFile
floatRegFileAccs	inorder/resources/use_def.hh	/^    Stats::Formula floatRegFileAccs;$/;"	m	class:UseDefUnit
floatRegFileReads	inorder/resources/use_def.hh	/^    Stats::Scalar floatRegFileReads;$/;"	m	class:UseDefUnit
floatRegFileWrites	inorder/resources/use_def.hh	/^    Stats::Scalar floatRegFileWrites;$/;"	m	class:UseDefUnit
floatRegs	inorder/cpu.hh	/^    } floatRegs;$/;"	m	class:InOrderCPU	typeref:union:InOrderCPU::__anon2
floatRegs	simple_thread.hh	/^    } floatRegs;$/;"	m	class:SimpleThread	typeref:union:SimpleThread::__anon15
flushCoalescedMMIO	kvm/base.cc	/^BaseKvmCPU::flushCoalescedMMIO()$/;"	f	class:BaseKvmCPU
flushTLBs	base.cc	/^BaseCPU::flushTLBs()$/;"	f	class:BaseCPU
forceSegAccessed	kvm/x86_cpu.cc	/^forceSegAccessed(struct kvm_segment &seg)$/;"	f	file:
forwardComSize	o3/O3CPU.py	/^    forwardComSize = Param.Unsigned(5, "Time buffer size for forward communication")$/;"	v	class:DerivO3CPU
forwardOldRegs	o3/dyn_inst.hh	/^    void forwardOldRegs()$/;"	f	class:BaseO3DynInst
forwardStoreData	minor/lsq.cc	/^LSQ::StoreBuffer::forwardStoreData(LSQRequestPtr load,$/;"	f	class:Minor::LSQ::StoreBuffer
fpAluAccesses	o3/inst_queue.hh	/^    Stats::Scalar fpAluAccesses;$/;"	m	class:InstructionQueue
fpInstQueueReads	o3/inst_queue.hh	/^    Stats::Scalar fpInstQueueReads;$/;"	m	class:InstructionQueue
fpInstQueueWakeupQccesses	o3/inst_queue.hh	/^    Stats::Scalar fpInstQueueWakeupQccesses;$/;"	m	class:InstructionQueue
fpInstQueueWrites	o3/inst_queue.hh	/^    Stats::Scalar fpInstQueueWrites;$/;"	m	class:InstructionQueue
fpRegfileReads	o3/cpu.hh	/^    Stats::Scalar fpRegfileReads;$/;"	m	class:FullO3CPU
fpRegfileWrites	o3/cpu.hh	/^    Stats::Scalar fpRegfileWrites;$/;"	m	class:FullO3CPU
fpRenameLookups	o3/rename.hh	/^    Stats::Scalar fpRenameLookups;$/;"	m	class:DefaultRename
fpVal	inorder/inorder_dyn_inst.hh	/^        } fpVal;$/;"	m	struct:InOrderDynInst::InstValue	typeref:union:InOrderDynInst::InstValue::__anon4
fpZeroRegIdx	o3/scoreboard.hh	/^    PhysRegIndex fpZeroRegIdx;$/;"	m	class:Scoreboard
fpr	kvm/x86_cpu.cc	/^    uint8_t fpr[8][16];$/;"	m	struct:FXSave	file:
fpregs	m5legion_interface.h	/^    uint64_t fpregs[32];$/;"	m	struct:__anon8
fpu_cs	kvm/x86_cpu.cc	/^            uint16_t fpu_cs;$/;"	m	struct:FXSave::__anon5::__anon6	file:
fpu_dp	kvm/x86_cpu.cc	/^            uint32_t fpu_dp;$/;"	m	struct:FXSave::__anon5::__anon6	file:
fpu_dp	kvm/x86_cpu.cc	/^            uint64_t fpu_dp;$/;"	m	struct:FXSave::__anon5::__anon7	file:
fpu_ds	kvm/x86_cpu.cc	/^            uint16_t fpu_ds;$/;"	m	struct:FXSave::__anon5::__anon6	file:
fpu_ip	kvm/x86_cpu.cc	/^            uint32_t fpu_ip;$/;"	m	struct:FXSave::__anon5::__anon6	file:
fpu_ip	kvm/x86_cpu.cc	/^            uint64_t fpu_ip;$/;"	m	struct:FXSave::__anon5::__anon7	file:
fragmentPackets	minor/lsq.hh	/^        std::vector<Packet *> fragmentPackets;$/;"	m	class:Minor::LSQ::SplitDataRequest
fragmentRequests	minor/lsq.hh	/^        std::vector<Request *> fragmentRequests;$/;"	m	class:Minor::LSQ::SplitDataRequest
fragments	simple/timing.hh	/^        PacketPtr fragments[2];$/;"	m	class:TimingSimpleCPU::SplitMainSenderState
freeEntries	o3/inst_queue.hh	/^    unsigned freeEntries;$/;"	m	class:InstructionQueue
freeEntries	o3/rename.hh	/^    FreeEntries freeEntries[Impl::MaxThreads];$/;"	m	class:DefaultRename
freeEntries	ozone/inst_queue.hh	/^    unsigned freeEntries;$/;"	m	class:InstQueue
freeFU	o3/inst_queue.hh	/^        bool freeFU;$/;"	m	class:InstructionQueue::FUCompletion
freeIQEntries	o3/comm.hh	/^        unsigned freeIQEntries;$/;"	m	struct:TimeBufStruct::iewComm
freeLQEntries	o3/comm.hh	/^        unsigned freeLQEntries;$/;"	m	struct:TimeBufStruct::iewComm
freeLine	minor/pipe_data.cc	/^ForwardLineData::freeLine()$/;"	f	class:Minor::ForwardLineData
freeList	o3/cpu.hh	/^    typename CPUPolicy::FreeList freeList;$/;"	m	class:FullO3CPU
freeList	o3/rename.hh	/^    FreeList *freeList;$/;"	m	class:DefaultRename
freeList	o3/rename_map.hh	/^    SimpleFreeList *freeList;$/;"	m	class:SimpleRenameMap
freeROBEntries	o3/comm.hh	/^        unsigned freeROBEntries; \/\/ *R$/;"	m	struct:TimeBufStruct::commitComm
freeRegs	o3/free_list.hh	/^    std::queue<PhysRegIndex> freeRegs;$/;"	m	class:SimpleFreeList
freeRegs	ozone/front_end.hh	/^    int freeRegs;$/;"	m	class:FrontEnd
freeReservation	minor/buffers.hh	/^    void freeReservation() { queue.freeReservation(); }$/;"	f	class:Minor::InputBuffer
freeReservation	minor/buffers.hh	/^    void freeReservation()$/;"	f	class:Minor::Queue
freeSQEntries	o3/comm.hh	/^        unsigned freeSQEntries;$/;"	m	struct:TimeBufStruct::iewComm
freeSlot	inorder/resource.cc	/^Resource::freeSlot(int slot_idx)$/;"	f	class:Resource
freeSlot	inorder/resource.cc	/^ResourceRequest::freeSlot()$/;"	f	class:ResourceRequest
freeUnitNextCycle	o3/fu_pool.cc	/^FUPool::freeUnitNextCycle(int fu_idx)$/;"	f	class:FUPool
from	testers/traffic_gen/traffic_gen.hh	/^        uint32_t from;$/;"	m	struct:TrafficGen::Transition
fromCommit	o3/decode.hh	/^    typename TimeBuffer<TimeStruct>::wire fromCommit;$/;"	m	class:DefaultDecode
fromCommit	o3/fetch.hh	/^    typename TimeBuffer<TimeStruct>::wire fromCommit;$/;"	m	class:DefaultFetch
fromCommit	o3/iew.hh	/^    typename TimeBuffer<TimeStruct>::wire fromCommit;$/;"	m	class:DefaultIEW
fromCommit	o3/inst_queue.hh	/^    typename TimeBuffer<TimeStruct>::wire fromCommit;$/;"	m	class:InstructionQueue
fromCommit	o3/rename.hh	/^    typename TimeBuffer<TimeStruct>::wire fromCommit;$/;"	m	class:DefaultRename
fromCommit	ozone/back_end.hh	/^    typename TimeBuffer<CommStruct>::wire fromCommit;$/;"	m	class:BackEnd
fromCommit	ozone/front_end.hh	/^    typename TimeBuffer<CommStruct>::wire fromCommit;$/;"	m	class:FrontEnd
fromCommit	ozone/lw_back_end.hh	/^    typename TimeBuffer<CommStruct>::wire fromCommit;$/;"	m	class:LWBackEnd
fromDecode	o3/fetch.hh	/^    typename TimeBuffer<TimeStruct>::wire fromDecode;$/;"	m	class:DefaultFetch
fromDecode	o3/rename.hh	/^    typename TimeBuffer<DecodeStruct>::wire fromDecode;$/;"	m	class:DefaultRename
fromFetch	o3/commit.hh	/^    typename TimeBuffer<FetchStruct>::wire fromFetch;$/;"	m	class:DefaultCommit
fromFetch	o3/decode.hh	/^    typename TimeBuffer<FetchStruct>::wire fromFetch;$/;"	m	class:DefaultDecode
fromIEW	o3/commit.hh	/^    typename TimeBuffer<IEWStruct>::wire fromIEW;$/;"	m	class:DefaultCommit
fromIEW	o3/decode.hh	/^    typename TimeBuffer<TimeStruct>::wire fromIEW;$/;"	m	class:DefaultDecode
fromIEW	o3/fetch.hh	/^    typename TimeBuffer<TimeStruct>::wire fromIEW;$/;"	m	class:DefaultFetch
fromIEW	o3/rename.hh	/^    typename TimeBuffer<TimeStruct>::wire fromIEW;$/;"	m	class:DefaultRename
fromIssue	o3/iew.hh	/^    typename TimeBuffer<IssueStruct>::wire fromIssue;$/;"	m	class:DefaultIEW
fromIssue	o3/lsq_unit.hh	/^    typename TimeBuffer<IssueStruct>::wire fromIssue;$/;"	m	class:LSQUnit
fromIssue	ozone/lsq_unit.hh	/^    typename TimeBuffer<IssueStruct>::wire fromIssue;$/;"	m	class:OzoneLSQ
fromNextStages	inorder/pipeline_stage.hh	/^    TimeBuffer<TimeStruct>::wire fromNextStages;$/;"	m	class:PipelineStage
fromRename	o3/commit.hh	/^    typename TimeBuffer<RenameStruct>::wire fromRename;$/;"	m	class:DefaultCommit
fromRename	o3/decode.hh	/^    typename TimeBuffer<TimeStruct>::wire fromRename;$/;"	m	class:DefaultDecode
fromRename	o3/fetch.hh	/^    typename TimeBuffer<TimeStruct>::wire fromRename;$/;"	m	class:DefaultFetch
fromRename	o3/iew.hh	/^    typename TimeBuffer<RenameStruct>::wire fromRename;$/;"	m	class:DefaultIEW
front	minor/buffers.hh	/^    ElemType &front() { return *popWire; }$/;"	f	class:Minor::SelfStallingPipeline
front	minor/buffers.hh	/^    ElemType &front() { return queue.front(); }$/;"	f	class:Minor::Queue
front	minor/buffers.hh	/^    ElemType &front()$/;"	f	class:Minor::InputBuffer
front	minor/buffers.hh	/^    const ElemType &front() const { return *popWire; }$/;"	f	class:Minor::SelfStallingPipeline
front	minor/buffers.hh	/^    const ElemType &front() const { return queue.front(); }$/;"	f	class:Minor::Queue
front	minor/buffers.hh	/^    const ElemType &front() const$/;"	f	class:Minor::InputBuffer
frontEnd	ozone/back_end.hh	/^    FrontEnd *frontEnd;$/;"	m	class:BackEnd
frontEnd	ozone/cpu.hh	/^    FrontEnd *frontEnd;$/;"	m	class:OzoneCPU
frontEnd	ozone/inorder_back_end.hh	/^    FrontEnd *frontEnd;$/;"	m	class:InorderBackEnd
frontEnd	ozone/lw_back_end.hh	/^    FrontEnd *frontEnd;$/;"	m	class:LWBackEnd
frontEndLatency	ozone/OzoneCPU.py	/^    frontEndLatency = Param.Unsigned("Front end latency")$/;"	v	class:DerivOzoneCPU
frontEndLatency	ozone/simple_params.hh	/^    unsigned frontEndLatency;$/;"	m	class:SimpleParams
frontEndSked	inorder/cpu.hh	/^    ThePipeline::RSkedPtr frontEndSked;$/;"	m	class:InOrderCPU
frontEndWidth	ozone/OzoneCPU.py	/^    frontEndWidth = Param.Unsigned("Front end width")$/;"	v	class:DerivOzoneCPU
frontEndWidth	ozone/SimpleOzoneCPU.py	/^    frontEndWidth = Param.Unsigned("Front end width")$/;"	v	class:SimpleOzoneCPU
frontEndWidth	ozone/simple_params.hh	/^    unsigned frontEndWidth;$/;"	m	class:SimpleParams
frontSked	inorder/inorder_dyn_inst.hh	/^    RSkedPtr frontSked;$/;"	m	class:InOrderDynInst
frontSked_end	inorder/inorder_dyn_inst.hh	/^    RSkedIt frontSked_end;$/;"	m	class:InOrderDynInst
fsr	m5legion_interface.h	/^    uint64_t fsr;$/;"	m	struct:__anon8
fsw	kvm/x86_cpu.cc	/^    uint16_t fsw;$/;"	m	struct:FXSave	file:
ftwx	kvm/x86_cpu.cc	/^    uint8_t ftwx;$/;"	m	struct:FXSave	file:
fuBusy	o3/inst_queue.hh	/^    Stats::Vector fuBusy;$/;"	m	class:InstructionQueue
fuBusyRate	o3/inst_queue.hh	/^    Stats::Formula fuBusyRate;$/;"	m	class:InstructionQueue
fuDescriptions	minor/execute.hh	/^    MinorFUPool &fuDescriptions;$/;"	m	class:Minor::Execute
fuIdx	o3/inst_queue.hh	/^        int fuIdx;$/;"	m	class:InstructionQueue::FUCompletion
fuIndex	minor/dyn_inst.hh	/^    unsigned int fuIndex;$/;"	m	class:Minor::MinorDynInst
fuIndices	minor/scoreboard.hh	/^    std::vector<int> fuIndices;$/;"	m	class:Minor::Scoreboard
fuListIterator	o3/fu_pool.hh	/^    typedef std::vector<FuncUnit *>::iterator fuListIterator;$/;"	t	class:FUPool
fuPerCapList	o3/fu_pool.hh	/^    FUIdxQueue fuPerCapList[Num_OpClasses];$/;"	m	class:FUPool
fuPool	o3/O3CPU.py	/^    fuPool = Param.FUPool(DefaultFUPool(), "Functional Unit pool")$/;"	v	class:DerivO3CPU
fuPool	o3/iew.hh	/^    FUPool *fuPool;$/;"	m	class:DefaultIEW
fuPool	o3/inst_queue.hh	/^    FUPool *fuPool;$/;"	m	class:InstructionQueue
fuPool	ozone/simple_params.hh	/^    FUPool *fuPool;$/;"	m	class:SimpleParams
full	pred/ras.hh	/^     bool full() { return usedEntries == numEntries; }$/;"	f	class:ReturnAddrStack
fullCount	ozone/back_end.hh	/^        Stats::Scalar fullCount;$/;"	m	class:BackEnd::InstQueue
full_rate	ozone/back_end.hh	/^        Stats::Formula full_rate;$/;"	m	class:BackEnd::InstQueue
funcExeInst	ozone/back_end.hh	/^    Counter funcExeInst;$/;"	m	class:BackEnd
funcExeInst	ozone/lw_back_end.hh	/^    Counter funcExeInst;$/;"	m	class:LWBackEnd
funcExeInst	thread_state.hh	/^    Counter funcExeInst;$/;"	m	struct:ThreadState
funcPort	testers/memtest/memtest.hh	/^    CpuPort funcPort;$/;"	m	class:MemTest
funcProxy	testers/memtest/memtest.hh	/^    PortProxy funcProxy;$/;"	m	class:MemTest
funcUnits	minor/MinorCPU.py	/^    funcUnits = VectorParam.MinorFU("functional units")$/;"	v	class:MinorFUPool
funcUnits	minor/MinorCPU.py	/^    funcUnits = [MinorDefaultIntFU(), MinorDefaultIntFU(),$/;"	v	class:MinorDefaultFUPool
funcUnits	minor/execute.hh	/^    std::vector<FUPipeline *> funcUnits;$/;"	m	class:Minor::Execute
funcUnits	minor/func_unit.hh	/^    std::vector<MinorFU *> funcUnits;$/;"	m	class:MinorFUPool
funcUnits	o3/fu_pool.hh	/^    std::vector<FuncUnit *> funcUnits;$/;"	m	class:FUPool
funcUnitsIdx	o3/fu_pool.hh	/^        std::vector<int> funcUnitsIdx;$/;"	m	class:FUPool::FUIdxQueue
functionEntryTick	base.hh	/^    Tick functionEntryTick;$/;"	m	class:BaseCPU
functionTraceStream	base.hh	/^    std::ostream *functionTraceStream;$/;"	m	class:BaseCPU
functionTracingEnabled	base.hh	/^    bool functionTracingEnabled;$/;"	m	class:BaseCPU
function_trace	BaseCPU.py	/^    function_trace = Param.Bool(False, "Enable function trace")$/;"	v
function_trace_start	BaseCPU.py	/^    function_trace_start = Param.Tick(0, "Tick to start function trace")$/;"	v
functional	testers/memtest/MemTest.py	/^                                "used for verification")$/;"	v	class:MemTest
future	timebuf.hh	/^    int future;$/;"	m	class:TimeBuffer
genCenteredLabel	legiontrace.cc	/^inline char * genCenteredLabel(int length, char * buffer, const char * label)$/;"	f	namespace:Trace
genSkedID	inorder/cpu.hh	/^    inline SkedID genSkedID(DynInstPtr inst)$/;"	f	class:InOrderCPU
genStartAddr	testers/traffic_gen/generators.cc	/^DramGen::genStartAddr(unsigned int new_bank, unsigned int new_rank)$/;"	f	class:DramGen
generatePkt	testers/networktest/networktest.cc	/^NetworkTest::generatePkt()$/;"	f	class:NetworkTest
generateTCEvent	o3/commit_impl.hh	/^DefaultCommit<Impl>::generateTCEvent(ThreadID tid)$/;"	f	class:DefaultCommit
generateTCEvent	ozone/lw_back_end.hh	/^    void generateTCEvent() { tcSquash = true; }$/;"	f	class:LWBackEnd
generateTrapEvent	o3/commit_impl.hh	/^DefaultCommit<Impl>::generateTrapEvent(ThreadID tid)$/;"	f	class:DefaultCommit
generateTrapEvent	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::generateTrapEvent(Tick latency)$/;"	f	class:LWBackEnd
generateXCEvent	ozone/inorder_back_end.hh	/^    void generateXCEvent() { }$/;"	f	class:InorderBackEnd
generator	testers/directedtest/RubyDirectedTester.hh	/^    DirectedGenerator* generator;$/;"	m	class:RubyDirectedTester
generator	testers/directedtest/RubyDirectedTester.py	/^    generator = Param.DirectedGenerator("the request generator")$/;"	v	class:RubyDirectedTester
get	base_dyn_inst.hh	/^        void get(double& d) { d = dbl; }$/;"	f	union:BaseDynInst::Result
get	base_dyn_inst.hh	/^        void get(uint64_t& i) { i = integer; }$/;"	f	union:BaseDynInst::Result
get	checker/cpu.hh	/^        void get(double& d) { d = dbl; }$/;"	f	union:CheckerCPU::Result
get	checker/cpu.hh	/^        void get(uint64_t& i) { i = integer; }$/;"	f	union:CheckerCPU::Result
getAPIVersion	kvm/vm.hh	/^    int getAPIVersion() const { return apiVersion; }$/;"	f	class:Kvm
getActivityCount	activity.hh	/^    int getActivityCount() const { return activityCount; }$/;"	f	class:ActivityRecorder
getActivityRecorder	minor/pipeline.hh	/^    MinorActivityRecorder *getActivityRecorder() { return &activityRecorder; }$/;"	f	class:Minor::Pipeline
getAddress	testers/rubytest/Check.hh	/^    const Address& getAddress() { return m_address; }$/;"	f	class:Check
getAndFormatOneReg	kvm/base.cc	/^BaseKvmCPU::getAndFormatOneReg(uint64_t id) const$/;"	f	class:BaseKvmCPU
getAndIncrementInstSeq	inorder/cpu.hh	/^    InstSeqNum getAndIncrementInstSeq(ThreadID tid)$/;"	f	class:InOrderCPU
getAndIncrementInstSeq	o3/cpu.hh	/^    InstSeqNum getAndIncrementInstSeq()$/;"	f	class:FullO3CPU
getAndIncrementInstSeq	ozone/front_end.hh	/^    InstSeqNum getAndIncrementInstSeq()$/;"	f	class:FrontEnd
getBlockedMemInstToExecute	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::getBlockedMemInstToExecute()$/;"	f	class:InstructionQueue
getCCList	o3/free_list.hh	/^    SimpleFreeList *getCCList() { return &ccList; }$/;"	f	class:UnifiedFreeList
getCCReg	o3/free_list.hh	/^    PhysRegIndex getCCReg() { return ccList.getReg(); }$/;"	f	class:UnifiedFreeList
getCheck	testers/rubytest/CheckTable.cc	/^CheckTable::getCheck(const Address& address)$/;"	f	class:CheckTable
getCheckFlush	testers/rubytest/RubyTester.hh	/^    bool getCheckFlush() { return m_check_flush; }$/;"	f	class:RubyTester
getCheckerCpuPtr	checker/thread_context.hh	/^    CheckerCPU *getCheckerCpuPtr()$/;"	f	class:CheckerThreadContext
getCheckerCpuPtr	inorder/thread_context.hh	/^    CheckerCPU *getCheckerCpuPtr() { return NULL; }$/;"	f	class:InOrderThreadContext
getCheckerCpuPtr	o3/thread_context.hh	/^    CheckerCPU *getCheckerCpuPtr() { return NULL; }$/;"	f	class:O3ThreadContext
getCheckerCpuPtr	simple_thread.hh	/^    CheckerCPU *getCheckerCpuPtr() { return NULL; }$/;"	f	class:SimpleThread
getCheckerCpuPtr	thread_context.hh	/^    CheckerCPU *getCheckerCpuPtr() { return actualTC->getCheckerCpuPtr(); }$/;"	f	class:ProxyThreadContext
getCommittingThread	o3/commit_impl.hh	/^DefaultCommit<Impl>::getCommittingThread()$/;"	f	class:DefaultCommit
getContext	base.hh	/^   virtual ThreadContext *getContext(int tn) { return threadContexts[tn]; }$/;"	f	class:BaseCPU
getContext	kvm/base.cc	/^BaseKvmCPU::getContext(int tn)$/;"	f	class:BaseKvmCPU
getCount	o3/inst_queue.hh	/^    unsigned getCount(ThreadID tid) { return count[tid]; };$/;"	f	class:InstructionQueue
getCount	o3/lsq.hh	/^    int getCount(ThreadID tid)$/;"	f	class:LSQ
getCount	o3/lsq_impl.hh	/^LSQ<Impl>::getCount()$/;"	f	class:LSQ
getCount	o3/lsq_unit.hh	/^    unsigned getCount() { return loads + stores; }$/;"	f	class:LSQUnit
getCount	ozone/inst_queue.hh	/^    unsigned getCount(ThreadID tid) { return count[tid]; };$/;"	f	class:InstQueue
getCount	ozone/lsq_unit.hh	/^    unsigned getCount() { return loads + stores; }$/;"	f	class:OzoneLSQ
getCount	ozone/lw_lsq.hh	/^    unsigned getCount() { return loads + stores; }$/;"	f	class:OzoneLWLSQ
getCpuName	inorder/thread_context.hh	/^    std::string getCpuName() { return cpu->name(); }$/;"	f	class:InOrderThreadContext
getCpuPort	testers/directedtest/RubyDirectedTester.cc	/^RubyDirectedTester::getCpuPort(int idx)$/;"	f	class:RubyDirectedTester
getCpuPtr	base_dyn_inst.hh	/^    BaseCPU *getCpuPtr() { return cpu; }$/;"	f	class:BaseDynInst
getCpuPtr	checker/thread_context.hh	/^    BaseCPU *getCpuPtr() { return actualTC->getCpuPtr(); }$/;"	f	class:CheckerThreadContext
getCpuPtr	inorder/thread_context.hh	/^    BaseCPU *getCpuPtr() { return cpu; }$/;"	f	class:InOrderThreadContext
getCpuPtr	minor/exec_context.hh	/^    BaseCPU *getCpuPtr() { return &cpu; }$/;"	f	class:Minor::ExecContext
getCpuPtr	o3/thread_context.hh	/^    virtual BaseCPU *getCpuPtr() { return cpu; }$/;"	f	class:O3ThreadContext
getCpuPtr	ozone/cpu.hh	/^    BaseCPU *getCpuPtr() { return this; }$/;"	f	class:OzoneCPU
getCpuPtr	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::getCpuPtr()$/;"	f	class:OzoneCPU::OzoneTC
getCpuPtr	simple_thread.hh	/^    BaseCPU *getCpuPtr() { return baseCpu; }$/;"	f	class:SimpleThread
getCpuPtr	thread_context.hh	/^    BaseCPU *getCpuPtr() { return actualTC->getCpuPtr(); }$/;"	f	class:ProxyThreadContext
getCurResSlot	inorder/inorder_dyn_inst.hh	/^    unsigned getCurResSlot() { return curResSlot; }$/;"	f	class:InOrderDynInst
getDTBPtr	checker/cpu.hh	/^    TheISA::TLB* getDTBPtr() { return dtb; }$/;"	f	class:CheckerCPU
getDTBPtr	checker/thread_context.hh	/^    TheISA::TLB *getDTBPtr() { return actualTC->getDTBPtr(); }$/;"	f	class:CheckerThreadContext
getDTBPtr	inorder/cpu.cc	/^InOrderCPU::getDTBPtr()$/;"	f	class:InOrderCPU
getDTBPtr	inorder/thread_context.hh	/^    TheISA::TLB *getDTBPtr() { return cpu->getDTBPtr(); }$/;"	f	class:InOrderThreadContext
getDTBPtr	o3/thread_context.hh	/^    TheISA::TLB *getDTBPtr() { return cpu->dtb; }$/;"	f	class:O3ThreadContext
getDTBPtr	ozone/cpu.hh	/^        TheISA::TLB * getDTBPtr() { return cpu->dtb; }$/;"	f	class:OzoneCPU::OzoneTC
getDTBPtr	simple_thread.hh	/^    TheISA::TLB *getDTBPtr() { return dtb; }$/;"	f	class:SimpleThread
getDTBPtr	thread_context.hh	/^    TheISA::TLB *getDTBPtr() { return actualTC->getDTBPtr(); }$/;"	f	class:ProxyThreadContext
getData	inorder/resource.hh	/^    virtual PacketDataPtr getData() { return NULL; }$/;"	f	class:ResourceRequest
getData	inorder/resources/cache_unit.hh	/^    virtual PacketDataPtr getData()$/;"	f	class:CacheRequest
getDataPort	checker/cpu.hh	/^    MasterPort &getDataPort()$/;"	f	class:CheckerCPU
getDataPort	inorder/cpu.hh	/^    virtual MasterPort &getDataPort() { return dataPort; }$/;"	f	class:InOrderCPU
getDataPort	kvm/base.hh	/^    MasterPort &getDataPort() { return dataPort; }$/;"	f	class:BaseKvmCPU
getDataPort	minor/cpu.cc	/^MasterPort &MinorCPU::getDataPort()$/;"	f	class:MinorCPU
getDataPort	minor/pipeline.cc	/^Pipeline::getDataPort()$/;"	f	class:Minor::Pipeline
getDataPort	o3/cpu.hh	/^    virtual MasterPort &getDataPort() { return dcachePort; }$/;"	f	class:FullO3CPU
getDataPort	simple/atomic.hh	/^    virtual MasterPort &getDataPort() { return dcachePort; }$/;"	f	class:AtomicSimpleCPU
getDataPort	simple/timing.hh	/^    virtual MasterPort &getDataPort() { return dcachePort; }$/;"	f	class:TimingSimpleCPU
getDataUnit	inorder/resource_pool.hh	/^    CacheUnit *getDataUnit() const { return dataUnit; }$/;"	f	class:ResourcePool
getDcachePort	minor/execute.cc	/^Execute::getDcachePort()$/;"	f	class:Minor::Execute
getDcachePort	minor/lsq.hh	/^    MinorCPU::MinorCPUPort &getDcachePort() { return dcachePort; }$/;"	f	class:Minor::LSQ
getDcachePort	ozone/lw_back_end.hh	/^    Port *getDcachePort() { return LSQ.getDcachePort(); }$/;"	f	class:LWBackEnd
getDcachePort	ozone/lw_lsq.hh	/^    Port *getDcachePort() { return &dcachePort; }$/;"	f	class:OzoneLWLSQ
getDebugRegisters	kvm/x86_cpu.cc	/^X86KvmCPU::getDebugRegisters(struct kvm_debugregs &regs) const$/;"	f	class:X86KvmCPU
getDecoderPtr	checker/thread_context.hh	/^    TheISA::Decoder *getDecoderPtr() { return actualTC->getDecoderPtr(); }$/;"	f	class:CheckerThreadContext
getDecoderPtr	inorder/cpu.cc	/^InOrderCPU::getDecoderPtr(unsigned tid)$/;"	f	class:InOrderCPU
getDecoderPtr	inorder/thread_context.hh	/^    getDecoderPtr()$/;"	f	class:InOrderThreadContext
getDecoderPtr	o3/thread_context.hh	/^    getDecoderPtr()$/;"	f	class:O3ThreadContext
getDecoderPtr	simple_thread.hh	/^    TheISA::Decoder *getDecoderPtr() { return &decoder; }$/;"	f	class:SimpleThread
getDecoderPtr	thread_context.hh	/^    TheISA::Decoder *getDecoderPtr() { return actualTC->getDecoderPtr(); }$/;"	f	class:ProxyThreadContext
getDeferredMemInstToExecute	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::getDeferredMemInstToExecute()$/;"	f	class:InstructionQueue
getDependents	ozone/dyn_inst.hh	/^    std::vector<DynInstPtr> &getDependents() { return dependents; }$/;"	f	class:OzoneDynInst
getDestIdxNum	inorder/inorder_dyn_inst.hh	/^    int getDestIdxNum(PhysRegIndex dest_idx)$/;"	f	class:InOrderDynInst
getDivOpSize	inorder/resources/mult_div_unit.cc	/^MultDivUnit::getDivOpSize(DynInstPtr inst)$/;"	f	class:MultDivUnit
getEA	base_dyn_inst.hh	/^    Addr getEA() const { return instEffAddr; }$/;"	f	class:BaseDynInst
getEA	checker/cpu.hh	/^    Addr getEA() const  { panic("SimpleCPU::getEA() not implemented\\n"); }$/;"	f	class:CheckerCPU
getEA	inorder/inorder_dyn_inst.hh	/^    Addr getEA() const { return instEffAddr; }$/;"	f	class:InOrderDynInst
getEA	minor/exec_context.hh	/^    Addr getEA() const$/;"	f	class:Minor::ExecContext
getEA	simple/base.hh	/^    Addr getEA() const  { panic("BaseSimpleCPU::getEA() not implemented\\n"); }$/;"	f	class:BaseSimpleCPU
getFPUState	kvm/base.cc	/^BaseKvmCPU::getFPUState(struct kvm_fpu &state) const$/;"	f	class:BaseKvmCPU
getFU	o3/fu_pool.cc	/^FUPool::FUIdxQueue::getFU()$/;"	f	class:FUPool::FUIdxQueue
getFault	base_dyn_inst.hh	/^    Fault getFault() const { return fault; }$/;"	f	class:BaseDynInst
getFault	inorder/inorder_dyn_inst.hh	/^    Fault getFault() { return fault; }$/;"	f	class:InOrderDynInst
getFault	ozone/front_end.hh	/^    Fault getFault() { return fetchFault; }$/;"	f	class:FrontEnd
getFault	translation.hh	/^    getFault() const$/;"	f	class:WholeTranslationState
getFetchingThread	inorder/first_stage.cc	/^FirstStage::getFetchingThread(FetchPriority &fetch_priority)$/;"	f	class:FirstStage
getFetchingThread	o3/fetch_impl.hh	/^DefaultFetch<Impl>::getFetchingThread(FetchPriority &fetch_priority)$/;"	f	class:DefaultFetch
getFlags	translation.hh	/^    getFlags()$/;"	f	class:WholeTranslationState
getFloatReg	o3/free_list.hh	/^    PhysRegIndex getFloatReg() { return floatList.getReg(); }$/;"	f	class:UnifiedFreeList
getFreeTid	o3/cpu.cc	/^FullO3CPU<Impl>::getFreeTid()$/;"	f	class:FullO3CPU
getGuestData	kvm/base.hh	/^    uint8_t *getGuestData(uint64_t offset) const {$/;"	f	class:BaseKvmCPU
getHeadPacket	minor/lsq.cc	/^LSQ::SplitDataRequest::getHeadPacket()$/;"	f	class:Minor::LSQ::SplitDataRequest
getHeadPacket	minor/lsq.hh	/^        PacketPtr getHeadPacket() { return packet; }$/;"	f	class:Minor::LSQ::SingleDataRequest
getHeadPacket	minor/lsq.hh	/^        PacketPtr getHeadPacket()$/;"	f	class:Minor::LSQ::SpecialDataRequest
getHostCycles	kvm/base.cc	/^BaseKvmCPU::getHostCycles() const$/;"	f	class:BaseKvmCPU
getHostCycles	kvm/x86_cpu.cc	/^X86KvmCPU::getHostCycles() const$/;"	f	class:X86KvmCPU
getITBPtr	checker/cpu.hh	/^    TheISA::TLB* getITBPtr() { return itb; }$/;"	f	class:CheckerCPU
getITBPtr	checker/thread_context.hh	/^    TheISA::TLB *getITBPtr() { return actualTC->getITBPtr(); }$/;"	f	class:CheckerThreadContext
getITBPtr	inorder/cpu.cc	/^InOrderCPU::getITBPtr()$/;"	f	class:InOrderCPU
getITBPtr	inorder/thread_context.hh	/^    TheISA::TLB *getITBPtr() { return cpu->getITBPtr(); }$/;"	f	class:InOrderThreadContext
getITBPtr	o3/thread_context.hh	/^    TheISA::TLB *getITBPtr() { return cpu->itb; }$/;"	f	class:O3ThreadContext
getITBPtr	ozone/cpu.hh	/^        TheISA::TLB *getITBPtr() { return cpu->itb; }$/;"	f	class:OzoneCPU::OzoneTC
getITBPtr	simple_thread.hh	/^    TheISA::TLB *getITBPtr() { return itb; }$/;"	f	class:SimpleThread
getITBPtr	thread_context.hh	/^    TheISA::TLB *getITBPtr() { return actualTC->getITBPtr(); }$/;"	f	class:ProxyThreadContext
getIcachePort	minor/fetch1.hh	/^    MinorCPU::MinorCPUPort &getIcachePort() { return icachePort; }$/;"	f	class:Minor::Fetch1
getIcachePort	ozone/front_end.hh	/^    Port *getIcachePort() { return &icachePort; }$/;"	f	class:FrontEnd
getId	inorder/resource.hh	/^    int getId() { return id; }$/;"	f	class:Resource
getIndex	pred/btb.cc	/^DefaultBTB::getIndex(Addr instPC)$/;"	f	class:DefaultBTB
getInput	minor/decode.cc	/^Decode::getInput()$/;"	f	class:Minor::Decode
getInput	minor/execute.cc	/^Execute::getInput()$/;"	f	class:Minor::Execute
getInput	minor/fetch2.cc	/^Fetch2::getInput()$/;"	f	class:Minor::Fetch2
getInst	inorder/resource.hh	/^    DynInstPtr getInst() { return inst; }$/;"	f	class:ResourceRequest
getInst	ozone/front_end_impl.hh	/^FrontEnd<Impl>::getInst()$/;"	f	class:FrontEnd
getInstFromCacheline	ozone/front_end_impl.hh	/^FrontEnd<Impl>::getInstFromCacheline()$/;"	f	class:FrontEnd
getInstListIt	base_dyn_inst.hh	/^    ListIt &getInstListIt() { return instListIt; }$/;"	f	class:BaseDynInst
getInstListIt	inorder/inorder_dyn_inst.hh	/^    ListIt getInstListIt() { return instListIt; }$/;"	f	class:InOrderDynInst
getInstPort	checker/cpu.hh	/^    MasterPort &getInstPort()$/;"	f	class:CheckerCPU
getInstPort	inorder/cpu.hh	/^    virtual MasterPort &getInstPort() { return instPort; }$/;"	f	class:InOrderCPU
getInstPort	kvm/base.hh	/^    MasterPort &getInstPort() { return instPort; }$/;"	f	class:BaseKvmCPU
getInstPort	minor/cpu.cc	/^MasterPort &MinorCPU::getInstPort()$/;"	f	class:MinorCPU
getInstPort	minor/pipeline.cc	/^Pipeline::getInstPort()$/;"	f	class:Minor::Pipeline
getInstPort	o3/cpu.hh	/^    virtual MasterPort &getInstPort() { return icachePort; }$/;"	f	class:FullO3CPU
getInstPort	simple/atomic.hh	/^    virtual MasterPort &getInstPort() { return icachePort; }$/;"	f	class:AtomicSimpleCPU
getInstPort	simple/timing.hh	/^    virtual MasterPort &getInstPort() { return icachePort; }$/;"	f	class:TimingSimpleCPU
getInstRecord	exetrace.hh	/^    getInstRecord(Tick when, ThreadContext *tc,$/;"	f	class:Trace::ExeTracer
getInstRecord	inorder/inorder_trace.cc	/^InOrderTrace::getInstRecord(Tick when, ThreadContext *tc,$/;"	f	class:Trace::InOrderTrace
getInstRecord	inorder/inorder_trace.cc	/^InOrderTrace::getInstRecord(unsigned num_stages, bool stage_tracing,$/;"	f	class:Trace::InOrderTrace
getInstRecord	inteltrace.hh	/^    getInstRecord(Tick when, ThreadContext *tc,$/;"	f	class:Trace::IntelTrace
getInstRecord	legiontrace.hh	/^    getInstRecord(Tick when, ThreadContext *tc,$/;"	f	class:Trace::LegionTrace
getInstRecord	nativetrace.hh	/^    getInstRecord(Tick when, ThreadContext *tc,$/;"	f	class:Trace::NativeTrace
getInstToExecute	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::getInstToExecute()$/;"	f	class:InstructionQueue
getInstUnit	inorder/resource_pool.hh	/^    FetchUnit *getInstUnit() const { return instUnit; }$/;"	f	class:ResourcePool
getInsts	o3/commit_impl.hh	/^DefaultCommit<Impl>::getInsts()$/;"	f	class:DefaultCommit
getIntReg	o3/free_list.hh	/^    PhysRegIndex getIntReg() { return intList.getReg(); }$/;"	f	class:UnifiedFreeList
getIntResultPtr	inorder/inorder_dyn_inst.hh	/^    IntReg* getIntResultPtr(int idx) { return &instResult[idx].res.intVal; }$/;"	f	class:InOrderDynInst
getIntSrcPtr	inorder/inorder_dyn_inst.hh	/^    TheISA::IntReg* getIntSrcPtr(int idx) { return &instSrc[idx].intVal; }$/;"	f	class:InOrderDynInst
getInterruptController	base.hh	/^    getInterruptController()$/;"	f	class:BaseCPU
getInterrupts	inorder/cpu.cc	/^InOrderCPU::getInterrupts()$/;"	f	class:InOrderCPU
getInterrupts	o3/cpu.cc	/^FullO3CPU<Impl>::getInterrupts()$/;"	f	class:FullO3CPU
getIssueLatency	o3/fu_pool.hh	/^    Cycles getIssueLatency(OpClass capability) {$/;"	f	class:FUPool
getIt	inorder/resource_sked.hh	/^    ResourceSked::SkedIt getIt()$/;"	f	class:RSkedIt
getKernelStats	checker/thread_context.hh	/^    TheISA::Kernel::Statistics *getKernelStats()$/;"	f	class:CheckerThreadContext
getKernelStats	inorder/thread_context.hh	/^    TheISA::Kernel::Statistics *getKernelStats()$/;"	f	class:InOrderThreadContext
getKernelStats	o3/thread_context.hh	/^    virtual TheISA::Kernel::Statistics *getKernelStats()$/;"	f	class:O3ThreadContext
getKernelStats	ozone/cpu.hh	/^        TheISA::Kernel::Statistics *getKernelStats()$/;"	f	class:OzoneCPU::OzoneTC
getKernelStats	thread_context.hh	/^    TheISA::Kernel::Statistics *getKernelStats()$/;"	f	class:ProxyThreadContext
getKernelStats	thread_state.hh	/^    TheISA::Kernel::Statistics *getKernelStats() { return kernelStats; }$/;"	f	struct:ThreadState
getKvmRunState	kvm/base.hh	/^    struct kvm_run *getKvmRunState() { return _kvmRun; };$/;"	f	class:BaseKvmCPU
getLSQ	minor/execute.hh	/^    LSQ &getLSQ() { return lsq; }$/;"	f	class:Minor::Execute
getLastMemBarrier	minor/lsq.hh	/^    InstSeqNum getLastMemBarrier() const { return lastMemBarrier; }$/;"	f	class:Minor::LSQ
getLatency	inorder/resource.hh	/^    virtual Cycles getLatency(int slot_num) { return latency; }$/;"	f	class:Resource
getLoadHead	o3/lsq.hh	/^    int getLoadHead(ThreadID tid)$/;"	f	class:LSQ
getLoadHead	o3/lsq_unit.hh	/^    int getLoadHead() { return loadHead; }$/;"	f	class:LSQUnit
getLoadHead	ozone/lsq_unit.hh	/^    int getLoadHead() { return loadHead; }$/;"	f	class:OzoneLSQ
getLoadHeadSeqNum	o3/lsq.hh	/^    InstSeqNum getLoadHeadSeqNum(ThreadID tid)$/;"	f	class:LSQ
getLoadHeadSeqNum	o3/lsq_unit.hh	/^    InstSeqNum getLoadHeadSeqNum()$/;"	f	class:LSQUnit
getLoadHeadSeqNum	ozone/lsq_unit.hh	/^    InstSeqNum getLoadHeadSeqNum()$/;"	f	class:OzoneLSQ
getLoadHeadSeqNum	ozone/lw_lsq.hh	/^    InstSeqNum getLoadHeadSeqNum()$/;"	f	class:OzoneLWLSQ
getLocalIndex	pred/2bit_local.cc	/^LocalBP::getLocalIndex(Addr &branch_addr)$/;"	f	class:LocalBP
getMSR	kvm/x86_cpu.cc	/^X86KvmCPU::getMSR(uint32_t index) const$/;"	f	class:X86KvmCPU
getMSRs	kvm/x86_cpu.cc	/^X86KvmCPU::getMSRs(struct kvm_msrs &msrs) const$/;"	f	class:X86KvmCPU
getMachInst	inorder/inorder_dyn_inst.hh	/^    ExtMachInst getMachInst() { return staticInst->machInst; }$/;"	f	class:InOrderDynInst
getMasterPort	base.cc	/^BaseCPU::getMasterPort(const string &if_name, PortID idx)$/;"	f	class:BaseCPU
getMasterPort	testers/directedtest/RubyDirectedTester.cc	/^RubyDirectedTester::getMasterPort(const std::string &if_name, PortID idx)$/;"	f	class:RubyDirectedTester
getMasterPort	testers/memtest/memtest.cc	/^MemTest::getMasterPort(const std::string &if_name, PortID idx)$/;"	f	class:MemTest
getMasterPort	testers/networktest/networktest.cc	/^NetworkTest::getMasterPort(const std::string &if_name, PortID idx)$/;"	f	class:NetworkTest
getMasterPort	testers/rubytest/RubyTester.cc	/^RubyTester::getMasterPort(const std::string &if_name, PortID idx)$/;"	f	class:RubyTester
getMasterPort	testers/traffic_gen/traffic_gen.cc	/^TrafficGen::getMasterPort(const string& if_name, PortID idx)$/;"	f	class:TrafficGen
getMaxEntries	o3/rob.hh	/^    unsigned getMaxEntries(ThreadID tid)$/;"	f	class:ROB
getMemAddr	inorder/inorder_dyn_inst.hh	/^    Addr getMemAddr()$/;"	f	class:InOrderDynInst
getMemDepViolator	o3/lsq.hh	/^    DynInstPtr getMemDepViolator(ThreadID tid)$/;"	f	class:LSQ
getMemDepViolator	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::getMemDepViolator()$/;"	f	class:LSQUnit
getMemDepViolator	ozone/lsq_unit_impl.hh	/^OzoneLSQ<Impl>::getMemDepViolator()$/;"	f	class:OzoneLSQ
getMemDepViolator	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::getMemDepViolator()$/;"	f	class:OzoneLWLSQ
getMemDeps	ozone/dyn_inst.hh	/^    std::vector<DynInstPtr> &getMemDeps() { return memDependents; }$/;"	f	class:OzoneDynInst
getMemProxy	checker/thread_context.hh	/^    SETranslatingPortProxy &getMemProxy() { return actualTC->getMemProxy(); }$/;"	f	class:CheckerThreadContext
getMemProxy	inorder/thread_context.hh	/^    SETranslatingPortProxy &getMemProxy() { return thread->getMemProxy(); }$/;"	f	class:InOrderThreadContext
getMemProxy	o3/thread_context.hh	/^    virtual SETranslatingPortProxy &getMemProxy()$/;"	f	class:O3ThreadContext
getMemProxy	ozone/cpu.hh	/^        SETranslatingPortProxy &getMemProxy() { return thread->getMemProxy(); }$/;"	f	class:OzoneCPU::OzoneTC
getMemProxy	thread_context.hh	/^    SETranslatingPortProxy &getMemProxy() { return actualTC->getMemProxy(); }$/;"	f	class:ProxyThreadContext
getMemProxy	thread_state.cc	/^ThreadState::getMemProxy()$/;"	f	class:ThreadState
getMemSrcs	ozone/dyn_inst.hh	/^    std::list<DynInstPtr> &getMemSrcs() { return srcMemInsts; }$/;"	f	class:OzoneDynInst
getMsrIntersection	kvm/x86_cpu.cc	/^X86KvmCPU::getMsrIntersection() const$/;"	f	class:X86KvmCPU
getName	static_inst.hh	/^    std::string getName() { return mnemonic; }$/;"	f	class:StaticInst
getNextEventNum	inorder/cpu.hh	/^    InstSeqNum getNextEventNum()$/;"	f	class:InOrderCPU
getNextPacket	testers/traffic_gen/generators.cc	/^DramGen::getNextPacket()$/;"	f	class:DramGen
getNextPacket	testers/traffic_gen/generators.cc	/^DramRotGen::getNextPacket()$/;"	f	class:DramRotGen
getNextPacket	testers/traffic_gen/generators.cc	/^LinearGen::getNextPacket()$/;"	f	class:LinearGen
getNextPacket	testers/traffic_gen/generators.cc	/^RandomGen::getNextPacket()$/;"	f	class:RandomGen
getNextPacket	testers/traffic_gen/generators.cc	/^TraceGen::getNextPacket()$/;"	f	class:TraceGen
getNextPacket	testers/traffic_gen/generators.hh	/^    PacketPtr getNextPacket() { return NULL; }$/;"	f	class:IdleGen
getNextPriority	inorder/pipeline_traits.5stage.cc	/^int getNextPriority(DynInstPtr &inst, int stage_num)$/;"	f	namespace:ThePipeline
getNextPriority	inorder/pipeline_traits.9stage.cc	/^int getNextPriority(DynInstPtr &inst, int stage_num)$/;"	f	namespace:ThePipeline
getNextPriority	inorder/pipeline_traits.9stage.smt2.cc	/^int getNextPriority(DynInstPtr &inst, int stage_num)$/;"	f	namespace:ThePipeline
getNextStage	inorder/inorder_dyn_inst.hh	/^    int getNextStage() { return nextStage; }$/;"	f	class:InOrderDynInst
getNumStages	activity.hh	/^    int getNumStages() const { return numStages; }$/;"	f	class:ActivityRecorder
getOneReg	kvm/base.cc	/^BaseKvmCPU::getOneReg(uint64_t id, void *addr) const$/;"	f	class:BaseKvmCPU
getOneRegU32	kvm/base.hh	/^    uint32_t getOneRegU32(uint64_t id) const {$/;"	f	class:BaseKvmCPU
getOneRegU64	kvm/base.hh	/^    uint64_t getOneRegU64(uint64_t id) const {$/;"	f	class:BaseKvmCPU
getOpLatency	o3/fu_pool.hh	/^    Cycles getOpLatency(OpClass capability) {$/;"	f	class:FUPool
getPacket	testers/traffic_gen/generators.cc	/^BaseGen::getPacket(Addr addr, unsigned size, const MemCmd& cmd,$/;"	f	class:BaseGen
getPaddr	translation.hh	/^    getPaddr() const$/;"	f	class:WholeTranslationState
getPage	decode_cache.hh	/^    getPage(Addr addr)$/;"	f	class:DecodeCache::AddrMap
getPendingFragment	simple/timing.hh	/^        getPendingFragment()$/;"	f	class:TimingSimpleCPU::SplitMainSenderState
getPhysProxy	checker/thread_context.hh	/^    PortProxy &getPhysProxy() { return actualTC->getPhysProxy(); }$/;"	f	class:CheckerThreadContext
getPhysProxy	inorder/thread_context.hh	/^    PortProxy &getPhysProxy() { return thread->getPhysProxy(); }$/;"	f	class:InOrderThreadContext
getPhysProxy	o3/thread_context.hh	/^    virtual PortProxy &getPhysProxy() { return thread->getPhysProxy(); }$/;"	f	class:O3ThreadContext
getPhysProxy	ozone/cpu.hh	/^        PortProxy &getPhysProxy() { return thread->getPhysProxy(); }$/;"	f	class:OzoneCPU::OzoneTC
getPhysProxy	thread_context.hh	/^    PortProxy &getPhysProxy() { return actualTC->getPhysProxy(); }$/;"	f	class:ProxyThreadContext
getPhysProxy	thread_state.cc	/^ThreadState::getPhysProxy()$/;"	f	class:ThreadState
getPid	base.hh	/^    uint32_t getPid() const { return _pid; }$/;"	f	class:BaseCPU
getPipeStage	inorder/cpu.cc	/^InOrderCPU::getPipeStage(int stage_num)$/;"	f	class:InOrderCPU
getPrediction	pred/2bit_local.cc	/^LocalBP::getPrediction(uint8_t &count)$/;"	f	class:LocalBP
getPrevDestInst	ozone/dyn_inst.hh	/^    DynInstPtr &getPrevDestInst(int regIdx)$/;"	f	class:OzoneDynInst
getProcessPtr	checker/thread_context.hh	/^    Process *getProcessPtr() { return actualTC->getProcessPtr(); }$/;"	f	class:CheckerThreadContext
getProcessPtr	inorder/thread_context.hh	/^    Process *getProcessPtr() { return thread->getProcessPtr(); }$/;"	f	class:InOrderThreadContext
getProcessPtr	o3/thread_context.hh	/^    virtual Process *getProcessPtr() { return thread->getProcessPtr(); }$/;"	f	class:O3ThreadContext
getProcessPtr	ozone/cpu.hh	/^        Process *getProcessPtr() { return thread->getProcessPtr(); }$/;"	f	class:OzoneCPU::OzoneTC
getProcessPtr	thread_context.hh	/^    Process *getProcessPtr() { return actualTC->getProcessPtr(); }$/;"	f	class:ProxyThreadContext
getProcessPtr	thread_state.hh	/^    Process *getProcessPtr() { return process; }$/;"	f	struct:ThreadState
getQuiesceEvent	checker/thread_context.hh	/^    EndQuiesceEvent *getQuiesceEvent() { return actualTC->getQuiesceEvent(); }$/;"	f	class:CheckerThreadContext
getQuiesceEvent	inorder/thread_context.hh	/^    EndQuiesceEvent *getQuiesceEvent()$/;"	f	class:InOrderThreadContext
getQuiesceEvent	o3/thread_context.hh	/^    virtual EndQuiesceEvent *getQuiesceEvent()$/;"	f	class:O3ThreadContext
getQuiesceEvent	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::getQuiesceEvent()$/;"	f	class:OzoneCPU::OzoneTC
getQuiesceEvent	thread_context.hh	/^    EndQuiesceEvent *getQuiesceEvent() { return actualTC->getQuiesceEvent(); }$/;"	f	class:ProxyThreadContext
getQuiesceEvent	thread_state.hh	/^    EndQuiesceEvent *getQuiesceEvent() { return quiesceEvent; }$/;"	f	struct:ThreadState
getRandomCheck	testers/rubytest/CheckTable.cc	/^CheckTable::getRandomCheck()$/;"	f	class:CheckTable
getReadableCpuPort	testers/rubytest/RubyTester.cc	/^RubyTester::getReadableCpuPort(int idx)$/;"	f	class:RubyTester
getReadyInst	ozone/back_end_impl.hh	/^BackEnd<Impl>::InstQueue::getReadyInst()$/;"	f	class:BackEnd::InstQueue
getReg	o3/free_list.hh	/^    PhysRegIndex getReg()$/;"	f	class:SimpleFreeList
getReg	o3/scoreboard.hh	/^    bool getReg(PhysRegIndex reg_idx) const$/;"	f	class:Scoreboard
getRegList	kvm/arm_cpu.cc	/^ArmKvmCPU::getRegList() const$/;"	f	class:ArmKvmCPU
getRegList	kvm/arm_cpu.cc	/^ArmKvmCPU::getRegList(struct kvm_reg_list &regs) const$/;"	f	class:ArmKvmCPU
getRegisters	kvm/base.cc	/^BaseKvmCPU::getRegisters(struct kvm_regs &regs) const$/;"	f	class:BaseKvmCPU
getRequest	inorder/resource.cc	/^Resource::getRequest(DynInstPtr inst, int stage_num, int res_idx,$/;"	f	class:Resource
getRequest	inorder/resources/cache_unit.cc	/^CacheUnit::getRequest(DynInstPtr inst, int stage_num, int res_idx,$/;"	f	class:CacheUnit
getRequest	inorder/resources/fetch_unit.cc	/^FetchUnit::getRequest(DynInstPtr inst, int stage_num, int res_idx,$/;"	f	class:FetchUnit
getRequest	inorder/resources/tlb_unit.cc	/^TLBUnit::getRequest(DynInstPtr _inst, int stage_num,$/;"	f	class:TLBUnit
getRequest	inorder/resources/use_def.cc	/^UseDefUnit::getRequest(DynInstPtr inst, int stage_num, int res_idx,$/;"	f	class:UseDefUnit
getResIdx	inorder/resource.hh	/^    int getResIdx() { return resIdx; }$/;"	f	class:ResourceRequest
getResIdx	inorder/resource_pool.cc	/^ResourcePool::getResIdx(const ThePipeline::ResourceId &res_id)$/;"	f	class:ResourcePool
getResource	inorder/resource_pool.hh	/^    Resource* getResource(int res_idx) { return resources[res_idx]; }$/;"	f	class:ResourcePool
getSize	timebuf.hh	/^    unsigned getSize()$/;"	f	class:TimeBuffer
getSlot	inorder/resource.cc	/^Resource::getSlot(DynInstPtr inst)$/;"	f	class:Resource
getSlot	inorder/resource.hh	/^    int getSlot() { return slotNum; }$/;"	f	class:ResourceRequest
getSlot	inorder/resources/cache_unit.cc	/^CacheUnit::getSlot(DynInstPtr inst)$/;"	f	class:CacheUnit
getSlot	inorder/resources/mult_div_unit.cc	/^MultDivUnit::getSlot(DynInstPtr inst)$/;"	f	class:MultDivUnit
getSlot	inorder/resources/tlb_unit.cc	/^TLBUnit::getSlot(DynInstPtr inst)$/;"	f	class:TLBUnit
getSpecialRegisters	kvm/base.cc	/^BaseKvmCPU::getSpecialRegisters(struct kvm_sregs &regs) const$/;"	f	class:BaseKvmCPU
getSrcIdxNum	inorder/inorder_dyn_inst.hh	/^    int getSrcIdxNum(PhysRegIndex src_idx)$/;"	f	class:InOrderDynInst
getStageActive	activity.hh	/^    bool getStageActive(const int idx) const { return stageActive[idx]; }$/;"	f	class:ActivityRecorder
getStageNum	inorder/resource.hh	/^    int getStageNum() { return stageNum; }$/;"	f	class:ResourceRequest
getStages	inorder/resource_sked.hh	/^    StageList *getStages()$/;"	f	class:ResourceSked
getStoreHead	o3/lsq.hh	/^    int getStoreHead(ThreadID tid)$/;"	f	class:LSQ
getStoreHead	o3/lsq_unit.hh	/^    int getStoreHead() { return storeHead; }$/;"	f	class:LSQUnit
getStoreHead	ozone/lsq_unit.hh	/^    int getStoreHead() { return storeHead; }$/;"	f	class:OzoneLSQ
getStoreHeadSeqNum	o3/lsq.hh	/^    InstSeqNum getStoreHeadSeqNum(ThreadID tid)$/;"	f	class:LSQ
getStoreHeadSeqNum	o3/lsq_unit.hh	/^    InstSeqNum getStoreHeadSeqNum()$/;"	f	class:LSQUnit
getStoreHeadSeqNum	ozone/lsq_unit.hh	/^    InstSeqNum getStoreHeadSeqNum()$/;"	f	class:OzoneLSQ
getStoreHeadSeqNum	ozone/lw_lsq.hh	/^    InstSeqNum getStoreHeadSeqNum()$/;"	f	class:OzoneLWLSQ
getSupportedCPUID	kvm/vm.cc	/^Kvm::getSupportedCPUID() const$/;"	f	class:Kvm
getSupportedCPUID	kvm/vm.cc	/^Kvm::getSupportedCPUID(struct kvm_cpuid2 &cpuid) const$/;"	f	class:Kvm
getSupportedMSRs	kvm/vm.cc	/^Kvm::getSupportedMSRs() const$/;"	f	class:Kvm
getSupportedMSRs	kvm/vm.cc	/^Kvm::getSupportedMSRs(struct kvm_msr_list &msrs) const$/;"	f	class:Kvm
getSystemPtr	checker/thread_context.hh	/^    System *getSystemPtr() { return actualTC->getSystemPtr(); }$/;"	f	class:CheckerThreadContext
getSystemPtr	inorder/thread_context.hh	/^    System *getSystemPtr() { return cpu->system; }$/;"	f	class:InOrderThreadContext
getSystemPtr	o3/thread_context.hh	/^    virtual System *getSystemPtr() { return cpu->system; }$/;"	f	class:O3ThreadContext
getSystemPtr	ozone/cpu.hh	/^        System *getSystemPtr() { return cpu->system; }$/;"	f	class:OzoneCPU::OzoneTC
getSystemPtr	simple_thread.hh	/^    System *getSystemPtr() { return system; }$/;"	f	class:SimpleThread
getSystemPtr	thread_context.hh	/^    System *getSystemPtr() { return actualTC->getSystemPtr(); }$/;"	f	class:ProxyThreadContext
getTC	cpuevent.hh	/^    ThreadContext* getTC() { return tc; }$/;"	f	class:CpuEvent
getTC	inorder/thread_state.hh	/^    ThreadContext *getTC() { return tc; }$/;"	f	class:InOrderThreadState
getTC	o3/thread_state.hh	/^    ThreadContext *getTC() { return tc; }$/;"	f	struct:O3ThreadState
getTC	ozone/thread_state.hh	/^    ThreadContext *getTC() { return tc; }$/;"	f	struct:OzoneThreadState
getTC	simple_thread.hh	/^    ThreadContext *getTC() { return tc; }$/;"	f	class:SimpleThread
getTag	pred/btb.cc	/^DefaultBTB::getTag(Addr instPC)$/;"	f	class:DefaultBTB
getThreadEntries	o3/rob.hh	/^    unsigned getThreadEntries(ThreadID tid)$/;"	f	class:ROB
getThreadNum	inorder/thread_context.hh	/^    int getThreadNum() { return thread->threadId(); }$/;"	f	class:InOrderThreadContext
getTid	inorder/resource.hh	/^    ThreadID getTid() { return tid; }$/;"	f	class:ResourceRequest
getTracer	base.hh	/^    Trace::InstTracer * getTracer() { return tracer; }$/;"	f	class:BaseCPU
getUnit	o3/fu_pool.cc	/^FUPool::getUnit(OpClass capability)$/;"	f	class:FUPool
getVCPUMMapSize	kvm/vm.hh	/^    int getVCPUMMapSize() const { return vcpuMMapSize; }$/;"	f	class:Kvm
getVCpuEvents	kvm/x86_cpu.cc	/^X86KvmCPU::getVCpuEvents(struct kvm_vcpu_events &events) const$/;"	f	class:X86KvmCPU
getVirtProxy	checker/thread_context.hh	/^    FSTranslatingPortProxy &getVirtProxy()$/;"	f	class:CheckerThreadContext
getVirtProxy	inorder/thread_context.cc	/^InOrderThreadContext::getVirtProxy()$/;"	f	class:InOrderThreadContext
getVirtProxy	o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::getVirtProxy()$/;"	f	class:O3ThreadContext
getVirtProxy	ozone/cpu.hh	/^        FSTranslatingPortProxy &getVirtProxy()$/;"	f	class:OzoneCPU::OzoneTC
getVirtProxy	thread_context.hh	/^    FSTranslatingPortProxy &getVirtProxy() { return actualTC->getVirtProxy(); }$/;"	f	class:ProxyThreadContext
getVirtProxy	thread_state.cc	/^ThreadState::getVirtProxy()$/;"	f	class:ThreadState
getWire	timebuf.hh	/^    wire getWire(int idx)$/;"	f	class:TimeBuffer
getWritableCpuPort	testers/rubytest/RubyTester.cc	/^RubyTester::getWritableCpuPort(int idx)$/;"	f	class:RubyTester
getXCRs	kvm/x86_cpu.cc	/^X86KvmCPU::getXCRs(struct kvm_xcrs &regs) const$/;"	f	class:X86KvmCPU
getXSave	kvm/x86_cpu.cc	/^X86KvmCPU::getXSave(struct kvm_xsave &xsave) const$/;"	f	class:X86KvmCPU
gettid	kvm/perfevent.cc	/^PerfKvmCounter::gettid()$/;"	f	class:PerfKvmCounter
gettid	kvm/timer.cc	/^gettid()$/;"	f	file:
gl	m5legion_interface.h	/^    uint8_t gl;$/;"	m	struct:__anon8
globalCtrBits	ozone/OzoneCPU.py	/^    globalCtrBits = Param.Unsigned("Bits per counter")$/;"	v	class:DerivOzoneCPU
globalCtrBits	ozone/SimpleOzoneCPU.py	/^    globalCtrBits = Param.Unsigned("Bits per counter")$/;"	v	class:SimpleOzoneCPU
globalCtrBits	ozone/simple_params.hh	/^    unsigned globalCtrBits;$/;"	m	class:SimpleParams
globalCtrBits	pred/BranchPredictor.py	/^    globalCtrBits = Param.Unsigned(2, "Bits per counter")$/;"	v	class:BranchPredictor
globalCtrBits	pred/bi_mode.hh	/^    unsigned globalCtrBits;$/;"	m	class:BiModeBP
globalCtrBits	pred/tournament.hh	/^    unsigned globalCtrBits;$/;"	m	class:TournamentBP
globalCtrs	pred/tournament.hh	/^    std::vector<SatCounter> globalCtrs;$/;"	m	class:TournamentBP
globalHistory	pred/tournament.hh	/^        unsigned globalHistory;$/;"	m	struct:TournamentBP::BPHistory
globalHistory	pred/tournament.hh	/^    unsigned globalHistory;$/;"	m	class:TournamentBP
globalHistoryBits	ozone/OzoneCPU.py	/^    globalHistoryBits = Param.Unsigned("Bits of history")$/;"	v	class:DerivOzoneCPU
globalHistoryBits	ozone/SimpleOzoneCPU.py	/^    globalHistoryBits = Param.Unsigned("Bits of history")$/;"	v	class:SimpleOzoneCPU
globalHistoryBits	ozone/simple_params.hh	/^    unsigned globalHistoryBits;$/;"	m	class:SimpleParams
globalHistoryBits	pred/bi_mode.hh	/^    unsigned globalHistoryBits;$/;"	m	class:BiModeBP
globalHistoryBits	pred/tournament.hh	/^    unsigned globalHistoryBits;$/;"	m	class:TournamentBP
globalHistoryMask	pred/bi_mode.hh	/^    unsigned globalHistoryMask;$/;"	m	class:BiModeBP
globalHistoryMask	pred/tournament.hh	/^    unsigned globalHistoryMask;$/;"	m	class:TournamentBP
globalHistoryReg	pred/bi_mode.hh	/^        unsigned globalHistoryReg;$/;"	m	struct:BiModeBP::BPHistory
globalHistoryReg	pred/bi_mode.hh	/^    unsigned globalHistoryReg;$/;"	m	class:BiModeBP
globalPredTaken	pred/tournament.hh	/^        bool globalPredTaken;$/;"	m	struct:TournamentBP::BPHistory
globalPredictorSize	ozone/OzoneCPU.py	/^    globalPredictorSize = Param.Unsigned("Size of global predictor")$/;"	v	class:DerivOzoneCPU
globalPredictorSize	ozone/SimpleOzoneCPU.py	/^    globalPredictorSize = Param.Unsigned("Size of global predictor")$/;"	v	class:SimpleOzoneCPU
globalPredictorSize	ozone/simple_params.hh	/^    unsigned globalPredictorSize;$/;"	m	class:SimpleParams
globalPredictorSize	pred/BranchPredictor.py	/^    globalPredictorSize = Param.Unsigned(8192, "Size of global predictor")$/;"	v	class:BranchPredictor
globalPredictorSize	pred/bi_mode.hh	/^    unsigned globalPredictorSize;$/;"	m	class:BiModeBP
globalPredictorSize	pred/tournament.hh	/^    unsigned globalPredictorSize;$/;"	m	class:TournamentBP
globalSeqNum	inorder/cpu.hh	/^    InstSeqNum globalSeqNum[ThePipeline::MaxThreads];$/;"	m	class:InOrderCPU
globalSeqNum	o3/cpu.hh	/^    InstSeqNum globalSeqNum;\/\/[Impl::MaxThreads];$/;"	m	class:FullO3CPU
globalSeqNum	ozone/cpu.hh	/^    InstSeqNum globalSeqNum;$/;"	m	class:OzoneCPU
globalThreshold	pred/tournament.hh	/^    unsigned globalThreshold;$/;"	m	class:TournamentBP
globalUsed	pred/tournament.hh	/^        bool globalUsed;$/;"	m	struct:TournamentBP::BPHistory
gradObjects	inorder/resource_pool.hh	/^    std::vector<int> gradObjects;$/;"	m	class:ResourcePool
halt	checker/thread_context.hh	/^    void halt() { actualTC->halt(); }$/;"	f	class:CheckerThreadContext
halt	inorder/cpu.hh	/^    void halt() { panic("Halt not implemented!\\n"); }$/;"	f	class:InOrderCPU
halt	inorder/thread_context.cc	/^InOrderThreadContext::halt()$/;"	f	class:InOrderThreadContext
halt	o3/cpu.hh	/^    void halt() { panic("Halt not implemented!\\n"); }$/;"	f	class:FullO3CPU
halt	o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::halt()$/;"	f	class:O3ThreadContext
halt	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::halt()$/;"	f	class:OzoneCPU::OzoneTC
halt	simple_thread.cc	/^SimpleThread::halt()$/;"	f	class:SimpleThread
halt	thread_context.hh	/^    void halt() { actualTC->halt(); }$/;"	f	class:ProxyThreadContext
haltContext	base.hh	/^    virtual void haltContext(ThreadID thread_num) {}$/;"	f	class:BaseCPU
haltContext	inorder/cpu.cc	/^InOrderCPU::haltContext(ThreadID tid)$/;"	f	class:InOrderCPU
haltContext	kvm/base.cc	/^BaseKvmCPU::haltContext(ThreadID thread_num)$/;"	f	class:BaseKvmCPU
haltContext	o3/cpu.cc	/^FullO3CPU<Impl>::haltContext(ThreadID tid)$/;"	f	class:FullO3CPU
haltContext	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::haltContext(int thread_num)$/;"	f	class:OzoneCPU
haltContext	simple/base.cc	/^BaseSimpleCPU::haltContext(ThreadID thread_num)$/;"	f	class:BaseSimpleCPU
haltThread	inorder/cpu.cc	/^InOrderCPU::haltThread(ThreadID tid)$/;"	f	class:InOrderCPU
haltedThreads	inorder/cpu.hh	/^    std::list<ThreadID> haltedThreads;$/;"	m	class:InOrderCPU
halved	o3/rob.hh	/^    bool halved;$/;"	m	class:ROB
handleError	checker/cpu.hh	/^    void handleError()$/;"	f	class:CheckerCPU
handleError	checker/cpu.hh	/^    void handleError(DynInstPtr &inst)$/;"	f	class:Checker
handleFault	ozone/front_end_impl.hh	/^FrontEnd<Impl>::handleFault(Fault &fault)$/;"	f	class:FrontEnd
handleFault	ozone/inorder_back_end_impl.hh	/^InorderBackEnd<Impl>::handleFault()$/;"	f	class:InorderBackEnd
handleFault	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::handleFault(Fault &fault, Tick latency)$/;"	f	class:LWBackEnd
handleIOMiscReg32	kvm/x86_cpu.cc	/^X86KvmCPU::handleIOMiscReg32(int miscreg)$/;"	f	class:X86KvmCPU
handleInterrupt	o3/commit_impl.hh	/^DefaultCommit<Impl>::handleInterrupt()$/;"	f	class:DefaultCommit
handleKvmExit	kvm/base.cc	/^BaseKvmCPU::handleKvmExit()$/;"	f	class:BaseKvmCPU
handleKvmExitException	kvm/base.cc	/^BaseKvmCPU::handleKvmExitException()$/;"	f	class:BaseKvmCPU
handleKvmExitFailEntry	kvm/base.cc	/^BaseKvmCPU::handleKvmExitFailEntry()$/;"	f	class:BaseKvmCPU
handleKvmExitHypercall	kvm/base.cc	/^BaseKvmCPU::handleKvmExitHypercall()$/;"	f	class:BaseKvmCPU
handleKvmExitIO	kvm/base.cc	/^BaseKvmCPU::handleKvmExitIO()$/;"	f	class:BaseKvmCPU
handleKvmExitIO	kvm/x86_cpu.cc	/^X86KvmCPU::handleKvmExitIO()$/;"	f	class:X86KvmCPU
handleKvmExitIRQWindowOpen	kvm/base.cc	/^BaseKvmCPU::handleKvmExitIRQWindowOpen()$/;"	f	class:BaseKvmCPU
handleKvmExitIRQWindowOpen	kvm/x86_cpu.cc	/^X86KvmCPU::handleKvmExitIRQWindowOpen()$/;"	f	class:X86KvmCPU
handleKvmExitUnknown	kvm/base.cc	/^BaseKvmCPU::handleKvmExitUnknown()$/;"	f	class:BaseKvmCPU
handleMemResponse	minor/execute.cc	/^Execute::handleMemResponse(MinorDynInstPtr inst,$/;"	f	class:Minor::Execute
handlePendingInt	checker/cpu_impl.hh	/^Checker<Impl>::handlePendingInt()$/;"	f	class:Checker
handleReadPacket	simple/timing.cc	/^TimingSimpleCPU::handleReadPacket(PacketPtr pkt)$/;"	f	class:TimingSimpleCPU
handleTLBResponse	minor/fetch1.cc	/^Fetch1::handleTLBResponse(FetchRequestPtr response)$/;"	f	class:Minor::Fetch1
handleWritePacket	simple/timing.cc	/^TimingSimpleCPU::handleWritePacket()$/;"	f	class:TimingSimpleCPU
hasBranchTarget	static_inst.cc	/^StaticInst::hasBranchTarget(const TheISA::PCState &pc, ThreadContext *tc,$/;"	f	class:StaticInst
hasFreeCCRegs	o3/free_list.hh	/^    bool hasFreeCCRegs() const { return ccList.hasFreeRegs(); }$/;"	f	class:UnifiedFreeList
hasFreeFloatRegs	o3/free_list.hh	/^    bool hasFreeFloatRegs() const { return floatList.hasFreeRegs(); }$/;"	f	class:UnifiedFreeList
hasFreeIntRegs	o3/free_list.hh	/^    bool hasFreeIntRegs() const { return intList.hasFreeRegs(); }$/;"	f	class:UnifiedFreeList
hasFreeRegs	o3/free_list.hh	/^    bool hasFreeRegs() const { return !freeRegs.empty(); }$/;"	f	class:SimpleFreeList
hasKernelIRQChip	kvm/vm.hh	/^    bool hasKernelIRQChip() const { return _hasKernelIRQChip; }$/;"	f	class:KvmVM
hasPacketsInMemSystem	minor/lsq.hh	/^        bool hasPacketsInMemSystem() { return false; }$/;"	f	class:Minor::LSQ::SpecialDataRequest
hasPacketsInMemSystem	minor/lsq.hh	/^        bool hasPacketsInMemSystem() { return packetInFlight; }$/;"	f	class:Minor::LSQ::SingleDataRequest
hasPacketsInMemSystem	minor/lsq.hh	/^        bool hasPacketsInMemSystem()$/;"	f	class:Minor::LSQ::SplitDataRequest
hasPendingPkt	o3/lsq_unit.hh	/^    bool hasPendingPkt;$/;"	m	class:LSQUnit
hasReadyInsts	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::hasReadyInsts()$/;"	f	class:InstructionQueue
hasReadyInsts	ozone/inst_queue_impl.hh	/^InstQueue<Impl>::hasReadyInsts()$/;"	f	class:InstQueue
hasRequest	base_dyn_inst.hh	/^    bool hasRequest() { return instFlags[ReqMade]; }$/;"	f	class:BaseDynInst
hasSlot	inorder/resource.hh	/^    bool hasSlot()  { return slotNum >= 0; }     $/;"	f	class:ResourceRequest
hasSlot	inorder/resources/cache_unit.hh	/^    bool hasSlot;$/;"	m	class:CacheReqPacket
hasStoresToWB	o3/iew.hh	/^    bool hasStoresToWB() { return ldstQueue.hasStoresToWB(); }$/;"	f	class:DefaultIEW
hasStoresToWB	o3/iew.hh	/^    bool hasStoresToWB(ThreadID tid) { return ldstQueue.hasStoresToWB(tid); }$/;"	f	class:DefaultIEW
hasStoresToWB	o3/lsq.hh	/^    bool hasStoresToWB(ThreadID tid)$/;"	f	class:LSQ
hasStoresToWB	o3/lsq_impl.hh	/^LSQ<Impl>::hasStoresToWB()$/;"	f	class:LSQ
hasStoresToWB	o3/lsq_unit.hh	/^    bool hasStoresToWB() { return storesToWB; }$/;"	f	class:LSQUnit
hasStoresToWB	ozone/lsq_unit.hh	/^    bool hasStoresToWB() { return storesToWB; }$/;"	f	class:OzoneLSQ
hasStoresToWB	ozone/lw_lsq.hh	/^    bool hasStoresToWB() { return storesToWB; }$/;"	f	class:OzoneLWLSQ
hash	simple/probes/simpoint.hh	/^struct hash<BasicBlockRange>$/;"	s
haveDebugRegs	kvm/x86_cpu.hh	/^    bool haveDebugRegs;$/;"	m	class:X86KvmCPU
havePC	minor/fetch2.hh	/^    bool havePC;$/;"	m	class:Minor::Fetch2
haveXCRs	kvm/x86_cpu.hh	/^    bool haveXCRs;$/;"	m	class:X86KvmCPU
haveXSave	kvm/x86_cpu.hh	/^    bool haveXSave;$/;"	m	class:X86KvmCPU
head	o3/rob.hh	/^    InstIt head;$/;"	m	class:ROB
historyBuffer	o3/rename.hh	/^    std::list<RenameHistory> historyBuffer[Impl::MaxThreads];$/;"	m	class:DefaultRename
historyRegisterMask	pred/bi_mode.hh	/^    unsigned historyRegisterMask;$/;"	m	class:BiModeBP
historyRegisterMask	pred/tournament.hh	/^    unsigned historyRegisterMask;$/;"	m	class:TournamentBP
hitCallback	testers/directedtest/RubyDirectedTester.cc	/^RubyDirectedTester::hitCallback(NodeID proc, Addr addr)$/;"	f	class:RubyDirectedTester
hitCallback	testers/rubytest/RubyTester.cc	/^RubyTester::hitCallback(NodeID proc, SubBlock* data)$/;"	f	class:RubyTester
hitExternalSnoop	base_dyn_inst.hh	/^    bool hitExternalSnoop() const { return instFlags[HitExternalSnoop]; }$/;"	f	class:BaseDynInst
hitExternalSnoop	base_dyn_inst.hh	/^    void hitExternalSnoop(bool f) { instFlags[HitExternalSnoop] = f; }$/;"	f	class:BaseDynInst
hostCycles	kvm/timer.hh	/^    uint64_t hostCycles(Tick ticks) {$/;"	f	class:BaseKvmTimer
hostFactor	kvm/BaseKvmCPU.py	/^    hostFactor = Param.Float(1.0, "Cycle scale factor")$/;"	v
hostFactor	kvm/base.hh	/^    float hostFactor;$/;"	m	class:BaseKvmCPU
hostFactor	kvm/timer.hh	/^    float hostFactor;$/;"	m	class:BaseKvmTimer
hostFreq	kvm/BaseKvmCPU.py	/^    hostFreq = Param.Clock("2GHz", "Host clock frequency")$/;"	v
hostFreq	kvm/timer.hh	/^    Tick hostFreq;$/;"	m	class:BaseKvmTimer
hostNs	kvm/timer.hh	/^    uint64_t hostNs(Tick ticks) {$/;"	f	class:BaseKvmTimer
hpstate	m5legion_interface.h	/^    uint64_t hpstate;$/;"	m	struct:__anon8
htba	m5legion_interface.h	/^    uint64_t htba;$/;"	m	struct:__anon8
htstate	m5legion_interface.h	/^    uint64_t htstate[8];$/;"	m	struct:__anon8
hwCycles	kvm/base.hh	/^    PerfKvmCounter hwCycles;$/;"	m	class:BaseKvmCPU
hwInstructions	kvm/base.hh	/^    PerfKvmCounter hwInstructions;$/;"	m	class:BaseKvmCPU
hwOverflow	kvm/timer.hh	/^    PerfKvmCounter &hwOverflow;$/;"	m	class:PerfKvmTimer
hwrei	checker/cpu.hh	/^    Fault hwrei() { return thread->hwrei(); }$/;"	f	class:CheckerCPU
hwrei	inorder/cpu.cc	/^InOrderCPU::hwrei(ThreadID tid)$/;"	f	class:InOrderCPU
hwrei	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::hwrei()$/;"	f	class:InOrderDynInst
hwrei	minor/exec_context.hh	/^    hwrei()$/;"	f	class:Minor::ExecContext
hwrei	o3/cpu.cc	/^FullO3CPU<Impl>::hwrei(ThreadID tid)$/;"	f	class:FullO3CPU
hwrei	o3/dyn_inst_impl.hh	/^BaseO3DynInst<Impl>::hwrei()$/;"	f	class:BaseO3DynInst
hwrei	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::hwrei()$/;"	f	class:OzoneCPU
hwrei	ozone/dyn_inst_impl.hh	/^OzoneDynInst<Impl>::hwrei()$/;"	f	class:OzoneDynInst
hwrei	simple/base.hh	/^    Fault hwrei() { return thread->hwrei(); }$/;"	f	class:BaseSimpleCPU
hwrei	simple_thread.cc	/^SimpleThread::hwrei()$/;"	f	class:SimpleThread
i	inorder/cpu.hh	/^        FloatRegBits i[ThePipeline::MaxThreads][TheISA::NumFloatRegs];$/;"	m	union:InOrderCPU::__anon2
i	inorder/inorder_dyn_inst.hh	/^            FloatRegBits i;$/;"	m	union:InOrderDynInst::InstValue::__anon4
i	simple_thread.hh	/^        FloatRegBits i[TheISA::NumFloatRegs];$/;"	m	union:SimpleThread::__anon15
i2e	ozone/back_end.hh	/^        TimeBuffer<IssueToExec> *i2e;$/;"	m	class:BackEnd::InstQueue
i2e	ozone/back_end.hh	/^    TimeBuffer<IssueToExec> i2e;$/;"	m	class:BackEnd
i2e	ozone/lw_back_end.hh	/^    TimeBuffer<IssueToExec> i2e;$/;"	m	class:LWBackEnd
icacheBlockAlignPC	ozone/front_end.hh	/^    Addr icacheBlockAlignPC(Addr addr)$/;"	f	class:FrontEnd
icachePort	checker/cpu.hh	/^    MasterPort *icachePort;$/;"	m	class:CheckerCPU
icachePort	minor/fetch1.hh	/^    IcachePort icachePort;$/;"	m	class:Minor::Fetch1
icachePort	o3/cpu.hh	/^    IcachePort icachePort;$/;"	m	class:FullO3CPU
icachePort	ozone/front_end.hh	/^    IcachePort icachePort;$/;"	m	class:FrontEnd
icachePort	simple/atomic.hh	/^    AtomicCPUPort icachePort;$/;"	m	class:AtomicSimpleCPU
icachePort	simple/timing.hh	/^    IcachePort icachePort;$/;"	m	class:TimingSimpleCPU
icacheRetryCycles	simple/base.hh	/^    Stats::Scalar icacheRetryCycles;$/;"	m	class:BaseSimpleCPU
icacheStallCycles	o3/fetch.hh	/^    Stats::Scalar icacheStallCycles;$/;"	m	class:DefaultFetch
icacheStallCycles	ozone/front_end.hh	/^    Stats::Scalar icacheStallCycles;$/;"	m	class:FrontEnd
icacheStallCycles	simple/base.hh	/^    Stats::Scalar icacheStallCycles;$/;"	m	class:BaseSimpleCPU
icacheState	minor/fetch1.hh	/^    IcacheState icacheState;$/;"	m	class:Minor::Fetch1
icache_port	BaseCPU.py	/^    icache_port = MasterPort("Instruction Port")$/;"	v
id	inorder/resource.hh	/^    int id;$/;"	m	class:Resource
id	kvm/arm_cpu.hh	/^        const uint64_t id;$/;"	m	struct:ArmKvmCPU::KvmCoreMiscRegInfo
id	kvm/arm_cpu.hh	/^        const uint64_t id;$/;"	m	struct:ArmKvmCPU::KvmIntRegInfo
id	minor/dyn_inst.hh	/^    InstId id;$/;"	m	class:Minor::MinorDynInst
id	minor/fetch1.hh	/^        InstId id;$/;"	m	class:Minor::Fetch1::FetchRequest
id	minor/pipe_data.hh	/^    InstId id;$/;"	m	class:Minor::ForwardLineData
id	o3/mem_dep_unit.hh	/^    int id;$/;"	m	class:MemDepUnit
id	simple/probes/simpoint.hh	/^        uint64_t id;$/;"	m	struct:SimPoint::BBInfo
id	testers/memtest/memtest.hh	/^    int id;$/;"	m	class:MemTest
id	testers/networktest/networktest.hh	/^    int id;$/;"	m	class:NetworkTest
id	timebuf.hh	/^    int id()$/;"	f	class:TimeBuffer
id	timebuf.hh	/^    void id(int id)$/;"	f	class:TimeBuffer
idle	inorder/pipeline_stage.hh	/^    bool idle;$/;"	m	class:PipelineStage
idleCycles	inorder/cpu.hh	/^    Stats::Scalar idleCycles;$/;"	m	class:InOrderCPU
idleCycles	inorder/pipeline_stage.hh	/^    Stats::Scalar idleCycles;$/;"	m	class:PipelineStage
idleCycles	o3/cpu.hh	/^    Stats::Scalar idleCycles;$/;"	m	class:FullO3CPU
idleFraction	ozone/cpu.hh	/^    Stats::Formula idleFraction;$/;"	m	class:OzoneCPU
idleFraction	simple/base.hh	/^    Stats::Formula idleFraction;$/;"	m	class:BaseSimpleCPU
idleRate	o3/fetch.hh	/^    Stats::Formula idleRate;$/;"	m	class:DefaultFetch
idleRate	ozone/front_end.hh	/^    Stats::Formula idleRate;$/;"	m	class:FrontEnd
idx	inorder/pipeline_traits.5stage.hh	/^        unsigned idx;$/;"	m	struct:ThePipeline::ScheduleEntry
idx	inorder/pipeline_traits.9stage.hh	/^        unsigned idx;$/;"	m	struct:ThePipeline::ScheduleEntry
idx	inorder/pipeline_traits.9stage.smt2.hh	/^        unsigned idx;$/;"	m	struct:ThePipeline::ScheduleEntry
idx	inorder/resource_sked.hh	/^    unsigned idx;$/;"	m	class:ScheduleEntry
idx	kvm/arm_cpu.hh	/^        const IntRegIndex idx;$/;"	m	struct:ArmKvmCPU::KvmIntRegInfo
idx	kvm/arm_cpu.hh	/^        const MiscRegIndex idx;$/;"	m	struct:ArmKvmCPU::KvmCoreMiscRegInfo
idx	o3/fu_pool.hh	/^        int idx;$/;"	m	class:FUPool::FUIdxQueue
idx	o3/lsq_unit.hh	/^        uint8_t idx;$/;"	m	class:LSQUnit::LSQSenderState
idx	ozone/lw_lsq.hh	/^        int idx;$/;"	m	class:OzoneLWLSQ::LSQSenderState
idxMask	pred/btb.hh	/^    unsigned idxMask;$/;"	m	class:DefaultBTB
iew	o3/cpu.hh	/^    typename CPUPolicy::IEW iew;$/;"	m	class:FullO3CPU
iew	o3/rename.hh	/^        bool iew;$/;"	m	struct:DefaultRename::Stalls
iewBlock	o3/comm.hh	/^    bool iewBlock[Impl::MaxThreads];$/;"	m	struct:TimeBufStruct
iewBlockCycles	o3/iew.hh	/^    Stats::Scalar iewBlockCycles;$/;"	m	class:DefaultIEW
iewComm	o3/comm.hh	/^    struct iewComm {$/;"	s	struct:TimeBufStruct
iewDispLoadInsts	o3/iew.hh	/^    Stats::Scalar iewDispLoadInsts;$/;"	m	class:DefaultIEW
iewDispNonSpecInsts	o3/iew.hh	/^    Stats::Scalar iewDispNonSpecInsts;$/;"	m	class:DefaultIEW
iewDispSquashedInsts	o3/iew.hh	/^    Stats::Scalar iewDispSquashedInsts;$/;"	m	class:DefaultIEW
iewDispStoreInsts	o3/iew.hh	/^    Stats::Scalar iewDispStoreInsts;$/;"	m	class:DefaultIEW
iewDispatchedInsts	o3/iew.hh	/^    Stats::Scalar iewDispatchedInsts;$/;"	m	class:DefaultIEW
iewExecLoadInsts	o3/iew.hh	/^    Stats::Vector iewExecLoadInsts;$/;"	m	class:DefaultIEW
iewExecRate	o3/iew.hh	/^    Stats::Formula iewExecRate;$/;"	m	class:DefaultIEW
iewExecSquashedInsts	o3/iew.hh	/^    Stats::Scalar iewExecSquashedInsts;$/;"	m	class:DefaultIEW
iewExecStoreInsts	o3/iew.hh	/^    Stats::Formula iewExecStoreInsts;$/;"	m	class:DefaultIEW
iewExecutedBranches	o3/iew.hh	/^    Stats::Vector iewExecutedBranches;$/;"	m	class:DefaultIEW
iewExecutedInsts	o3/iew.hh	/^    Stats::Scalar iewExecutedInsts;$/;"	m	class:DefaultIEW
iewExecutedNop	o3/iew.hh	/^    Stats::Vector iewExecutedNop;$/;"	m	class:DefaultIEW
iewExecutedRefs	o3/iew.hh	/^    Stats::Vector iewExecutedRefs;$/;"	m	class:DefaultIEW
iewExecutedSwp	o3/iew.hh	/^    Stats::Vector iewExecutedSwp;$/;"	m	class:DefaultIEW
iewIQFullEvents	o3/iew.hh	/^    Stats::Scalar iewIQFullEvents;$/;"	m	class:DefaultIEW
iewIdleCycles	o3/iew.hh	/^    Stats::Scalar iewIdleCycles;$/;"	m	class:DefaultIEW
iewInfo	o3/comm.hh	/^    iewComm iewInfo[Impl::MaxThreads];$/;"	m	struct:TimeBufStruct
iewInstsToCommit	o3/iew.hh	/^    Stats::Vector iewInstsToCommit;$/;"	m	class:DefaultIEW
iewLSQFullEvents	o3/iew.hh	/^    Stats::Scalar iewLSQFullEvents;$/;"	m	class:DefaultIEW
iewQueue	o3/commit.hh	/^    TimeBuffer<IEWStruct> *iewQueue;$/;"	m	class:DefaultCommit
iewQueue	o3/cpu.hh	/^    TimeBuffer<IEWStruct> iewQueue;$/;"	m	class:FullO3CPU
iewQueue	o3/iew.hh	/^    TimeBuffer<IEWStruct> *iewQueue;$/;"	m	class:DefaultIEW
iewSquashCycles	o3/iew.hh	/^    Stats::Scalar iewSquashCycles;$/;"	m	class:DefaultIEW
iewStage	o3/commit.hh	/^    IEW *iewStage;$/;"	m	class:DefaultCommit
iewStage	o3/inst_queue.hh	/^    IEW *iewStage;$/;"	m	class:InstructionQueue
iewStage	o3/lsq.hh	/^    IEW *iewStage;$/;"	m	class:LSQ
iewStage	o3/lsq_unit.hh	/^    IEW *iewStage;$/;"	m	class:LSQUnit
iewToCommitDelay	o3/O3CPU.py	/^    iewToCommitDelay = Param.Cycles(1, "Issue\/Execute\/Writeback to commit "$/;"	v	class:DerivO3CPU
iewToCommitDelay	o3/commit.hh	/^    Cycles iewToCommitDelay;$/;"	m	class:DefaultCommit
iewToCommitDelay	ozone/OzoneCPU.py	/^    iewToCommitDelay = Param.Unsigned("Issue\/Execute\/Writeback to commit "$/;"	v	class:DerivOzoneCPU
iewToCommitDelay	ozone/SimpleOzoneCPU.py	/^    iewToCommitDelay = Param.Unsigned("Issue\/Execute\/Writeback to commit "$/;"	v	class:SimpleOzoneCPU
iewToCommitDelay	ozone/simple_params.hh	/^    unsigned iewToCommitDelay;$/;"	m	class:SimpleParams
iewToDecodeDelay	o3/O3CPU.py	/^    iewToDecodeDelay = Param.Cycles(1, "Issue\/Execute\/Writeback to decode "$/;"	v	class:DerivO3CPU
iewToDecodeDelay	o3/decode.hh	/^    Cycles iewToDecodeDelay;$/;"	m	class:DefaultDecode
iewToDecodeDelay	ozone/OzoneCPU.py	/^    iewToDecodeDelay = Param.Unsigned("Issue\/Execute\/Writeback to decode "$/;"	v	class:DerivOzoneCPU
iewToDecodeDelay	ozone/SimpleOzoneCPU.py	/^    iewToDecodeDelay = Param.Unsigned("Issue\/Execute\/Writeback to decode "$/;"	v	class:SimpleOzoneCPU
iewToDecodeDelay	ozone/simple_params.hh	/^    unsigned iewToDecodeDelay;$/;"	m	class:SimpleParams
iewToFetchDelay	o3/O3CPU.py	/^    iewToFetchDelay = Param.Cycles(1, "Issue\/Execute\/Writeback to fetch "$/;"	v	class:DerivO3CPU
iewToFetchDelay	o3/fetch.hh	/^    Cycles iewToFetchDelay;$/;"	m	class:DefaultFetch
iewToFetchDelay	ozone/OzoneCPU.py	/^    iewToFetchDelay = Param.Unsigned("Issue\/Execute\/Writeback to fetch "$/;"	v	class:DerivOzoneCPU
iewToFetchDelay	ozone/SimpleOzoneCPU.py	/^    iewToFetchDelay = Param.Unsigned("Issue\/Execute\/Writeback to fetch "$/;"	v	class:SimpleOzoneCPU
iewToFetchDelay	ozone/simple_params.hh	/^    unsigned iewToFetchDelay;$/;"	m	class:SimpleParams
iewToRenameDelay	o3/O3CPU.py	/^    iewToRenameDelay = Param.Cycles(1, "Issue\/Execute\/Writeback to rename "$/;"	v	class:DerivO3CPU
iewToRenameDelay	o3/rename.hh	/^    int iewToRenameDelay;$/;"	m	class:DefaultRename
iewToRenameDelay	ozone/OzoneCPU.py	/^    iewToRenameDelay = Param.Unsigned("Issue\/Execute\/Writeback to rename "$/;"	v	class:DerivOzoneCPU
iewToRenameDelay	ozone/SimpleOzoneCPU.py	/^    iewToRenameDelay = Param.Unsigned("Issue\/Execute\/Writeback to rename "$/;"	v	class:SimpleOzoneCPU
iewToRenameDelay	ozone/simple_params.hh	/^    unsigned iewToRenameDelay;$/;"	m	class:SimpleParams
iewUnblock	o3/comm.hh	/^    bool iewUnblock[Impl::MaxThreads];$/;"	m	struct:TimeBufStruct
iewUnblockCycles	o3/iew.hh	/^    Stats::Scalar iewUnblockCycles;$/;"	m	class:DefaultIEW
iew_ptr	o3/rename.hh	/^    IEW *iew_ptr;$/;"	m	class:DefaultRename
ifetch_pkt	simple/timing.hh	/^    PacketPtr ifetch_pkt;$/;"	m	class:TimingSimpleCPU
ifetch_req	simple/atomic.hh	/^    Request ifetch_req;$/;"	m	class:AtomicSimpleCPU
inFUMemInsts	minor/execute.hh	/^    Queue<QueuedInst, ReportTraitsAdaptor<QueuedInst> > *inFUMemInsts;$/;"	m	class:Minor::Execute
inFlightInsts	minor/execute.hh	/^    Queue<QueuedInst, ReportTraitsAdaptor<QueuedInst> > *inFlightInsts;$/;"	m	class:Minor::Execute
inFrontEnd	inorder/inorder_dyn_inst.hh	/^    bool inFrontEnd;$/;"	m	class:InOrderDynInst
inLSQ	minor/dyn_inst.hh	/^    bool inLSQ;$/;"	m	class:Minor::MinorDynInst
inMacroop	minor/decode.hh	/^    bool inMacroop;$/;"	m	class:Minor::Decode
inMemorySystemLimit	minor/lsq.hh	/^    const unsigned int inMemorySystemLimit;$/;"	m	class:Minor::LSQ
inStoreBuffer	minor/dyn_inst.hh	/^    bool inStoreBuffer;$/;"	m	class:Minor::MinorDynInst
includeSquashInst	o3/comm.hh	/^    bool includeSquashInst[Impl::MaxThreads];$/;"	m	struct:DefaultIEWDefaultCommit
incrFullStat	o3/rename_impl.hh	/^DefaultRename<Impl>::incrFullStat(const FullSource &source)$/;"	f	class:DefaultRename
incrInstSeqNum	inorder/cpu.hh	/^    void incrInstSeqNum(ThreadID tid)$/;"	f	class:InOrderCPU
incrLdIdx	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::incrLdIdx(int &load_idx) const$/;"	f	class:LSQUnit
incrLdIdx	ozone/lsq_unit_impl.hh	/^OzoneLSQ<Impl>::incrLdIdx(int &load_idx)$/;"	f	class:OzoneLSQ
incrStIdx	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::incrStIdx(int &store_idx) const$/;"	f	class:LSQUnit
incrStIdx	ozone/lsq_unit_impl.hh	/^OzoneLSQ<Impl>::incrStIdx(int &store_idx)$/;"	f	class:OzoneLSQ
incrTos	pred/ras.hh	/^    inline void incrTos()$/;"	f	class:ReturnAddrStack
increment	pred/sat_counter.hh	/^    void increment()$/;"	f	class:SatCounter
incrementCheckCompletions	testers/rubytest/RubyTester.hh	/^    void incrementCheckCompletions() { m_checks_completed++; }$/;"	f	class:RubyTester
incrementCycleCompletions	testers/directedtest/RubyDirectedTester.hh	/^    void incrementCycleCompletions() { m_requests_completed++; }$/;"	f	class:RubyDirectedTester
index	TimingExpr.py	/^    index = Param.Unsigned("expression index")$/;"	v	class:TimingExprRef
index	TimingExpr.py	/^    index = Param.Unsigned("index into inst src regs")$/;"	v	class:TimingExprSrcReg
index	simple/timing.hh	/^        int index;$/;"	m	class:TimingSimpleCPU::SplitFragmentSenderState
index	timebuf.hh	/^        int index;$/;"	m	class:TimeBuffer::wire
index	timebuf.hh	/^    std::vector<char *> index;$/;"	m	class:TimeBuffer
index	timing_expr.hh	/^    unsigned int index;$/;"	m	class:TimingExprRef
index	timing_expr.hh	/^    unsigned int index;$/;"	m	class:TimingExprSrcReg
index	translation.hh	/^    int index;$/;"	m	class:DataTranslation
indexMask	o3/store_set.hh	/^    int indexMask;$/;"	m	class:StoreSet
indexMask	pred/2bit_local.hh	/^    unsigned indexMask;$/;"	m	class:LocalBP
init	base.cc	/^BaseCPU::init()$/;"	f	class:BaseCPU
init	checker/cpu.cc	/^CheckerCPU::init()$/;"	f	class:CheckerCPU
init	inorder/cpu.cc	/^InOrderCPU::init()$/;"	f	class:InOrderCPU
init	inorder/pipeline_stage.cc	/^PipelineStage::init(Params *params)$/;"	f	class:PipelineStage
init	inorder/resource.cc	/^Resource::init()$/;"	f	class:Resource
init	inorder/resource.cc	/^ResourceEvent::init(Resource *res, int slot_idx)$/;"	f	class:ResourceEvent
init	inorder/resource_pool.9stage.cc	/^ResourcePool::init()$/;"	f	class:ResourcePool
init	inorder/resource_pool.cc	/^ResourcePool::init()$/;"	f	class:ResourcePool
init	inorder/resource_sked.cc	/^ResourceSked::init()$/;"	f	class:ResourceSked
init	inorder/resource_sked.hh	/^    void init(ResourceSked* rsked)$/;"	f	class:RSkedIt
init	inorder/resources/cache_unit.cc	/^CacheUnit::init()$/;"	f	class:CacheUnit
init	inorder/resources/fetch_seq_unit.cc	/^FetchSeqUnit::init()$/;"	f	class:FetchSeqUnit
init	inorder/resources/mult_div_unit.cc	/^MultDivUnit::init()$/;"	f	class:MultDivUnit
init	inorder/resources/tlb_unit.cc	/^TLBUnit::init()$/;"	f	class:TLBUnit
init	inorder/resources/use_def.cc	/^UseDefUnit::init()$/;"	f	class:UseDefUnit
init	kvm/base.cc	/^BaseKvmCPU::init()$/;"	f	class:BaseKvmCPU
init	minor/cpu.cc	/^MinorCPU::init()$/;"	f	class:MinorCPU
init	minor/dyn_inst.cc	/^MinorDynInst::init()$/;"	f	class:Minor::MinorDynInst
init	o3/cpu.cc	/^FullO3CPU<Impl>::init()$/;"	f	class:FullO3CPU
init	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::init(O3CPU *cpu_ptr, IEW *iew_ptr, DerivO3CPUParams *params,$/;"	f	class:LSQUnit
init	o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::init(DerivO3CPUParams *params, ThreadID tid)$/;"	f	class:MemDepUnit
init	o3/rename_map.cc	/^SimpleRenameMap::init(unsigned size, SimpleFreeList *_freeList,$/;"	f	class:SimpleRenameMap
init	o3/rename_map.cc	/^UnifiedRenameMap::init(PhysRegFile *_regFile,$/;"	f	class:UnifiedRenameMap
init	o3/store_set.cc	/^StoreSet::init(uint64_t clear_period, int _SSIT_size, int _LFST_size)$/;"	f	class:StoreSet
init	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::init()$/;"	f	class:OzoneCPU
init	ozone/lsq_unit_impl.hh	/^OzoneLSQ<Impl>::init(Params *params, unsigned maxLQEntries,$/;"	f	class:OzoneLSQ
init	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::init(Params *params, unsigned maxLQEntries,$/;"	f	class:OzoneLWLSQ
init	pred/ras.cc	/^ReturnAddrStack::init(unsigned _numEntries)$/;"	f	class:ReturnAddrStack
init	simple/atomic.cc	/^AtomicSimpleCPU::init()$/;"	f	class:AtomicSimpleCPU
init	simple/probes/simpoint.cc	/^SimPoint::init()$/;"	f	class:SimPoint
init	simple/timing.cc	/^TimingSimpleCPU::init()$/;"	f	class:TimingSimpleCPU
init	testers/directedtest/RubyDirectedTester.cc	/^RubyDirectedTester::init()$/;"	f	class:RubyDirectedTester
init	testers/memtest/memtest.cc	/^MemTest::init()$/;"	f	class:MemTest
init	testers/networktest/networktest.cc	/^NetworkTest::init()$/;"	f	class:NetworkTest
init	testers/rubytest/RubyTester.cc	/^RubyTester::init()$/;"	f	class:RubyTester
init	testers/traffic_gen/generators.cc	/^TraceGen::InputStream::init()$/;"	f	class:TraceGen::InputStream
init	testers/traffic_gen/traffic_gen.cc	/^TrafficGen::init()$/;"	f	class:TrafficGen
initFreeList	o3/regfile.cc	/^PhysRegFile::initFreeList(UnifiedFreeList *freeList)$/;"	f	class:PhysRegFile
initInstPtrs	ozone/dyn_inst_impl.hh	/^OzoneDynInst<Impl>::initInstPtrs()$/;"	f	class:OzoneDynInst
initMemProxies	checker/thread_context.hh	/^    void initMemProxies(ThreadContext *tc)$/;"	f	class:CheckerThreadContext
initMemProxies	inorder/thread_context.hh	/^    void initMemProxies(ThreadContext *tc)$/;"	f	class:InOrderThreadContext
initMemProxies	o3/thread_context.hh	/^    virtual void initMemProxies(ThreadContext *tc)$/;"	f	class:O3ThreadContext
initMemProxies	thread_context.hh	/^    void initMemProxies(ThreadContext *tc) { actualTC->initMemProxies(tc); }$/;"	f	class:ProxyThreadContext
initMemProxies	thread_state.cc	/^ThreadState::initMemProxies(ThreadContext *tc)$/;"	f	class:ThreadState
initSlots	inorder/resource.cc	/^Resource::initSlots()$/;"	f	class:Resource
initState	testers/traffic_gen/traffic_gen.cc	/^TrafficGen::initState()$/;"	f	class:TrafficGen
initVars	base_dyn_inst_impl.hh	/^BaseDynInst<Impl>::initVars()$/;"	f	class:BaseDynInst
initVars	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::initVars()$/;"	f	class:InOrderDynInst
initVars	o3/dyn_inst_impl.hh	/^BaseO3DynInst<Impl>::initVars()$/;"	f	class:BaseO3DynInst
initialVal	pred/sat_counter.hh	/^    uint8_t initialVal;$/;"	m	class:SatCounter
initiate	testers/directedtest/InvalidateGenerator.cc	/^InvalidateGenerator::initiate()$/;"	f	class:InvalidateGenerator
initiate	testers/directedtest/SeriesRequestGenerator.cc	/^SeriesRequestGenerator::initiate()$/;"	f	class:SeriesRequestGenerator
initiate	testers/rubytest/Check.cc	/^Check::initiate()$/;"	f	class:Check
initiateAcc	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::initiateAcc()$/;"	f	class:InOrderDynInst
initiateAcc	o3/dyn_inst_impl.hh	/^BaseO3DynInst<Impl>::initiateAcc()$/;"	f	class:BaseO3DynInst
initiateAcc	ozone/dyn_inst_impl.hh	/^OzoneDynInst<Impl>::initiateAcc()$/;"	f	class:OzoneDynInst
initiateAcc	static_inst.hh	/^    virtual Fault initiateAcc(ExecContext *xc,$/;"	f	class:StaticInst
initiateAction	testers/rubytest/Check.cc	/^Check::initiateAction()$/;"	f	class:Check
initiateCheck	testers/rubytest/Check.cc	/^Check::initiateCheck()$/;"	f	class:Check
initiateFlush	testers/rubytest/Check.cc	/^Check::initiateFlush()$/;"	f	class:Check
initiatePrefetch	testers/rubytest/Check.cc	/^Check::initiatePrefetch()$/;"	f	class:Check
initiateTranslation	base_dyn_inst.hh	/^BaseDynInst<Impl>::initiateTranslation(RequestPtr req, RequestPtr sreqLow,$/;"	f	class:BaseDynInst
injRate	testers/networktest/networktest.hh	/^    double injRate;$/;"	m	class:NetworkTest
inj_rate	testers/networktest/NetworkTest.py	/^    inj_rate = Param.Float(0.1, "Packet injection rate")$/;"	v	class:NetworkTest
inp	minor/decode.hh	/^    Latch<ForwardInstData>::Output inp;$/;"	m	class:Minor::Decode
inp	minor/execute.hh	/^    Latch<ForwardInstData>::Output inp;$/;"	m	class:Minor::Execute
inp	minor/fetch1.hh	/^    Latch<BranchData>::Output inp;$/;"	m	class:Minor::Fetch1
inp	minor/fetch2.hh	/^    Latch<ForwardLineData>::Output inp;$/;"	m	class:Minor::Fetch2
input	minor/buffers.hh	/^    Input input() { return Input(buffer.getWire(0)); }$/;"	f	class:Minor::Latch
inputBuffer	minor/decode.hh	/^    InputBuffer<ForwardInstData> inputBuffer;$/;"	m	class:Minor::Decode
inputBuffer	minor/execute.hh	/^    InputBuffer<ForwardInstData> inputBuffer;$/;"	m	class:Minor::Execute
inputBuffer	minor/fetch2.hh	/^    InputBuffer<ForwardLineData> inputBuffer;$/;"	m	class:Minor::Fetch2
inputIndex	minor/decode.hh	/^    unsigned int inputIndex;$/;"	m	class:Minor::Decode
inputIndex	minor/execute.hh	/^    unsigned int inputIndex;$/;"	m	class:Minor::Execute
inputIndex	minor/fetch2.hh	/^    unsigned int inputIndex;$/;"	m	class:Minor::Fetch2
inputWire	minor/buffers.hh	/^        typename Buffer::wire inputWire;$/;"	m	class:Minor::Latch::Input
insert	inorder/reg_dep_map.cc	/^RegDepMap::insert(DynInstPtr inst)$/;"	f	class:RegDepMap
insert	inorder/reg_dep_map.cc	/^RegDepMap::insert(uint8_t reg_type, RegIndex idx, DynInstPtr inst)$/;"	f	class:RegDepMap
insert	inorder/resources/inst_buffer.cc	/^InstBuffer::insert(DynInstPtr inst)$/;"	f	class:InstBuffer
insert	minor/lsq.cc	/^LSQ::StoreBuffer::insert(LSQRequestPtr request)$/;"	f	class:Minor::LSQ::StoreBuffer
insert	o3/dep_graph.hh	/^DependencyGraph<DynInstPtr>::insert(PhysRegIndex idx, DynInstPtr &new_inst)$/;"	f	class:DependencyGraph
insert	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::insert(DynInstPtr &new_inst)$/;"	f	class:InstructionQueue
insert	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::insert(DynInstPtr &inst)$/;"	f	class:LSQUnit
insert	o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::insert(DynInstPtr &inst)$/;"	f	class:MemDepUnit
insert	ozone/back_end_impl.hh	/^BackEnd<Impl>::InstQueue::insert(DynInstPtr &inst)$/;"	f	class:BackEnd::InstQueue
insert	ozone/inst_queue_impl.hh	/^InstQueue<Impl>::insert(DynInstPtr &new_inst)$/;"	f	class:InstQueue
insert	ozone/lsq_unit_impl.hh	/^OzoneLSQ<Impl>::insert(DynInstPtr &inst)$/;"	f	class:OzoneLSQ
insert	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::insert(DynInstPtr &inst)$/;"	f	class:OzoneLWLSQ
insertBarrier	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::insertBarrier(DynInstPtr &barr_inst)$/;"	f	class:InstructionQueue
insertBarrier	o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::insertBarrier(DynInstPtr &barr_inst)$/;"	f	class:MemDepUnit
insertInst	o3/rob_impl.hh	/^ROB<Impl>::insertInst(DynInstPtr &inst)$/;"	f	class:ROB
insertLoad	o3/lsq_impl.hh	/^LSQ<Impl>::insertLoad(DynInstPtr &load_inst)$/;"	f	class:LSQ
insertLoad	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::insertLoad(DynInstPtr &load_inst)$/;"	f	class:LSQUnit
insertLoad	o3/store_set.cc	/^StoreSet::insertLoad(Addr load_PC, InstSeqNum load_seq_num)$/;"	f	class:StoreSet
insertLoad	ozone/lsq_unit_impl.hh	/^OzoneLSQ<Impl>::insertLoad(DynInstPtr &load_inst)$/;"	f	class:OzoneLSQ
insertLoad	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::insertLoad(DynInstPtr &load_inst)$/;"	f	class:OzoneLWLSQ
insertNonSpec	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::insertNonSpec(DynInstPtr &new_inst)$/;"	f	class:InstructionQueue
insertNonSpec	o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::insertNonSpec(DynInstPtr &inst)$/;"	f	class:MemDepUnit
insertNonSpec	ozone/inst_queue_impl.hh	/^InstQueue<Impl>::insertNonSpec(DynInstPtr &new_inst)$/;"	f	class:InstQueue
insertStore	o3/lsq_impl.hh	/^LSQ<Impl>::insertStore(DynInstPtr &store_inst)$/;"	f	class:LSQ
insertStore	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::insertStore(DynInstPtr &store_inst)$/;"	f	class:LSQUnit
insertStore	o3/store_set.cc	/^StoreSet::insertStore(Addr store_PC, InstSeqNum store_seq_num, ThreadID tid)$/;"	f	class:StoreSet
insertStore	ozone/lsq_unit_impl.hh	/^OzoneLSQ<Impl>::insertStore(DynInstPtr &store_inst)$/;"	f	class:OzoneLSQ
insertStore	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::insertStore(DynInstPtr &store_inst)$/;"	f	class:OzoneLWLSQ
insertThread	o3/cpu.cc	/^FullO3CPU<Impl>::insertThread(ThreadID tid)$/;"	f	class:FullO3CPU
insertedLoads	o3/mem_dep_unit.hh	/^    Stats::Scalar insertedLoads;$/;"	m	class:MemDepUnit
insertedStores	o3/mem_dep_unit.hh	/^    Stats::Scalar insertedStores;$/;"	m	class:MemDepUnit
inst	inorder/cpu.hh	/^        DynInstPtr inst;$/;"	m	class:InOrderCPU::CPUEvent
inst	inorder/resource.hh	/^    DynInstPtr inst;$/;"	m	class:ResourceRequest
inst	inorder/resource_pool.hh	/^        DynInstPtr inst;$/;"	m	class:ResourcePool::ResPoolEvent
inst	minor/exec_context.hh	/^    MinorDynInstPtr inst;$/;"	m	class:Minor::ExecContext
inst	minor/func_unit.hh	/^    MinorDynInstPtr inst;$/;"	m	class:Minor::QueuedInst
inst	minor/lsq.hh	/^        MinorDynInstPtr inst;$/;"	m	class:Minor::LSQ::LSQRequest
inst	minor/pipe_data.hh	/^    MinorDynInstPtr inst;$/;"	m	class:Minor::BranchData
inst	o3/dep_graph.hh	/^    DynInstPtr inst;$/;"	m	class:DependencyEntry
inst	o3/inst_queue.hh	/^        DynInstPtr inst;$/;"	m	class:InstructionQueue::FUCompletion
inst	o3/lsq_unit.hh	/^        DynInstPtr inst;$/;"	m	class:LSQUnit::LSQSenderState
inst	o3/lsq_unit.hh	/^        DynInstPtr inst;$/;"	m	class:LSQUnit::WritebackEvent
inst	o3/lsq_unit.hh	/^        DynInstPtr inst;$/;"	m	struct:LSQUnit::SQEntry
inst	o3/mem_dep_unit.hh	/^        DynInstPtr inst;$/;"	m	class:MemDepUnit::MemDepEntry
inst	ozone/back_end.hh	/^        DynInstPtr inst;$/;"	m	class:BackEnd::LdWritebackEvent
inst	ozone/inorder_back_end.hh	/^        DynInstPtr inst;$/;"	m	class:InorderBackEnd::DCacheCompletionEvent
inst	ozone/inst_queue.hh	/^        DynInstPtr inst;$/;"	m	struct:InstQueue::IQEntry
inst	ozone/lsq_unit.hh	/^        DynInstPtr inst;$/;"	m	struct:OzoneLSQ::SQEntry
inst	ozone/lw_lsq.hh	/^        DynInstPtr inst;$/;"	m	class:OzoneLWLSQ::LSQSenderState
inst	ozone/lw_lsq.hh	/^        DynInstPtr inst;$/;"	m	class:OzoneLWLSQ::WritebackEvent
inst	ozone/lw_lsq.hh	/^        DynInstPtr inst;$/;"	m	struct:OzoneLWLSQ::SQEntry
inst	simple/base.hh	/^    TheISA::MachInst inst;$/;"	m	class:BaseSimpleCPU
inst	timing_expr.hh	/^    const StaticInstPtr &inst;$/;"	m	class:TimingExprEvalContext
instAddr	base_dyn_inst.hh	/^    const Addr instAddr() const { return pc.instAddr(); }$/;"	f	class:BaseDynInst
instAddr	checker/cpu.hh	/^    Addr instAddr() { return thread->instAddr(); }$/;"	f	class:CheckerCPU
instAddr	checker/thread_context.hh	/^    Addr instAddr()$/;"	f	class:CheckerThreadContext
instAddr	inorder/cpu.hh	/^    Addr instAddr(ThreadID tid) { return pc[tid].instAddr(); }$/;"	f	class:InOrderCPU
instAddr	inorder/inorder_dyn_inst.hh	/^    const Addr instAddr() { return pc.instAddr(); }$/;"	f	class:InOrderDynInst
instAddr	inorder/thread_context.hh	/^    Addr instAddr()$/;"	f	class:InOrderThreadContext
instAddr	o3/commit.hh	/^    Addr instAddr(ThreadID tid) { return pc[tid].instAddr(); }$/;"	f	class:DefaultCommit
instAddr	o3/cpu.cc	/^FullO3CPU<Impl>::instAddr(ThreadID tid)$/;"	f	class:FullO3CPU
instAddr	o3/thread_context.hh	/^    virtual Addr instAddr()$/;"	f	class:O3ThreadContext
instAddr	simple/base.hh	/^    Addr instAddr() { return thread->instAddr(); }$/;"	f	class:BaseSimpleCPU
instAddr	simple_thread.hh	/^    instAddr()$/;"	f	class:SimpleThread
instAddr	thread_context.hh	/^    Addr instAddr() { return actualTC->instAddr(); }$/;"	f	class:ProxyThreadContext
instBuffer	ozone/front_end.hh	/^    InstBuff instBuffer;$/;"	m	class:FrontEnd
instBufferSize	ozone/front_end.hh	/^    int instBufferSize;$/;"	m	class:FrontEnd
instCnt	base.hh	/^    Tick instCnt;$/;"	m	class:BaseCPU
instCount	base.hh	/^    Tick instCount() { return instCnt; }$/;"	f	class:BaseCPU
instDone	inorder/cpu.cc	/^InOrderCPU::instDone(DynInstPtr inst, ThreadID tid)$/;"	f	class:InOrderCPU
instDone	o3/cpu.cc	/^FullO3CPU<Impl>::instDone(ThreadID tid, DynInstPtr &inst)$/;"	f	class:FullO3CPU
instEA	ozone/ea_list.hh	/^    typedef std::pair<InstSeqNum, Addr> instEA;$/;"	t	class:EAList
instEffAddr	base_dyn_inst.hh	/^    Addr instEffAddr;$/;"	m	class:BaseDynInst
instEffAddr	inorder/inorder_dyn_inst.hh	/^    Addr instEffAddr;$/;"	m	class:InOrderDynInst
instFlags	base_dyn_inst.hh	/^    std::bitset<MaxFlags> instFlags;$/;"	m	class:BaseDynInst
instGraduated	inorder/resource.hh	/^    virtual void instGraduated(InstSeqNum seq_num, ThreadID tid) { }$/;"	f	class:Resource
instGraduated	inorder/resource_pool.9stage.cc	/^ResourcePool::instGraduated(InstSeqNum seq_num, ThreadID tid)$/;"	f	class:ResourcePool
instGraduated	inorder/resource_pool.cc	/^ResourcePool::instGraduated(InstSeqNum seq_num, ThreadID tid)$/;"	f	class:ResourcePool
instGraduated	inorder/resources/branch_predictor.cc	/^BranchPredictor::instGraduated(InstSeqNum seq_num, ThreadID tid)$/;"	f	class:BranchPredictor
instIdx	inorder/resources/cache_unit.hh	/^    int instIdx;    $/;"	m	class:CacheRequest
instIdx	inorder/resources/cache_unit.hh	/^    int instIdx;$/;"	m	class:CacheReqPacket
instIsHeadInst	minor/execute.cc	/^Execute::instIsHeadInst(MinorDynInstPtr inst)$/;"	f	class:Minor::Execute
instIsRightStream	minor/execute.cc	/^Execute::instIsRightStream(MinorDynInstPtr inst)$/;"	f	class:Minor::Execute
instList	checker/cpu.hh	/^    std::list<DynInstPtr> instList;$/;"	m	class:Checker
instList	inorder/cpu.hh	/^    std::list<DynInstPtr> instList[ThePipeline::MaxThreads];$/;"	m	class:InOrderCPU
instList	inorder/resources/inst_buffer.hh	/^    std::list<DynInstPtr> instList;$/;"	m	class:InstBuffer
instList	inorder/resources/tlb_unit.hh	/^    std::list<DynInstPtr> instList;$/;"	m	class:TLBUnit
instList	o3/cpu.hh	/^    std::list<DynInstPtr> instList;$/;"	m	class:FullO3CPU
instList	o3/inst_queue.hh	/^    std::list<DynInstPtr> instList[Impl::MaxThreads];$/;"	m	class:InstructionQueue
instList	o3/mem_dep_unit.hh	/^    std::list<DynInstPtr> instList[Impl::MaxThreads];$/;"	m	class:MemDepUnit
instList	o3/rob.hh	/^    std::list<DynInstPtr> instList[Impl::MaxThreads];$/;"	m	class:ROB
instList	ozone/back_end.hh	/^    std::list<DynInstPtr> instList;$/;"	m	class:BackEnd
instList	ozone/inorder_back_end.hh	/^    std::list<DynInstPtr> instList;$/;"	m	class:InorderBackEnd
instList	ozone/inst_queue.hh	/^    std::list<DynInstPtr> instList[Impl::MaxThreads];$/;"	m	class:InstQueue
instList	ozone/lw_back_end.hh	/^    std::list<DynInstPtr> instList;$/;"	m	class:LWBackEnd
instListIt	base_dyn_inst.hh	/^    ListIt instListIt;$/;"	m	class:BaseDynInst
instListIt	inorder/inorder_dyn_inst.hh	/^    ListIt instListIt;$/;"	m	class:InOrderDynInst
instMasterId	base.hh	/^    MasterID instMasterId() { return _instMasterId; }$/;"	f	class:BaseCPU
instName	inorder/inorder_dyn_inst.hh	/^    std::string instName()$/;"	f	class:InOrderDynInst
instPort	inorder/cpu.hh	/^    CachePort instPort;$/;"	m	class:InOrderCPU
instPort	kvm/base.hh	/^    KVMCpuPort instPort;$/;"	m	class:BaseKvmCPU
instQueue	o3/iew.hh	/^    IQ instQueue;$/;"	m	class:DefaultIEW
instResult	base_dyn_inst.hh	/^    std::queue<Result> instResult;$/;"	m	class:BaseDynInst
instResult	inorder/inorder_dyn_inst.hh	/^    InstResult instResult[MaxInstDestRegs];$/;"	m	class:InOrderDynInst
instSeqNum	o3/rename.hh	/^        InstSeqNum instSeqNum;$/;"	m	struct:DefaultRename::RenameHistory
instShiftAmt	ozone/OzoneCPU.py	/^    instShiftAmt = Param.Unsigned("Number of bits to shift instructions by")$/;"	v	class:DerivOzoneCPU
instShiftAmt	ozone/SimpleOzoneCPU.py	/^    instShiftAmt = Param.Unsigned("Number of bits to shift instructions by")$/;"	v	class:SimpleOzoneCPU
instShiftAmt	ozone/simple_params.hh	/^    unsigned instShiftAmt;$/;"	m	class:SimpleParams
instShiftAmt	pred/2bit_local.hh	/^    unsigned instShiftAmt;$/;"	m	class:LocalBP
instShiftAmt	pred/BranchPredictor.py	/^    instShiftAmt = Param.Unsigned(2, "Number of bits to shift instructions by")$/;"	v	class:BranchPredictor
instShiftAmt	pred/bi_mode.hh	/^    unsigned instShiftAmt;$/;"	m	class:BiModeBP
instShiftAmt	pred/btb.hh	/^    unsigned instShiftAmt;$/;"	m	class:DefaultBTB
instShiftAmt	pred/tournament.hh	/^    unsigned instShiftAmt;$/;"	m	class:TournamentBP
instSize	inorder/resources/branch_predictor.hh	/^    int instSize;$/;"	m	class:BranchPredictor
instSize	inorder/resources/fetch_seq_unit.hh	/^    unsigned instSize;$/;"	m	class:FetchSeqUnit
instSize	inorder/resources/fetch_unit.hh	/^    int instSize;$/;"	m	class:FetchUnit
instSize	o3/fetch.hh	/^    int instSize;$/;"	m	class:DefaultFetch
instSrc	inorder/inorder_dyn_inst.hh	/^    InstValue instSrc[MaxInstSrcRegs];$/;"	m	class:InOrderDynInst
instToCommit	o3/iew_impl.hh	/^DefaultIEW<Impl>::instToCommit(DynInstPtr &inst)$/;"	f	class:DefaultIEW
instToCommit	ozone/back_end_impl.hh	/^BackEnd<Impl>::instToCommit(DynInstPtr &inst)$/;"	f	class:BackEnd
instToCommit	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::instToCommit(DynInstPtr &inst)$/;"	f	class:LWBackEnd
instToWaitFor	minor/dyn_inst.hh	/^    InstSeqNum instToWaitFor;$/;"	m	class:Minor::MinorDynInst
instUnit	inorder/resource_pool.hh	/^    FetchUnit *instUnit;$/;"	m	class:ResourcePool
inst_count	ozone/back_end.hh	/^        Stats::Vector inst_count;$/;"	m	class:BackEnd::InstQueue
instance	kvm/vm.cc	/^Kvm *Kvm::instance = NULL;$/;"	m	class:Kvm	file:
instance	kvm/vm.hh	/^    static Kvm *instance;$/;"	m	class:Kvm
instcount	inorder/inorder_dyn_inst.cc	/^int InOrderDynInst::instcount = 0;$/;"	m	class:InOrderDynInst	file:
instcount	inorder/inorder_dyn_inst.hh	/^    static int instcount;$/;"	m	class:InOrderDynInst
instcount	o3/cpu.hh	/^    int instcount;$/;"	m	class:FullO3CPU
instcount	ozone/cpu.hh	/^    int instcount;$/;"	m	class:OzoneCPU
instcount	ozone/ozone_base_dyn_inst.cc	/^BaseDynInst<OzoneImpl>::instcount = 0;$/;"	m	class:BaseDynInst	file:
instcount	ozone/simple_base_dyn_inst.cc	/^BaseDynInst<SimpleImpl>::instcount = 0;$/;"	m	class:BaseDynInst	file:
instruction	m5legion_interface.h	/^    uint32_t instruction;$/;"	m	struct:__anon8
insts	inorder/comm.hh	/^    std::vector<ThePipeline::DynInstPtr> insts;$/;"	m	struct:InterStageStruct
insts	minor/pipe_data.hh	/^    MinorDynInstPtr insts[MAX_FORWARD_INSTS];$/;"	m	class:Minor::ForwardInstData
insts	o3/comm.hh	/^    DynInstPtr insts[Impl::MaxWidth];$/;"	m	struct:DefaultDecodeDefaultRename
insts	o3/comm.hh	/^    DynInstPtr insts[Impl::MaxWidth];$/;"	m	struct:DefaultFetchDefaultDecode
insts	o3/comm.hh	/^    DynInstPtr insts[Impl::MaxWidth];$/;"	m	struct:DefaultIEWDefaultCommit
insts	o3/comm.hh	/^    DynInstPtr insts[Impl::MaxWidth];$/;"	m	struct:DefaultRenameDefaultIEW
insts	o3/comm.hh	/^    DynInstPtr insts[Impl::MaxWidth];$/;"	m	struct:IssueStruct
insts	o3/decode.hh	/^    std::queue<DynInstPtr> insts[Impl::MaxThreads];$/;"	m	class:DefaultDecode
insts	o3/iew.hh	/^    std::queue<DynInstPtr> insts[Impl::MaxThreads];$/;"	m	class:DefaultIEW
insts	o3/rename.hh	/^    InstQueue insts[Impl::MaxThreads];$/;"	m	class:DefaultRename
insts	simple/probes/simpoint.hh	/^        uint64_t insts;$/;"	m	struct:SimPoint::BBInfo
instsAdded	ozone/inorder_back_end.hh	/^    TimeBuffer<int>::wire instsAdded;$/;"	m	class:InorderBackEnd
instsBeingCommitted	minor/execute.hh	/^    ForwardInstData instsBeingCommitted;$/;"	m	class:Minor::Execute
instsBypassed	inorder/resources/inst_buffer.hh	/^    Stats::Scalar instsBypassed;$/;"	m	class:InstBuffer
instsCommitted	o3/commit.hh	/^    Stats::Vector instsCommitted;$/;"	m	class:DefaultCommit
instsInProgress	o3/rename.hh	/^    int instsInProgress[Impl::MaxThreads];$/;"	m	class:DefaultRename
instsPerCtxtSwitch	inorder/cpu.hh	/^    Stats::Average instsPerCtxtSwitch;    $/;"	m	class:InOrderCPU
instsPerSwitch	inorder/cpu.hh	/^    unsigned instsPerSwitch;    $/;"	m	class:InOrderCPU
instsProcessed	inorder/pipeline_stage.hh	/^    unsigned instsProcessed;    $/;"	m	class:PipelineStage
instsToDispatch	ozone/back_end.hh	/^    typename TimeBuffer<DispatchToIssue>::wire instsToDispatch;$/;"	m	class:BackEnd
instsToDispatch	ozone/lw_back_end.hh	/^    typename TimeBuffer<DispatchToIssue>::wire instsToDispatch;$/;"	m	class:LWBackEnd
instsToExecute	o3/inst_queue.hh	/^    std::list<DynInstPtr> instsToExecute;$/;"	m	class:InstructionQueue
instsToExecute	ozone/back_end.hh	/^    typename TimeBuffer<IssueToExec>::wire instsToExecute;$/;"	m	class:BackEnd
instsToExecute	ozone/inorder_back_end.hh	/^    TimeBuffer<int>::wire instsToExecute;$/;"	m	class:InorderBackEnd
instsToExecute	ozone/lw_back_end.hh	/^    typename TimeBuffer<IssueToExec>::wire instsToExecute;$/;"	m	class:LWBackEnd
instsToReplay	o3/mem_dep_unit.hh	/^    std::list<DynInstPtr> instsToReplay;$/;"	m	class:MemDepUnit
intAluAccesses	o3/inst_queue.hh	/^    Stats::Scalar intAluAccesses;$/;"	m	class:InstructionQueue
intInstQueueReads	o3/inst_queue.hh	/^    Stats::Scalar intInstQueueReads;$/;"	m	class:InstructionQueue
intInstQueueWakeupAccesses	o3/inst_queue.hh	/^    Stats::Scalar intInstQueueWakeupAccesses;$/;"	m	class:InstructionQueue
intInstQueueWrites	o3/inst_queue.hh	/^    Stats::Scalar intInstQueueWrites;$/;"	m	class:InstructionQueue
intList	o3/free_list.hh	/^    SimpleFreeList intList;$/;"	m	class:UnifiedFreeList
intMap	o3/rename_map.hh	/^    SimpleRenameMap intMap;$/;"	m	class:UnifiedRenameMap
intRegFile	o3/regfile.hh	/^    std::vector<IntReg> intRegFile;$/;"	m	class:PhysRegFile
intRegFileAccs	inorder/resources/use_def.hh	/^    Stats::Formula intRegFileAccs;$/;"	m	class:UseDefUnit
intRegFileReads	inorder/resources/use_def.hh	/^    Stats::Scalar intRegFileReads;$/;"	m	class:UseDefUnit
intRegFileWrites	inorder/resources/use_def.hh	/^    Stats::Scalar intRegFileWrites;$/;"	m	class:UseDefUnit
intRegfileReads	o3/cpu.hh	/^    Stats::Scalar intRegfileReads;$/;"	m	class:FullO3CPU
intRegfileWrites	o3/cpu.hh	/^    Stats::Scalar intRegfileWrites;$/;"	m	class:FullO3CPU
intRegs	inorder/cpu.hh	/^    TheISA::IntReg intRegs[ThePipeline::MaxThreads][TheISA::NumIntRegs];$/;"	m	class:InOrderCPU
intRegs	simple_thread.hh	/^    TheISA::IntReg intRegs[TheISA::NumIntRegs];$/;"	m	class:SimpleThread
intRenameLookups	o3/rename.hh	/^    Stats::Scalar intRenameLookups;$/;"	m	class:DefaultRename
intVal	inorder/inorder_dyn_inst.hh	/^        IntReg intVal;$/;"	m	struct:InOrderDynInst::InstValue
integer	base_dyn_inst.hh	/^        uint64_t integer;$/;"	m	union:BaseDynInst::Result
integer	checker/cpu.hh	/^        uint64_t integer;$/;"	m	union:CheckerCPU::Result
interStageBuffSize	inorder/pipeline_traits.5stage.hh	/^    static const unsigned interStageBuffSize[] = {$/;"	m	namespace:ThePipeline
interStageBuffSize	inorder/pipeline_traits.9stage.hh	/^    static const unsigned interStageBuffSize[NumStages] = {$/;"	m	namespace:ThePipeline
interStageBuffSize	inorder/pipeline_traits.9stage.smt2.hh	/^    static const unsigned interStageBuffSize[NumStages] = {$/;"	m	namespace:ThePipeline
interrupt	o3/commit.hh	/^    Fault interrupt;$/;"	m	class:DefaultCommit
interruptBlocked	ozone/inorder_back_end.hh	/^    bool interruptBlocked;$/;"	m	class:InorderBackEnd
interruptPending	o3/comm.hh	/^        bool interruptPending; \/\/ *F$/;"	m	struct:TimeBufStruct::commitComm
interruptPending	o3/fetch.hh	/^    bool interruptPending;$/;"	m	class:DefaultFetch
interruptPending	ozone/front_end.hh	/^    bool interruptPending;$/;"	m	class:FrontEnd
interrupts	base.hh	/^    TheISA::Interrupts *interrupts;$/;"	m	class:BaseCPU
interval	base.hh	/^        Tick interval;$/;"	m	class:BaseCPU::ProfileEvent
interval	base.hh	/^    Tick interval() { return _interval; }$/;"	f	class:CPUProgressEvent
interval	base.hh	/^    void interval(Tick ival) { _interval = ival; }$/;"	f	class:CPUProgressEvent
interval	simple/probes/SimPoint.py	/^    interval = Param.UInt64(100000000, "Interval Size (insts)")$/;"	v	class:SimPoint
intervalCount	simple/probes/simpoint.hh	/^    uint64_t intervalCount;$/;"	m	class:SimPoint
intervalDrift	simple/probes/simpoint.hh	/^    uint64_t intervalDrift;$/;"	m	class:SimPoint
intervalSize	simple/probes/simpoint.hh	/^    const uint64_t intervalSize;$/;"	m	class:SimPoint
interval_stats	ozone/cpu.hh	/^    bool interval_stats;$/;"	m	class:OzoneCPU
interval_stats	simple/base.hh	/^    bool interval_stats;$/;"	m	class:BaseSimpleCPU
intregs	m5legion_interface.h	/^    uint64_t intregs[32];$/;"	m	struct:__anon8
intrflag	ozone/thread_state.hh	/^    int intrflag;$/;"	m	struct:OzoneThreadState
invAddrLoads	o3/lsq_unit.hh	/^    Stats::Scalar invAddrLoads;$/;"	m	class:LSQUnit
invAddrLoads	ozone/lw_back_end.hh	/^    Stats::Vector invAddrLoads;$/;"	m	class:LWBackEnd
invAddrSwpfs	o3/lsq_unit.hh	/^    Stats::Scalar invAddrSwpfs;$/;"	m	class:LSQUnit
invAddrSwpfs	ozone/lw_back_end.hh	/^    Stats::Vector invAddrSwpfs;$/;"	m	class:LWBackEnd
inv_addr_loads	ozone/back_end.hh	/^    Stats::Vector inv_addr_loads;$/;"	m	class:BackEnd
inv_addr_swpfs	ozone/back_end.hh	/^    Stats::Vector inv_addr_swpfs;$/;"	m	class:BackEnd
invalidPredictorIndex	pred/tournament.hh	/^    static const int invalidPredictorIndex = -1;$/;"	m	class:TournamentBP
invariant_reg_vector	kvm/arm_cpu.cc	/^static uint64_t invariant_reg_vector[] = {$/;"	v	file:
invariant_regs	kvm/arm_cpu.hh	/^    static const std::set<uint64_t> invariant_regs;$/;"	m	class:ArmKvmCPU
io_req	kvm/x86_cpu.hh	/^    Request io_req;$/;"	m	class:X86KvmCPU
ioctl	kvm/base.cc	/^BaseKvmCPU::ioctl(int request, long p1) const$/;"	f	class:BaseKvmCPU
ioctl	kvm/base.hh	/^    int ioctl(int request) const {$/;"	f	class:BaseKvmCPU
ioctl	kvm/base.hh	/^    int ioctl(int request, void *p1) const {$/;"	f	class:BaseKvmCPU
ioctl	kvm/perfevent.cc	/^PerfKvmCounter::ioctl(int request, long p1)$/;"	f	class:PerfKvmCounter
ioctl	kvm/perfevent.hh	/^    int ioctl(int request) { return ioctl(request, 0L); }$/;"	f	class:PerfKvmCounter
ioctl	kvm/perfevent.hh	/^    int ioctl(int request, void *p1) { return ioctl(request, (long)p1); }$/;"	f	class:PerfKvmCounter
ioctl	kvm/vm.cc	/^Kvm::ioctl(int request, long p1) const$/;"	f	class:Kvm
ioctl	kvm/vm.cc	/^KvmVM::ioctl(int request, long p1) const$/;"	f	class:KvmVM
ioctl	kvm/vm.hh	/^    int ioctl(int request) const {$/;"	f	class:Kvm
ioctl	kvm/vm.hh	/^    int ioctl(int request) const {$/;"	f	class:KvmVM
ioctl	kvm/vm.hh	/^    int ioctl(int request, void *p1) const {$/;"	f	class:Kvm
ioctl	kvm/vm.hh	/^    int ioctl(int request, void *p1) const {$/;"	f	class:KvmVM
ioctlRun	kvm/base.cc	/^BaseKvmCPU::ioctlRun()$/;"	f	class:BaseKvmCPU
ipc	inorder/cpu.hh	/^    Stats::Formula ipc;$/;"	m	class:InOrderCPU
ipc	minor/stats.hh	/^    Stats::Formula ipc;$/;"	m	class:Minor::MinorStats
ipc	o3/cpu.hh	/^    Stats::Formula ipc;$/;"	m	class:FullO3CPU
iq	ozone/back_end.hh	/^        InstList iq;$/;"	m	class:BackEnd::InstQueue
iqBranchInstsIssued	o3/inst_queue.hh	/^    Stats::Scalar iqBranchInstsIssued;$/;"	m	class:InstructionQueue
iqBranchInstsIssued	ozone/inst_queue.hh	/^    Stats::Scalar iqBranchInstsIssued;$/;"	m	class:InstQueue
iqCapEvents	ozone/lw_back_end.hh	/^    Stats::Vector iqCapEvents;$/;"	m	class:LWBackEnd
iqCapInstCount	ozone/lw_back_end.hh	/^    Stats::Vector iqCapInstCount;$/;"	m	class:LWBackEnd
iqCount	o3/comm.hh	/^        unsigned iqCount;$/;"	m	struct:TimeBufStruct::iewComm
iqCount	o3/fetch_impl.hh	/^DefaultFetch<Impl>::iqCount()$/;"	f	class:DefaultFetch
iqEntries	o3/rename.hh	/^        unsigned iqEntries;$/;"	m	struct:DefaultRename::FreeEntries
iqFloatInstsIssued	o3/inst_queue.hh	/^    Stats::Scalar iqFloatInstsIssued;$/;"	m	class:InstructionQueue
iqFloatInstsIssued	ozone/inst_queue.hh	/^    Stats::Scalar iqFloatInstsIssued;$/;"	m	class:InstQueue
iqInstsAdded	o3/inst_queue.hh	/^    Stats::Scalar iqInstsAdded;$/;"	m	class:InstructionQueue
iqInstsAdded	ozone/inst_queue.hh	/^    Stats::Scalar iqInstsAdded;$/;"	m	class:InstQueue
iqInstsIssued	o3/inst_queue.hh	/^    Stats::Scalar iqInstsIssued;$/;"	m	class:InstructionQueue
iqIntInstsIssued	o3/inst_queue.hh	/^    Stats::Scalar iqIntInstsIssued;$/;"	m	class:InstructionQueue
iqIntInstsIssued	ozone/inst_queue.hh	/^    Stats::Scalar iqIntInstsIssued;$/;"	m	class:InstQueue
iqIt	ozone/dyn_inst.hh	/^    ListIt iqIt;$/;"	m	class:OzoneDynInst
iqIt	ozone/inst_queue.hh	/^        ListIt iqIt;$/;"	m	struct:InstQueue::IQEntry
iqItValid	ozone/dyn_inst.hh	/^    bool iqItValid;$/;"	m	class:OzoneDynInst
iqMemInstsIssued	o3/inst_queue.hh	/^    Stats::Scalar iqMemInstsIssued;$/;"	m	class:InstructionQueue
iqMemInstsIssued	ozone/inst_queue.hh	/^    Stats::Scalar iqMemInstsIssued;$/;"	m	class:InstQueue
iqMiscInstsIssued	o3/inst_queue.hh	/^    Stats::Scalar iqMiscInstsIssued;$/;"	m	class:InstructionQueue
iqMiscInstsIssued	ozone/inst_queue.hh	/^    Stats::Scalar iqMiscInstsIssued;$/;"	m	class:InstQueue
iqNonSpecInstsAdded	o3/inst_queue.hh	/^    Stats::Scalar iqNonSpecInstsAdded;$/;"	m	class:InstructionQueue
iqNonSpecInstsAdded	ozone/inst_queue.hh	/^    Stats::Scalar iqNonSpecInstsAdded;$/;"	m	class:InstQueue
iqPolicy	o3/inst_queue.hh	/^    IQPolicy iqPolicy;$/;"	m	class:InstructionQueue
iqPtr	o3/inst_queue.hh	/^        InstructionQueue<Impl> *iqPtr;$/;"	m	class:InstructionQueue::FUCompletion
iqPtr	o3/mem_dep_unit.hh	/^    InstructionQueue<Impl> *iqPtr;$/;"	m	class:MemDepUnit
iqSquashedInstsExamined	o3/inst_queue.hh	/^    Stats::Scalar iqSquashedInstsExamined;$/;"	m	class:InstructionQueue
iqSquashedInstsExamined	ozone/inst_queue.hh	/^    Stats::Scalar iqSquashedInstsExamined;$/;"	m	class:InstQueue
iqSquashedInstsIssued	o3/inst_queue.hh	/^    Stats::Scalar iqSquashedInstsIssued;$/;"	m	class:InstructionQueue
iqSquashedInstsIssued	ozone/inst_queue.hh	/^    Stats::Scalar iqSquashedInstsIssued;$/;"	m	class:InstQueue
iqSquashedNonSpecRemoved	o3/inst_queue.hh	/^    Stats::Scalar iqSquashedNonSpecRemoved;$/;"	m	class:InstructionQueue
iqSquashedNonSpecRemoved	ozone/inst_queue.hh	/^    Stats::Scalar iqSquashedNonSpecRemoved;$/;"	m	class:InstQueue
iqSquashedOperandsExamined	o3/inst_queue.hh	/^    Stats::Scalar iqSquashedOperandsExamined;$/;"	m	class:InstructionQueue
iqSquashedOperandsExamined	ozone/inst_queue.hh	/^    Stats::Scalar iqSquashedOperandsExamined;$/;"	m	class:InstQueue
iq_cap_events	ozone/back_end.hh	/^    Stats::Vector iq_cap_events;$/;"	m	class:BackEnd
iq_cap_inst_count	ozone/back_end.hh	/^    Stats::Vector iq_cap_inst_count;$/;"	m	class:BackEnd
irqAsserted	kvm/arm_cpu.hh	/^    bool irqAsserted;$/;"	m	class:ArmKvmCPU
is2ndSplit	inorder/resources/cache_unit.hh	/^    bool is2ndSplit() $/;"	f	class:CacheRequest
isAllZeros	o3/lsq_unit.hh	/^        bool isAllZeros;$/;"	m	struct:LSQUnit::SQEntry
isAtCommit	base_dyn_inst.hh	/^    bool isAtCommit() { return status[AtCommit]; }$/;"	f	class:BaseDynInst
isAtCommit	inorder/inorder_dyn_inst.hh	/^    bool isAtCommit() { return status[AtCommit]; }$/;"	f	class:InOrderDynInst
isBarrier	minor/lsq.cc	/^LSQ::LSQRequest::isBarrier()$/;"	f	class:Minor::LSQ::LSQRequest
isBarrier	minor/lsq.hh	/^        bool isBarrier() { return true; }$/;"	f	class:Minor::LSQ::BarrierDataRequest
isBlocked	inorder/pipeline_stage.cc	/^PipelineStage::isBlocked(ThreadID tid)$/;"	f	class:PipelineStage
isBlocked	ozone/back_end.hh	/^    bool isBlocked() { return status == Blocked || dispatchStatus == Blocked; }$/;"	f	class:BackEnd
isBlocked	ozone/inorder_back_end.hh	/^    bool isBlocked() { return status == DcacheMissStoreStall ||$/;"	f	class:InorderBackEnd
isBlocked	ozone/lw_back_end.hh	/^    bool isBlocked() { return status == Blocked || dispatchStatus == Blocked; }$/;"	f	class:LWBackEnd
isBranch	minor/pipe_data.cc	/^BranchData::isBranch(const BranchData::Reason reason)$/;"	f	class:Minor::BranchData
isBranch	minor/pipe_data.hh	/^    bool isBranch() const { return isBranch(reason); }$/;"	f	class:Minor::BranchData
isBubble	minor/buffers.hh	/^    static bool isBubble(const ElemType &) { return false; }$/;"	f	class:Minor::NoBubbleTraits
isBubble	minor/buffers.hh	/^    static bool isBubble(const ElemType &elem)$/;"	f	class:Minor::BubbleTraitsAdaptor
isBubble	minor/buffers.hh	/^    static bool isBubble(const PtrType &elem)$/;"	f	class:Minor::BubbleTraitsPtrAdaptor
isBubble	minor/dyn_inst.hh	/^    bool isBubble() const { return id.fetchSeqNum == 0; }$/;"	f	class:Minor::MinorDynInst
isBubble	minor/func_unit.hh	/^    bool isBubble() const { return inst->isBubble(); }$/;"	f	class:Minor::QueuedInst
isBubble	minor/pipe_data.cc	/^ForwardInstData::isBubble() const$/;"	f	class:Minor::ForwardInstData
isBubble	minor/pipe_data.hh	/^    bool isBubble() const { return bubbleFlag; }$/;"	f	class:Minor::ForwardLineData
isBubble	minor/pipe_data.hh	/^    bool isBubble() const { return reason == NoBranch; }$/;"	f	class:Minor::BranchData
isCC	static_inst.hh	/^    bool isCC()           const { return flags[IsCC]; }$/;"	f	class:StaticInst
isCCPhysReg	o3/regfile.hh	/^    bool isCCPhysReg(PhysRegIndex reg_idx)$/;"	f	class:PhysRegFile
isCall	base_dyn_inst.hh	/^    bool isCall()         const { return staticInst->isCall(); }$/;"	f	class:BaseDynInst
isCall	inorder/inorder_dyn_inst.hh	/^    bool isCall()         const { return staticInst->isCall(); }$/;"	f	class:InOrderDynInst
isCall	static_inst.hh	/^    bool isCall()         const { return flags[IsCall]; }$/;"	f	class:StaticInst
isCanonicalAddress	kvm/x86_cpu.cc	/^isCanonicalAddress(uint64_t addr)$/;"	f	file:
isCommitted	base_dyn_inst.hh	/^    bool isCommitted() const { return status[Committed]; }$/;"	f	class:BaseDynInst
isCommitted	inorder/inorder_dyn_inst.hh	/^    bool isCommitted() const { return status[Committed]; }$/;"	f	class:InOrderDynInst
isComplete	minor/fetch1.hh	/^        bool isComplete() const { return state == Complete; }$/;"	f	class:Minor::Fetch1::FetchRequest
isComplete	minor/lsq.cc	/^LSQ::LSQRequest::isComplete() const$/;"	f	class:Minor::LSQ::LSQRequest
isCompleted	base_dyn_inst.hh	/^    bool isCompleted() const { return status[Completed]; }$/;"	f	class:BaseDynInst
isCompleted	inorder/inorder_dyn_inst.hh	/^    bool isCompleted() const { return status[Completed]; }$/;"	f	class:InOrderDynInst
isCompleted	inorder/resource.hh	/^    bool isCompleted() { return completed; }$/;"	f	class:ResourceRequest
isCondCtrl	base_dyn_inst.hh	/^    bool isCondCtrl()     const { return staticInst->isCondCtrl(); }$/;"	f	class:BaseDynInst
isCondCtrl	inorder/inorder_dyn_inst.hh	/^    bool isCondCtrl()     const { return staticInst->isCondCtrl(); }$/;"	f	class:InOrderDynInst
isCondCtrl	static_inst.hh	/^    bool isCondCtrl()     const { return flags[IsCondControl]; }$/;"	f	class:StaticInst
isCondDelaySlot	base_dyn_inst.hh	/^    bool isCondDelaySlot() const { return staticInst->isCondDelaySlot(); }$/;"	f	class:BaseDynInst
isCondDelaySlot	inorder/inorder_dyn_inst.hh	/^    bool isCondDelaySlot() const { return staticInst->isCondDelaySlot(); }$/;"	f	class:InOrderDynInst
isCondDelaySlot	static_inst.hh	/^    bool isCondDelaySlot() const { return flags[IsCondDelaySlot]; }$/;"	f	class:StaticInst
isControl	base_dyn_inst.hh	/^    bool isControl()      const { return staticInst->isControl(); }$/;"	f	class:BaseDynInst
isControl	inorder/inorder_dyn_inst.hh	/^    bool isControl()      const { return staticInst->isControl(); }$/;"	f	class:InOrderDynInst
isControl	static_inst.hh	/^    bool isControl()      const { return flags[IsControl]; }$/;"	f	class:StaticInst
isDataPrefetch	base_dyn_inst.hh	/^    bool isDataPrefetch() const { return staticInst->isDataPrefetch(); }$/;"	f	class:BaseDynInst
isDataPrefetch	inorder/inorder_dyn_inst.hh	/^    bool isDataPrefetch() const { return staticInst->isDataPrefetch(); }$/;"	f	class:InOrderDynInst
isDataPrefetch	static_inst.hh	/^    bool isDataPrefetch() const { return flags[IsDataPrefetch]; }$/;"	f	class:StaticInst
isDelayedCommit	base_dyn_inst.hh	/^    bool isDelayedCommit() const { return staticInst->isDelayedCommit(); }$/;"	f	class:BaseDynInst
isDelayedCommit	static_inst.hh	/^    bool isDelayedCommit() const { return flags[IsDelayedCommit]; }$/;"	f	class:StaticInst
isDirectCtrl	base_dyn_inst.hh	/^    bool isDirectCtrl()   const { return staticInst->isDirectCtrl(); }$/;"	f	class:BaseDynInst
isDirectCtrl	inorder/inorder_dyn_inst.hh	/^    bool isDirectCtrl()   const { return staticInst->isDirectCtrl(); }$/;"	f	class:InOrderDynInst
isDirectCtrl	static_inst.hh	/^    bool isDirectCtrl()   const { return flags[IsDirectControl]; }$/;"	f	class:StaticInst
isDiscardable	minor/fetch1.cc	/^bool Fetch1::FetchRequest::isDiscardable() const$/;"	f	class:Minor::Fetch1::FetchRequest
isDoneSquashing	o3/rob.hh	/^    bool isDoneSquashing(ThreadID tid) const$/;"	f	class:ROB
isDrained	minor/decode.cc	/^Decode::isDrained()$/;"	f	class:Minor::Decode
isDrained	minor/execute.cc	/^Execute::isDrained()$/;"	f	class:Minor::Execute
isDrained	minor/fetch1.cc	/^Fetch1::isDrained()$/;"	f	class:Minor::Fetch1
isDrained	minor/fetch2.cc	/^Fetch2::isDrained()$/;"	f	class:Minor::Fetch2
isDrained	minor/lsq.cc	/^LSQ::isDrained()$/;"	f	class:Minor::LSQ
isDrained	minor/lsq.hh	/^        bool isDrained() const { return slots.empty(); }$/;"	f	class:Minor::LSQ::StoreBuffer
isDrained	minor/pipeline.cc	/^Pipeline::isDrained()$/;"	f	class:Minor::Pipeline
isDrained	o3/commit_impl.hh	/^DefaultCommit<Impl>::isDrained() const$/;"	f	class:DefaultCommit
isDrained	o3/cpu.cc	/^FullO3CPU<Impl>::isDrained() const$/;"	f	class:FullO3CPU
isDrained	o3/decode_impl.hh	/^DefaultDecode<Impl>::isDrained() const$/;"	f	class:DefaultDecode
isDrained	o3/fetch_impl.hh	/^DefaultFetch<Impl>::isDrained() const$/;"	f	class:DefaultFetch
isDrained	o3/fu_pool.cc	/^FUPool::isDrained() const$/;"	f	class:FUPool
isDrained	o3/iew_impl.hh	/^DefaultIEW<Impl>::isDrained() const$/;"	f	class:DefaultIEW
isDrained	o3/lsq_impl.hh	/^LSQ<Impl>::isDrained() const$/;"	f	class:LSQ
isDrained	o3/rename_impl.hh	/^DefaultRename<Impl>::isDrained() const$/;"	f	class:DefaultRename
isDrained	simple/atomic.hh	/^    bool isDrained() {$/;"	f	class:AtomicSimpleCPU
isDrained	simple/timing.hh	/^    bool isDrained() {$/;"	f	class:TimingSimpleCPU
isDraining	o3/cpu.hh	/^    bool isDraining() const { return getDrainState() == Drainable::Draining; }$/;"	f	class:FullO3CPU
isEmpty	o3/lsq_impl.hh	/^LSQ<Impl>::isEmpty() const$/;"	f	class:LSQ
isEmpty	o3/lsq_unit.hh	/^    bool isEmpty() const { return lqEmpty() && sqEmpty(); }$/;"	f	class:LSQUnit
isEmpty	o3/rob.hh	/^    bool isEmpty() const$/;"	f	class:ROB
isEmpty	o3/rob.hh	/^    bool isEmpty(ThreadID tid) const$/;"	f	class:ROB
isEmpty	ozone/front_end.hh	/^    bool isEmpty() { return instBuffer.empty(); }$/;"	f	class:FrontEnd
isExecuted	base_dyn_inst.hh	/^    bool isExecuted() const { return status[Executed]; }$/;"	f	class:BaseDynInst
isExecuted	inorder/inorder_dyn_inst.hh	/^    bool isExecuted() const { return status[Executed]; }$/;"	f	class:InOrderDynInst
isFault	minor/dyn_inst.hh	/^    bool isFault() const { return fault != NoFault; }$/;"	f	class:Minor::MinorDynInst
isFault	minor/pipe_data.hh	/^    bool isFault() const { return fault != NoFault; }$/;"	f	class:Minor::ForwardLineData
isFirstMicroop	base_dyn_inst.hh	/^    bool isFirstMicroop() const { return staticInst->isFirstMicroop(); }$/;"	f	class:BaseDynInst
isFirstMicroop	static_inst.hh	/^    bool isFirstMicroop() const { return flags[IsFirstMicroop]; }$/;"	f	class:StaticInst
isFloatPhysReg	o3/regfile.hh	/^    bool isFloatPhysReg(PhysRegIndex reg_idx) const$/;"	f	class:PhysRegFile
isFloating	base_dyn_inst.hh	/^    bool isFloating()     const { return staticInst->isFloating(); }$/;"	f	class:BaseDynInst
isFloating	inorder/inorder_dyn_inst.hh	/^    bool isFloating()     const { return staticInst->isFloating(); }$/;"	f	class:InOrderDynInst
isFloating	static_inst.hh	/^    bool isFloating()     const { return flags[IsFloating]; }$/;"	f	class:StaticInst
isFull	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::isFull()$/;"	f	class:InstructionQueue
isFull	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::isFull(ThreadID tid)$/;"	f	class:InstructionQueue
isFull	o3/lsq_impl.hh	/^LSQ<Impl>::isFull()$/;"	f	class:LSQ
isFull	o3/lsq_impl.hh	/^LSQ<Impl>::isFull(ThreadID tid)$/;"	f	class:LSQ
isFull	o3/lsq_unit.hh	/^    bool isFull() { return lqFull() || sqFull(); }$/;"	f	class:LSQUnit
isFull	o3/rob.hh	/^    bool isFull()$/;"	f	class:ROB
isFull	o3/rob.hh	/^    bool isFull(ThreadID tid)$/;"	f	class:ROB
isFull	ozone/back_end.hh	/^        bool isFull() { return numInsts >= size; }$/;"	f	class:BackEnd::InstQueue
isFull	ozone/back_end.hh	/^    bool isFull() { return numInsts >= numROBEntries; }$/;"	f	class:BackEnd
isFull	ozone/inorder_back_end.hh	/^    bool isFull() { return false; }$/;"	f	class:InorderBackEnd
isFull	ozone/inst_queue_impl.hh	/^InstQueue<Impl>::isFull()$/;"	f	class:InstQueue
isFull	ozone/inst_queue_impl.hh	/^InstQueue<Impl>::isFull(ThreadID tid)$/;"	f	class:InstQueue
isFull	ozone/lsq_unit.hh	/^    bool isFull() { return lqFull() || sqFull(); }$/;"	f	class:OzoneLSQ
isFull	ozone/lw_back_end.hh	/^    bool isFull() { return numInsts >= numROBEntries; }$/;"	f	class:LWBackEnd
isFull	ozone/lw_lsq.hh	/^    bool isFull() { return lqFull() || sqFull(); }$/;"	f	class:OzoneLWLSQ
isHeadReady	o3/rob_impl.hh	/^ROB<Impl>::isHeadReady(ThreadID tid)$/;"	f	class:ROB
isInIQ	base_dyn_inst.hh	/^    bool isInIQ() const { return status[IqEntry]; }$/;"	f	class:BaseDynInst
isInLSQ	base_dyn_inst.hh	/^    bool isInLSQ() const { return status[LsqEntry]; }$/;"	f	class:BaseDynInst
isInROB	base_dyn_inst.hh	/^    bool isInROB() const { return status[RobEntry]; }$/;"	f	class:BaseDynInst
isInbetweenInsts	minor/execute.cc	/^Execute::isInbetweenInsts() const$/;"	f	class:Minor::Execute
isIndirectCtrl	base_dyn_inst.hh	/^    bool isIndirectCtrl() const { return staticInst->isIndirectCtrl(); }$/;"	f	class:BaseDynInst
isIndirectCtrl	inorder/inorder_dyn_inst.hh	/^    bool isIndirectCtrl() const { return staticInst->isIndirectCtrl(); }$/;"	f	class:InOrderDynInst
isIndirectCtrl	static_inst.hh	/^    bool isIndirectCtrl() const { return flags[IsIndirectControl]; }$/;"	f	class:StaticInst
isInst	minor/dyn_inst.hh	/^    bool isInst() const { return !isBubble() && !isFault(); }$/;"	f	class:Minor::MinorDynInst
isInstPrefetch	base_dyn_inst.hh	/^    bool isInstPrefetch() const { return staticInst->isInstPrefetch(); }$/;"	f	class:BaseDynInst
isInstPrefetch	inorder/inorder_dyn_inst.hh	/^    bool isInstPrefetch() const { return staticInst->isInstPrefetch(); }$/;"	f	class:InOrderDynInst
isInstPrefetch	static_inst.hh	/^    bool isInstPrefetch() const { return flags[IsInstPrefetch]; }$/;"	f	class:StaticInst
isInstReadableCpuPort	testers/rubytest/RubyTester.cc	/^RubyTester::isInstReadableCpuPort(int idx)$/;"	f	class:RubyTester
isIntPhysReg	o3/regfile.hh	/^    bool isIntPhysReg(PhysRegIndex reg_idx) const$/;"	f	class:PhysRegFile
isInteger	base_dyn_inst.hh	/^    bool isInteger()      const { return staticInst->isInteger(); }$/;"	f	class:BaseDynInst
isInteger	inorder/inorder_dyn_inst.hh	/^    bool isInteger()      const { return staticInst->isInteger(); }$/;"	f	class:InOrderDynInst
isInteger	static_inst.hh	/^    bool isInteger()      const { return flags[IsInteger]; }$/;"	f	class:StaticInst
isInterrupted	minor/execute.cc	/^Execute::isInterrupted(ThreadID thread_id) const$/;"	f	class:Minor::Execute
isInvariantReg	kvm/arm_cpu.cc	/^ArmKvmCPU::isInvariantReg(uint64_t id)$/;"	f	class:ArmKvmCPU
isIprAccess	base_dyn_inst.hh	/^    bool isIprAccess() const { return staticInst->isIprAccess(); }$/;"	f	class:BaseDynInst
isIprAccess	inorder/inorder_dyn_inst.hh	/^    bool isIprAccess() const { return staticInst->isIprAccess(); }$/;"	f	class:InOrderDynInst
isIprAccess	static_inst.hh	/^    bool isIprAccess() const { return flags[IsIprAccess]; }$/;"	f	class:StaticInst
isIssued	base_dyn_inst.hh	/^    bool isIssued() const { return status[Issued]; }$/;"	f	class:BaseDynInst
isIssued	inorder/inorder_dyn_inst.hh	/^    bool isIssued() const { return status[Issued]; }$/;"	f	class:InOrderDynInst
isLastMicroop	base_dyn_inst.hh	/^    bool isLastMicroop() const { return staticInst->isLastMicroop(); }$/;"	f	class:BaseDynInst
isLastMicroop	inorder/inorder_dyn_inst.hh	/^    bool isLastMicroop() const { return staticInst->isLastMicroop(); }$/;"	f	class:InOrderDynInst
isLastMicroop	static_inst.hh	/^    bool isLastMicroop() const { return flags[IsLastMicroop]; }$/;"	f	class:StaticInst
isLastOpInInst	minor/dyn_inst.cc	/^MinorDynInst::isLastOpInInst() const$/;"	f	class:Minor::MinorDynInst
isLoad	base_dyn_inst.hh	/^    bool isLoad()         const { return staticInst->isLoad(); }$/;"	f	class:BaseDynInst
isLoad	inorder/inorder_dyn_inst.hh	/^    bool isLoad()         const { return staticInst->isLoad(); }$/;"	f	class:InOrderDynInst
isLoad	minor/lsq.hh	/^        bool isLoad;$/;"	m	class:Minor::LSQ::LSQRequest
isLoad	o3/lsq_unit.hh	/^        bool isLoad;$/;"	m	class:LSQUnit::LSQSenderState
isLoad	ozone/lw_lsq.hh	/^        bool isLoad;$/;"	m	class:OzoneLWLSQ::LSQSenderState
isLoad	static_inst.hh	/^    bool isLoad()         const { return flags[IsLoad]; }$/;"	f	class:StaticInst
isLoadBlocked	ozone/lsq_unit.hh	/^    bool isLoadBlocked;$/;"	m	class:OzoneLSQ
isLoadBlocked	ozone/lw_lsq.hh	/^    bool isLoadBlocked;$/;"	m	class:OzoneLWLSQ
isLoadBlockedHandled	ozone/lw_lsq.hh	/^    bool isLoadBlockedHandled()$/;"	f	class:OzoneLWLSQ
isMacroop	base_dyn_inst.hh	/^    bool isMacroop() const { return staticInst->isMacroop(); }$/;"	f	class:BaseDynInst
isMacroop	static_inst.hh	/^    bool isMacroop() const { return flags[IsMacroop]; }$/;"	f	class:StaticInst
isMemAccComplete	inorder/resources/cache_unit.hh	/^    bool isMemAccComplete() { return memAccComplete; }$/;"	f	class:CacheRequest
isMemAccPending	inorder/resources/cache_unit.hh	/^    bool isMemAccPending() { return memAccPending; }$/;"	f	class:CacheRequest
isMemBarrier	base_dyn_inst.hh	/^    bool isMemBarrier()   const { return staticInst->isMemBarrier(); }$/;"	f	class:BaseDynInst
isMemBarrier	inorder/inorder_dyn_inst.hh	/^    bool isMemBarrier()   const { return staticInst->isMemBarrier(); }$/;"	f	class:InOrderDynInst
isMemBarrier	static_inst.hh	/^    bool isMemBarrier()   const { return flags[IsMemBarrier]; }$/;"	f	class:StaticInst
isMemRef	base_dyn_inst.hh	/^    bool isMemRef()       const { return staticInst->isMemRef(); }$/;"	f	class:BaseDynInst
isMemRef	inorder/inorder_dyn_inst.hh	/^    bool isMemRef()       const { return staticInst->isMemRef(); }$/;"	f	class:InOrderDynInst
isMemRef	minor/dyn_inst.hh	/^    bool isMemRef() const { return isInst() && staticInst->isMemRef(); }$/;"	f	class:Minor::MinorDynInst
isMemRef	static_inst.hh	/^    bool isMemRef()       const { return flags[IsMemRef]; }$/;"	f	class:StaticInst
isMemStall	inorder/resource.hh	/^    bool isMemStall() { return memStall; }$/;"	f	class:ResourceRequest
isMicroBranch	base_dyn_inst.hh	/^    bool isMicroBranch() const { return staticInst->isMicroBranch(); }$/;"	f	class:BaseDynInst
isMicroBranch	static_inst.hh	/^    bool isMicroBranch() const { return flags[IsMicroBranch]; }$/;"	f	class:StaticInst
isMicroop	base_dyn_inst.hh	/^    bool isMicroop() const { return staticInst->isMicroop(); }$/;"	f	class:BaseDynInst
isMicroop	inorder/inorder_dyn_inst.hh	/^    bool isMicroop() const { return staticInst->isMicroop(); }$/;"	f	class:InOrderDynInst
isMicroop	static_inst.hh	/^    bool isMicroop() const { return flags[IsMicroop]; }$/;"	f	class:StaticInst
isNoCostInst	minor/dyn_inst.cc	/^MinorDynInst::isNoCostInst() const$/;"	f	class:Minor::MinorDynInst
isNonSpeculative	base_dyn_inst.hh	/^    bool isNonSpeculative() const { return staticInst->isNonSpeculative(); }$/;"	f	class:BaseDynInst
isNonSpeculative	inorder/inorder_dyn_inst.hh	/^    bool isNonSpeculative() const { return staticInst->isNonSpeculative(); }$/;"	f	class:InOrderDynInst
isNonSpeculative	static_inst.hh	/^    bool isNonSpeculative() const { return flags[IsNonSpeculative]; }$/;"	f	class:StaticInst
isNop	base_dyn_inst.hh	/^    bool isNop()          const { return staticInst->isNop(); }$/;"	f	class:BaseDynInst
isNop	inorder/inorder_dyn_inst.hh	/^    bool isNop()          const { return staticInst->isNop(); }$/;"	f	class:InOrderDynInst
isNop	static_inst.hh	/^    bool isNop()          const { return flags[IsNop]; }$/;"	f	class:StaticInst
isPopable	minor/buffers.hh	/^    bool isPopable() { return !BubbleTraits::isBubble(front()); }$/;"	f	class:Minor::SelfStallingPipeline
isPrefetch	static_inst.hh	/^    bool isPrefetch()     const { return isInstPrefetch() ||$/;"	f	class:StaticInst
isPrefetch	translation.hh	/^    isPrefetch() const$/;"	f	class:WholeTranslationState
isProcessing	inorder/resource.hh	/^    bool isProcessing() { return processing; }$/;"	f	class:ResourceRequest
isQuiesce	base_dyn_inst.hh	/^    bool isQuiesce() const { return staticInst->isQuiesce(); }$/;"	f	class:BaseDynInst
isQuiesce	inorder/inorder_dyn_inst.hh	/^    bool isQuiesce() const { return staticInst->isQuiesce(); }$/;"	f	class:InOrderDynInst
isQuiesce	static_inst.hh	/^    bool isQuiesce() const { return flags[IsQuiesce]; }$/;"	f	class:StaticInst
isRead	testers/traffic_gen/generators.hh	/^    bool isRead;$/;"	m	class:DramGen
isReadySrcRegIdx	base_dyn_inst.hh	/^    bool isReadySrcRegIdx(int idx) const$/;"	f	class:BaseDynInst
isReadySrcRegIdx	inorder/inorder_dyn_inst.hh	/^    bool isReadySrcRegIdx(int idx) const$/;"	f	class:InOrderDynInst
isRegDepEntry	inorder/inorder_dyn_inst.hh	/^    bool isRegDepEntry() const { return status[RegDepMapEntry]; }$/;"	f	class:InOrderDynInst
isRemoveList	inorder/inorder_dyn_inst.hh	/^    bool isRemoveList() const { return status[RemoveList]; }$/;"	f	class:InOrderDynInst
isResultReady	base_dyn_inst.hh	/^    bool isResultReady() const { return status[ResultReady]; }$/;"	f	class:BaseDynInst
isResultReady	inorder/inorder_dyn_inst.hh	/^    bool isResultReady() const { return status[ResultReady]; }$/;"	f	class:InOrderDynInst
isReturn	base_dyn_inst.hh	/^    bool isReturn()       const { return staticInst->isReturn(); }$/;"	f	class:BaseDynInst
isReturn	inorder/inorder_dyn_inst.hh	/^    bool isReturn()       const { return staticInst->isReturn(); }$/;"	f	class:InOrderDynInst
isReturn	static_inst.hh	/^    bool isReturn()       const { return flags[IsReturn]; }$/;"	f	class:StaticInst
isSerializeAfter	base_dyn_inst.hh	/^    bool isSerializeAfter() const$/;"	f	class:BaseDynInst
isSerializeAfter	inorder/inorder_dyn_inst.hh	/^    bool isSerializeAfter() const$/;"	f	class:InOrderDynInst
isSerializeAfter	static_inst.hh	/^    bool isSerializeAfter() const { return flags[IsSerializeAfter]; }$/;"	f	class:StaticInst
isSerializeBefore	base_dyn_inst.hh	/^    bool isSerializeBefore() const$/;"	f	class:BaseDynInst
isSerializeBefore	inorder/inorder_dyn_inst.hh	/^    bool isSerializeBefore() const$/;"	f	class:InOrderDynInst
isSerializeBefore	static_inst.hh	/^    bool isSerializeBefore() const { return flags[IsSerializeBefore]; }$/;"	f	class:StaticInst
isSerializeHandled	base_dyn_inst.hh	/^    bool isSerializeHandled() { return status[SerializeHandled]; }$/;"	f	class:BaseDynInst
isSerializeHandled	inorder/inorder_dyn_inst.hh	/^    bool isSerializeHandled() { return status[SerializeHandled]; }$/;"	f	class:InOrderDynInst
isSerializing	base_dyn_inst.hh	/^    bool isSerializing()  const { return staticInst->isSerializing(); }$/;"	f	class:BaseDynInst
isSerializing	inorder/inorder_dyn_inst.hh	/^    bool isSerializing()  const { return staticInst->isSerializing(); }$/;"	f	class:InOrderDynInst
isSerializing	static_inst.hh	/^    bool isSerializing()  const { return flags[IsSerializing] ||$/;"	f	class:StaticInst
isSnooping	o3/cpu.hh	/^        virtual bool isSnooping() const { return true; }$/;"	f	class:FullO3CPU::DcachePort
isSnooping	ozone/lw_lsq.hh	/^        virtual bool isSnooping() const { return true; }$/;"	f	class:OzoneLWLSQ::DcachePort
isSnooping	simple/atomic.hh	/^        bool isSnooping() const { return true; }$/;"	f	class:AtomicSimpleCPU::AtomicCPUDPort
isSplit	o3/lsq_unit.hh	/^        bool isSplit;$/;"	m	class:LSQUnit::LSQSenderState
isSplit	o3/lsq_unit.hh	/^        bool isSplit;$/;"	m	struct:LSQUnit::SQEntry
isSplit	translation.hh	/^    bool isSplit;$/;"	m	class:WholeTranslationState
isSquashAfter	base_dyn_inst.hh	/^    bool isSquashAfter() const { return staticInst->isSquashAfter(); }$/;"	f	class:BaseDynInst
isSquashAfter	static_inst.hh	/^    bool isSquashAfter() const { return flags[IsSquashAfter]; }$/;"	f	class:StaticInst
isSquashed	base_dyn_inst.hh	/^    bool isSquashed() const { return status[Squashed]; }$/;"	f	class:BaseDynInst
isSquashed	inorder/inorder_dyn_inst.hh	/^    bool isSquashed() const { return status[Squashed]; }$/;"	f	class:InOrderDynInst
isSquashed	inorder/resource.hh	/^    bool isSquashed() { return squashed; }$/;"	f	class:ResourceRequest
isSquashed	simple/timing.hh	/^    bool isSquashed() const { return false; }$/;"	f	class:TimingSimpleCPU
isSquashedInIQ	base_dyn_inst.hh	/^    bool isSquashedInIQ() const { return status[SquashedInIQ]; }$/;"	f	class:BaseDynInst
isSquashedInLSQ	base_dyn_inst.hh	/^    bool isSquashedInLSQ() const { return status[SquashedInLSQ]; }$/;"	f	class:BaseDynInst
isSquashedInROB	base_dyn_inst.hh	/^    bool isSquashedInROB() const { return status[SquashedInROB]; }$/;"	f	class:BaseDynInst
isStalled	o3/lsq_impl.hh	/^LSQ<Impl>::isStalled()$/;"	f	class:LSQ
isStalled	o3/lsq_impl.hh	/^LSQ<Impl>::isStalled(ThreadID tid)$/;"	f	class:LSQ
isStalled	o3/lsq_unit.hh	/^    bool isStalled()  { return stalled; }$/;"	f	class:LSQUnit
isStalled	ozone/lsq_unit.hh	/^    bool isStalled()  { return stalled; }$/;"	f	class:OzoneLSQ
isStalled	ozone/lw_lsq.hh	/^    bool isStalled()  { return stalled; }$/;"	f	class:OzoneLWLSQ
isStore	base_dyn_inst.hh	/^    bool isStore()        const { return staticInst->isStore(); }$/;"	f	class:BaseDynInst
isStore	inorder/inorder_dyn_inst.hh	/^    bool isStore()        const { return staticInst->isStore(); }$/;"	f	class:InOrderDynInst
isStore	static_inst.hh	/^    bool isStore()        const { return flags[IsStore]; }$/;"	f	class:StaticInst
isStoreBlocked	o3/lsq_unit.hh	/^    bool isStoreBlocked;$/;"	m	class:LSQUnit
isStoreBlocked	ozone/lw_lsq.hh	/^    bool isStoreBlocked;$/;"	m	class:OzoneLWLSQ
isStoreConditional	base_dyn_inst.hh	/^    bool isStoreConditional() const$/;"	f	class:BaseDynInst
isStoreConditional	inorder/inorder_dyn_inst.hh	/^    bool isStoreConditional() const$/;"	f	class:InOrderDynInst
isStoreConditional	static_inst.hh	/^    bool isStoreConditional()     const { return flags[IsStoreConditional]; }$/;"	f	class:StaticInst
isStreamChange	minor/pipe_data.cc	/^BranchData::isStreamChange(const BranchData::Reason reason)$/;"	f	class:Minor::BranchData
isStreamChange	minor/pipe_data.hh	/^    bool isStreamChange() const { return isStreamChange(reason); }$/;"	f	class:Minor::BranchData
isSwitchedOut	ozone/front_end.hh	/^    bool isSwitchedOut() { return switchedOut; }$/;"	f	class:FrontEnd
isSwitchedOut	ozone/lw_back_end.hh	/^    bool isSwitchedOut() { return switchedOut; }$/;"	f	class:LWBackEnd
isSwitchedOut	ozone/lw_lsq.hh	/^    bool isSwitchedOut() { return switchedOut; }$/;"	f	class:OzoneLWLSQ
isSyscall	base_dyn_inst.hh	/^    bool isSyscall() const { return staticInst->isSyscall(); }$/;"	f	class:BaseDynInst
isSyscall	inorder/inorder_dyn_inst.hh	/^    bool isSyscall() const$/;"	f	class:InOrderDynInst
isSyscall	static_inst.hh	/^    bool isSyscall() const { return flags[IsSyscall]; }$/;"	f	class:StaticInst
isTempSerializeAfter	base_dyn_inst.hh	/^    bool isTempSerializeAfter() { return status[SerializeAfter]; }$/;"	f	class:BaseDynInst
isTempSerializeAfter	inorder/inorder_dyn_inst.hh	/^    bool isTempSerializeAfter() { return status[SerializeAfter]; }$/;"	f	class:InOrderDynInst
isTempSerializeBefore	base_dyn_inst.hh	/^    bool isTempSerializeBefore() { return status[SerializeBefore]; }$/;"	f	class:BaseDynInst
isTempSerializeBefore	inorder/inorder_dyn_inst.hh	/^    bool isTempSerializeBefore() { return status[SerializeBefore]; }$/;"	f	class:InOrderDynInst
isThreadActive	inorder/cpu.cc	/^InOrderCPU::isThreadActive(ThreadID tid)$/;"	f	class:InOrderCPU
isThreadReady	inorder/cpu.cc	/^InOrderCPU::isThreadReady(ThreadID tid)$/;"	f	class:InOrderCPU
isThreadSuspended	inorder/cpu.cc	/^InOrderCPU::isThreadSuspended(ThreadID tid)$/;"	f	class:InOrderCPU
isThreadSync	base_dyn_inst.hh	/^    bool isThreadSync()   const { return staticInst->isThreadSync(); }$/;"	f	class:BaseDynInst
isThreadSync	inorder/inorder_dyn_inst.hh	/^    bool isThreadSync()   const { return staticInst->isThreadSync(); }$/;"	f	class:InOrderDynInst
isThreadSync	static_inst.hh	/^    bool isThreadSync()   const { return flags[IsThreadSync]; }$/;"	f	class:StaticInst
isTranslationDelayed	base_dyn_inst.hh	/^    bool isTranslationDelayed() const$/;"	f	class:BaseDynInst
isUncacheable	translation.hh	/^    isUncacheable() const$/;"	f	class:WholeTranslationState
isUncondCtrl	base_dyn_inst.hh	/^    bool isUncondCtrl()   const { return staticInst->isUncondCtrl(); }$/;"	f	class:BaseDynInst
isUncondCtrl	inorder/inorder_dyn_inst.hh	/^    bool isUncondCtrl()   const { return staticInst->isUncondCtrl(); }$/;"	f	class:InOrderDynInst
isUncondCtrl	static_inst.hh	/^    bool isUncondCtrl()   const { return flags[IsUncondControl]; }$/;"	f	class:StaticInst
isUnverifiable	base_dyn_inst.hh	/^    bool isUnverifiable() const { return staticInst->isUnverifiable(); }$/;"	f	class:BaseDynInst
isUnverifiable	inorder/inorder_dyn_inst.hh	/^    bool isUnverifiable() const { return staticInst->isUnverifiable(); }$/;"	f	class:InOrderDynInst
isUnverifiable	static_inst.hh	/^    bool isUnverifiable() const { return flags[IsUnverifiable]; }$/;"	f	class:StaticInst
isValid	testers/traffic_gen/generators.hh	/^        bool isValid() const {$/;"	f	struct:TraceGen::TraceElement
isWriteBarrier	base_dyn_inst.hh	/^    bool isWriteBarrier() const { return staticInst->isWriteBarrier(); }$/;"	f	class:BaseDynInst
isWriteBarrier	inorder/inorder_dyn_inst.hh	/^    bool isWriteBarrier() const { return staticInst->isWriteBarrier(); }$/;"	f	class:InOrderDynInst
isWriteBarrier	static_inst.hh	/^    bool isWriteBarrier() const { return flags[IsWriteBarrier]; }$/;"	f	class:StaticInst
isZeroReg	o3/scoreboard.hh	/^    bool isZeroReg(PhysRegIndex idx) const$/;"	f	class:Scoreboard
isa	inorder/cpu.hh	/^    std::vector<TheISA::ISA *> isa;$/;"	m	class:InOrderCPU
isa	o3/cpu.hh	/^    std::vector<TheISA::ISA *> isa;$/;"	m	class:FullO3CPU
isa	simple_thread.hh	/^    TheISA::ISA *const isa;    \/\/ one "instance" of the current ISA.$/;"	m	class:SimpleThread::TheISA
isa_class	BaseCPU.py	/^    isa_class = AlphaISA$/;"	v
isa_class	BaseCPU.py	/^    isa_class = ArmISA$/;"	v
isa_class	BaseCPU.py	/^    isa_class = MipsISA$/;"	v
isa_class	BaseCPU.py	/^    isa_class = PowerISA$/;"	v
isa_class	BaseCPU.py	/^    isa_class = SparcISA$/;"	v
isa_class	BaseCPU.py	/^    isa_class = X86ISA$/;"	v
issue	minor/execute.cc	/^Execute::issue(bool only_issue_microops)$/;"	f	class:Minor::Execute
issue	o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::issue(DynInstPtr &inst)$/;"	f	class:MemDepUnit
issueDmas	testers/memtest/memtest.hh	/^    bool issueDmas;$/;"	m	class:MemTest
issueLat	FuncUnit.py	/^    issueLat = Param.Cycles(1, "cycles until another can be issued")$/;"	v	class:OpDesc
issueLat	func_unit.hh	/^    Cycles issueLat;$/;"	m	class:OpDesc
issueLat	minor/MinorCPU.py	/^    issueLat = 9$/;"	v	class:MinorDefaultIntDivFU
issueLat	minor/MinorCPU.py	/^    issueLat = Param.Cycles(1, "cycles until another instruction can be"$/;"	v	class:MinorFU
issueLat	minor/func_unit.hh	/^    Cycles issueLat;$/;"	m	class:MinorFU
issueLatencies	func_unit.hh	/^    unsigned issueLatencies[Num_OpClasses];$/;"	m	class:FuncUnit
issueLatency	func_unit.cc	/^FuncUnit::issueLatency(OpClass capability)$/;"	f	class:FuncUnit
issueLimit	minor/execute.hh	/^    unsigned int issueLimit;$/;"	m	class:Minor::Execute
issuePipelinedIfetch	o3/fetch.hh	/^    bool issuePipelinedIfetch[Impl::MaxThreads];$/;"	m	class:DefaultFetch
issueRate	o3/inst_queue.hh	/^    Stats::Formula issueRate;$/;"	m	class:InstructionQueue
issueTick	o3/dyn_inst.hh	/^    int32_t issueTick;$/;"	m	class:BaseO3DynInst
issueToExecQueue	o3/iew.hh	/^    TimeBuffer<IssueStruct> issueToExecQueue;$/;"	m	class:DefaultIEW
issueToExecuteDelay	o3/O3CPU.py	/^    issueToExecuteDelay = Param.Cycles(1, "Issue to execute delay (internal "$/;"	v	class:DerivO3CPU
issueToExecuteDelay	o3/iew.hh	/^    Cycles issueToExecuteDelay;$/;"	m	class:DefaultIEW
issueToExecuteDelay	ozone/OzoneCPU.py	/^    issueToExecuteDelay = Param.Unsigned("Issue to execute delay (internal "$/;"	v	class:DerivOzoneCPU
issueToExecuteDelay	ozone/SimpleOzoneCPU.py	/^    issueToExecuteDelay = Param.Unsigned("Issue to execute delay (internal "$/;"	v	class:SimpleOzoneCPU
issueToExecuteDelay	ozone/simple_params.hh	/^    unsigned issueToExecuteDelay;$/;"	m	class:SimpleParams
issueToExecuteQueue	o3/inst_queue.hh	/^    TimeBuffer<IssueStruct> *issueToExecuteQueue;$/;"	m	class:InstructionQueue
issueToExecuteQueue	ozone/inst_queue.hh	/^    TimeBuffer<IssueStruct> *issueToExecuteQueue;$/;"	m	class:InstQueue
issueWidth	o3/O3CPU.py	/^    issueWidth = Param.Unsigned(8, "Issue width")$/;"	v	class:DerivO3CPU
issueWidth	o3/iew.hh	/^    unsigned issueWidth;$/;"	m	class:DefaultIEW
issueWidth	ozone/OzoneCPU.py	/^    issueWidth = Param.Unsigned("Issue width")$/;"	v	class:DerivOzoneCPU
issueWidth	ozone/SimpleOzoneCPU.py	/^    issueWidth = Param.Unsigned("Issue width")$/;"	v	class:SimpleOzoneCPU
issueWidth	ozone/back_end.hh	/^    int issueWidth;$/;"	m	class:BackEnd
issueWidth	ozone/lw_back_end.hh	/^    int issueWidth;$/;"	m	class:LWBackEnd
issueWidth	ozone/simple_params.hh	/^    unsigned issueWidth;$/;"	m	class:SimpleParams
issue_delay_dist	ozone/back_end.hh	/^    Stats::VectorDistribution issue_delay_dist;$/;"	m	class:BackEnd
issue_dmas	testers/memtest/MemTest.py	/^    issue_dmas = Param.Bool(False, "this memtester should issue dma requests")$/;"	v	class:MemTest
issued	o3/store_set.cc	/^StoreSet::issued(Addr issued_PC, InstSeqNum issued_seq_num, bool is_store)$/;"	f	class:StoreSet
issuedMemBarrierInst	minor/lsq.cc	/^LSQ::issuedMemBarrierInst(MinorDynInstPtr inst)$/;"	f	class:Minor::LSQ
issuedOps	ozone/lw_back_end.hh	/^    Stats::Vector issuedOps;$/;"	m	class:LWBackEnd
issuedToMemory	minor/lsq.hh	/^        bool issuedToMemory;$/;"	m	class:Minor::LSQ::LSQRequest
issued_ops	ozone/back_end.hh	/^    Stats::Vector issued_ops;$/;"	m	class:BackEnd
itb	checker/cpu.hh	/^    TheISA::TLB *itb;$/;"	m	class:CheckerCPU
itb	m5legion_interface.h	/^    uint64_t itb[64];$/;"	m	struct:__anon8
itb	o3/cpu.hh	/^    TheISA::TLB * itb;$/;"	m	class:FullO3CPU
itb	ozone/cpu.hh	/^    TheISA::TLB *itb;$/;"	m	class:OzoneCPU
itb	ozone/simple_params.hh	/^    TheISA::TLB *itb; TheISA::TLB *dtb;$/;"	m	class:SimpleParams
itb	simple_thread.hh	/^    TheISA::TLB *itb;$/;"	m	class:SimpleThread
items	decode_cache.hh	/^        Value items[TheISA::PageBytes];$/;"	m	struct:DecodeCache::AddrMap::CachePage
iterator	pc_event.hh	/^    typedef map_t::iterator iterator;$/;"	t	class:PCEventQueue
kernelStats	thread_state.hh	/^    TheISA::Kernel::Statistics *kernelStats;$/;"	m	struct:ThreadState
kick	kvm/base.hh	/^    void kick() const { pthread_kill(vcpuThread, KVM_KICK_SIGNAL); }$/;"	f	class:BaseKvmCPU
kvm	kvm/vm.hh	/^    Kvm kvm;$/;"	m	class:KvmVM
kvmArmVCpuInit	kvm/arm_cpu.cc	/^ArmKvmCPU::kvmArmVCpuInit(const struct kvm_vcpu_init &init)$/;"	f	class:ArmKvmCPU
kvmArmVCpuInit	kvm/arm_cpu.cc	/^ArmKvmCPU::kvmArmVCpuInit(uint32_t target)$/;"	f	class:ArmKvmCPU
kvmCoreMiscRegs	kvm/arm_cpu.cc	/^ArmKvmCPU::KvmCoreMiscRegInfo ArmKvmCPU::kvmCoreMiscRegs[] = {$/;"	m	class:ArmKvmCPU	file:
kvmCoreMiscRegs	kvm/arm_cpu.hh	/^    static KvmCoreMiscRegInfo kvmCoreMiscRegs[];$/;"	m	class:ArmKvmCPU
kvmFD	kvm/vm.hh	/^    int kvmFD;$/;"	m	class:Kvm
kvmIntRegs	kvm/arm_cpu.cc	/^ArmKvmCPU::KvmIntRegInfo ArmKvmCPU::kvmIntRegs[] = {$/;"	m	class:ArmKvmCPU	file:
kvmIntRegs	kvm/arm_cpu.hh	/^    static KvmIntRegInfo kvmIntRegs[];$/;"	m	class:ArmKvmCPU
kvmInterrupt	kvm/base.cc	/^BaseKvmCPU::kvmInterrupt(const struct kvm_interrupt &interrupt)$/;"	f	class:BaseKvmCPU
kvmNonMaskableInterrupt	kvm/base.cc	/^BaseKvmCPU::kvmNonMaskableInterrupt()$/;"	f	class:BaseKvmCPU
kvmRun	kvm/arm_cpu.cc	/^ArmKvmCPU::kvmRun(Tick ticks)$/;"	f	class:ArmKvmCPU
kvmRun	kvm/base.cc	/^BaseKvmCPU::kvmRun(Tick ticks)$/;"	f	class:BaseKvmCPU
kvmRun	kvm/x86_cpu.cc	/^X86KvmCPU::kvmRun(Tick ticks)$/;"	f	class:X86KvmCPU
kvmRunDrain	kvm/base.cc	/^BaseKvmCPU::kvmRunDrain()$/;"	f	class:BaseKvmCPU
kvmRunDrain	kvm/x86_cpu.cc	/^X86KvmCPU::kvmRunDrain()$/;"	f	class:X86KvmCPU
kvmRunWrapper	kvm/x86_cpu.cc	/^X86KvmCPU::kvmRunWrapper(Tick ticks)$/;"	f	class:X86KvmCPU
kvmStateDirty	kvm/base.hh	/^    bool kvmStateDirty;$/;"	m	class:BaseKvmCPU
kvmVM	kvm/BaseKvmCPU.py	/^    kvmVM = Param.KvmVM(Parent.any, 'KVM VM (i.e., shared memory domain)')$/;"	v
lastActivate	thread_state.hh	/^    Tick lastActivate;$/;"	m	struct:ThreadState
lastActivatedCycle	o3/cpu.hh	/^    Tick lastActivatedCycle;$/;"	m	class:FullO3CPU
lastBranchPC	inorder/thread_state.hh	/^    TheISA::PCState lastBranchPC;$/;"	m	class:InOrderThreadState
lastCommitCycle	ozone/lw_back_end.hh	/^    Tick lastCommitCycle;$/;"	m	class:LWBackEnd
lastCommitWasEndOfMacroop	minor/execute.hh	/^    bool lastCommitWasEndOfMacroop;$/;"	m	class:Minor::Execute
lastCommitedSeqNum	o3/commit.hh	/^    InstSeqNum lastCommitedSeqNum[Impl::MaxThreads];$/;"	m	class:DefaultCommit
lastCommittedPC	inorder/cpu.hh	/^    TheISA::PCState lastCommittedPC[ThePipeline::MaxThreads];$/;"	m	class:InOrderCPU
lastControlTick	inorder/resources/execution_unit.hh	/^    Tick lastControlTick;$/;"	m	class:ExecutionUnit
lastCycleGrad	inorder/resources/mem_dep_unit.hh	/^    Tick lastCycleGrad;$/;"	m	class:MemDepUnit
lastDcacheRetry	simple/base.hh	/^    Counter lastDcacheRetry;$/;"	m	class:BaseSimpleCPU
lastDcacheStall	ozone/inorder_back_end.hh	/^    Counter lastDcacheStall;$/;"	m	class:InorderBackEnd
lastDcacheStall	ozone/lsq_unit.hh	/^    Counter lastDcacheStall;$/;"	m	class:OzoneLSQ
lastDcacheStall	ozone/lw_lsq.hh	/^    Counter lastDcacheStall;$/;"	m	class:OzoneLWLSQ
lastDcacheStall	simple/base.hh	/^    Counter lastDcacheStall;$/;"	m	class:BaseSimpleCPU
lastDivSize	inorder/resources/mult_div_unit.hh	/^    uint32_t lastDivSize;$/;"	m	class:MultDivUnit
lastExecuteTick	inorder/resources/execution_unit.hh	/^    Tick lastExecuteTick;$/;"	m	class:ExecutionUnit
lastFaultTick	inorder/resources/graduation_unit.hh	/^    Tick lastFaultTick[ThePipeline::MaxThreads];$/;"	m	class:GraduationUnit
lastGradIsBranch	inorder/thread_state.hh	/^    bool lastGradIsBranch;$/;"	m	class:InOrderThreadState
lastIcacheRetry	simple/base.hh	/^    Counter lastIcacheRetry;$/;"	m	class:BaseSimpleCPU
lastIcacheStall	o3/fetch.hh	/^    Counter lastIcacheStall[Impl::MaxThreads];$/;"	m	class:DefaultFetch
lastIcacheStall	simple/base.hh	/^    Counter lastIcacheStall;$/;"	m	class:BaseSimpleCPU
lastInstName	inorder/resources/mult_div_unit.hh	/^    std::string lastInstName;$/;"	m	class:MultDivUnit
lastMDUCycle	inorder/resources/mult_div_unit.hh	/^    Tick lastMDUCycle;$/;"	m	class:MultDivUnit
lastMemBarrier	minor/lsq.hh	/^    InstSeqNum lastMemBarrier;$/;"	m	class:Minor::LSQ
lastNonSpecTick	inorder/resources/graduation_unit.hh	/^    Tick lastNonSpecTick[ThePipeline::MaxThreads];$/;"	m	class:GraduationUnit
lastNumInst	base.hh	/^    Counter lastNumInst;$/;"	m	class:CPUProgressEvent
lastOpType	inorder/resources/mult_div_unit.hh	/^    OpClass lastOpType;$/;"	m	class:MultDivUnit
lastPredictionSeqNum	minor/execute.hh	/^    InstSeqNum lastPredictionSeqNum;$/;"	m	class:Minor::Execute
lastRunningCycle	inorder/cpu.hh	/^    Tick lastRunningCycle;$/;"	m	class:InOrderCPU
lastRunningCycle	o3/cpu.hh	/^    Cycles lastRunningCycle;$/;"	m	class:FullO3CPU
lastSquashCycle	inorder/cpu.hh	/^    Tick lastSquashCycle[ThePipeline::MaxThreads];$/;"	m	class:InOrderCPU
lastSquashCycle	inorder/resources/fetch_seq_unit.hh	/^    Tick lastSquashCycle[ThePipeline::MaxThreads];$/;"	m	class:FetchSeqUnit
lastStallingStage	inorder/pipeline_stage.hh	/^    int lastStallingStage[ThePipeline::MaxThreads];$/;"	m	class:PipelineStage
lastStreamSeqNum	minor/fetch2.hh	/^    InstSeqNum lastStreamSeqNum;$/;"	m	class:Minor::Fetch2
lastSuspend	thread_state.hh	/^    Tick lastSuspend;$/;"	m	struct:ThreadState
last_opcode	kvm/x86_cpu.cc	/^    uint16_t last_opcode;$/;"	m	struct:FXSave	file:
latency	inorder/resource.hh	/^    const Cycles latency;$/;"	m	class:Resource
latency	ozone/back_end.hh	/^    int latency;$/;"	m	class:BackEnd
latency	ozone/front_end.hh	/^    int latency;$/;"	m	class:FrontEnd
latency	ozone/inorder_back_end.hh	/^    int latency;$/;"	m	class:InorderBackEnd
latency	ozone/lw_back_end.hh	/^    int latency;$/;"	m	class:LWBackEnd
ldstQueue	o3/iew.hh	/^    LSQ ldstQueue;$/;"	m	class:DefaultIEW
ldstqCount	o3/comm.hh	/^        unsigned ldstqCount;$/;"	m	struct:TimeBufStruct::iewComm
left	TimingExpr.py	/^    left = Param.TimingExpr("LHS expression")$/;"	v	class:TimingExprBin
left	timing_expr.hh	/^    TimingExpr *left;$/;"	m	class:TimingExprBin
let	timing_expr.hh	/^    TimingExprLet *let;$/;"	m	class:TimingExprEvalContext
line	minor/pipe_data.hh	/^    uint8_t *line;$/;"	m	class:Minor::ForwardLineData
lineBaseAddr	minor/pipe_data.hh	/^    Addr lineBaseAddr;$/;"	m	class:Minor::ForwardLineData
lineSeqNum	minor/dyn_inst.hh	/^    InstSeqNum lineSeqNum;$/;"	m	class:Minor::InstId
lineSeqNum	minor/fetch1.hh	/^    InstSeqNum lineSeqNum;$/;"	m	class:Minor::Fetch1
lineSnap	minor/fetch1.hh	/^    unsigned int lineSnap;$/;"	m	class:Minor::Fetch1
lineWidth	minor/lsq.hh	/^    const unsigned int lineWidth;$/;"	m	class:Minor::LSQ
lineWidth	minor/pipe_data.hh	/^    unsigned int lineWidth;$/;"	m	class:Minor::ForwardLineData
listIt	o3/mem_dep_unit.hh	/^        ListIt listIt;$/;"	m	class:MemDepUnit::MemDepEntry
listOrder	o3/inst_queue.hh	/^    std::list<ListOrderEntry> listOrder;$/;"	m	class:InstructionQueue
loadBarrier	o3/mem_dep_unit.hh	/^    bool loadBarrier;$/;"	m	class:MemDepUnit
loadBarrierSN	o3/mem_dep_unit.hh	/^    InstSeqNum loadBarrierSN;$/;"	m	class:MemDepUnit
loadBlocked	ozone/lsq_unit.hh	/^OzoneLSQ<Impl>::loadBlocked()$/;"	f	class:OzoneLSQ
loadBlocked	ozone/lw_lsq.hh	/^    bool loadBlocked()$/;"	f	class:OzoneLWLSQ
loadBlockedHandled	ozone/lw_lsq.hh	/^    bool loadBlockedHandled;$/;"	m	class:OzoneLWLSQ
loadData	inorder/inorder_dyn_inst.hh	/^    uint64_t loadData;$/;"	m	class:InOrderDynInst
loadFaultInst	ozone/lsq_unit.hh	/^    DynInstPtr loadFaultInst;$/;"	m	class:OzoneLSQ
loadFaultInst	ozone/lw_lsq.hh	/^    DynInstPtr loadFaultInst;$/;"	m	class:OzoneLWLSQ
loadHead	o3/lsq_unit.hh	/^    int loadHead;$/;"	m	class:LSQUnit
loadHead	ozone/lsq_unit.hh	/^    int loadHead;$/;"	m	class:OzoneLSQ
loadQueue	o3/lsq_unit.hh	/^    std::vector<DynInstPtr> loadQueue;$/;"	m	class:LSQUnit
loadQueue	ozone/lsq_unit.hh	/^    std::vector<DynInstPtr> loadQueue;$/;"	m	class:OzoneLSQ
loadQueue	ozone/lw_lsq.hh	/^    std::list<DynInstPtr> loadQueue;$/;"	m	class:OzoneLWLSQ
loadTail	o3/lsq_unit.hh	/^    int loadTail;$/;"	m	class:LSQUnit
loadTail	ozone/lsq_unit.hh	/^    int loadTail;$/;"	m	class:OzoneLSQ
loads	o3/lsq_unit.hh	/^    int loads;$/;"	m	class:LSQUnit
loads	ozone/lsq_unit.hh	/^    int loads;$/;"	m	class:OzoneLSQ
loads	ozone/lw_lsq.hh	/^    int loads;$/;"	m	class:OzoneLWLSQ
loadsInProgress	o3/rename.hh	/^    int loadsInProgress[Impl::MaxThreads];$/;"	m	class:DefaultRename
localCtrBits	ozone/OzoneCPU.py	/^    localCtrBits = Param.Unsigned("Bits per counter")$/;"	v	class:DerivOzoneCPU
localCtrBits	ozone/SimpleOzoneCPU.py	/^    localCtrBits = Param.Unsigned("Bits per counter")$/;"	v	class:SimpleOzoneCPU
localCtrBits	ozone/simple_params.hh	/^    unsigned localCtrBits;$/;"	m	class:SimpleParams
localCtrBits	pred/2bit_local.hh	/^    unsigned localCtrBits;$/;"	m	class:LocalBP
localCtrBits	pred/BranchPredictor.py	/^    localCtrBits = Param.Unsigned(2, "Bits per counter")$/;"	v	class:BranchPredictor
localCtrBits	pred/tournament.hh	/^    unsigned localCtrBits;$/;"	m	class:TournamentBP
localCtrs	pred/2bit_local.hh	/^    std::vector<SatCounter> localCtrs;$/;"	m	class:LocalBP
localCtrs	pred/tournament.hh	/^    std::vector<SatCounter> localCtrs;$/;"	m	class:TournamentBP
localHistory	pred/tournament.hh	/^        unsigned localHistory;$/;"	m	struct:TournamentBP::BPHistory
localHistoryBits	ozone/OzoneCPU.py	/^    localHistoryBits = Param.Unsigned("Bits for the local history")$/;"	v	class:DerivOzoneCPU
localHistoryBits	ozone/SimpleOzoneCPU.py	/^    localHistoryBits = Param.Unsigned("Bits for the local history")$/;"	v	class:SimpleOzoneCPU
localHistoryBits	ozone/simple_params.hh	/^    unsigned localHistoryBits;$/;"	m	class:SimpleParams
localHistoryBits	pred/tournament.hh	/^    unsigned localHistoryBits;$/;"	m	class:TournamentBP
localHistoryTable	pred/tournament.hh	/^    std::vector<unsigned> localHistoryTable;$/;"	m	class:TournamentBP
localHistoryTableSize	ozone/OzoneCPU.py	/^    localHistoryTableSize = Param.Unsigned("Size of local history table")$/;"	v	class:DerivOzoneCPU
localHistoryTableSize	ozone/SimpleOzoneCPU.py	/^    localHistoryTableSize = Param.Unsigned("Size of local history table")$/;"	v	class:SimpleOzoneCPU
localHistoryTableSize	ozone/simple_params.hh	/^    unsigned localHistoryTableSize;$/;"	m	class:SimpleParams
localHistoryTableSize	pred/BranchPredictor.py	/^    localHistoryTableSize = Param.Unsigned(2048, "Size of local history table")$/;"	v	class:BranchPredictor
localHistoryTableSize	pred/tournament.hh	/^    unsigned localHistoryTableSize;$/;"	m	class:TournamentBP
localPredTaken	pred/tournament.hh	/^        bool localPredTaken;$/;"	m	struct:TournamentBP::BPHistory
localPredictorMask	pred/tournament.hh	/^    unsigned localPredictorMask;$/;"	m	class:TournamentBP
localPredictorSets	pred/2bit_local.hh	/^    unsigned localPredictorSets;$/;"	m	class:LocalBP
localPredictorSize	ozone/OzoneCPU.py	/^    localPredictorSize = Param.Unsigned("Size of local predictor")$/;"	v	class:DerivOzoneCPU
localPredictorSize	ozone/SimpleOzoneCPU.py	/^    localPredictorSize = Param.Unsigned("Size of local predictor")$/;"	v	class:SimpleOzoneCPU
localPredictorSize	ozone/simple_params.hh	/^    unsigned localPredictorSize;$/;"	m	class:SimpleParams
localPredictorSize	pred/2bit_local.hh	/^    unsigned localPredictorSize;$/;"	m	class:LocalBP
localPredictorSize	pred/BranchPredictor.py	/^    localPredictorSize = Param.Unsigned(2048, "Size of local predictor")$/;"	v	class:BranchPredictor
localPredictorSize	pred/tournament.hh	/^    unsigned localPredictorSize;$/;"	m	class:TournamentBP
localThreshold	pred/tournament.hh	/^    unsigned localThreshold;$/;"	m	class:TournamentBP
lockAddr	inorder/cpu.hh	/^    Addr lockAddr;$/;"	m	class:InOrderCPU
lockAddrList	ozone/cpu.hh	/^    std::set<Addr> lockAddrList;$/;"	m	class:OzoneCPU
lockFlag	inorder/cpu.hh	/^    bool lockFlag;$/;"	m	class:InOrderCPU
lockFlag	ozone/cpu.hh	/^    bool lockFlag;$/;"	m	class:OzoneCPU
locked	simple/atomic.hh	/^    bool locked;$/;"	m	class:AtomicSimpleCPU
longestFuLatency	minor/execute.hh	/^    Cycles longestFuLatency;$/;"	m	class:Minor::Execute
longestLatency	activity.hh	/^    int longestLatency;$/;"	m	class:ActivityRecorder
lookup	decode_cache.hh	/^    lookup(Addr addr)$/;"	f	class:DecodeCache::AddrMap
lookup	o3/rename_map.cc	/^UnifiedRenameMap::lookup(RegIndex arch_reg) const$/;"	f	class:UnifiedRenameMap
lookup	o3/rename_map.hh	/^    PhysRegIndex lookup(RegIndex arch_reg) const$/;"	f	class:SimpleRenameMap
lookup	ozone/null_predictor.hh	/^    BPredInfo lookup(Addr &PC) { return BPredInfo(PC, PC+4); }$/;"	f	class:NullPredictor
lookup	pred/2bit_local.cc	/^LocalBP::lookup(Addr branch_addr, void * &bp_history)$/;"	f	class:LocalBP
lookup	pred/bi_mode.cc	/^BiModeBP::lookup(Addr branchAddr, void * &bpHistory)$/;"	f	class:BiModeBP
lookup	pred/btb.cc	/^DefaultBTB::lookup(Addr instPC, ThreadID tid)$/;"	f	class:DefaultBTB
lookup	pred/tournament.cc	/^TournamentBP::lookup(Addr branch_addr, void * &bp_history)$/;"	f	class:TournamentBP
lookupAndUpdateNextPC	o3/fetch_impl.hh	/^DefaultFetch<Impl>::lookupAndUpdateNextPC($/;"	f	class:DefaultFetch
lookupCC	o3/rename_map.hh	/^    PhysRegIndex lookupCC(RegIndex rel_arch_reg) const$/;"	f	class:UnifiedRenameMap
lookupFloat	o3/rename_map.hh	/^    PhysRegIndex lookupFloat(RegIndex rel_arch_reg) const$/;"	f	class:UnifiedRenameMap
lookupInt	o3/rename_map.hh	/^    PhysRegIndex lookupInt(RegIndex rel_arch_reg) const$/;"	f	class:UnifiedRenameMap
lookupMisc	o3/rename_map.hh	/^    PhysRegIndex lookupMisc(RegIndex rel_arch_reg) const$/;"	f	class:UnifiedRenameMap
lookupSked	inorder/cpu.hh	/^    ThePipeline::RSkedPtr lookupSked(DynInstPtr inst)$/;"	f	class:InOrderCPU
lookups	pred/bpred_unit.hh	/^    Stats::Scalar lookups;$/;"	m	class:BPredUnit
lqEmpty	o3/lsq_impl.hh	/^LSQ<Impl>::lqEmpty() const$/;"	f	class:LSQ
lqEmpty	o3/lsq_unit.hh	/^    bool lqEmpty() const { return loads == 0; }$/;"	f	class:LSQUnit
lqEntries	o3/rename.hh	/^        unsigned lqEntries;$/;"	m	struct:DefaultRename::FreeEntries
lqFull	o3/lsq_impl.hh	/^LSQ<Impl>::lqFull()$/;"	f	class:LSQ
lqFull	o3/lsq_impl.hh	/^LSQ<Impl>::lqFull(ThreadID tid)$/;"	f	class:LSQ
lqFull	o3/lsq_unit.hh	/^    bool lqFull() { return loads >= (LQEntries - 1); }$/;"	f	class:LSQUnit
lqFull	ozone/lsq_unit.hh	/^    bool lqFull() { return loads >= (LQEntries - 1); }$/;"	f	class:OzoneLSQ
lqFull	ozone/lw_lsq.hh	/^    bool lqFull() { return loads >= (LQEntries - 1); }$/;"	f	class:OzoneLWLSQ
lqIdx	base_dyn_inst.hh	/^    int16_t lqIdx;$/;"	m	class:BaseDynInst
lqIdx	inorder/inorder_dyn_inst.hh	/^    int16_t lqIdx;$/;"	m	class:InOrderDynInst
lqIdx	ozone/cpu.hh	/^        unsigned lqIdx;$/;"	m	struct:OzoneCPU::CommStruct
lqIt	ozone/lw_lsq.hh	/^        typename std::list<DynInstPtr>::iterator lqIt;$/;"	m	struct:OzoneLWLSQ::SQEntry
lsq	minor/execute.hh	/^    LSQ lsq;$/;"	m	class:Minor::Execute
lsq	minor/lsq.hh	/^        LSQ &lsq;$/;"	m	class:Minor::LSQ::DcachePort
lsq	minor/lsq.hh	/^        LSQ &lsq;$/;"	m	class:Minor::LSQ::StoreBuffer
lsq	o3/cpu.hh	/^        LSQ<Impl> *lsq;$/;"	m	class:FullO3CPU::DcachePort
lsq	o3/lsq_unit.hh	/^    LSQ *lsq;$/;"	m	class:LSQUnit
lsq	ozone/lw_lsq.hh	/^        OzoneLWLSQ *lsq;$/;"	m	class:OzoneLWLSQ::DcachePort
lsqBlockedLoads	o3/lsq_unit.hh	/^    Stats::Scalar lsqBlockedLoads;$/;"	m	class:LSQUnit
lsqBlockedLoads	ozone/lw_back_end.hh	/^    Stats::Vector lsqBlockedLoads;$/;"	m	class:LWBackEnd
lsqCacheBlocked	o3/lsq_unit.hh	/^    Stats::Scalar lsqCacheBlocked;$/;"	m	class:LSQUnit
lsqCount	o3/fetch_impl.hh	/^DefaultFetch<Impl>::lsqCount()$/;"	f	class:DefaultFetch
lsqForwLoads	o3/lsq_unit.hh	/^    Stats::Scalar lsqForwLoads;$/;"	m	class:LSQUnit
lsqForwLoads	ozone/lw_back_end.hh	/^    Stats::Vector lsqForwLoads;$/;"	m	class:LWBackEnd
lsqID	o3/lsq_unit.hh	/^    ThreadID lsqID;$/;"	m	class:LSQUnit
lsqID	ozone/lsq_unit.hh	/^    unsigned lsqID;$/;"	m	class:OzoneLSQ
lsqID	ozone/lw_lsq.hh	/^    unsigned lsqID;$/;"	m	class:OzoneLWLSQ
lsqIgnoredResponses	o3/lsq_unit.hh	/^    Stats::Scalar lsqIgnoredResponses;$/;"	m	class:LSQUnit
lsqInversion	ozone/back_end.hh	/^    Stats::Scalar lsqInversion;$/;"	m	class:BackEnd
lsqInversion	ozone/lw_back_end.hh	/^    Stats::Scalar lsqInversion;$/;"	m	class:LWBackEnd
lsqLimits	ozone/OzoneCPU.py	/^    lsqLimits = Param.Bool(True, "LSQ size limits dispatch")$/;"	v	class:DerivOzoneCPU
lsqLimits	ozone/lw_back_end.hh	/^    bool lsqLimits;$/;"	m	class:LWBackEnd
lsqLimits	ozone/simple_params.hh	/^    bool lsqLimits;$/;"	m	class:SimpleParams
lsqMemOrderViolation	o3/lsq_unit.hh	/^    Stats::Scalar lsqMemOrderViolation;$/;"	m	class:LSQUnit
lsqMemOrderViolation	ozone/lw_lsq.hh	/^    Stats::Scalar lsqMemOrderViolation;$/;"	m	class:OzoneLWLSQ
lsqPolicy	o3/lsq.hh	/^    LSQPolicy lsqPolicy;$/;"	m	class:LSQ
lsqPtr	o3/lsq_unit.hh	/^        LSQUnit<Impl> *lsqPtr;$/;"	m	class:LSQUnit::WritebackEvent
lsqPtr	ozone/lsq_unit.hh	/^        OzoneLSQ<Impl> *lsqPtr;$/;"	m	class:OzoneLSQ::StoreCompletionEvent
lsqPtr	ozone/lw_lsq.hh	/^        OzoneLWLSQ<Impl> *lsqPtr;$/;"	m	class:OzoneLWLSQ::WritebackEvent
lsqRescheduledLoads	o3/lsq_unit.hh	/^    Stats::Scalar lsqRescheduledLoads;$/;"	m	class:LSQUnit
lsqSquashedLoads	o3/lsq_unit.hh	/^    Stats::Scalar lsqSquashedLoads;$/;"	m	class:LSQUnit
lsqSquashedStores	o3/lsq_unit.hh	/^    Stats::Scalar lsqSquashedStores;$/;"	m	class:LSQUnit
lsq_blocked_loads	ozone/back_end.hh	/^    Stats::Vector lsq_blocked_loads;$/;"	m	class:BackEnd
lsq_forw_loads	ozone/back_end.hh	/^    Stats::Vector lsq_forw_loads;$/;"	m	class:BackEnd
ltseqnum	o3/store_set.hh	/^struct ltseqnum {$/;"	s
m_access_mode	testers/rubytest/Check.hh	/^    RubyAccessMode m_access_mode;$/;"	m	class:Check
m_active_inv_node	testers/directedtest/InvalidateGenerator.hh	/^    uint32_t m_active_inv_node;$/;"	m	class:InvalidateGenerator
m_active_node	testers/directedtest/SeriesRequestGenerator.hh	/^    uint32_t m_active_node;$/;"	m	class:SeriesRequestGenerator
m_active_read_node	testers/directedtest/InvalidateGenerator.hh	/^    uint32_t m_active_read_node;$/;"	m	class:InvalidateGenerator
m_addr_increment_size	testers/directedtest/InvalidateGenerator.hh	/^    uint32_t m_addr_increment_size;$/;"	m	class:InvalidateGenerator
m_addr_increment_size	testers/directedtest/SeriesRequestGenerator.hh	/^    uint32_t m_addr_increment_size;$/;"	m	class:SeriesRequestGenerator
m_address	testers/directedtest/InvalidateGenerator.hh	/^    Addr m_address;$/;"	m	class:InvalidateGenerator
m_address	testers/directedtest/SeriesRequestGenerator.hh	/^    Addr m_address;$/;"	m	class:SeriesRequestGenerator
m_address	testers/rubytest/Check.hh	/^    Address m_address;$/;"	m	class:Check
m_checkTable_ptr	testers/rubytest/RubyTester.hh	/^    CheckTable* m_checkTable_ptr;$/;"	m	class:RubyTester
m_check_flush	testers/rubytest/RubyTester.hh	/^    bool m_check_flush;$/;"	m	class:RubyTester
m_check_vector	testers/rubytest/CheckTable.hh	/^    std::vector<Check*> m_check_vector;$/;"	m	class:CheckTable
m_checks_completed	testers/rubytest/RubyTester.hh	/^    uint64 m_checks_completed;$/;"	m	class:RubyTester
m_checks_to_complete	testers/rubytest/RubyTester.hh	/^    uint64 m_checks_to_complete;$/;"	m	class:RubyTester
m_deadlock_threshold	testers/rubytest/RubyTester.hh	/^    int m_deadlock_threshold;$/;"	m	class:RubyTester
m_directed_tester	testers/directedtest/DirectedGenerator.hh	/^    RubyDirectedTester* m_directed_tester;$/;"	m	class:DirectedGenerator
m_initiatingNode	testers/rubytest/Check.hh	/^    NodeID m_initiatingNode;$/;"	m	class:Check
m_last_progress_vector	testers/rubytest/RubyTester.hh	/^    std::vector<Cycles> m_last_progress_vector;$/;"	m	class:RubyTester
m_lookup_map	testers/rubytest/CheckTable.hh	/^    m5::hash_map<Address, Check*> m_lookup_map;$/;"	m	class:CheckTable
m_num_cpus	testers/directedtest/DirectedGenerator.hh	/^    int m_num_cpus;$/;"	m	class:DirectedGenerator
m_num_cpus	testers/rubytest/RubyTester.hh	/^    int m_num_cpus;$/;"	m	class:RubyTester
m_num_inst_ports	testers/rubytest/RubyTester.hh	/^    int m_num_inst_ports;$/;"	m	class:RubyTester
m_num_readers	testers/rubytest/Check.hh	/^    int m_num_readers;$/;"	m	class:Check
m_num_readers	testers/rubytest/CheckTable.hh	/^    int m_num_readers;$/;"	m	class:CheckTable
m_num_readers	testers/rubytest/RubyTester.hh	/^    int m_num_readers;$/;"	m	class:RubyTester
m_num_writers	testers/rubytest/Check.hh	/^    int m_num_writers;$/;"	m	class:Check
m_num_writers	testers/rubytest/CheckTable.hh	/^    int m_num_writers;$/;"	m	class:CheckTable
m_num_writers	testers/rubytest/RubyTester.hh	/^    int m_num_writers;$/;"	m	class:RubyTester
m_pc	testers/rubytest/Check.hh	/^    Address m_pc;$/;"	m	class:Check
m_percent_writes	testers/directedtest/SeriesRequestGenerator.hh	/^    uint32_t m_percent_writes;$/;"	m	class:SeriesRequestGenerator
m_requests_completed	testers/directedtest/RubyDirectedTester.hh	/^    uint64 m_requests_completed;$/;"	m	class:RubyDirectedTester
m_requests_to_complete	testers/directedtest/RubyDirectedTester.hh	/^    uint64 m_requests_to_complete;$/;"	m	class:RubyDirectedTester
m_status	testers/directedtest/InvalidateGenerator.hh	/^    InvalidateGeneratorStatus m_status;$/;"	m	class:InvalidateGenerator
m_status	testers/directedtest/SeriesRequestGenerator.hh	/^    SeriesRequestGeneratorStatus m_status;$/;"	m	class:SeriesRequestGenerator
m_status	testers/rubytest/Check.hh	/^    TesterStatus m_status;$/;"	m	class:Check
m_store_count	testers/rubytest/Check.hh	/^    int m_store_count;$/;"	m	class:Check
m_tester_ptr	testers/rubytest/Check.hh	/^    RubyTester* m_tester_ptr;$/;"	m	class:Check
m_tester_ptr	testers/rubytest/CheckTable.hh	/^    RubyTester* m_tester_ptr;$/;"	m	class:CheckTable
m_value	testers/rubytest/Check.hh	/^    uint8_t m_value;$/;"	m	class:Check
m_wakeup_frequency	testers/rubytest/RubyTester.hh	/^    int m_wakeup_frequency;$/;"	m	class:RubyTester
machInst	static_inst.hh	/^    const ExtMachInst machInst;$/;"	m	class:StaticInst
macroop	base_dyn_inst.hh	/^    const StaticInstPtr macroop;$/;"	m	class:BaseDynInst
macroop	o3/fetch.hh	/^    StaticInstPtr macroop[Impl::MaxThreads];$/;"	m	class:DefaultFetch
mainPkt	o3/lsq_unit.hh	/^        PacketPtr mainPkt;$/;"	m	class:LSQUnit::LSQSenderState
mainReq	translation.hh	/^    RequestPtr mainReq;$/;"	m	class:WholeTranslationState
makeFragmentPackets	minor/lsq.cc	/^LSQ::SplitDataRequest::makeFragmentPackets()$/;"	f	class:Minor::LSQ::SplitDataRequest
makeFragmentRequests	minor/lsq.cc	/^LSQ::SplitDataRequest::makeFragmentRequests()$/;"	f	class:Minor::LSQ::SplitDataRequest
makeKvmCpuid	kvm/x86_cpu.cc	/^makeKvmCpuid(uint32_t function, uint32_t index,$/;"	f	file:
makePacket	minor/fetch1.cc	/^Fetch1::FetchRequest::makePacket()$/;"	f	class:Minor::Fetch1::FetchRequest
makePacket	minor/lsq.cc	/^LSQ::LSQRequest::makePacket()$/;"	f	class:Minor::LSQ::LSQRequest
makePacketForRequest	minor/lsq.cc	/^makePacketForRequest(Request &request, bool isLoad,$/;"	f	namespace:Minor
make_rob_half	o3/rob_impl.hh	/^ROB<Impl>::make_rob_half()\/\/lokeshjindal15$/;"	f	class:ROB
map	o3/rename_map.hh	/^    std::vector<PhysRegIndex> map;$/;"	m	class:SimpleRenameMap
map_t	pc_event.hh	/^    typedef std::vector<record_t> map_t;$/;"	t	class:PCEventQueue
markBlockUsed	inorder/resources/fetch_unit.cc	/^FetchUnit::markBlockUsed(std::list<FetchBlock*>::iterator block_it)$/;"	f	class:FetchUnit
markCompletedInsts	o3/commit_impl.hh	/^DefaultCommit<Impl>::markCompletedInsts()$/;"	f	class:DefaultCommit
markDelayed	minor/fetch1.hh	/^        void markDelayed() { }$/;"	f	class:Minor::Fetch1::FetchRequest
markDelayed	minor/lsq.hh	/^        void markDelayed() { }$/;"	f	class:Minor::LSQ::LSQRequest
markDelayed	o3/fetch.hh	/^        markDelayed()$/;"	f	class:DefaultFetch::FetchTranslation
markDelayed	simple/timing.hh	/^        markDelayed()$/;"	f	class:TimingSimpleCPU::FetchTranslation
markDelayed	translation.hh	/^    markDelayed()$/;"	f	class:DataTranslation
markMemInstReady	ozone/dyn_inst_impl.hh	/^OzoneDynInst<Impl>::markMemInstReady(OzoneDynInst<Impl> *inst)$/;"	f	class:OzoneDynInst
markSrcRegReady	base_dyn_inst_impl.hh	/^BaseDynInst<Impl>::markSrcRegReady()$/;"	f	class:BaseDynInst
markSrcRegReady	base_dyn_inst_impl.hh	/^BaseDynInst<Impl>::markSrcRegReady(RegIndex src_idx)$/;"	f	class:BaseDynInst
markSrcRegReady	inorder/inorder_dyn_inst.hh	/^    void markSrcRegReady()$/;"	f	class:InOrderDynInst
markSrcRegReady	inorder/inorder_dyn_inst.hh	/^    void markSrcRegReady(RegIndex src_idx)$/;"	f	class:InOrderDynInst
markupInstDests	minor/scoreboard.cc	/^Scoreboard::markupInstDests(MinorDynInstPtr inst, Cycles retire_time,$/;"	f	class:Minor::Scoreboard
mask	minor/MinorCPU.py	/^    mask = Param.UInt64(0, "mask for testing ExtMachInst")$/;"	v	class:MinorFUTiming
mask	minor/func_unit.hh	/^    uint64_t mask;$/;"	m	class:MinorFUTiming
masterID	testers/traffic_gen/generators.hh	/^    const MasterID masterID;$/;"	m	class:BaseGen
masterID	testers/traffic_gen/traffic_gen.hh	/^    MasterID masterID;$/;"	m	class:TrafficGen
masterId	base_dyn_inst.hh	/^    MasterID masterId() const { return cpu->dataMasterId(); }$/;"	f	class:BaseDynInst
masterId	checker/cpu.hh	/^    MasterID masterId;$/;"	m	class:CheckerCPU
masterId	testers/directedtest/DirectedGenerator.hh	/^    MasterID masterId;$/;"	m	class:DirectedGenerator
masterId	testers/memtest/memtest.hh	/^    MasterID masterId;$/;"	m	class:MemTest
masterId	testers/networktest/networktest.hh	/^    MasterID masterId;$/;"	m	class:NetworkTest
masterId	testers/rubytest/RubyTester.hh	/^    MasterID masterId() { return _masterId; }$/;"	f	class:RubyTester
match	minor/MinorCPU.py	/^    match = Param.UInt64(0, "match value for testing ExtMachInst:"$/;"	v	class:MinorFUTiming
match	minor/func_unit.hh	/^    uint64_t match;$/;"	m	class:MinorFUTiming
maxEntries	o3/inst_queue.hh	/^    unsigned maxEntries[Impl::MaxThreads];$/;"	m	class:InstructionQueue
maxEntries	o3/rob.hh	/^    unsigned maxEntries[Impl::MaxThreads];$/;"	m	class:ROB
maxEntries	ozone/inst_queue.hh	/^    unsigned maxEntries[Impl::MaxThreads];$/;"	m	class:InstQueue
maxInstBufferSize	ozone/OzoneCPU.py	/^    maxInstBufferSize = Param.Unsigned("Maximum instruction buffer size")$/;"	v	class:DerivOzoneCPU
maxInstBufferSize	ozone/SimpleOzoneCPU.py	/^    maxInstBufferSize = Param.Unsigned("Maximum instruction buffer size")$/;"	v	class:SimpleOzoneCPU
maxInstBufferSize	ozone/front_end.hh	/^    int maxInstBufferSize;$/;"	m	class:FrontEnd
maxInstBufferSize	ozone/simple_params.hh	/^    unsigned maxInstBufferSize;$/;"	m	class:SimpleParams
maxIssueLatencies	o3/fu_pool.hh	/^    Cycles maxIssueLatencies[Num_OpClasses];$/;"	m	class:FUPool
maxLQEntries	o3/lsq.hh	/^    unsigned maxLQEntries;$/;"	m	class:LSQ
maxLineWidth	minor/fetch1.hh	/^    unsigned int maxLineWidth;$/;"	m	class:Minor::Fetch1
maxLoads	testers/memtest/memtest.hh	/^    uint64_t maxLoads;$/;"	m	class:MemTest
maxOpLatencies	o3/fu_pool.hh	/^    Cycles maxOpLatencies[Num_OpClasses];$/;"	m	class:FUPool
maxOutstandingMemOps	ozone/OzoneCPU.py	/^    maxOutstandingMemOps = Param.Unsigned("Maximum number of outstanding memory operations")$/;"	v	class:DerivOzoneCPU
maxOutstandingMemOps	ozone/lw_back_end.hh	/^    unsigned maxOutstandingMemOps;$/;"	m	class:LWBackEnd
maxOutstandingMemOps	ozone/simple_params.hh	/^    unsigned maxOutstandingMemOps;$/;"	m	class:SimpleParams
maxPackets	testers/networktest/networktest.hh	/^    int maxPackets;$/;"	m	class:NetworkTest
maxPeriod	testers/traffic_gen/generators.hh	/^    const Tick maxPeriod;$/;"	m	class:LinearGen
maxPeriod	testers/traffic_gen/generators.hh	/^    const Tick maxPeriod;$/;"	m	class:RandomGen
maxPhysicalRegs	o3/rename.hh	/^    PhysRegIndex maxPhysicalRegs;$/;"	m	class:DefaultRename
maxReqCount	inorder/resource.cc	/^int ResourceRequest::maxReqCount = 0;$/;"	m	class:ResourceRequest	file:
maxReqCount	inorder/resource.hh	/^    static int maxReqCount;$/;"	m	class:ResourceRequest
maxSQEntries	o3/lsq.hh	/^    unsigned maxSQEntries;$/;"	m	class:LSQ
maxSeqCountPerRank	testers/traffic_gen/generators.hh	/^    const unsigned int maxSeqCountPerRank;$/;"	m	class:DramRotGen
maxThreadsPerCPU	base.cc	/^int maxThreadsPerCPU = 1;$/;"	v
maxVal	pred/sat_counter.hh	/^    uint8_t maxVal;$/;"	m	class:SatCounter
max_insts_all_threads	BaseCPU.py	/^    max_insts_all_threads = Param.Counter(0,$/;"	v
max_insts_any_thread	BaseCPU.py	/^    max_insts_any_thread = Param.Counter(0,$/;"	v
max_loads	testers/memtest/MemTest.py	/^    max_loads = Param.Counter(0, "number of loads to execute")$/;"	v	class:MemTest
max_loads_all_threads	BaseCPU.py	/^    max_loads_all_threads = Param.Counter(0,$/;"	v
max_loads_any_thread	BaseCPU.py	/^    max_loads_any_thread = Param.Counter(0,$/;"	v
max_packets	testers/networktest/NetworkTest.py	/^    max_packets = Param.Counter(0, "Number of packets to send when in fixed_pkts mode")$/;"	v	class:NetworkTest
mduEvent	inorder/resources/mult_div_unit.hh	/^    MDUEvent *mduEvent;    $/;"	m	class:MultDivUnit
mem	ozone/SimpleOzoneCPU.py	/^    mem = Param.FunctionalMemory(NULL, "memory")$/;"	v	class:SimpleOzoneCPU
memAccComplete	inorder/resources/cache_unit.hh	/^    bool memAccComplete;$/;"	m	class:CacheRequest
memAccInst	static_inst.hh	/^    StaticInstPtr &memAccInst() const { return nullStaticInstPtr; }$/;"	f	class:StaticInst
memAccPending	inorder/resources/cache_unit.hh	/^    bool memAccPending;$/;"	m	class:CacheRequest
memAccess	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::memAccess()$/;"	f	class:InOrderDynInst
memAccess	o3/dyn_inst.hh	/^    Fault memAccess()$/;"	f	class:BaseO3DynInst
memAddr	inorder/inorder_dyn_inst.hh	/^    Addr memAddr;$/;"	m	class:InOrderDynInst
memAddrReady	inorder/inorder_dyn_inst.hh	/^    bool memAddrReady;$/;"	m	class:InOrderDynInst
memAllocCounter	o3/dep_graph.hh	/^    unsigned memAllocCounter;$/;"	m	class:DependencyGraph
memBarrier	ozone/lw_back_end.hh	/^    DynInstPtr memBarrier;$/;"	m	class:LWBackEnd
memBlockSize	inorder/InOrderCPU.py	/^    memBlockSize = Param.Unsigned(64, "Memory Block Size")$/;"	v	class:InOrderCPU
memData	base_dyn_inst.hh	/^    uint8_t *memData;$/;"	m	class:BaseDynInst
memData	inorder/inorder_dyn_inst.hh	/^    uint8_t *memData;$/;"	m	class:InOrderDynInst
memDepHash	o3/mem_dep_unit.hh	/^    MemDepHash memDepHash;$/;"	m	class:MemDepUnit
memDepReady	o3/mem_dep_unit.hh	/^        bool memDepReady;$/;"	m	class:MemDepUnit::MemDepEntry
memDepReady	ozone/dyn_inst.hh	/^    bool memDepReady() { return srcMemInsts.empty(); }$/;"	f	class:OzoneDynInst
memDepUnit	o3/inst_queue.hh	/^    MemDepUnit memDepUnit[Impl::MaxThreads];$/;"	m	class:InstructionQueue
memDepViolator	o3/lsq_unit.hh	/^    DynInstPtr memDepViolator;$/;"	m	class:LSQUnit
memDepViolator	ozone/lsq_unit.hh	/^    DynInstPtr memDepViolator;$/;"	m	class:OzoneLSQ
memDepViolator	ozone/lw_lsq.hh	/^    DynInstPtr memDepViolator;$/;"	m	class:OzoneLWLSQ
memDependents	ozone/dyn_inst.hh	/^    std::vector<DynInstPtr> memDependents;$/;"	m	class:OzoneDynInst
memOpDone	base_dyn_inst.hh	/^    bool memOpDone() const { return instFlags[MemOpDone]; }$/;"	f	class:BaseDynInst
memOpDone	base_dyn_inst.hh	/^    void memOpDone(bool f) { instFlags[MemOpDone] = f; }$/;"	f	class:BaseDynInst
memOpsPred	o3/store_set.hh	/^    int memOpsPred;$/;"	m	class:StoreSet
memOrderViolationEvents	o3/iew.hh	/^    Stats::Scalar memOrderViolationEvents;$/;"	m	class:DefaultIEW
memReq	checker/cpu.hh	/^    RequestPtr memReq;$/;"	m	class:CheckerCPU
memReq	inorder/resources/cache_unit.hh	/^    RequestPtr memReq;$/;"	m	class:CacheReqPacket
memReq	inorder/resources/cache_unit.hh	/^    RequestPtr memReq;$/;"	m	class:CacheRequest
memReq	inorder/resources/tlb_unit.hh	/^    RequestPtr memReq;$/;"	m	class:TLBUnitRequest
memReq	o3/fetch.hh	/^    RequestPtr memReq[Impl::MaxThreads];$/;"	m	class:DefaultFetch
memReq	ozone/back_end.hh	/^    Request *memReq;$/;"	m	class:BackEnd
memReq	ozone/front_end.hh	/^    RequestPtr memReq;$/;"	m	class:FrontEnd
memReq	ozone/inorder_back_end.hh	/^    RequestPtr memReq;$/;"	m	class:InorderBackEnd
memReqFlags	base_dyn_inst.hh	/^    unsigned memReqFlags;$/;"	m	class:BaseDynInst
memReqFlags	inorder/inorder_dyn_inst.hh	/^    unsigned memReqFlags;$/;"	m	class:InOrderDynInst
memStall	inorder/resource.hh	/^    bool memStall;$/;"	m	class:ResourceRequest
memTime	inorder/inorder_dyn_inst.hh	/^    Tick memTime;$/;"	m	class:InOrderDynInst
memWriteback	minor/cpu.cc	/^MinorCPU::memWriteback()$/;"	f	class:MinorCPU
memdep_count	o3/mem_dep_unit.cc	/^MemDepUnit<StoreSet, O3CPUImpl>::MemDepEntry::memdep_count = 0;$/;"	m	class:MemDepUnit::MemDepEntry	file:
memdep_count	o3/mem_dep_unit.hh	/^        static int memdep_count;$/;"	m	class:MemDepUnit::MemDepEntry
memdep_erase	o3/mem_dep_unit.cc	/^MemDepUnit<StoreSet, O3CPUImpl>::MemDepEntry::memdep_erase = 0;$/;"	m	class:MemDepUnit::MemDepEntry	file:
memdep_erase	o3/mem_dep_unit.hh	/^        static int memdep_erase;$/;"	m	class:MemDepUnit::MemDepEntry
memdep_insert	o3/mem_dep_unit.cc	/^MemDepUnit<StoreSet, O3CPUImpl>::MemDepEntry::memdep_insert = 0;$/;"	m	class:MemDepUnit::MemDepEntry	file:
memdep_insert	o3/mem_dep_unit.hh	/^        static int memdep_insert;$/;"	m	class:MemDepUnit::MemDepEntry
memoryCommitLimit	minor/execute.hh	/^    unsigned int memoryCommitLimit;$/;"	m	class:Minor::Execute
memoryIssueLimit	minor/execute.hh	/^    unsigned int memoryIssueLimit;$/;"	m	class:Minor::Execute
memory_mode	BaseCPU.py	/^    def memory_mode(cls):$/;"	f
memory_mode	inorder/InOrderCPU.py	/^    def memory_mode(cls):$/;"	m	class:InOrderCPU
memory_mode	kvm/BaseKvmCPU.py	/^    def memory_mode(cls):$/;"	f
memory_mode	minor/MinorCPU.py	/^    def memory_mode(cls):$/;"	m	class:MinorCPU
memory_mode	o3/O3CPU.py	/^    def memory_mode(cls):$/;"	m	class:DerivO3CPU
memory_mode	simple/AtomicSimpleCPU.py	/^    def memory_mode(cls):$/;"	m	class:AtomicSimpleCPU
memory_mode	simple/TimingSimpleCPU.py	/^    def memory_mode(cls):$/;"	m	class:TimingSimpleCPU
memory_size	testers/memtest/MemTest.py	/^    memory_size = Param.Int(65536, "memory size")$/;"	v	class:MemTest
memory_size	testers/networktest/NetworkTest.py	/^    memory_size = Param.Int(65536, "memory size")$/;"	v	class:NetworkTest
memtest	testers/memtest/memtest.hh	/^        MemTest *memtest;$/;"	m	class:MemTest::CpuPort
microPC	base_dyn_inst.hh	/^    const Addr microPC() const { return pc.microPC(); }$/;"	f	class:BaseDynInst
microPC	checker/cpu.hh	/^    MicroPC microPC() { return thread->microPC(); }$/;"	f	class:CheckerCPU
microPC	checker/thread_context.hh	/^    MicroPC microPC()$/;"	f	class:CheckerThreadContext
microPC	inorder/cpu.hh	/^    MicroPC microPC(ThreadID tid) { return pc[tid].microPC(); }$/;"	f	class:InOrderCPU
microPC	inorder/inorder_dyn_inst.hh	/^    const MicroPC microPC() { return pc.microPC(); }$/;"	f	class:InOrderDynInst
microPC	inorder/thread_context.hh	/^    MicroPC microPC()$/;"	f	class:InOrderThreadContext
microPC	o3/commit.hh	/^    Addr microPC(ThreadID tid) { return pc[tid].microPC(); }$/;"	f	class:DefaultCommit
microPC	o3/cpu.cc	/^FullO3CPU<Impl>::microPC(ThreadID tid)$/;"	f	class:FullO3CPU
microPC	o3/thread_context.hh	/^    virtual MicroPC microPC()$/;"	f	class:O3ThreadContext
microPC	simple/base.hh	/^    MicroPC microPC() { return thread->microPC(); }$/;"	f	class:BaseSimpleCPU
microPC	simple_thread.hh	/^    microPC()$/;"	f	class:SimpleThread
microPC	thread_context.hh	/^    MicroPC microPC() { return actualTC->microPC(); }$/;"	f	class:ProxyThreadContext
microcodeRom	base.hh	/^    TheISA::MicrocodeRom microcodeRom;$/;"	m	class:BaseCPU
microopPC	minor/decode.hh	/^    TheISA::PCState microopPC;$/;"	m	class:Minor::Decode
minPeriod	testers/traffic_gen/generators.hh	/^    const Tick minPeriod;$/;"	m	class:LinearGen
minPeriod	testers/traffic_gen/generators.hh	/^    const Tick minPeriod;$/;"	m	class:RandomGen
minimumCommitCycle	minor/dyn_inst.hh	/^    Cycles minimumCommitCycle;$/;"	m	class:Minor::MinorDynInst
minorMakeOpClassSet	minor/MinorCPU.py	/^def minorMakeOpClassSet(op_classes):$/;"	f
minorTrace	minor/activity.cc	/^MinorActivityRecorder::minorTrace() const$/;"	f	class:Minor::MinorActivityRecorder
minorTrace	minor/buffers.hh	/^    minorTrace() const$/;"	f	class:Minor::InputBuffer
minorTrace	minor/buffers.hh	/^    minorTrace() const$/;"	f	class:Minor::MinorBuffer
minorTrace	minor/buffers.hh	/^    minorTrace() const$/;"	f	class:Minor::Queue
minorTrace	minor/buffers.hh	/^    void minorTrace() const { buffer.minorTrace(); }$/;"	f	class:Minor::Latch
minorTrace	minor/decode.cc	/^Decode::minorTrace() const$/;"	f	class:Minor::Decode
minorTrace	minor/execute.cc	/^Execute::minorTrace() const$/;"	f	class:Minor::Execute
minorTrace	minor/fetch1.cc	/^Fetch1::minorTrace() const$/;"	f	class:Minor::Fetch1
minorTrace	minor/fetch2.cc	/^Fetch2::minorTrace() const$/;"	f	class:Minor::Fetch2
minorTrace	minor/lsq.cc	/^LSQ::StoreBuffer::minorTrace() const$/;"	f	class:Minor::LSQ::StoreBuffer
minorTrace	minor/lsq.cc	/^LSQ::minorTrace() const$/;"	f	class:Minor::LSQ
minorTrace	minor/pipeline.cc	/^Pipeline::minorTrace() const$/;"	f	class:Minor::Pipeline
minorTrace	minor/scoreboard.cc	/^Scoreboard::minorTrace() const$/;"	f	class:Minor::Scoreboard
minorTraceInst	minor/dyn_inst.cc	/^MinorDynInst::minorTraceInst(const Named &named_object) const$/;"	f	class:Minor::MinorDynInst
minorTraceResponseLine	minor/fetch1.cc	/^Fetch1::minorTraceResponseLine(const std::string &name,$/;"	f	class:Minor::Fetch1
miscRegFile	ozone/thread_state.hh	/^    TheISA::MiscRegFile miscRegFile;$/;"	m	struct:OzoneThreadState
miscRegIdxs	checker/cpu.hh	/^    std::queue<int> miscRegIdxs;$/;"	m	class:CheckerCPU
miscRegfileReads	o3/cpu.hh	/^    Stats::Scalar miscRegfileReads;$/;"	m	class:FullO3CPU
miscRegfileWrites	o3/cpu.hh	/^    Stats::Scalar miscRegfileWrites;$/;"	m	class:FullO3CPU
mispredPC	o3/comm.hh	/^        Addr mispredPC;$/;"	m	struct:TimeBufStruct::decodeComm
mispredPC	o3/comm.hh	/^    Addr mispredPC[Impl::MaxThreads];$/;"	m	struct:DefaultIEWDefaultCommit
mispredictInst	o3/comm.hh	/^        DynInstPtr mispredictInst;  \/\/ *F$/;"	m	struct:TimeBufStruct::commitComm
mispredictInst	o3/comm.hh	/^        DynInstPtr mispredictInst;$/;"	m	struct:TimeBufStruct::decodeComm
mispredictInst	o3/comm.hh	/^    DynInstPtr mispredictInst[Impl::MaxThreads];$/;"	m	struct:DefaultIEWDefaultCommit
mispredictPct	inorder/resources/execution_unit.hh	/^    Stats::Formula mispredictPct;$/;"	m	class:ExecutionUnit
mispredicted	base_dyn_inst.hh	/^    bool mispredicted()$/;"	f	class:BaseDynInst
mispredicted	inorder/inorder_dyn_inst.hh	/^    mispredicted()$/;"	f	class:InOrderDynInst
misspeculating	checker/thread_context.hh	/^    bool misspeculating() { return actualTC->misspeculating(); }$/;"	f	class:CheckerThreadContext
misspeculating	inorder/thread_context.hh	/^    bool misspeculating() { return false; }$/;"	f	class:InOrderThreadContext
misspeculating	o3/thread_context.hh	/^    virtual bool misspeculating() { return false; }$/;"	f	class:O3ThreadContext
misspeculating	ozone/cpu.hh	/^        bool misspeculating() { return false; }$/;"	f	class:OzoneCPU::OzoneTC
misspeculating	simple/base.hh	/^    bool misspeculating() { return thread->misspeculating(); }$/;"	f	class:BaseSimpleCPU
misspeculating	simple_thread.hh	/^SimpleThread::misspeculating()$/;"	f	class:SimpleThread
misspeculating	thread_context.hh	/^    bool misspeculating() { return actualTC->misspeculating(); }$/;"	f	class:ProxyThreadContext
mmapPerf	kvm/perfevent.cc	/^PerfKvmCounter::mmapPerf(int pages)$/;"	f	class:PerfKvmCounter
mmioRing	kvm/base.hh	/^    struct kvm_coalesced_mmio_ring *mmioRing;$/;"	m	class:BaseKvmCPU	typeref:struct:BaseKvmCPU::kvm_coalesced_mmio_ring
mmio_req	kvm/base.hh	/^    Request mmio_req;$/;"	m	class:BaseKvmCPU
mnemonic	static_inst.hh	/^    const char *mnemonic;$/;"	m	class:StaticInst
mode	translation.hh	/^    BaseTLB::Mode mode;$/;"	m	class:WholeTranslationState
moveFromRequestsToTransfers	minor/fetch1.cc	/^Fetch1::moveFromRequestsToTransfers(FetchRequestPtr request)$/;"	f	class:Minor::Fetch1
moveFromRequestsToTransfers	minor/lsq.cc	/^LSQ::moveFromRequestsToTransfers(LSQRequestPtr request)$/;"	f	class:Minor::LSQ
moveToReady	o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::moveToReady(MemDepEntryPtr &woken_inst_entry)$/;"	f	class:MemDepUnit
moveToYoungerInst	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::moveToYoungerInst(ListOrderIt list_order_it)$/;"	f	class:InstructionQueue
multLatency	inorder/InOrderCPU.py	/^    multLatency = Param.Cycles(1, "Latency for Multiply Operations")$/;"	v	class:InOrderCPU
multLatency	inorder/resources/mult_div_unit.hh	/^    Cycles multLatency;$/;"	m	class:MultDivUnit
multRepeatRate	inorder/InOrderCPU.py	/^    multRepeatRate = Param.Cycles(1, "Repeat Rate for Multiply Operations")$/;"	v	class:InOrderCPU
multRepeatRate	inorder/resources/mult_div_unit.hh	/^    unsigned multRepeatRate;$/;"	m	class:MultDivUnit
multiplies	inorder/resources/mult_div_unit.hh	/^    Stats::Scalar multiplies;$/;"	m	class:MultDivUnit
mxcsr	kvm/x86_cpu.cc	/^    uint32_t mxcsr;$/;"	m	struct:FXSave	file:
mxcsr_mask	kvm/x86_cpu.cc	/^    uint32_t mxcsr_mask;$/;"	m	struct:FXSave	file:
myIt	inorder/resource_sked.hh	/^    ResourceSked::SkedIt myIt;$/;"	m	class:RSkedIt
nCommittedDist	ozone/lw_back_end.hh	/^    Stats::Distribution nCommittedDist;$/;"	m	class:LWBackEnd
nIssuedDist	ozone/lw_back_end.hh	/^    Stats::Vector nIssuedDist;$/;"	m	class:LWBackEnd
n_committed_dist	ozone/back_end.hh	/^    Stats::Distribution n_committed_dist;$/;"	m	class:BackEnd
n_issued_dist	ozone/back_end.hh	/^    Stats::Vector n_issued_dist;$/;"	m	class:BackEnd
name	activity.hh	/^    const std::string &name() const { return _name; }$/;"	f	class:ActivityRecorder
name	func_unit.hh	/^    std::string name;$/;"	m	class:FuncUnit
name	inorder/pipeline_stage.cc	/^PipelineStage::name() const$/;"	f	class:PipelineStage
name	inorder/reg_dep_map.cc	/^RegDepMap::name()$/;"	f	class:RegDepMap
name	inorder/resource.cc	/^Resource::name()$/;"	f	class:Resource
name	inorder/resource.cc	/^ResourceRequest::name()$/;"	f	class:ResourceRequest
name	inorder/resource_pool.9stage.cc	/^ResourcePool::name()$/;"	f	class:ResourcePool
name	inorder/resource_pool.cc	/^ResourcePool::name()$/;"	f	class:ResourcePool
name	inorder/resource_pool.hh	/^    std::string name(int res_idx) { return resources[res_idx]->name(); }$/;"	f	class:ResourcePool
name	inorder/resources/cache_unit.hh	/^    const std::string name() const$/;"	f	class:CacheUnitEvent
name	kvm/arm_cpu.hh	/^        const char *name;$/;"	m	struct:ArmKvmCPU::KvmCoreMiscRegInfo
name	kvm/arm_cpu.hh	/^        const char *name;$/;"	m	struct:ArmKvmCPU::KvmIntRegInfo
name	o3/commit_impl.hh	/^DefaultCommit<Impl>::name() const$/;"	f	class:DefaultCommit
name	o3/decode_impl.hh	/^DefaultDecode<Impl>::name() const$/;"	f	class:DefaultDecode
name	o3/fetch_impl.hh	/^DefaultFetch<Impl>::name() const$/;"	f	class:DefaultFetch
name	o3/free_list.hh	/^    std::string name() const { return _name; };$/;"	f	class:UnifiedFreeList
name	o3/iew_impl.hh	/^DefaultIEW<Impl>::name() const$/;"	f	class:DefaultIEW
name	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::name() const$/;"	f	class:InstructionQueue
name	o3/lsq_impl.hh	/^LSQ<Impl>::name() const$/;"	f	class:LSQ
name	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::name() const$/;"	f	class:LSQUnit
name	o3/mem_dep_unit.hh	/^        std::string name() const { return "memdepentry"; }$/;"	f	class:MemDepUnit::MemDepEntry
name	o3/mem_dep_unit.hh	/^    std::string name() const { return _name; }$/;"	f	class:MemDepUnit
name	o3/probe/simple_trace.hh	/^    const std::string name() const { return ProbeListenerObject::name() + ".trace"; }$/;"	f	class:SimpleTrace
name	o3/rename_impl.hh	/^DefaultRename<Impl>::name() const$/;"	f	class:DefaultRename
name	o3/rob_impl.hh	/^ROB<Impl>::name() const$/;"	f	class:ROB
name	o3/scoreboard.hh	/^    std::string name() const { return _name; };$/;"	f	class:Scoreboard
name	ozone/back_end_impl.hh	/^BackEnd<Impl>::InstQueue::name() const$/;"	f	class:BackEnd::InstQueue
name	ozone/back_end_impl.hh	/^BackEnd<Impl>::name() const$/;"	f	class:BackEnd
name	ozone/front_end_impl.hh	/^FrontEnd<Impl>::name() const$/;"	f	class:FrontEnd
name	ozone/inorder_back_end_impl.hh	/^InorderBackEnd<Impl>::name() const$/;"	f	class:InorderBackEnd
name	ozone/inst_queue_impl.hh	/^InstQueue<Impl>::name() const$/;"	f	class:InstQueue
name	ozone/lsq_unit_impl.hh	/^OzoneLSQ<Impl>::name() const$/;"	f	class:OzoneLSQ
name	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::name() const$/;"	f	class:LWBackEnd
name	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::name() const$/;"	f	class:OzoneLWLSQ
name	pc_event.hh	/^    virtual const std::string name() const { return description; }$/;"	f	class:PCEvent
name	simple_thread.hh	/^    std::string name() const$/;"	f	class:SimpleThread
name	testers/traffic_gen/generators.hh	/^    std::string name() const { return _name; }$/;"	f	class:BaseGen
native_listener	nativetrace.hh	/^    ListenSocket native_listener;$/;"	m	class:Trace::NativeTrace
nbrOfBanksDRAM	testers/traffic_gen/generators.hh	/^    const unsigned int nbrOfBanksDRAM;$/;"	m	class:DramGen
nbrOfBanksUtil	testers/traffic_gen/generators.hh	/^    const unsigned int nbrOfBanksUtil;$/;"	m	class:DramGen
nbrOfRanks	testers/traffic_gen/generators.hh	/^    const unsigned int nbrOfRanks;$/;"	m	class:DramGen
needToSignalDrained	minor/pipeline.hh	/^    bool needToSignalDrained;$/;"	m	class:Minor::Pipeline
needs	inorder/cpu.hh	/^        void needs(int unit, int request) {$/;"	f	class:InOrderCPU::StageScheduler
needs	inorder/cpu.hh	/^        void needs(int unit, int request, int param) {$/;"	f	class:InOrderCPU::StageScheduler
needsTSO	o3/O3CPU.py	/^    needsTSO = Param.Bool(buildEnv['TARGET_ISA'] == 'x86',$/;"	v	class:DerivO3CPU
needsTSO	o3/lsq_unit.hh	/^    bool needsTSO;$/;"	m	class:LSQUnit
needsToBeSentToStoreBuffer	minor/lsq.cc	/^LSQ::LSQRequest::needsToBeSentToStoreBuffer()$/;"	f	class:Minor::LSQ::LSQRequest
needsToTick	minor/lsq.cc	/^LSQ::needsToTick()$/;"	f	class:Minor::LSQ
networktest	testers/networktest/networktest.hh	/^        NetworkTest *networktest;$/;"	m	class:NetworkTest::CpuPort
newCount	pred/tournament.cc	/^TournamentBP::BPHistory::newCount = 0;$/;"	m	class:TournamentBP::BPHistory	file:
newCount	pred/tournament.hh	/^        static int newCount;$/;"	m	struct:TournamentBP::BPHistory
newPCState	checker/cpu.hh	/^    TheISA::PCState newPCState;$/;"	m	class:CheckerCPU
newPhysReg	o3/rename.hh	/^        PhysRegIndex newPhysReg;$/;"	m	struct:DefaultRename::RenameHistory
newPredictionSeqNum	minor/pipe_data.hh	/^    InstSeqNum newPredictionSeqNum;$/;"	m	class:Minor::BranchData
newStreamSeqNum	minor/pipe_data.hh	/^    InstSeqNum newStreamSeqNum;$/;"	m	class:Minor::BranchData
newVarStruct	kvm/x86_cpu.cc	/^static STRUCT *newVarStruct(size_t entries)$/;"	f	file:
new_cycle_count	m5legion_interface.h	/^    uint64_t new_cycle_count;$/;"	m	struct:__anon8
new_instruction	m5legion_interface.h	/^    uint32_t new_instruction;$/;"	m	struct:__anon8
new_pc	m5legion_interface.h	/^    uint64_t new_pc;$/;"	m	struct:__anon8
next	o3/dep_graph.hh	/^    DependencyEntry<DynInstPtr> *next;$/;"	m	class:DependencyEntry
nextAddr	testers/traffic_gen/generators.hh	/^    Addr nextAddr;$/;"	m	class:LinearGen
nextElement	testers/traffic_gen/generators.hh	/^    TraceElement nextElement;$/;"	m	class:TraceGen
nextInsertCycle	minor/func_unit.hh	/^    Cycles nextInsertCycle;$/;"	m	class:Minor::FUPipeline
nextInstAddr	base_dyn_inst.hh	/^    const Addr nextInstAddr() const { return pc.nextInstAddr(); }$/;"	f	class:BaseDynInst
nextInstAddr	checker/cpu.hh	/^    Addr nextInstAddr() { return thread->nextInstAddr(); }$/;"	f	class:CheckerCPU
nextInstAddr	checker/thread_context.hh	/^    Addr nextInstAddr()$/;"	f	class:CheckerThreadContext
nextInstAddr	inorder/cpu.hh	/^    Addr nextInstAddr(ThreadID tid) { return pc[tid].nextInstAddr(); }$/;"	f	class:InOrderCPU
nextInstAddr	inorder/inorder_dyn_inst.hh	/^    const Addr nextInstAddr() { return pc.nextInstAddr(); }$/;"	f	class:InOrderDynInst
nextInstAddr	inorder/thread_context.hh	/^    Addr nextInstAddr()$/;"	f	class:InOrderThreadContext
nextInstAddr	o3/commit.hh	/^    Addr nextInstAddr(ThreadID tid) { return pc[tid].nextInstAddr(); }$/;"	f	class:DefaultCommit
nextInstAddr	o3/cpu.cc	/^FullO3CPU<Impl>::nextInstAddr(ThreadID tid)$/;"	f	class:FullO3CPU
nextInstAddr	o3/thread_context.hh	/^    virtual Addr nextInstAddr()$/;"	f	class:O3ThreadContext
nextInstAddr	simple/base.hh	/^    Addr nextInstAddr() { return thread->nextInstAddr(); }$/;"	f	class:BaseSimpleCPU
nextInstAddr	simple_thread.hh	/^    nextInstAddr()$/;"	f	class:SimpleThread
nextInstAddr	thread_context.hh	/^    Addr nextInstAddr() { return actualTC->nextInstAddr(); }$/;"	f	class:ProxyThreadContext
nextInstSeqNum	inorder/cpu.hh	/^    InstSeqNum nextInstSeqNum(ThreadID tid)$/;"	f	class:InOrderCPU
nextPC	o3/comm.hh	/^        TheISA::PCState nextPC;$/;"	m	struct:TimeBufStruct::decodeComm
nextPC	ozone/front_end.hh	/^    Addr nextPC;$/;"	m	class:FrontEnd
nextPC	ozone/null_predictor.hh	/^        Addr nextPC;$/;"	m	struct:NullPredictor::BPredInfo
nextPC	ozone/thread_state.hh	/^    Addr nextPC;$/;"	m	struct:OzoneThreadState
nextPacketTick	testers/traffic_gen/generators.cc	/^LinearGen::nextPacketTick(bool elastic, Tick delay) const$/;"	f	class:LinearGen
nextPacketTick	testers/traffic_gen/generators.cc	/^RandomGen::nextPacketTick(bool elastic, Tick delay) const$/;"	f	class:RandomGen
nextPacketTick	testers/traffic_gen/generators.cc	/^TraceGen::nextPacketTick(bool elastic, Tick delay) const$/;"	f	class:TraceGen
nextPacketTick	testers/traffic_gen/generators.hh	/^    Tick nextPacketTick(bool elastic, Tick delay) const { return MaxTick; }$/;"	f	class:IdleGen
nextPacketTick	testers/traffic_gen/traffic_gen.hh	/^    Tick nextPacketTick;$/;"	m	class:TrafficGen
nextProgressMessage	testers/memtest/memtest.hh	/^    Tick nextProgressMessage;   \/\/ access # for next progress report$/;"	m	class:MemTest
nextResStage	inorder/inorder_dyn_inst.hh	/^    int nextResStage()$/;"	f	class:InOrderDynInst
nextResource	inorder/inorder_dyn_inst.hh	/^    int nextResource()$/;"	f	class:InOrderDynInst
nextSeqCount	testers/traffic_gen/generators.hh	/^    unsigned int nextSeqCount;$/;"	m	class:DramRotGen
nextStage	inorder/inorder_dyn_inst.hh	/^    int nextStage;$/;"	m	class:InOrderDynInst
nextStage	inorder/pipeline_stage.hh	/^    TimeBuffer<InterStageStruct>::wire nextStage;$/;"	m	class:PipelineStage
nextStageQueue	inorder/pipeline_stage.hh	/^    TimeBuffer<InterStageStruct> *nextStageQueue;$/;"	m	class:PipelineStage
nextStageQueueValid	inorder/pipeline_stage.cc	/^PipelineStage::nextStageQueueValid(int stage_num)$/;"	f	class:PipelineStage
nextStageReserve	minor/decode.hh	/^    Reservable &nextStageReserve;$/;"	m	class:Minor::Decode
nextStageReserve	minor/fetch1.hh	/^    Reservable &nextStageReserve;$/;"	m	class:Minor::Fetch1
nextStageReserve	minor/fetch2.hh	/^    Reservable &nextStageReserve;$/;"	m	class:Minor::Fetch2
nextStageValid	inorder/pipeline_stage.hh	/^    bool nextStageValid;$/;"	m	class:PipelineStage
nextTaskPriority	inorder/cpu.hh	/^        int nextTaskPriority;$/;"	m	class:InOrderCPU::StageScheduler
nextTransitionTick	testers/traffic_gen/traffic_gen.hh	/^    Tick nextTransitionTick;$/;"	m	class:TrafficGen
nextVCPUID	kvm/vm.hh	/^    long nextVCPUID;$/;"	m	class:KvmVM
noCostFUIndex	minor/execute.hh	/^    unsigned int noCostFUIndex;$/;"	m	class:Minor::Execute
noResponseCycles	testers/memtest/memtest.hh	/^    Tick noResponseCycles;$/;"	m	class:MemTest
noResponseCycles	testers/networktest/networktest.hh	/^    Tick noResponseCycles;$/;"	m	class:NetworkTest
noSquashFromTC	inorder/thread_state.hh	/^    bool noSquashFromTC;$/;"	m	class:InOrderThreadState
noSquashFromTC	o3/thread_state.hh	/^    bool noSquashFromTC;$/;"	m	struct:O3ThreadState
noSquashFromTC	ozone/thread_state.hh	/^    bool noSquashFromTC;$/;"	m	struct:OzoneThreadState
noWB	o3/lsq_unit.hh	/^        bool noWB;$/;"	m	class:LSQUnit::LSQSenderState
noWB	ozone/lw_lsq.hh	/^        bool noWB;$/;"	m	class:OzoneLWLSQ::LSQSenderState
nodesRemoved	o3/dep_graph.hh	/^    uint64_t nodesRemoved;$/;"	m	class:DependencyGraph
nodesTraversed	o3/dep_graph.hh	/^    uint64_t nodesTraversed;$/;"	m	class:DependencyGraph
nonSpec	ozone/back_end.hh	/^        InstList nonSpec;$/;"	m	class:BackEnd::InstQueue
nonSpecInstActive	inorder/cpu.hh	/^    bool nonSpecInstActive[ThePipeline::MaxThreads];$/;"	m	class:InOrderCPU
nonSpecInstActive	inorder/resources/graduation_unit.hh	/^    bool *nonSpecInstActive[ThePipeline::MaxThreads];$/;"	m	class:GraduationUnit
nonSpecInstActive	inorder/resources/mem_dep_unit.hh	/^   bool *nonSpecInstActive[ThePipeline::MaxThreads];$/;"	m	class:MemDepUnit
nonSpecInstActive	inorder/resources/use_def.hh	/^    bool *nonSpecInstActive[ThePipeline::MaxThreads];$/;"	m	class:UseDefUnit
nonSpecInstReady	o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::nonSpecInstReady(DynInstPtr &inst)$/;"	f	class:MemDepUnit
nonSpecInsts	o3/inst_queue.hh	/^    std::map<InstSeqNum, DynInstPtr> nonSpecInsts;$/;"	m	class:InstructionQueue
nonSpecInsts	ozone/inst_queue.hh	/^    std::map<InstSeqNum, DynInstPtr> nonSpecInsts;$/;"	m	class:InstQueue
nonSpecSeqNum	inorder/cpu.hh	/^    InstSeqNum nonSpecSeqNum[ThePipeline::MaxThreads];$/;"	m	class:InOrderCPU
nonSpecSeqNum	inorder/resources/graduation_unit.hh	/^    InstSeqNum *nonSpecSeqNum[ThePipeline::MaxThreads];$/;"	m	class:GraduationUnit
nonSpecSeqNum	inorder/resources/mem_dep_unit.hh	/^    InstSeqNum *nonSpecSeqNum[ThePipeline::MaxThreads];$/;"	m	class:MemDepUnit
nonSpecSeqNum	inorder/resources/use_def.hh	/^    InstSeqNum *nonSpecSeqNum[ThePipeline::MaxThreads];$/;"	m	class:UseDefUnit
nonSpecSeqNum	o3/comm.hh	/^        InstSeqNum nonSpecSeqNum; \/\/ *I$/;"	m	struct:TimeBufStruct::commitComm
nonSpecSeqNum	ozone/cpu.hh	/^        InstSeqNum nonSpecSeqNum;$/;"	m	struct:OzoneCPU::CommStruct
notIdleFraction	ozone/cpu.hh	/^    Stats::Average notIdleFraction;$/;"	m	class:OzoneCPU
notIdleFraction	simple/base.hh	/^    Stats::Average notIdleFraction;$/;"	m	class:BaseSimpleCPU
notTakenCounters	pred/bi_mode.hh	/^    std::vector<SatCounter> notTakenCounters;$/;"	m	class:BiModeBP
notTakenPred	pred/bi_mode.hh	/^        bool notTakenPred;$/;"	m	struct:BiModeBP::BPHistory
notTakenThreshold	pred/bi_mode.hh	/^    unsigned notTakenThreshold;$/;"	m	class:BiModeBP
nullStaticInstPtr	static_inst.cc	/^StaticInstPtr StaticInst::nullStaticInstPtr;$/;"	m	class:StaticInst	file:
nullStaticInstPtr	static_inst.hh	/^    static StaticInstPtr nullStaticInstPtr;$/;"	m	class:StaticInst
numAccessesInDTLB	minor/lsq.hh	/^    unsigned int numAccessesInDTLB;$/;"	m	class:Minor::LSQ
numAccessesInMemorySystem	minor/lsq.hh	/^    unsigned int numAccessesInMemorySystem;$/;"	m	class:Minor::LSQ
numAccessesIssuedToMemory	minor/lsq.hh	/^    unsigned int numAccessesIssuedToMemory;$/;"	m	class:Minor::LSQ
numActiveThreads	inorder/cpu.hh	/^    ThreadID numActiveThreads() { return activeThreads.size(); }$/;"	f	class:InOrderCPU
numActiveThreads	o3/cpu.hh	/^    int numActiveThreads()$/;"	f	class:FullO3CPU
numBranchMispred	simple/base.hh	/^    Stats::Scalar numBranchMispred;$/;"	m	class:BaseSimpleCPU
numBranches	simple/base.hh	/^    Stats::Scalar numBranches;$/;"	m	class:BaseSimpleCPU
numBusyCycles	simple/base.hh	/^    Stats::Formula numBusyCycles;$/;"	m	class:BaseSimpleCPU
numCCPhysRegs	o3/regfile.hh	/^    unsigned numCCPhysRegs() const$/;"	f	class:PhysRegFile
numCCRegReads	simple/base.hh	/^    Stats::Scalar numCCRegReads;$/;"	m	class:BaseSimpleCPU
numCCRegWrites	simple/base.hh	/^    Stats::Scalar numCCRegWrites;$/;"	m	class:BaseSimpleCPU
numCallsReturns	simple/base.hh	/^    Stats::Scalar numCallsReturns;$/;"	m	class:BaseSimpleCPU
numCoalescedMMIO	kvm/base.hh	/^    Stats::Scalar numCoalescedMMIO;$/;"	m	class:BaseKvmCPU
numCommittedDist	o3/commit.hh	/^    Stats::Distribution numCommittedDist;$/;"	m	class:DefaultCommit
numCondCtrlInsts	simple/base.hh	/^    Stats::Scalar numCondCtrlInsts;$/;"	m	class:BaseSimpleCPU
numContexts	base.hh	/^   unsigned numContexts() { return threadContexts.size(); }$/;"	f	class:BaseCPU
numCopiesStat	testers/memtest/memtest.hh	/^    Stats::Scalar numCopiesStat;$/;"	m	class:MemTest
numCtxtSwitches	inorder/cpu.hh	/^    Stats::Scalar numCtxtSwitches;$/;"	m	class:InOrderCPU
numCycleGrad	inorder/resources/mem_dep_unit.hh	/^    int numCycleGrad;$/;"	m	class:MemDepUnit
numCycles	base.hh	/^    Stats::Scalar numCycles;$/;"	m	class:BaseCPU
numDestRegs	base_dyn_inst.hh	/^    int8_t numDestRegs() const { return staticInst->numDestRegs(); }$/;"	f	class:BaseDynInst
numDestRegs	inorder/inorder_dyn_inst.hh	/^    int8_t numDestRegs() const { return staticInst->numDestRegs(); }$/;"	f	class:InOrderDynInst
numDestRegs	static_inst.hh	/^    int8_t numDestRegs() const { return _numDestRegs; }$/;"	f	class:StaticInst
numDiscardedOps	minor/stats.hh	/^    Stats::Scalar numDiscardedOps;$/;"	m	class:Minor::MinorStats
numDispatchEntries	ozone/back_end.hh	/^    int numDispatchEntries;$/;"	m	class:BackEnd
numEntries	o3/dep_graph.hh	/^    int numEntries;$/;"	m	class:DependencyGraph
numEntries	o3/inst_queue.hh	/^    unsigned numEntries;$/;"	m	class:InstructionQueue
numEntries	o3/rob.hh	/^    unsigned numEntries;$/;"	m	class:ROB
numEntries	ozone/inst_queue.hh	/^    unsigned numEntries;$/;"	m	class:InstQueue
numEntries	pred/btb.hh	/^    unsigned numEntries;$/;"	m	class:DefaultBTB
numEntries	pred/ras.hh	/^    unsigned numEntries;$/;"	m	class:ReturnAddrStack
numExitSignal	kvm/base.hh	/^    Stats::Scalar numExitSignal;$/;"	m	class:BaseKvmCPU
numFPDestRegs	base_dyn_inst.hh	/^    int8_t numFPDestRegs()  const { return staticInst->numFPDestRegs(); }$/;"	f	class:BaseDynInst
numFPDestRegs	inorder/inorder_dyn_inst.hh	/^    int8_t numFPDestRegs()  const { return staticInst->numFPDestRegs(); }$/;"	f	class:InOrderDynInst
numFPDestRegs	static_inst.hh	/^    int8_t numFPDestRegs()  const { return _numFPDestRegs; }$/;"	f	class:StaticInst
numFU	o3/fu_pool.hh	/^    int numFU;$/;"	m	class:FUPool
numFetchSuspends	minor/stats.hh	/^    Stats::Scalar numFetchSuspends;$/;"	m	class:Minor::MinorStats
numFetchesInITLB	minor/fetch1.hh	/^    unsigned int numFetchesInITLB;$/;"	m	class:Minor::Fetch1
numFetchesInMemorySystem	minor/fetch1.hh	/^    unsigned int numFetchesInMemorySystem;$/;"	m	class:Minor::Fetch1
numFetchingThreads	inorder/first_stage.hh	/^    int numFetchingThreads;$/;"	m	class:FirstStage
numFetchingThreads	o3/fetch.hh	/^    ThreadID numFetchingThreads;$/;"	m	class:DefaultFetch
numFloatPhysRegs	o3/regfile.hh	/^    unsigned numFloatPhysRegs() const$/;"	f	class:PhysRegFile
numFpAluAccesses	simple/base.hh	/^    Stats::Scalar numFpAluAccesses;$/;"	m	class:BaseSimpleCPU
numFpInsts	simple/base.hh	/^    Stats::Scalar numFpInsts;$/;"	m	class:BaseSimpleCPU
numFpRegReads	simple/base.hh	/^    Stats::Scalar numFpRegReads;$/;"	m	class:BaseSimpleCPU
numFpRegWrites	simple/base.hh	/^    Stats::Scalar numFpRegWrites;$/;"	m	class:BaseSimpleCPU
numFragments	minor/lsq.hh	/^        unsigned int numFragments;$/;"	m	class:Minor::LSQ::SplitDataRequest
numFreeCCRegs	o3/free_list.hh	/^    unsigned numFreeCCRegs() const { return ccList.numFreeRegs(); }$/;"	f	class:UnifiedFreeList
numFreeEntries	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::numFreeEntries()$/;"	f	class:InstructionQueue
numFreeEntries	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::numFreeEntries(ThreadID tid)$/;"	f	class:InstructionQueue
numFreeEntries	o3/rename_map.hh	/^    unsigned numFreeEntries() const { return freeList->numFreeRegs(); }$/;"	f	class:SimpleRenameMap
numFreeEntries	o3/rename_map.hh	/^    unsigned numFreeEntries() const$/;"	f	class:UnifiedRenameMap
numFreeEntries	o3/rob_impl.hh	/^ROB<Impl>::numFreeEntries()$/;"	f	class:ROB
numFreeEntries	o3/rob_impl.hh	/^ROB<Impl>::numFreeEntries(ThreadID tid)$/;"	f	class:ROB
numFreeEntries	ozone/inst_queue_impl.hh	/^InstQueue<Impl>::numFreeEntries()$/;"	f	class:InstQueue
numFreeEntries	ozone/inst_queue_impl.hh	/^InstQueue<Impl>::numFreeEntries(ThreadID tid)$/;"	f	class:InstQueue
numFreeEntries	ozone/lsq_unit_impl.hh	/^OzoneLSQ<Impl>::numFreeEntries()$/;"	f	class:OzoneLSQ
numFreeEntries	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::numFreeEntries()$/;"	f	class:OzoneLWLSQ
numFreeFloatRegs	o3/free_list.hh	/^    unsigned numFreeFloatRegs() const { return floatList.numFreeRegs(); }$/;"	f	class:UnifiedFreeList
numFreeIntRegs	o3/free_list.hh	/^    unsigned numFreeIntRegs() const { return intList.numFreeRegs(); }$/;"	f	class:UnifiedFreeList
numFreeLoadEntries	o3/lsq_impl.hh	/^LSQ<Impl>::numFreeLoadEntries()$/;"	f	class:LSQ
numFreeLoadEntries	o3/lsq_impl.hh	/^LSQ<Impl>::numFreeLoadEntries(ThreadID tid)$/;"	f	class:LSQ
numFreeLoadEntries	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::numFreeLoadEntries()$/;"	f	class:LSQUnit
numFreeRegs	o3/free_list.hh	/^    unsigned numFreeRegs() const { return freeRegs.size(); }$/;"	f	class:SimpleFreeList
numFreeStoreEntries	o3/lsq_impl.hh	/^LSQ<Impl>::numFreeStoreEntries()$/;"	f	class:LSQ
numFreeStoreEntries	o3/lsq_impl.hh	/^LSQ<Impl>::numFreeStoreEntries(ThreadID tid)$/;"	f	class:LSQ
numFreeStoreEntries	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::numFreeStoreEntries()$/;"	f	class:LSQUnit
numFuncUnits	minor/execute.hh	/^    unsigned int numFuncUnits;$/;"	m	class:Minor::Execute
numHalt	kvm/base.hh	/^    Stats::Scalar numHalt;$/;"	m	class:BaseKvmCPU
numHypercalls	kvm/base.hh	/^    Stats::Scalar numHypercalls;$/;"	m	class:BaseKvmCPU
numIO	kvm/base.hh	/^    Stats::Scalar numIO;$/;"	m	class:BaseKvmCPU
numIQEntries	o3/O3CPU.py	/^    numIQEntries = Param.Unsigned(64, "Number of instruction queue entries")$/;"	v	class:DerivO3CPU
numIQEntries	ozone/OzoneCPU.py	/^    numIQEntries = Param.Unsigned("Number of instruction queue entries")$/;"	v	class:DerivOzoneCPU
numIQEntries	ozone/SimpleOzoneCPU.py	/^    numIQEntries = Param.Unsigned("Number of instruction queue entries")$/;"	v	class:SimpleOzoneCPU
numIQEntries	ozone/simple_params.hh	/^    unsigned numIQEntries;$/;"	m	class:SimpleParams
numIdleCycles	simple/base.hh	/^    Stats::Formula numIdleCycles;$/;"	m	class:BaseSimpleCPU
numInFlightFetches	minor/fetch1.cc	/^Fetch1::numInFlightFetches()$/;"	f	class:Minor::Fetch1
numInTranslationFragments	minor/lsq.hh	/^        unsigned int numInTranslationFragments;$/;"	m	class:Minor::LSQ::SplitDataRequest
numInst	checker/cpu.hh	/^    Counter numInst;$/;"	m	class:CheckerCPU
numInst	o3/fetch.hh	/^    int numInst;$/;"	m	class:DefaultFetch
numInst	ozone/cpu.hh	/^    Counter numInst;$/;"	m	class:OzoneCPU
numInst	simple/base.hh	/^    Counter numInst;$/;"	m	class:BaseSimpleCPU
numInst	thread_state.hh	/^    Counter numInst;$/;"	m	struct:ThreadState
numInsts	kvm/base.hh	/^    Stats::Scalar numInsts;$/;"	m	class:BaseKvmCPU
numInsts	minor/pipe_data.hh	/^    unsigned int numInsts;$/;"	m	class:Minor::ForwardInstData
numInsts	minor/stats.hh	/^    Stats::Scalar numInsts;$/;"	m	class:Minor::MinorStats
numInsts	ozone/back_end.hh	/^        int numInsts;$/;"	m	class:BackEnd::InstQueue
numInsts	ozone/back_end.hh	/^    int numInsts;$/;"	m	class:BackEnd
numInsts	ozone/lw_back_end.hh	/^    int numInsts;$/;"	m	class:LWBackEnd
numInsts	simple/base.hh	/^    Stats::Scalar numInsts;$/;"	m	class:BaseSimpleCPU
numInsts	thread_state.hh	/^    Stats::Scalar numInsts;$/;"	m	struct:ThreadState
numInstsInROB	o3/rob.hh	/^    int numInstsInROB;$/;"	m	class:ROB
numInstsReady	ozone/front_end.hh	/^    TimeBuffer<int> numInstsReady;$/;"	m	class:FrontEnd
numInstsToWB	ozone/back_end.hh	/^    TimeBuffer<Writeback> numInstsToWB;$/;"	m	class:BackEnd
numInstsToWB	ozone/inorder_back_end.hh	/^    TimeBuffer<int> numInstsToWB;$/;"	m	class:InorderBackEnd
numInstsToWB	ozone/lw_back_end.hh	/^    TimeBuffer<int> numInstsToWB;$/;"	m	class:LWBackEnd
numIntAluAccesses	simple/base.hh	/^    Stats::Scalar numIntAluAccesses;$/;"	m	class:BaseSimpleCPU
numIntDestRegs	base_dyn_inst.hh	/^    int8_t numIntDestRegs() const { return staticInst->numIntDestRegs(); }$/;"	f	class:BaseDynInst
numIntDestRegs	inorder/inorder_dyn_inst.hh	/^    int8_t numIntDestRegs() const { return staticInst->numIntDestRegs(); }$/;"	f	class:InOrderDynInst
numIntDestRegs	static_inst.hh	/^    int8_t numIntDestRegs() const { return _numIntDestRegs; }$/;"	f	class:StaticInst
numIntInsts	simple/base.hh	/^    Stats::Scalar numIntInsts;$/;"	m	class:BaseSimpleCPU
numIntPhysRegs	o3/regfile.hh	/^    unsigned numIntPhysRegs() const { return baseFloatRegIndex; }$/;"	f	class:PhysRegFile
numIntRegReads	simple/base.hh	/^    Stats::Scalar numIntRegReads;$/;"	m	class:BaseSimpleCPU
numIntRegWrites	simple/base.hh	/^    Stats::Scalar numIntRegWrites;$/;"	m	class:BaseSimpleCPU
numInterrupts	kvm/base.hh	/^    Stats::Scalar numInterrupts;$/;"	m	class:BaseKvmCPU
numIssued	ozone/back_end.hh	/^        typename TimeBuffer<IssueToExec>::wire numIssued;$/;"	m	class:BackEnd::InstQueue
numIssuedDist	o3/inst_queue.hh	/^    Stats::Distribution numIssuedDist;$/;"	m	class:InstructionQueue
numIssuedFragments	minor/lsq.hh	/^        unsigned int numIssuedFragments;$/;"	m	class:Minor::LSQ::SplitDataRequest
numLoad	checker/cpu.hh	/^    Counter numLoad;$/;"	m	class:CheckerCPU
numLoad	ozone/cpu.hh	/^    Counter numLoad;$/;"	m	class:OzoneCPU
numLoad	simple/base.hh	/^    Counter numLoad;$/;"	m	class:BaseSimpleCPU
numLoad	thread_state.hh	/^    Counter numLoad;$/;"	m	struct:ThreadState
numLoadInsts	simple/base.hh	/^    Stats::Scalar numLoadInsts;$/;"	m	class:BaseSimpleCPU
numLoads	o3/lsq.hh	/^    int numLoads(ThreadID tid)$/;"	f	class:LSQ
numLoads	o3/lsq_impl.hh	/^LSQ<Impl>::numLoads()$/;"	f	class:LSQ
numLoads	o3/lsq_unit.hh	/^    int numLoads() { return loads; }$/;"	f	class:LSQUnit
numLoads	ozone/lsq_unit.hh	/^    int numLoads() { return loads; }$/;"	f	class:OzoneLSQ
numLoads	ozone/lw_lsq.hh	/^    int numLoads() { return loads; }$/;"	f	class:OzoneLWLSQ
numLoadsReady	ozone/lsq_unit_impl.hh	/^OzoneLSQ<Impl>::numLoadsReady()$/;"	f	class:OzoneLSQ
numLoadsReady	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::numLoadsReady()$/;"	f	class:OzoneLWLSQ
numMMIO	kvm/base.hh	/^    Stats::Scalar numMMIO;$/;"	m	class:BaseKvmCPU
numMemRefs	simple/base.hh	/^    Stats::Scalar numMemRefs;$/;"	m	class:BaseSimpleCPU
numMemRefs	thread_state.hh	/^    Stats::Scalar numMemRefs;$/;"	m	struct:ThreadState
numMemories	testers/networktest/networktest.hh	/^    int numMemories;$/;"	m	class:NetworkTest
numOp	simple/base.hh	/^    Counter numOp;$/;"	m	class:BaseSimpleCPU
numOp	thread_state.hh	/^    Counter numOp;$/;"	m	struct:ThreadState
numOps	minor/stats.hh	/^    Stats::Scalar numOps;$/;"	m	class:Minor::MinorStats
numOps	simple/base.hh	/^    Stats::Scalar numOps;$/;"	m	class:BaseSimpleCPU
numOps	thread_state.hh	/^    Stats::Scalar numOps;$/;"	m	struct:ThreadState
numPackets	testers/traffic_gen/traffic_gen.hh	/^    Stats::Scalar numPackets;$/;"	m	class:TrafficGen
numPacketsSent	testers/networktest/networktest.hh	/^    int numPacketsSent;$/;"	m	class:NetworkTest
numPhysCCRegs	o3/O3CPU.py	/^    numPhysCCRegs = Param.Unsigned(_defaultNumPhysCCRegs,$/;"	v	class:DerivO3CPU
numPhysFloatRegs	o3/O3CPU.py	/^    numPhysFloatRegs = Param.Unsigned(256, "Number of physical floating point "$/;"	v	class:DerivO3CPU
numPhysFloatRegs	ozone/OzoneCPU.py	/^    numPhysFloatRegs = Param.Unsigned("Number of physical floating point "$/;"	v	class:DerivOzoneCPU
numPhysFloatRegs	ozone/SimpleOzoneCPU.py	/^    numPhysFloatRegs = Param.Unsigned("Number of physical floating point "$/;"	v	class:SimpleOzoneCPU
numPhysFloatRegs	ozone/simple_params.hh	/^    unsigned numPhysFloatRegs;$/;"	m	class:SimpleParams
numPhysIntRegs	o3/O3CPU.py	/^    numPhysIntRegs = Param.Unsigned(256, "Number of physical integer registers")$/;"	v	class:DerivO3CPU
numPhysIntRegs	ozone/OzoneCPU.py	/^    numPhysIntRegs = Param.Unsigned("Number of physical integer registers")$/;"	v	class:DerivOzoneCPU
numPhysIntRegs	ozone/SimpleOzoneCPU.py	/^    numPhysIntRegs = Param.Unsigned("Number of physical integer registers")$/;"	v	class:SimpleOzoneCPU
numPhysIntRegs	ozone/simple_params.hh	/^    unsigned numPhysIntRegs;$/;"	m	class:SimpleParams
numPhysRegs	o3/inst_queue.hh	/^    unsigned numPhysRegs;$/;"	m	class:InstructionQueue
numPhysRegs	o3/scoreboard.hh	/^    unsigned numPhysRegs;$/;"	m	class:Scoreboard
numPhysRegs	ozone/front_end.hh	/^    int numPhysRegs;$/;"	m	class:FrontEnd
numPhysicalRegs	ozone/simple_params.hh	/^    unsigned numPhysicalRegs;$/;"	m	class:SimpleParams
numPredictedBranches	simple/base.hh	/^    Stats::Scalar numPredictedBranches;$/;"	m	class:BaseSimpleCPU
numROBEntries	o3/O3CPU.py	/^    numROBEntries = Param.Unsigned(192, "Number of reorder buffer entries")$/;"	v	class:DerivO3CPU
numROBEntries	ozone/OzoneCPU.py	/^    numROBEntries = Param.Unsigned("Number of reorder buffer entries")$/;"	v	class:DerivOzoneCPU
numROBEntries	ozone/SimpleOzoneCPU.py	/^    numROBEntries = Param.Unsigned("Number of reorder buffer entries")$/;"	v	class:SimpleOzoneCPU
numROBEntries	ozone/back_end.hh	/^    int numROBEntries;$/;"	m	class:BackEnd
numROBEntries	ozone/lw_back_end.hh	/^    int numROBEntries;$/;"	m	class:LWBackEnd
numROBEntries	ozone/simple_params.hh	/^    unsigned numROBEntries;$/;"	m	class:SimpleParams
numROBFreeEntries	o3/commit_impl.hh	/^DefaultCommit<Impl>::numROBFreeEntries(ThreadID tid)$/;"	f	class:DefaultCommit
numReads	testers/memtest/memtest.hh	/^    uint64_t numReads;$/;"	m	class:MemTest
numReadsStat	testers/memtest/memtest.hh	/^    Stats::Scalar numReadsStat;$/;"	m	class:MemTest
numRegs	minor/scoreboard.hh	/^    const unsigned numRegs;$/;"	m	class:Minor::Scoreboard
numReservedSlots	minor/buffers.hh	/^    unsigned int numReservedSlots;$/;"	m	class:Minor::Queue
numResults	minor/scoreboard.hh	/^    std::vector<Index> numResults;$/;"	m	class:Minor::Scoreboard
numRetiredFragments	minor/lsq.hh	/^        unsigned int numRetiredFragments;$/;"	m	class:Minor::LSQ::SplitDataRequest
numRetries	testers/traffic_gen/traffic_gen.hh	/^    Stats::Scalar numRetries;$/;"	m	class:TrafficGen
numRobs	o3/O3CPU.py	/^    numRobs = Param.Unsigned(1, "Number of Reorder Buffers");$/;"	v	class:DerivO3CPU
numRobs	o3/commit.hh	/^    unsigned numRobs;$/;"	m	class:DefaultCommit
numSeqPkts	testers/traffic_gen/generators.hh	/^    const unsigned int numSeqPkts;$/;"	m	class:DramGen
numSimulatedCPUs	base.hh	/^    static int numSimulatedCPUs() { return cpuList.size(); }$/;"	f	class:BaseCPU
numSimulatedInsts	base.hh	/^    static Counter numSimulatedInsts()$/;"	f	class:BaseCPU
numSimulatedOps	base.hh	/^    static Counter numSimulatedOps()$/;"	f	class:BaseCPU
numSlots	minor/lsq.hh	/^        const unsigned int numSlots;$/;"	m	class:Minor::LSQ::StoreBuffer
numSrcRegs	base_dyn_inst.hh	/^    int8_t numSrcRegs() const { return staticInst->numSrcRegs(); }$/;"	f	class:BaseDynInst
numSrcRegs	inorder/inorder_dyn_inst.hh	/^    int8_t numSrcRegs() const { return staticInst->numSrcRegs(); }$/;"	f	class:InOrderDynInst
numSrcRegs	static_inst.hh	/^    int8_t numSrcRegs()  const { return _numSrcRegs; }$/;"	f	class:StaticInst
numStages	activity.hh	/^    int numStages;$/;"	m	class:ActivityRecorder
numStages	inorder/resource_sked.hh	/^    int numStages;$/;"	m	class:RSkedIt
numStoreInsts	simple/base.hh	/^    Stats::Scalar numStoreInsts;$/;"	m	class:BaseSimpleCPU
numStores	o3/lsq.hh	/^    int numStores(ThreadID tid)$/;"	f	class:LSQ
numStores	o3/lsq_impl.hh	/^LSQ<Impl>::numStores()$/;"	f	class:LSQ
numStores	o3/lsq_unit.hh	/^    int numStores() { return stores; }$/;"	f	class:LSQUnit
numStores	ozone/lsq_unit.hh	/^    int numStores() { return stores; }$/;"	f	class:OzoneLSQ
numStores	ozone/lw_lsq.hh	/^    int numStores() { return stores + storesInFlight; }$/;"	f	class:OzoneLWLSQ
numStoresInTransfers	minor/lsq.hh	/^    unsigned int numStoresInTransfers;$/;"	m	class:Minor::LSQ
numStoresToWB	o3/lsq.hh	/^    int numStoresToWB(ThreadID tid)$/;"	f	class:LSQ
numStoresToWB	o3/lsq_unit.hh	/^    int numStoresToWB() { return storesToWB; }$/;"	f	class:LSQUnit
numStoresToWB	ozone/lsq_unit.hh	/^    int numStoresToWB() { return storesToWB; }$/;"	f	class:OzoneLSQ
numStoresToWB	ozone/lw_lsq.hh	/^    int numStoresToWB() { return storesToWB; }$/;"	f	class:OzoneLWLSQ
numThreads	BaseCPU.py	/^    numThreads = Param.Unsigned(1, "number of HW thread contexts")$/;"	v
numThreads	base.hh	/^    ThreadID numThreads;$/;"	m	class:BaseCPU
numThreads	inorder/pipeline_stage.hh	/^    ThreadID numThreads;$/;"	m	class:PipelineStage
numThreads	o3/commit.hh	/^    ThreadID numThreads;$/;"	m	class:DefaultCommit
numThreads	o3/decode.hh	/^    ThreadID numThreads;$/;"	m	class:DefaultDecode
numThreads	o3/fetch.hh	/^    ThreadID numThreads;$/;"	m	class:DefaultFetch
numThreads	o3/iew.hh	/^    ThreadID numThreads;$/;"	m	class:DefaultIEW
numThreads	o3/inst_queue.hh	/^    ThreadID numThreads;$/;"	m	class:InstructionQueue
numThreads	o3/lsq.hh	/^    ThreadID numThreads;$/;"	m	class:LSQ
numThreads	o3/rename.hh	/^    ThreadID numThreads;$/;"	m	class:DefaultRename
numThreads	o3/rob.hh	/^    ThreadID numThreads;$/;"	m	class:ROB
numThreads	ozone/OzoneCPU.py	/^    numThreads = Param.Unsigned("number of HW thread contexts")$/;"	v	class:DerivOzoneCPU
numThreads	ozone/SimpleOzoneCPU.py	/^    numThreads = Param.Unsigned("number of HW thread contexts")$/;"	v	class:SimpleOzoneCPU
numThreads	ozone/inst_queue.hh	/^    unsigned numThreads;$/;"	m	class:InstQueue
numThreads	pred/BranchPredictor.py	/^    numThreads = Param.Unsigned(1, "Number of threads")$/;"	v	class:BranchPredictor
numThreads	pred/bpred_unit.hh	/^    uint32_t numThreads;$/;"	m	class:BPredUnit
numTotalRegs	o3/scoreboard.hh	/^    unsigned M5_CLASS_VAR_USED numTotalRegs;$/;"	m	class:Scoreboard
numTranslatedFragments	minor/lsq.hh	/^        unsigned int numTranslatedFragments;$/;"	m	class:Minor::LSQ::SplitDataRequest
numUnissuedAccesses	minor/lsq.hh	/^        unsigned int numUnissuedAccesses;$/;"	m	class:Minor::LSQ::StoreBuffer
numUnissuedStores	minor/lsq.hh	/^        unsigned int numUnissuedStores() { return numUnissuedAccesses; }$/;"	f	class:Minor::LSQ::StoreBuffer
numUnpredictableResults	minor/scoreboard.hh	/^    std::vector<Index> numUnpredictableResults;$/;"	m	class:Minor::Scoreboard
numVMExits	kvm/base.hh	/^    Stats::Scalar numVMExits;$/;"	m	class:BaseKvmCPU
numVMHalfEntries	kvm/base.hh	/^    Stats::Scalar numVMHalfEntries;$/;"	m	class:BaseKvmCPU
numWaitingMemOps	ozone/lw_back_end.hh	/^    int numWaitingMemOps;$/;"	m	class:LWBackEnd
numWorkItemsCompleted	base.hh	/^    Stats::Scalar numWorkItemsCompleted;$/;"	m	class:BaseCPU
numWorkItemsStarted	base.hh	/^    Stats::Scalar numWorkItemsStarted;$/;"	m	class:BaseCPU
numWrites	testers/memtest/memtest.hh	/^    uint64_t numWrites;$/;"	m	class:MemTest
numWritesStat	testers/memtest/memtest.hh	/^    Stats::Scalar numWritesStat;$/;"	m	class:MemTest
num_cpus	testers/directedtest/RubyDirectedTester.py	/^    num_cpus = Param.Int("num of cpus")$/;"	v	class:DirectedGenerator
num_cpus	testers/rubytest/RubyTester.py	/^    num_cpus = Param.Int("number of cpus \/ RubyPorts")$/;"	v	class:RubyTester
num_memories	testers/networktest/NetworkTest.py	/^    num_memories = Param.Int(1, "Num Memories")$/;"	v	class:NetworkTest
num_series	testers/directedtest/RubyDirectedTester.py	/^    num_series = Param.UInt32(1,$/;"	v	class:SeriesRequestGenerator
number	func_unit.hh	/^    unsigned         number;$/;"	m	class:FUDesc
object	cpuevent.hh	/^    T *object;$/;"	m	class:CpuEventWrapper
occ_dist	ozone/back_end.hh	/^        Stats::VectorDistribution occ_dist;$/;"	m	class:BackEnd::InstQueue
occ_rate	ozone/back_end.hh	/^        Stats::Formula occ_rate;$/;"	m	class:BackEnd::InstQueue
occupancy	minor/buffers.hh	/^    unsigned int occupancy;$/;"	m	class:Minor::SelfStallingPipeline
occupiedSpace	minor/buffers.hh	/^    unsigned int occupiedSpace() const { return queue.size(); }$/;"	f	class:Minor::Queue
offsetBits	o3/store_set.hh	/^    int offsetBits;$/;"	m	class:StoreSet
oldestInst	o3/inst_queue.hh	/^        InstSeqNum oldestInst;$/;"	m	struct:InstructionQueue::ListOrderEntry
oldestReady	o3/commit_impl.hh	/^DefaultCommit<Impl>::oldestReady()$/;"	f	class:DefaultCommit
onInstList	inorder/inorder_dyn_inst.hh	/^    bool onInstList;$/;"	m	class:InOrderDynInst
onKickSignal	kvm/base.cc	/^onKickSignal(int signo, siginfo_t *si, void *data)$/;"	f	file:
onKvmExitHypercall	kvm/arm_cpu.cc	/^ArmKvmCPU::onKvmExitHypercall()$/;"	f	class:ArmKvmCPU
op	TimingExpr.py	/^    op = Param.TimingExprOp("operator")$/;"	v	class:TimingExprBin
op	TimingExpr.py	/^    op = Param.TimingExprOp("operator")$/;"	v	class:TimingExprUn
op	timing_expr.hh	/^    Enums::TimingExprOp op;$/;"	m	class:TimingExprBin
op	timing_expr.hh	/^    Enums::TimingExprOp op;$/;"	m	class:TimingExprUn
opClass	FuncUnit.py	/^    opClass = Param.OpClass("type of operation")$/;"	v	class:OpDesc
opClass	base_dyn_inst.hh	/^    OpClass opClass() const { return staticInst->opClass(); }$/;"	f	class:BaseDynInst
opClass	func_unit.hh	/^    OpClass opClass;$/;"	m	class:OpDesc
opClass	inorder/inorder_dyn_inst.hh	/^    OpClass opClass() const { return staticInst->opClass(); }$/;"	f	class:InOrderDynInst
opClass	minor/MinorCPU.py	/^    opClass = Param.OpClass("op class to match")$/;"	v	class:MinorOpClass
opClass	minor/func_unit.hh	/^    OpClass opClass;$/;"	m	class:MinorOpClass
opClass	static_inst.hh	/^    OpClass opClass()     const { return _opClass; }$/;"	f	class:StaticInst
opClasses	minor/MinorCPU.py	/^    opClasses = Param.MinorOpClassSet(MinorOpClassSet(), "type of operations"$/;"	v	class:MinorFU
opClasses	minor/MinorCPU.py	/^    opClasses = Param.MinorOpClassSet(MinorOpClassSet(),$/;"	v	class:MinorFUTiming
opClasses	minor/MinorCPU.py	/^    opClasses = VectorParam.MinorOpClass([], "op classes to be matched."$/;"	v	class:MinorOpClassSet
opClasses	minor/MinorCPU.py	/^    opClasses = minorMakeOpClassSet([$/;"	v	class:MinorDefaultFloatSimdFU
opClasses	minor/MinorCPU.py	/^    opClasses = minorMakeOpClassSet(['IntAlu'])$/;"	v	class:MinorDefaultIntFU
opClasses	minor/MinorCPU.py	/^    opClasses = minorMakeOpClassSet(['IntDiv'])$/;"	v	class:MinorDefaultIntDivFU
opClasses	minor/MinorCPU.py	/^    opClasses = minorMakeOpClassSet(['IntMult'])$/;"	v	class:MinorDefaultIntMulFU
opClasses	minor/MinorCPU.py	/^    opClasses = minorMakeOpClassSet(['IprAccess', 'InstPrefetch'])$/;"	v	class:MinorDefaultMiscFU
opClasses	minor/MinorCPU.py	/^    opClasses = minorMakeOpClassSet(['MemRead', 'MemWrite'])$/;"	v	class:MinorDefaultMemFU
opClasses	minor/func_unit.hh	/^    MinorOpClassSet *opClasses;$/;"	m	class:MinorFU
opClasses	minor/func_unit.hh	/^    MinorOpClassSet *opClasses;$/;"	m	class:MinorFUTiming
opClasses	minor/func_unit.hh	/^    std::vector<MinorOpClass *> opClasses;$/;"	m	class:MinorOpClassSet
opDescList	func_unit.hh	/^    std::vector<OpDesc *> opDescList;$/;"	m	class:FUDesc
opLat	FuncUnit.py	/^    opLat = Param.Cycles(1, "cycles until result is available")$/;"	v	class:OpDesc
opLat	func_unit.hh	/^    Cycles opLat;$/;"	m	class:OpDesc
opLat	minor/MinorCPU.py	/^    opLat = 1$/;"	v	class:MinorDefaultMemFU
opLat	minor/MinorCPU.py	/^    opLat = 1$/;"	v	class:MinorDefaultMiscFU
opLat	minor/MinorCPU.py	/^    opLat = 3$/;"	v	class:MinorDefaultIntFU
opLat	minor/MinorCPU.py	/^    opLat = 3$/;"	v	class:MinorDefaultIntMulFU
opLat	minor/MinorCPU.py	/^    opLat = 6$/;"	v	class:MinorDefaultFloatSimdFU
opLat	minor/MinorCPU.py	/^    opLat = 9$/;"	v	class:MinorDefaultIntDivFU
opLat	minor/MinorCPU.py	/^    opLat = Param.Cycles(1, "latency in cycles")$/;"	v	class:MinorFU
opLat	minor/func_unit.hh	/^    Cycles opLat;$/;"	m	class:MinorFU
opLatencies	func_unit.hh	/^    unsigned opLatencies[Num_OpClasses];$/;"	m	class:FuncUnit
opLatency	func_unit.cc	/^FuncUnit::opLatency(OpClass cap)$/;"	f	class:FuncUnit
opList	FuncUnit.py	/^    opList = VectorParam.OpDesc("operation classes for this FU type")$/;"	v	class:FUDesc
opList	o3/FuncUnitConfig.py	/^    opList = [ OpDesc(opClass='FloatAdd', opLat=2),$/;"	v	class:FP_ALU
opList	o3/FuncUnitConfig.py	/^    opList = [ OpDesc(opClass='FloatMult', opLat=4),$/;"	v	class:FP_MultDiv
opList	o3/FuncUnitConfig.py	/^    opList = [ OpDesc(opClass='IntAlu') ]$/;"	v	class:IntALU
opList	o3/FuncUnitConfig.py	/^    opList = [ OpDesc(opClass='IntMult', opLat=3),$/;"	v	class:IntMultDiv
opList	o3/FuncUnitConfig.py	/^    opList = [ OpDesc(opClass='IprAccess', opLat = 3, issueLat = 3) ]$/;"	v	class:IprPort
opList	o3/FuncUnitConfig.py	/^    opList = [ OpDesc(opClass='MemRead') ]$/;"	v	class:ReadPort
opList	o3/FuncUnitConfig.py	/^    opList = [ OpDesc(opClass='MemRead'), OpDesc(opClass='MemWrite') ]$/;"	v	class:RdWrPort
opList	o3/FuncUnitConfig.py	/^    opList = [ OpDesc(opClass='MemWrite') ]$/;"	v	class:WritePort
opList	o3/FuncUnitConfig.py	/^    opList = [ OpDesc(opClass='SimdAdd'),$/;"	v	class:SIMD_Unit
operator !=	inorder/resource_sked.hh	/^    bool operator!=(RSkedIt const &rhs)$/;"	f	class:RSkedIt
operator ()	inorder/pipeline_traits.5stage.hh	/^        bool operator()(const ScheduleEntry* lhs, const ScheduleEntry* rhs) const$/;"	f	struct:ThePipeline::entryCompare
operator ()	inorder/pipeline_traits.9stage.hh	/^        bool operator()(const ScheduleEntry* lhs, const ScheduleEntry* rhs) const$/;"	f	struct:ThePipeline::entryCompare
operator ()	inorder/pipeline_traits.9stage.smt2.hh	/^        bool operator()(const ScheduleEntry* lhs, const ScheduleEntry* rhs) const$/;"	f	struct:ThePipeline::entryCompare
operator ()	o3/inst_queue.hh	/^        bool operator() (const DynInstPtr &lhs, const DynInstPtr &rhs) const$/;"	f	struct:InstructionQueue::pqCompare
operator ()	o3/mem_dep_unit.hh	/^    size_t operator() (const InstSeqNum &seq_num) const {$/;"	f	struct:SNHash
operator ()	o3/store_set.hh	/^    bool operator()(const InstSeqNum &lhs, const InstSeqNum &rhs) const$/;"	f	struct:ltseqnum
operator ()	ozone/back_end.hh	/^            bool operator() (const DynInstPtr &lhs, const DynInstPtr &rhs) const$/;"	f	struct:BackEnd::InstQueue::pqCompare
operator ()	ozone/inst_queue.hh	/^        bool operator() (const DynInstPtr &lhs, const DynInstPtr &rhs) const$/;"	f	struct:InstQueue::pqCompare
operator ()	ozone/lw_back_end.hh	/^        bool operator() (const DynInstPtr &lhs, const DynInstPtr &rhs) const$/;"	f	struct:LWBackEnd::pqCompare
operator ()	ozone/lw_lsq.hh	/^    size_t operator() (const int a) const$/;"	f	struct:OzoneLWLSQ::HashFn
operator ()	pc_event.hh	/^        bool operator()(Addr pc, const record_t &r) const {$/;"	f	class:PCEventQueue::MapCompare
operator ()	pc_event.hh	/^        bool operator()(const record_t &l, Addr pc) const {$/;"	f	class:PCEventQueue::MapCompare
operator ()	pc_event.hh	/^        bool operator()(const record_t &l, const record_t &r) const {$/;"	f	class:PCEventQueue::MapCompare
operator ()	simple/probes/simpoint.hh	/^    size_t operator()(const BasicBlockRange &bb) const {$/;"	f	struct:hash
operator *	inorder/resource_sked.hh	/^    ScheduleEntry* operator*()$/;"	f	class:RSkedIt
operator *	timebuf.hh	/^        T &operator*() const { return *buffer->access(index); }$/;"	f	class:TimeBuffer::wire
operator ++	inorder/resource_sked.hh	/^    RSkedIt &operator++(int unused)$/;"	f	class:RSkedIt
operator ++	timebuf.hh	/^        wire &operator++()$/;"	f	class:TimeBuffer::wire
operator ++	timebuf.hh	/^        wire &operator++(int)$/;"	f	class:TimeBuffer::wire
operator +=	timebuf.hh	/^        const wire &operator+=(int offset)$/;"	f	class:TimeBuffer::wire
operator --	timebuf.hh	/^        wire &operator--()$/;"	f	class:TimeBuffer::wire
operator --	timebuf.hh	/^        wire &operator--(int)$/;"	f	class:TimeBuffer::wire
operator -=	timebuf.hh	/^        const wire &operator-=(int offset)$/;"	f	class:TimeBuffer::wire
operator ->	inorder/resource_sked.hh	/^    ScheduleEntry* operator->()$/;"	f	class:RSkedIt
operator ->	timebuf.hh	/^        T *operator->() const { return buffer->access(index); }$/;"	f	class:TimeBuffer::wire
operator <<	minor/dyn_inst.cc	/^operator <<(std::ostream &os, const InstId &id)$/;"	f	namespace:Minor
operator <<	minor/dyn_inst.cc	/^operator <<(std::ostream &os, const MinorDynInst &inst)$/;"	f	namespace:Minor
operator <<	minor/execute.cc	/^std::ostream &operator <<(std::ostream &os, Execute::DrainState state)$/;"	f	namespace:Minor
operator <<	minor/fetch1.cc	/^operator <<(std::ostream &os, Fetch1::FetchState state)$/;"	f	namespace:Minor
operator <<	minor/fetch1.cc	/^operator <<(std::ostream &os, Fetch1::IcacheState state)$/;"	f	namespace:Minor
operator <<	minor/lsq.cc	/^operator <<(std::ostream &os, LSQ::AddrRangeCoverage coverage)$/;"	f	namespace:Minor
operator <<	minor/lsq.cc	/^operator <<(std::ostream &os, LSQ::LSQRequest::LSQRequestState state)$/;"	f	namespace:Minor
operator <<	minor/lsq.cc	/^operator <<(std::ostream &os, LSQ::MemoryState state)$/;"	f	namespace:Minor
operator <<	minor/pipe_data.cc	/^operator <<(std::ostream &os, BranchData::Reason reason)$/;"	f	namespace:Minor
operator <<	minor/pipe_data.cc	/^operator <<(std::ostream &os, const BranchData &branch)$/;"	f	namespace:Minor
operator <<	testers/rubytest/Check.hh	/^operator<<(std::ostream& out, const Check& obj)$/;"	f
operator <<	testers/rubytest/CheckTable.hh	/^operator<<(std::ostream& out, const CheckTable& obj)$/;"	f
operator <<	testers/rubytest/RubyTester.hh	/^operator<<(std::ostream& out, const RubyTester& obj)$/;"	f
operator =	inorder/resource_sked.hh	/^    RSkedIt operator=(ResourceSked::SkedIt const &rhs)$/;"	f	class:RSkedIt
operator =	minor/pipe_data.cc	/^ForwardInstData::operator =(const ForwardInstData &src)$/;"	f	class:Minor::ForwardInstData
operator =	timebuf.hh	/^        const wire &operator=(const wire &i)$/;"	f	class:TimeBuffer::wire
operator =	timebuf.hh	/^        const wire &operator=(int idx)$/;"	f	class:TimeBuffer::wire
operator ==	inorder/resource_sked.hh	/^    bool operator==(RSkedIt const &rhs)$/;"	f	class:RSkedIt
operator ==	minor/dyn_inst.hh	/^    operator== (const InstId &rhs)$/;"	f	class:Minor::InstId
operator ==	pred/bpred_unit.hh	/^        bool operator==(const PredictorHistory &entry) const {$/;"	f	struct:BPredUnit::PredictorHistory
operator []	ozone/rename_table.hh	/^    DynInstPtr &operator [] (int index)$/;"	f	class:RenameTable
operator []	timebuf.hh	/^    T &operator[](int idx)$/;"	f	class:TimeBuffer
operator []	timebuf.hh	/^    const T &operator[] (int idx) const$/;"	f	class:TimeBuffer
opsCommitted	o3/commit.hh	/^    Stats::Vector opsCommitted;$/;"	m	class:DefaultCommit
otherwin	m5legion_interface.h	/^    uint8_t otherwin;$/;"	m	struct:__anon8
out	minor/decode.hh	/^    Latch<ForwardInstData>::Input out;$/;"	m	class:Minor::Decode
out	minor/execute.hh	/^    Latch<BranchData>::Input out;$/;"	m	class:Minor::Execute
out	minor/fetch1.hh	/^    Latch<ForwardLineData>::Input out;$/;"	m	class:Minor::Fetch1
out	minor/fetch2.hh	/^    Latch<ForwardInstData>::Input out;$/;"	m	class:Minor::Fetch2
output	minor/buffers.hh	/^    Output output() { return Output(buffer.getWire(-delay)); }$/;"	f	class:Minor::Latch
outputWidth	minor/decode.hh	/^    unsigned int outputWidth;$/;"	m	class:Minor::Decode
outputWidth	minor/fetch2.hh	/^    unsigned int outputWidth;$/;"	m	class:Minor::Fetch2
outputWire	minor/buffers.hh	/^        typename Buffer::wire outputWire;$/;"	m	class:Minor::Latch::Output
outstanding	o3/lsq_unit.hh	/^        uint8_t outstanding;$/;"	m	class:LSQUnit::LSQSenderState
outstanding	simple/timing.hh	/^        int outstanding;$/;"	m	class:TimingSimpleCPU::SplitMainSenderState
outstanding	translation.hh	/^    int outstanding;$/;"	m	class:WholeTranslationState
outstandingAddrs	testers/memtest/memtest.hh	/^    std::set<unsigned> outstandingAddrs;$/;"	m	class:MemTest
owner	minor/lsq.hh	/^            SplitDataRequest &owner;$/;"	m	class:Minor::LSQ::SplitDataRequest::TranslationEvent
ozoneTC	ozone/cpu.hh	/^    OzoneTC ozoneTC;$/;"	m	class:OzoneCPU
p	testers/traffic_gen/traffic_gen.hh	/^        double p;$/;"	m	struct:TrafficGen::Transition
pTable	ozone/lsq_unit.hh	/^    PageTable *pTable;$/;"	m	class:OzoneLSQ
pTable	ozone/simple_params.hh	/^    PageTable *pTable;$/;"	m	class:SimpleParams
packet	minor/fetch1.hh	/^        PacketPtr packet;$/;"	m	class:Minor::Fetch1::FetchRequest
packet	minor/lsq.hh	/^        PacketPtr packet;$/;"	m	class:Minor::LSQ::LSQRequest
packet	minor/pipe_data.hh	/^    Packet *packet;$/;"	m	class:Minor::ForwardLineData
packetInFlight	minor/lsq.hh	/^        bool packetInFlight;$/;"	m	class:Minor::LSQ::SingleDataRequest
packetSent	minor/lsq.hh	/^        bool packetSent;$/;"	m	class:Minor::LSQ::SingleDataRequest
pad0	kvm/x86_cpu.cc	/^    uint8_t pad0;$/;"	m	struct:FXSave	file:
pad1	kvm/x86_cpu.cc	/^            uint16_t pad1;$/;"	m	struct:FXSave::__anon5::__anon6	file:
pad2	kvm/x86_cpu.cc	/^            uint16_t pad2;$/;"	m	struct:FXSave::__anon5::__anon6	file:
pageBits	testers/traffic_gen/generators.hh	/^    const unsigned int pageBits;$/;"	m	class:DramGen
pageMap	decode_cache.hh	/^    PageMap pageMap;$/;"	m	class:DecodeCache::AddrMap
pageSize	kvm/base.hh	/^    const long pageSize;$/;"	m	class:BaseKvmCPU
pageSize	kvm/perfevent.hh	/^    long pageSize;$/;"	m	class:PerfKvmCounter
pageSize	testers/traffic_gen/generators.hh	/^    const unsigned int pageSize;$/;"	m	class:DramGen
params	base.hh	/^    const Params *params() const$/;"	f	class:BaseCPU
parent	nativetrace.hh	/^    NativeTrace * parent;$/;"	m	class:Trace::NativeTraceRecord
parseConfig	testers/traffic_gen/traffic_gen.cc	/^TrafficGen::parseConfig()$/;"	f	class:TrafficGen
past	timebuf.hh	/^    int past;$/;"	m	class:TimeBuffer
pc	base_dyn_inst.hh	/^    TheISA::PCState pc;$/;"	m	class:BaseDynInst
pc	inorder/cpu.hh	/^    TheISA::PCState pc[ThePipeline::MaxThreads];$/;"	m	class:InOrderCPU
pc	inorder/inorder_dyn_inst.hh	/^    TheISA::PCState pc;$/;"	m	class:InOrderDynInst
pc	inorder/resources/fetch_seq_unit.hh	/^    TheISA::PCState pc[ThePipeline::MaxThreads];$/;"	m	class:FetchSeqUnit
pc	m5legion_interface.h	/^    uint64_t pc;$/;"	m	struct:__anon8
pc	minor/dyn_inst.hh	/^    TheISA::PCState pc;$/;"	m	class:Minor::MinorDynInst
pc	minor/fetch1.hh	/^        TheISA::PCState pc;$/;"	m	class:Minor::Fetch1::FetchRequest
pc	minor/fetch1.hh	/^    TheISA::PCState pc;$/;"	m	class:Minor::Fetch1
pc	minor/fetch2.hh	/^    TheISA::PCState pc;$/;"	m	class:Minor::Fetch2
pc	minor/pipe_data.hh	/^    TheISA::PCState pc;$/;"	m	class:Minor::ForwardLineData
pc	o3/comm.hh	/^        TheISA::PCState pc; \/\/ *F$/;"	m	struct:TimeBufStruct::commitComm
pc	o3/comm.hh	/^    TheISA::PCState pc[Impl::MaxThreads];$/;"	m	struct:DefaultIEWDefaultCommit
pc	o3/commit.hh	/^    TheISA::PCState pc[Impl::MaxThreads];$/;"	m	class:DefaultCommit
pc	o3/fetch.hh	/^    TheISA::PCState pc[Impl::MaxThreads];$/;"	m	class:DefaultFetch
pc	pc_event.hh	/^    Addr pc() const { return evpc; }$/;"	f	class:PCEvent
pc	pred/bpred_unit.hh	/^        Addr pc;$/;"	m	struct:BPredUnit::PredictorHistory
pcBlockStage	inorder/resources/fetch_seq_unit.hh	/^    int pcBlockStage[ThePipeline::MaxThreads];$/;"	m	class:FetchSeqUnit
pcState	base_dyn_inst.hh	/^    TheISA::PCState pcState() const { return pc; }$/;"	f	class:BaseDynInst
pcState	base_dyn_inst.hh	/^    void pcState(const TheISA::PCState &val) { pc = val; }$/;"	f	class:BaseDynInst
pcState	checker/cpu.hh	/^    TheISA::PCState pcState() const { return thread->pcState(); }$/;"	f	class:CheckerCPU
pcState	checker/cpu.hh	/^    void pcState(const TheISA::PCState &val)$/;"	f	class:CheckerCPU
pcState	checker/thread_context.hh	/^    TheISA::PCState pcState()$/;"	f	class:CheckerThreadContext
pcState	checker/thread_context.hh	/^    void pcState(const TheISA::PCState &val)$/;"	f	class:CheckerThreadContext
pcState	inorder/cpu.hh	/^    pcState(ThreadID tid)$/;"	f	class:InOrderCPU
pcState	inorder/cpu.hh	/^    pcState(const TheISA::PCState &newPC, ThreadID tid)$/;"	f	class:InOrderCPU
pcState	inorder/inorder_dyn_inst.hh	/^    TheISA::PCState pcState() const { return pc; }$/;"	f	class:InOrderDynInst
pcState	inorder/inorder_dyn_inst.hh	/^    void pcState(const TheISA::PCState &_pc) { pc = _pc; }$/;"	f	class:InOrderDynInst
pcState	inorder/thread_context.hh	/^    TheISA::PCState pcState()$/;"	f	class:InOrderThreadContext
pcState	inorder/thread_context.hh	/^    void pcState(const TheISA::PCState &val)$/;"	f	class:InOrderThreadContext
pcState	minor/exec_context.hh	/^    pcState() const$/;"	f	class:Minor::ExecContext
pcState	minor/exec_context.hh	/^    pcState(const TheISA::PCState &val)$/;"	f	class:Minor::ExecContext
pcState	o3/commit.hh	/^    TheISA::PCState pcState(ThreadID tid) { return pc[tid]; }$/;"	f	class:DefaultCommit
pcState	o3/commit.hh	/^    void pcState(const TheISA::PCState &val, ThreadID tid)$/;"	f	class:DefaultCommit
pcState	o3/cpu.cc	/^FullO3CPU<Impl>::pcState(ThreadID tid)$/;"	f	class:FullO3CPU
pcState	o3/cpu.cc	/^FullO3CPU<Impl>::pcState(const TheISA::PCState &val, ThreadID tid)$/;"	f	class:FullO3CPU
pcState	o3/thread_context.hh	/^    virtual TheISA::PCState pcState()$/;"	f	class:O3ThreadContext
pcState	o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::pcState(const TheISA::PCState &val)$/;"	f	class:O3ThreadContext
pcState	simple/base.hh	/^    TheISA::PCState pcState() const { return thread->pcState(); }$/;"	f	class:BaseSimpleCPU
pcState	simple/base.hh	/^    void pcState(const TheISA::PCState &val) { thread->pcState(val); }$/;"	f	class:BaseSimpleCPU
pcState	simple_thread.hh	/^    pcState()$/;"	f	class:SimpleThread
pcState	simple_thread.hh	/^    pcState(const TheISA::PCState &val)$/;"	f	class:SimpleThread
pcState	thread_context.hh	/^    TheISA::PCState pcState() { return actualTC->pcState(); }$/;"	f	class:ProxyThreadContext
pcState	thread_context.hh	/^    void pcState(const TheISA::PCState &val) { actualTC->pcState(val); }$/;"	f	class:ProxyThreadContext
pcStateNoRecord	checker/thread_context.hh	/^    void pcStateNoRecord(const TheISA::PCState &val)$/;"	f	class:CheckerThreadContext
pcStateNoRecord	inorder/thread_context.hh	/^    void pcStateNoRecord(const TheISA::PCState &val)$/;"	f	class:InOrderThreadContext
pcStateNoRecord	o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::pcStateNoRecord(const TheISA::PCState &val)$/;"	f	class:O3ThreadContext
pcStateNoRecord	simple_thread.hh	/^    pcStateNoRecord(const TheISA::PCState &val)$/;"	f	class:SimpleThread
pcStateNoRecord	thread_context.hh	/^    void pcStateNoRecord(const TheISA::PCState &val) { actualTC->pcState(val); }$/;"	f	class:ProxyThreadContext
pcValid	inorder/resources/fetch_seq_unit.hh	/^    bool pcValid[ThePipeline::MaxThreads];$/;"	m	class:FetchSeqUnit
pc_count	profile.hh	/^    std::map<Addr, Counter> pc_count;$/;"	m	class:FunctionProfile
pc_map	pc_event.hh	/^    map_t pc_map;$/;"	m	class:PCEventQueue
peak_inst_count	ozone/back_end.hh	/^        Stats::Vector peak_inst_count;$/;"	m	class:BackEnd::InstQueue
pendingFetch	inorder/resources/fetch_unit.hh	/^    std::list<FetchBlock*> pendingFetch;$/;"	m	class:FetchUnit
pendingPacket	o3/lsq_unit.hh	/^        PacketPtr pendingPacket;$/;"	m	class:LSQUnit::LSQSenderState
pendingPkt	o3/lsq_unit.hh	/^    PacketPtr pendingPkt;$/;"	m	class:LSQUnit
percentDestUnaligned	testers/memtest/memtest.hh	/^    unsigned percentDestUnaligned;$/;"	m	class:MemTest
percentFunctional	testers/memtest/memtest.hh	/^    unsigned percentFunctional; \/\/ target percentage of functional accesses$/;"	m	class:MemTest
percentReads	testers/memtest/memtest.hh	/^    unsigned percentReads;      \/\/ target percentage of read accesses$/;"	m	class:MemTest
percentSourceUnaligned	testers/memtest/memtest.hh	/^    unsigned percentSourceUnaligned;$/;"	m	class:MemTest
percentUncacheable	testers/memtest/memtest.hh	/^    unsigned percentUncacheable;$/;"	m	class:MemTest
percent_dest_unaligned	testers/memtest/MemTest.py	/^    percent_dest_unaligned = Param.Percent(50,$/;"	v	class:MemTest
percent_functional	testers/memtest/MemTest.py	/^    percent_functional = Param.Percent(50, "percent of access that are functional")$/;"	v	class:MemTest
percent_reads	testers/memtest/MemTest.py	/^    percent_reads = Param.Percent(65, "target read percentage")$/;"	v	class:MemTest
percent_source_unaligned	testers/memtest/MemTest.py	/^    percent_source_unaligned = Param.Percent(50,$/;"	v	class:MemTest
percent_uncacheable	testers/memtest/MemTest.py	/^    percent_uncacheable = Param.Percent(10,$/;"	v	class:MemTest
percent_writes	testers/directedtest/RubyDirectedTester.py	/^    percent_writes = Param.Percent(50, "percent of access that are writes")$/;"	v	class:SeriesRequestGenerator
perfControlledByTimer	kvm/base.hh	/^    bool perfControlledByTimer;$/;"	m	class:BaseKvmCPU
performCallback	testers/directedtest/InvalidateGenerator.cc	/^InvalidateGenerator::performCallback(uint32_t proc, Addr address)$/;"	f	class:InvalidateGenerator
performCallback	testers/directedtest/SeriesRequestGenerator.cc	/^SeriesRequestGenerator::performCallback(uint32_t proc, Addr address)$/;"	f	class:SeriesRequestGenerator
performCallback	testers/rubytest/Check.cc	/^Check::performCallback(NodeID proc, SubBlock* data, Cycles curTime)$/;"	f	class:Check
period	kvm/perfevent.cc	/^PerfKvmCounter::period(uint64_t period)$/;"	f	class:PerfKvmCounter
physEffAddr	base_dyn_inst.hh	/^    Addr physEffAddr;$/;"	m	class:BaseDynInst
physEffAddr	inorder/inorder_dyn_inst.hh	/^    Addr physEffAddr;$/;"	m	class:InOrderDynInst
physProxy	thread_state.hh	/^    PortProxy *physProxy;$/;"	m	struct:ThreadState
pickInitiatingNode	testers/rubytest/Check.cc	/^Check::pickInitiatingNode()$/;"	f	class:Check
pickValue	testers/rubytest/Check.cc	/^Check::pickValue()$/;"	f	class:Check
pil	m5legion_interface.h	/^    uint8_t pil;$/;"	m	struct:__anon8
pinned	kvm/perfevent.hh	/^    PerfKvmCounterConfig &pinned(bool val) {$/;"	f	class:PerfKvmCounterConfig
pipeline	minor/cpu.hh	/^    Minor::Pipeline *pipeline;$/;"	m	class:MinorCPU
pipelineIcacheAccesses	o3/fetch_impl.hh	/^DefaultFetch<Impl>::pipelineIcacheAccesses(ThreadID tid)$/;"	f	class:DefaultFetch
pipelineStage	inorder/cpu.hh	/^    PipelineStage *pipelineStage[ThePipeline::NumStages];$/;"	m	class:InOrderCPU
pkt	o3/lsq_unit.hh	/^        PacketPtr pkt;$/;"	m	class:LSQUnit::WritebackEvent
pkt	ozone/lw_lsq.hh	/^        PacketPtr pkt;$/;"	m	class:OzoneLWLSQ::WritebackEvent
pkt	simple/timing.hh	/^            PacketPtr pkt;$/;"	m	struct:TimingSimpleCPU::TimingCPUPort::TickEvent
pkt	simple/timing.hh	/^        Packet *pkt;$/;"	m	struct:TimingSimpleCPU::IprEvent
pktCmd	inorder/resources/cache_unit.hh	/^    MemCmd::Command pktCmd;$/;"	m	class:CacheRequest
pktToSend	o3/lsq_unit.hh	/^        bool pktToSend;$/;"	m	class:LSQUnit::LSQSenderState
pop	inorder/resource_sked.cc	/^ResourceSked::pop()$/;"	f	class:ResourceSked
pop	inorder/resources/inst_buffer.cc	/^InstBuffer::pop(ThreadID tid)$/;"	f	class:InstBuffer
pop	minor/buffers.hh	/^    pop()$/;"	f	class:Minor::InputBuffer
pop	minor/buffers.hh	/^    void pop() { queue.pop_front(); }$/;"	f	class:Minor::Queue
pop	o3/dep_graph.hh	/^DependencyGraph<DynInstPtr>::pop(PhysRegIndex idx)$/;"	f	class:DependencyGraph
pop	pred/ras.cc	/^ReturnAddrStack::pop()$/;"	f	class:ReturnAddrStack
popAndDiscard	minor/fetch1.cc	/^Fetch1::popAndDiscard(FetchQueue &queue)$/;"	f	class:Minor::Fetch1
popInput	minor/decode.cc	/^Decode::popInput()$/;"	f	class:Minor::Decode
popInput	minor/execute.cc	/^Execute::popInput()$/;"	f	class:Minor::Execute
popInput	minor/fetch2.cc	/^Fetch2::popInput()$/;"	f	class:Minor::Fetch2
popResponse	minor/lsq.cc	/^LSQ::popResponse(LSQ::LSQRequestPtr response)$/;"	f	class:Minor::LSQ
popResult	base_dyn_inst.hh	/^    void popResult(T& t)$/;"	f	class:BaseDynInst
popWire	minor/buffers.hh	/^    typename TimeBuffer<ElemType>::wire popWire;$/;"	m	class:Minor::SelfStallingPipeline
port	minor/lsq.hh	/^        LSQ &port;$/;"	m	class:Minor::LSQ::LSQRequest
port	testers/traffic_gen/TrafficGen.py	/^    port = MasterPort("Master port")$/;"	v	class:TrafficGen
port	testers/traffic_gen/traffic_gen.hh	/^    TrafficGenPort port;$/;"	m	class:TrafficGen
ports	testers/directedtest/RubyDirectedTester.hh	/^    std::vector<MasterPort*> ports;$/;"	m	class:RubyDirectedTester
possibleLoadViolation	base_dyn_inst.hh	/^    bool possibleLoadViolation() const { return instFlags[PossibleLoadViolation]; }$/;"	f	class:BaseDynInst
possibleLoadViolation	base_dyn_inst.hh	/^    void possibleLoadViolation(bool f) { instFlags[PossibleLoadViolation] = f; }$/;"	f	class:BaseDynInst
post	intr_control.cc	/^IntrControl::post(int cpu_id, int int_num, int index)$/;"	f	class:IntrControl
post	intr_control.hh	/^    post(int int_num, int index = 0)$/;"	f	class:IntrControl
post	intr_control_noisa.cc	/^IntrControl::post(int cpu_id, int int_num, int index)$/;"	f	class:IntrControl
postExecute	simple/base.cc	/^BaseSimpleCPU::postExecute()$/;"	f	class:BaseSimpleCPU
postInterrupt	base.hh	/^    postInterrupt(int int_num, int index)$/;"	f	class:BaseCPU
ppCommit	o3/commit.hh	/^    ProbePointArg<DynInstPtr> *ppCommit;$/;"	m	class:DefaultCommit
ppCommit	simple/atomic.hh	/^    ProbePointArg<std::pair<SimpleThread*, const StaticInstPtr>> *ppCommit;$/;"	m	class:AtomicSimpleCPU
ppCommitStall	o3/commit.hh	/^    ProbePointArg<DynInstPtr> *ppCommitStall;$/;"	m	class:DefaultCommit
ppDataAccessComplete	o3/cpu.hh	/^    ProbePointArg<std::pair<DynInstPtr, PacketPtr> > *ppDataAccessComplete;$/;"	m	class:FullO3CPU
ppDispatch	o3/iew.hh	/^    ProbePointArg<DynInstPtr> *ppDispatch;$/;"	m	class:DefaultIEW
ppFetch	o3/fetch.hh	/^    ProbePointArg<DynInstPtr> *ppFetch;$/;"	m	class:DefaultFetch
ppInstAccessComplete	o3/cpu.hh	/^    ProbePointArg<PacketPtr> *ppInstAccessComplete;$/;"	m	class:FullO3CPU
ppMispredict	o3/iew.hh	/^    ProbePointArg<DynInstPtr> *ppMispredict;$/;"	m	class:DefaultIEW
pqCompare	o3/inst_queue.hh	/^    struct pqCompare {$/;"	s	class:InstructionQueue
pqCompare	ozone/back_end.hh	/^        struct pqCompare {$/;"	s	class:BackEnd::InstQueue
pqCompare	ozone/inst_queue.hh	/^    struct pqCompare {$/;"	s	class:InstQueue
pqCompare	ozone/lw_back_end.hh	/^    struct pqCompare {$/;"	s	class:LWBackEnd
preExecute	simple/base.cc	/^BaseSimpleCPU::preExecute()$/;"	f	class:BaseSimpleCPU
precision	testers/networktest/NetworkTest.py	/^    precision = Param.Int(3, "Number of digits of precision after decimal point")$/;"	v	class:NetworkTest
precision	testers/networktest/networktest.hh	/^    int precision;$/;"	m	class:NetworkTest
predHist	pred/bpred_unit.hh	/^    std::vector<History> predHist;$/;"	m	class:BPredUnit
predIncorrect	o3/comm.hh	/^        bool predIncorrect;$/;"	m	struct:TimeBufStruct::decodeComm
predInstAddr	base_dyn_inst.hh	/^    Addr predInstAddr() { return predPC.instAddr(); }$/;"	f	class:BaseDynInst
predInstAddr	inorder/inorder_dyn_inst.hh	/^    Addr predInstAddr() { return predPC.instAddr(); }$/;"	f	class:InOrderDynInst
predMicroPC	base_dyn_inst.hh	/^    Addr predMicroPC() { return predPC.microPC(); }$/;"	f	class:BaseDynInst
predNextInstAddr	base_dyn_inst.hh	/^    Addr predNextInstAddr() { return predPC.nextInstAddr(); }$/;"	f	class:BaseDynInst
predNextInstAddr	inorder/inorder_dyn_inst.hh	/^    Addr predNextInstAddr() { return predPC.nextInstAddr(); }$/;"	f	class:InOrderDynInst
predPC	base_dyn_inst.hh	/^    TheISA::PCState predPC;$/;"	m	class:BaseDynInst
predPC	inorder/inorder_dyn_inst.hh	/^    TheISA::PCState predPC;$/;"	m	class:InOrderDynInst
predTaken	inorder/inorder_dyn_inst.hh	/^    bool predTaken() { return predictTaken; }$/;"	f	class:InOrderDynInst
predTaken	pred/bpred_unit.hh	/^        bool predTaken;$/;"	m	struct:BPredUnit::PredictorHistory
predType	ozone/OzoneCPU.py	/^    predType = Param.String("Type of branch predictor ('local', 'tournament')")$/;"	v	class:DerivOzoneCPU
predType	ozone/simple_params.hh	/^    std::string predType;$/;"	m	class:SimpleParams
predType	pred/BranchPredictor.py	/^    predType = Param.String("tournament",$/;"	v	class:BranchPredictor
pred_pc	simple/base.hh	/^    TheISA::PCState pred_pc;$/;"	m	class:BaseSimpleCPU
predicate	simple_thread.hh	/^    bool predicate;$/;"	m	class:SimpleThread
predict	ozone/null_predictor.hh	/^    bool predict(DynInstPtr &inst, Addr &PC, ThreadID tid)$/;"	f	class:NullPredictor
predict	pred/bpred_unit_impl.hh	/^BPredUnit::predict(const StaticInstPtr &inst, const InstSeqNum &seqNum,$/;"	f	class:BPredUnit
predictBranch	minor/fetch2.cc	/^Fetch2::predictBranch(MinorDynInstPtr inst, BranchData &branch)$/;"	f	class:Minor::Fetch2
predictInOrder	pred/bpred_unit_impl.hh	/^BPredUnit::predictInOrder(const StaticInstPtr &inst, const InstSeqNum &seqNum,$/;"	f	class:BPredUnit
predictTaken	inorder/inorder_dyn_inst.hh	/^    bool predictTaken;$/;"	m	class:InOrderDynInst
predictedBranches	o3/fetch.hh	/^    Stats::Scalar predictedBranches;$/;"	m	class:DefaultFetch
predictedBranches	ozone/front_end.hh	/^    Stats::Scalar predictedBranches;$/;"	m	class:FrontEnd
predictedCorrect	inorder/resources/execution_unit.hh	/^    Stats::Scalar predictedCorrect;$/;"	m	class:ExecutionUnit
predictedIncorrect	inorder/resources/execution_unit.hh	/^    Stats::Scalar predictedIncorrect;$/;"	m	class:ExecutionUnit
predictedNotTaken	inorder/resources/branch_predictor.hh	/^    Stats::Scalar predictedNotTaken;$/;"	m	class:BranchPredictor
predictedNotTakenIncorrect	inorder/resources/execution_unit.hh	/^    Stats::Scalar predictedNotTakenIncorrect;$/;"	m	class:ExecutionUnit
predictedNotTakenIncorrect	o3/iew.hh	/^    Stats::Scalar predictedNotTakenIncorrect;$/;"	m	class:DefaultIEW
predictedTaken	inorder/resources/branch_predictor.hh	/^    Stats::Scalar predictedTaken;$/;"	m	class:BranchPredictor
predictedTaken	minor/dyn_inst.hh	/^    bool predictedTaken;$/;"	m	class:Minor::MinorDynInst
predictedTakenIncorrect	inorder/resources/execution_unit.hh	/^    Stats::Scalar predictedTakenIncorrect;$/;"	m	class:ExecutionUnit
predictedTakenIncorrect	o3/iew.hh	/^    Stats::Scalar predictedTakenIncorrect;$/;"	m	class:DefaultIEW
predictedTarget	minor/dyn_inst.hh	/^    TheISA::PCState predictedTarget;$/;"	m	class:Minor::MinorDynInst
prediction	minor/fetch1.hh	/^    Latch<BranchData>::Output prediction;$/;"	m	class:Minor::Fetch1
predictionOut	minor/fetch2.hh	/^    Latch<BranchData>::Input predictionOut;$/;"	m	class:Minor::Fetch2
predictionSeqNum	minor/dyn_inst.hh	/^    InstSeqNum predictionSeqNum;$/;"	m	class:Minor::InstId
predictionSeqNum	minor/fetch1.hh	/^    InstSeqNum predictionSeqNum;$/;"	m	class:Minor::Fetch1
predictionSeqNum	minor/fetch2.hh	/^    InstSeqNum predictionSeqNum;$/;"	m	class:Minor::Fetch2
prevDestInst	ozone/dyn_inst.hh	/^    DynInstPtr prevDestInst[MaxInstSrcRegs];$/;"	m	class:OzoneDynInst
prevDestRegIdx	base_dyn_inst.hh	/^    PhysRegIndex prevDestRegIdx(int idx) const$/;"	f	class:BaseDynInst
prevDestRegIdx	inorder/inorder_dyn_inst.hh	/^    PhysRegIndex prevDestRegIdx(int idx) const$/;"	f	class:InOrderDynInst
prevPhysReg	o3/rename.hh	/^        PhysRegIndex prevPhysReg;$/;"	m	struct:DefaultRename::RenameHistory
prevStage	inorder/pipeline_stage.hh	/^    TimeBuffer<InterStageStruct>::wire prevStage;$/;"	m	class:PipelineStage
prevStageInstsValid	inorder/pipeline_stage.cc	/^PipelineStage::prevStageInstsValid()$/;"	f	class:PipelineStage
prevStageQueue	inorder/pipeline_stage.hh	/^    TimeBuffer<InterStageStruct> *prevStageQueue;$/;"	m	class:PipelineStage
prevStageValid	inorder/pipeline_stage.hh	/^    bool prevStageValid;$/;"	m	class:PipelineStage
previousCycle	simple/timing.hh	/^    Tick previousCycle;$/;"	m	class:TimingSimpleCPU
print	inorder/resource_pool.cc	/^ResourcePool::print()$/;"	f	class:ResourcePool
print	inorder/resource_sked.cc	/^ResourceSked::print()$/;"	f	class:ResourceSked
print	testers/rubytest/Check.cc	/^Check::print(std::ostream& out) const$/;"	f	class:Check
print	testers/rubytest/CheckTable.cc	/^CheckTable::print(std::ostream& out) const$/;"	f	class:CheckTable
print	testers/rubytest/RubyTester.cc	/^RubyTester::print(std::ostream& out) const$/;"	f	class:RubyTester
printAddr	simple/atomic.cc	/^AtomicSimpleCPU::printAddr(Addr a)$/;"	f	class:AtomicSimpleCPU
printAddr	simple/timing.cc	/^TimingSimpleCPU::printAddr(Addr a)$/;"	f	class:TimingSimpleCPU
printAddr	testers/memtest/memtest.cc	/^MemTest::printAddr(Addr a)$/;"	f	class:MemTest
printAddr	testers/networktest/networktest.cc	/^NetworkTest::printAddr(Addr a)$/;"	f	class:NetworkTest
printAvailableInsts	o3/iew_impl.hh	/^DefaultIEW<Impl>::printAvailableInsts()$/;"	f	class:DefaultIEW
printColumnLabels	legiontrace.cc	/^inline void printColumnLabels(ostream & os)$/;"	f	namespace:Trace
printConfig	testers/directedtest/RubyDirectedTester.hh	/^    void printConfig(std::ostream& out) const {}$/;"	f	class:RubyDirectedTester
printConfig	testers/rubytest/RubyTester.hh	/^    void printConfig(std::ostream& out) const {}$/;"	f	class:RubyTester
printFlags	static_inst.cc	/^StaticInst::printFlags(std::ostream &outs,$/;"	f	class:StaticInst
printLevelHeader	legiontrace.cc	/^inline void printLevelHeader(ostream & os, int level)$/;"	f	namespace:Trace
printMemData	inorder/resources/cache_unit.cc	/^printMemData(uint8_t *data, unsigned size)$/;"	f	file:
printRegName	minor/dyn_inst.cc	/^printRegName(std::ostream &os, TheISA::RegIndex reg)$/;"	f	namespace:Minor
printRegPair	legiontrace.cc	/^inline void printRegPair(ostream & os, char const * title, uint64_t a, uint64_t b)$/;"	f	namespace:Trace
printSectionHeader	legiontrace.cc	/^inline void printSectionHeader(ostream & os, const char * name)$/;"	f	namespace:Trace
printSked	inorder/inorder_dyn_inst.hh	/^    void printSked()$/;"	f	class:InOrderDynInst
printStats	testers/directedtest/RubyDirectedTester.hh	/^    void printStats(std::ostream& out) const {}$/;"	f	class:RubyDirectedTester
printStats	testers/rubytest/RubyTester.hh	/^    void printStats(std::ostream& out) const {}$/;"	f	class:RubyTester
priority	inorder/pipeline_traits.5stage.hh	/^        int priority;$/;"	m	struct:ThePipeline::ScheduleEntry
priority	inorder/pipeline_traits.9stage.hh	/^        int priority;$/;"	m	struct:ThePipeline::ScheduleEntry
priority	inorder/pipeline_traits.9stage.smt2.hh	/^        int priority;$/;"	m	struct:ThePipeline::ScheduleEntry
priority	inorder/resource_sked.hh	/^    int priority;$/;"	m	class:ScheduleEntry
priorityList	o3/fetch.hh	/^    std::list<ThreadID> priorityList;$/;"	m	class:DefaultFetch
priority_list	o3/commit.hh	/^    std::list<ThreadID> priority_list;$/;"	m	class:DefaultCommit
procDelaySlotOnMispred	inorder/inorder_dyn_inst.hh	/^    bool procDelaySlotOnMispred;$/;"	m	class:InOrderDynInst
process	base.cc	/^BaseCPU::ProfileEvent::process()$/;"	f	class:BaseCPU::ProfileEvent
process	base.cc	/^CPUProgressEvent::process()$/;"	f	class:CPUProgressEvent
process	cpuevent.hh	/^    void process() { (object->*F)(tc); }$/;"	f	class:CpuEventWrapper
process	inorder/cpu.cc	/^InOrderCPU::CPUEvent::process()$/;"	f	class:InOrderCPU::CPUEvent
process	inorder/cpu.cc	/^InOrderCPU::TickEvent::process()$/;"	f	class:InOrderCPU::TickEvent
process	inorder/resource.cc	/^ResourceEvent::process()$/;"	f	class:ResourceEvent
process	inorder/resource_pool.9stage.cc	/^ResourcePool::ResPoolEvent::process()$/;"	f	class:ResourcePool::ResPoolEvent
process	inorder/resource_pool.cc	/^ResourcePool::ResPoolEvent::process()$/;"	f	class:ResourcePool::ResPoolEvent
process	inorder/resources/cache_unit.cc	/^CacheUnitEvent::process()$/;"	f	class:CacheUnitEvent
process	inorder/resources/fetch_seq_unit.cc	/^FetchSeqUnit::FetchSeqEvent::process()$/;"	f	class:FetchSeqUnit::FetchSeqEvent
process	inorder/resources/mult_div_unit.cc	/^MDUEvent::process()$/;"	f	class:MDUEvent
process	inorder/resources/tlb_unit.cc	/^TLBUnitEvent::process()$/;"	f	class:TLBUnitEvent
process	kvm/base.hh	/^        void process() { cpu.tick(); }$/;"	f	struct:BaseKvmCPU::TickEvent
process	minor/lsq.hh	/^            void process()$/;"	f	class:Minor::LSQ::SplitDataRequest::TranslationEvent
process	o3/commit_impl.hh	/^DefaultCommit<Impl>::TrapEvent::process()$/;"	f	class:DefaultCommit::TrapEvent
process	o3/cpu.cc	/^FullO3CPU<Impl>::TickEvent::process()$/;"	f	class:FullO3CPU::TickEvent
process	o3/fetch.hh	/^        void process()$/;"	f	class:DefaultFetch::FinishTranslationEvent
process	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::FUCompletion::process()$/;"	f	class:InstructionQueue::FUCompletion
process	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::WritebackEvent::process()$/;"	f	class:LSQUnit::WritebackEvent
process	ozone/back_end_impl.hh	/^BackEnd<Impl>::DCacheCompletionEvent::process()$/;"	f	class:BackEnd::DCacheCompletionEvent
process	ozone/back_end_impl.hh	/^BackEnd<Impl>::LdWritebackEvent::process()$/;"	f	class:BackEnd::LdWritebackEvent
process	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::TickEvent::process()$/;"	f	class:OzoneCPU::TickEvent
process	ozone/inorder_back_end_impl.hh	/^InorderBackEnd<Impl>::DCacheCompletionEvent::process()$/;"	f	class:InorderBackEnd::DCacheCompletionEvent
process	ozone/lsq_unit_impl.hh	/^OzoneLSQ<Impl>::StoreCompletionEvent::process()$/;"	f	class:OzoneLSQ::StoreCompletionEvent
process	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::TrapEvent::process()$/;"	f	class:LWBackEnd::TrapEvent
process	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::WritebackEvent::process()$/;"	f	class:OzoneLWLSQ::WritebackEvent
process	pc_event.cc	/^BreakPCEvent::process(ThreadContext *tc)$/;"	f	class:BreakPCEvent
process	pc_event.cc	/^PanicPCEvent::process(ThreadContext *tc)$/;"	f	class:PanicPCEvent
process	quiesce_event.cc	/^EndQuiesceEvent::process()$/;"	f	class:EndQuiesceEvent
process	simple/atomic.cc	/^AtomicSimpleCPU::TickEvent::process()$/;"	f	class:AtomicSimpleCPU::TickEvent
process	simple/timing.cc	/^TimingSimpleCPU::DcachePort::DTickEvent::process()$/;"	f	class:TimingSimpleCPU::DcachePort::DTickEvent
process	simple/timing.cc	/^TimingSimpleCPU::IcachePort::ITickEvent::process()$/;"	f	class:TimingSimpleCPU::IcachePort::ITickEvent
process	simple/timing.cc	/^TimingSimpleCPU::IprEvent::process()$/;"	f	class:TimingSimpleCPU::IprEvent
process	testers/directedtest/RubyDirectedTester.hh	/^        void process() { tester->wakeup(); }$/;"	f	class:RubyDirectedTester::DirectedStartEvent
process	testers/memtest/memtest.hh	/^        void process() { cpu->tick(); }$/;"	f	class:MemTest::TickEvent
process	testers/networktest/networktest.hh	/^        void process() { cpu->tick(); }$/;"	f	class:NetworkTest::TickEvent
process	testers/rubytest/RubyTester.hh	/^        void process() { tester->wakeup(); }$/;"	f	class:RubyTester::CheckStartEvent
process	thread_state.hh	/^    Process *process;$/;"	m	struct:ThreadState
processBarriers	ozone/front_end_impl.hh	/^FrontEnd<Impl>::processBarriers(DynInstPtr &inst)$/;"	f	class:FrontEnd
processCacheCompletion	inorder/resources/cache_unit.cc	/^CacheUnit::processCacheCompletion(PacketPtr pkt)$/;"	f	class:CacheUnit
processCacheCompletion	inorder/resources/fetch_unit.cc	/^FetchUnit::processCacheCompletion(PacketPtr pkt)$/;"	f	class:FetchUnit
processCacheCompletion	o3/fetch_impl.hh	/^DefaultFetch<Impl>::processCacheCompletion(PacketPtr pkt)$/;"	f	class:DefaultFetch
processCacheCompletion	ozone/front_end_impl.hh	/^FrontEnd<Impl>::processCacheCompletion(PacketPtr pkt)$/;"	f	class:FrontEnd
processFUCompletion	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::processFUCompletion(DynInstPtr &inst, int fu_idx)$/;"	f	class:InstructionQueue
processFreeUnits	o3/fu_pool.cc	/^FUPool::processFreeUnits()$/;"	f	class:FUPool
processInst	ozone/front_end_impl.hh	/^FrontEnd<Impl>::processInst(DynInstPtr &inst)$/;"	f	class:FrontEnd
processInstSchedule	inorder/pipeline_stage.cc	/^PipelineStage::processInstSchedule(DynInstPtr inst,int &reqs_processed)$/;"	f	class:PipelineStage
processInsts	inorder/first_stage.cc	/^FirstStage::processInsts(ThreadID tid)$/;"	f	class:FirstStage
processInsts	inorder/pipeline_stage.cc	/^PipelineStage::processInsts(ThreadID tid)$/;"	f	class:PipelineStage
processInterrupts	inorder/cpu.cc	/^InOrderCPU::processInterrupts(const Fault &interrupt)$/;"	f	class:InOrderCPU
processInterrupts	o3/cpu.cc	/^FullO3CPU<Impl>::processInterrupts(const Fault &interrupt)$/;"	f	class:FullO3CPU
processInterrupts	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::processInterrupts()$/;"	f	class:OzoneCPU
processMoreThanOneInput	minor/decode.hh	/^    bool processMoreThanOneInput;$/;"	m	class:Minor::Decode
processMoreThanOneInput	minor/execute.hh	/^    bool processMoreThanOneInput;$/;"	m	class:Minor::Execute
processMoreThanOneInput	minor/fetch2.hh	/^    bool processMoreThanOneInput;$/;"	m	class:Minor::Fetch2
processResponse	minor/fetch1.cc	/^Fetch1::processResponse(Fetch1::FetchRequestPtr response,$/;"	f	class:Minor::Fetch1
processSquash	inorder/resources/cache_unit.cc	/^CacheUnit::processSquash(CacheReqPacket *cache_pkt)$/;"	f	class:CacheUnit
processStage	inorder/first_stage.cc	/^FirstStage::processStage(bool &status_change)$/;"	f	class:FirstStage
processStage	inorder/pipeline_stage.cc	/^PipelineStage::processStage(bool &status_change)$/;"	f	class:PipelineStage
processThread	inorder/pipeline_stage.cc	/^PipelineStage::processThread(bool &status_change, ThreadID tid)$/;"	f	class:PipelineStage
processing	inorder/resource.hh	/^    bool processing;$/;"	m	class:ResourceRequest
producerInst	o3/iew.hh	/^    Stats::Vector producerInst;$/;"	m	class:DefaultIEW
producerInst	ozone/lw_back_end.hh	/^    Stats::Vector producerInst;$/;"	m	class:LWBackEnd
producer_inst	ozone/back_end.hh	/^    Stats::Vector producer_inst;$/;"	m	class:BackEnd
profile	BaseCPU.py	/^    profile = Param.Latency('0ns', "trace the kernel stack")$/;"	v
profile	simple/probes/simpoint.cc	/^SimPoint::profile(const std::pair<SimpleThread*, StaticInstPtr>& p)$/;"	f	class:SimPoint
profile	thread_state.hh	/^    FunctionProfile *profile;$/;"	m	struct:ThreadState
profileClear	checker/thread_context.hh	/^    void profileClear() { return actualTC->profileClear(); }$/;"	f	class:CheckerThreadContext
profileClear	inorder/thread_context.cc	/^InOrderThreadContext::profileClear()$/;"	f	class:InOrderThreadContext
profileClear	o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::profileClear()$/;"	f	class:O3ThreadContext
profileClear	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::profileClear()$/;"	f	class:OzoneCPU::OzoneTC
profileClear	thread_context.hh	/^    void profileClear() { return actualTC->profileClear(); }$/;"	f	class:ProxyThreadContext
profileClear	thread_state.cc	/^ThreadState::profileClear()$/;"	f	class:ThreadState
profileEvent	base.hh	/^    ProfileEvent *profileEvent;$/;"	m	class:BaseCPU
profileNode	thread_state.hh	/^    ProfileNode *profileNode;$/;"	m	struct:ThreadState
profilePC	thread_state.hh	/^    Addr profilePC;$/;"	m	struct:ThreadState
profileSample	checker/thread_context.hh	/^    void profileSample() { return actualTC->profileSample(); }$/;"	f	class:CheckerThreadContext
profileSample	inorder/thread_context.cc	/^InOrderThreadContext::profileSample()$/;"	f	class:InOrderThreadContext
profileSample	o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::profileSample()$/;"	f	class:O3ThreadContext
profileSample	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::profileSample()$/;"	f	class:OzoneCPU::OzoneTC
profileSample	thread_context.hh	/^    void profileSample() { return actualTC->profileSample(); }$/;"	f	class:ProxyThreadContext
profileSample	thread_state.cc	/^ThreadState::profileSample()$/;"	f	class:ThreadState
profileStall	o3/fetch_impl.hh	/^DefaultFetch<Impl>::profileStall(ThreadID tid) {$/;"	f	class:DefaultFetch
profile_file	simple/probes/SimPoint.py	/^    profile_file = Param.String("simpoint.bb.gz", "BBV (output) file")$/;"	v	class:SimPoint
progressInterval	testers/memtest/memtest.hh	/^    unsigned progressInterval;  \/\/ frequency of progress reports$/;"	m	class:MemTest
progress_interval	BaseCPU.py	/^    progress_interval = Param.Frequency('0Hz',$/;"	v
progress_interval	testers/memtest/MemTest.py	/^    progress_interval = Param.Counter(1000000,$/;"	v	class:MemTest
propagateInterrupt	o3/commit_impl.hh	/^DefaultCommit<Impl>::propagateInterrupt()$/;"	f	class:DefaultCommit
provides	func_unit.cc	/^FuncUnit::provides(OpClass capability)$/;"	f	class:FuncUnit
provides	minor/func_unit.hh	/^    bool provides(OpClass op_class) { return capabilityList[op_class]; }$/;"	f	class:MinorOpClassSet
provides	minor/func_unit.hh	/^    bool provides(OpClass op_class) { return opClasses->provides(op_class); }$/;"	f	class:MinorFUTiming
proxy	thread_state.hh	/^    SETranslatingPortProxy *proxy;$/;"	m	struct:ThreadState
pstate	m5legion_interface.h	/^    uint16_t pstate;$/;"	m	struct:__anon8
push	inorder/resource_sked.cc	/^ResourceSked::push(ScheduleEntry* sked_entry)$/;"	f	class:ResourceSked
push	minor/buffers.hh	/^    push(ElemType &data)$/;"	f	class:Minor::Queue
push	minor/buffers.hh	/^    void push(ElemType &elem)$/;"	f	class:Minor::SelfStallingPipeline
push	pred/ras.cc	/^ReturnAddrStack::push(const TheISA::PCState &return_addr)$/;"	f	class:ReturnAddrStack
pushBefore	inorder/resource_sked.cc	/^ResourceSked::pushBefore(ScheduleEntry* sked_entry, int sked_cmd,$/;"	f	class:ResourceSked
pushFailedRequest	minor/lsq.cc	/^LSQ::pushFailedRequest(MinorDynInstPtr inst)$/;"	f	class:Minor::LSQ
pushRequest	minor/lsq.cc	/^LSQ::pushRequest(MinorDynInstPtr inst, bool isLoad, uint8_t *data,$/;"	f	class:Minor::LSQ
pushTail	minor/buffers.hh	/^    pushTail() const$/;"	f	class:Minor::InputBuffer
pushWire	minor/buffers.hh	/^    typename TimeBuffer<ElemType>::wire pushWire;$/;"	m	class:Minor::SelfStallingPipeline
pushedRAS	pred/bpred_unit.hh	/^        bool pushedRAS;$/;"	m	struct:BPredUnit::PredictorHistory
q	o3/regfile.hh	/^        FloatRegBits q;$/;"	m	union:PhysRegFile::__anon9
queue	minor/buffers.hh	/^      std::deque<ElemType> queue;$/;"	m	class:Minor::Queue
queue	minor/buffers.hh	/^    mutable Queue<ElemType, ReportTraits, BubbleTraits> queue;$/;"	m	class:Minor::InputBuffer
queue	ozone/back_end.hh	/^        enum queue {$/;"	g	class:BackEnd::InstQueue
queue	pc_event.hh	/^    PCEventQueue *queue;$/;"	m	class:PCEvent
queueOnList	o3/inst_queue.hh	/^    bool queueOnList[Num_OpClasses];$/;"	m	class:InstructionQueue
queueType	o3/inst_queue.hh	/^        OpClass queueType;$/;"	m	struct:InstructionQueue::ListOrderEntry
queue_res_dist	ozone/back_end.hh	/^    Stats::VectorDistribution queue_res_dist;$/;"	m	class:BackEnd
quiesceCycles	minor/stats.hh	/^    Stats::Scalar quiesceCycles;$/;"	m	class:Minor::MinorStats
quiesceCycles	o3/cpu.hh	/^    Stats::Scalar quiesceCycles;$/;"	m	class:FullO3CPU
quiesceCycles	ozone/cpu.hh	/^    Stats::Scalar quiesceCycles;$/;"	m	class:OzoneCPU
quiesceEvent	thread_state.hh	/^    EndQuiesceEvent *quiesceEvent;$/;"	m	struct:ThreadState
range_t	pc_event.hh	/^    typedef std::pair<iterator, iterator> range_t;$/;"	t	class:PCEventQueue
rankBits	testers/traffic_gen/generators.hh	/^    const unsigned int rankBits;$/;"	m	class:DramGen
read	inorder/cpu.cc	/^InOrderCPU::read(DynInstPtr inst, Addr addr,$/;"	f	class:InOrderCPU
read	inorder/resources/cache_unit.cc	/^CacheUnit::read(DynInstPtr inst, Addr addr,$/;"	f	class:CacheUnit
read	kvm/perfevent.cc	/^PerfKvmCounter::read() const$/;"	f	class:PerfKvmCounter
read	kvm/perfevent.cc	/^PerfKvmCounter::read(void *buf, size_t size) const$/;"	f	class:PerfKvmCounter
read	nativetrace.hh	/^    read(void *ptr, size_t size)$/;"	f	class:Trace::NativeTrace
read	o3/cpu.hh	/^    Fault read(RequestPtr &req, RequestPtr &sreqLow, RequestPtr &sreqHigh,$/;"	f	class:FullO3CPU
read	o3/lsq.hh	/^LSQ<Impl>::read(RequestPtr req, RequestPtr sreqLow, RequestPtr sreqHigh,$/;"	f	class:LSQ
read	o3/lsq_unit.hh	/^LSQUnit<Impl>::read(Request *req, Request *sreqLow, Request *sreqHigh,$/;"	f	class:LSQUnit
read	ozone/back_end.hh	/^BackEnd<Impl>::read(RequestPtr req, T &data, int load_idx)$/;"	f	class:BackEnd
read	ozone/cpu.hh	/^    Fault read(Request *req, T &data, int load_idx)$/;"	f	class:OzoneCPU
read	ozone/inorder_back_end.hh	/^InorderBackEnd<Impl>::read(Addr addr, T &data, unsigned flags)$/;"	f	class:InorderBackEnd
read	ozone/inorder_back_end.hh	/^InorderBackEnd<Impl>::read(MemReqPtr &req, T &data, int load_idx)$/;"	f	class:InorderBackEnd
read	ozone/lsq_unit.hh	/^OzoneLSQ<Impl>::read(MemReqPtr &req, T &data, int load_idx)$/;"	f	class:OzoneLSQ
read	ozone/lw_back_end.hh	/^LWBackEnd<Impl>::read(RequestPtr req, T &data, int load_idx)$/;"	f	class:LWBackEnd
read	ozone/lw_lsq.hh	/^OzoneLWLSQ<Impl>::read(RequestPtr req, T &data, int load_idx)$/;"	f	class:OzoneLWLSQ
read	pred/sat_counter.hh	/^    const uint8_t read() const$/;"	f	class:SatCounter
read	testers/traffic_gen/generators.cc	/^TraceGen::InputStream::read(TraceElement& element)$/;"	f	class:TraceGen::InputStream
readArchCCReg	o3/cpu.cc	/^FullO3CPU<Impl>::readArchCCReg(int reg_idx, ThreadID tid)$/;"	f	class:FullO3CPU
readArchFloatReg	o3/cpu.cc	/^FullO3CPU<Impl>::readArchFloatReg(int reg_idx, ThreadID tid)$/;"	f	class:FullO3CPU
readArchFloatRegInt	o3/cpu.cc	/^FullO3CPU<Impl>::readArchFloatRegInt(int reg_idx, ThreadID tid)$/;"	f	class:FullO3CPU
readArchIntReg	o3/cpu.cc	/^FullO3CPU<Impl>::readArchIntReg(int reg_idx, ThreadID tid)$/;"	f	class:FullO3CPU
readCCReg	checker/thread_context.hh	/^    CCReg readCCReg(int reg_idx)$/;"	f	class:CheckerThreadContext
readCCReg	inorder/cpu.cc	/^InOrderCPU::readCCReg(RegIndex reg_idx, ThreadID tid)$/;"	f	class:InOrderCPU
readCCReg	inorder/thread_context.cc	/^InOrderThreadContext::readCCReg(int reg_idx)$/;"	f	class:InOrderThreadContext
readCCReg	o3/cpu.cc	/^FullO3CPU<Impl>::readCCReg(int reg_idx)$/;"	f	class:FullO3CPU
readCCReg	o3/regfile.hh	/^    CCReg readCCReg(PhysRegIndex reg_idx)$/;"	f	class:PhysRegFile
readCCReg	o3/thread_context.hh	/^    virtual CCReg readCCReg(int reg_idx) {$/;"	f	class:O3ThreadContext
readCCReg	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::readCCReg(int reg_idx)$/;"	f	class:OzoneCPU::OzoneTC
readCCReg	simple_thread.hh	/^    CCReg readCCReg(int reg_idx)$/;"	f	class:SimpleThread
readCCReg	thread_context.hh	/^    CCReg readCCReg(int reg_idx)$/;"	f	class:ProxyThreadContext
readCCRegFlat	checker/thread_context.hh	/^    CCReg readCCRegFlat(int idx)$/;"	f	class:CheckerThreadContext
readCCRegFlat	inorder/thread_context.cc	/^InOrderThreadContext::readCCRegFlat(int idx)$/;"	f	class:InOrderThreadContext
readCCRegFlat	o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::readCCRegFlat(int reg_idx)$/;"	f	class:O3ThreadContext
readCCRegFlat	simple_thread.hh	/^    CCReg readCCRegFlat(int idx) { return ccRegs[idx]; }$/;"	f	class:SimpleThread
readCCRegFlat	simple_thread.hh	/^    CCReg readCCRegFlat(int idx)$/;"	f	class:SimpleThread
readCCRegFlat	thread_context.hh	/^    CCReg readCCRegFlat(int idx)$/;"	f	class:ProxyThreadContext
readCCRegOperand	checker/cpu.hh	/^    CCReg readCCRegOperand(const StaticInst *si, int idx)$/;"	f	class:CheckerCPU
readCCRegOperand	inorder/inorder_dyn_inst.hh	/^    CCReg readCCRegOperand(const StaticInst *si, int idx) {$/;"	f	class:InOrderDynInst
readCCRegOperand	minor/exec_context.hh	/^    readCCRegOperand(const StaticInst *si, int idx)$/;"	f	class:Minor::ExecContext
readCCRegOperand	o3/dyn_inst.hh	/^    CCReg readCCRegOperand(const StaticInst *si, int idx)$/;"	f	class:BaseO3DynInst
readCCRegOperand	simple/base.hh	/^    CCReg readCCRegOperand(const StaticInst *si, int idx)$/;"	f	class:BaseSimpleCPU
readCCResult	inorder/inorder_dyn_inst.hh	/^    CCReg readCCResult(int idx)$/;"	f	class:InOrderDynInst
readCommitPC	ozone/back_end.hh	/^    Addr readCommitPC() { return commitPC; }$/;"	f	class:BackEnd
readCommitPC	ozone/inorder_back_end.hh	/^    Addr readCommitPC() { return commitPC; }$/;"	f	class:InorderBackEnd
readCommitPC	ozone/lw_back_end.hh	/^    Addr readCommitPC() { return commitPC; }$/;"	f	class:LWBackEnd
readCpuId	inorder/cpu.hh	/^    int readCpuId() { return cpu_id; }$/;"	f	class:InOrderCPU
readDestRegIdx	inorder/inorder_dyn_inst.hh	/^    PhysRegIndex readDestRegIdx(int idx)$/;"	f	class:InOrderDynInst
readFloatBitsResult	inorder/inorder_dyn_inst.hh	/^    FloatRegBits readFloatBitsResult(int idx)$/;"	f	class:InOrderDynInst
readFloatReg	checker/thread_context.hh	/^    FloatReg readFloatReg(int reg_idx)$/;"	f	class:CheckerThreadContext
readFloatReg	inorder/cpu.cc	/^InOrderCPU::readFloatReg(RegIndex reg_idx, ThreadID tid)$/;"	f	class:InOrderCPU
readFloatReg	inorder/thread_context.cc	/^InOrderThreadContext::readFloatReg(int reg_idx)$/;"	f	class:InOrderThreadContext
readFloatReg	o3/cpu.cc	/^FullO3CPU<Impl>::readFloatReg(int reg_idx)$/;"	f	class:FullO3CPU
readFloatReg	o3/regfile.hh	/^    FloatReg readFloatReg(PhysRegIndex reg_idx) const$/;"	f	class:PhysRegFile
readFloatReg	o3/thread_context.hh	/^    virtual FloatReg readFloatReg(int reg_idx) {$/;"	f	class:O3ThreadContext
readFloatReg	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::readFloatReg(int reg_idx)$/;"	f	class:OzoneCPU::OzoneTC
readFloatReg	simple_thread.hh	/^    FloatReg readFloatReg(int reg_idx)$/;"	f	class:SimpleThread
readFloatReg	thread_context.hh	/^    FloatReg readFloatReg(int reg_idx)$/;"	f	class:ProxyThreadContext
readFloatRegBits	checker/thread_context.hh	/^    FloatRegBits readFloatRegBits(int reg_idx)$/;"	f	class:CheckerThreadContext
readFloatRegBits	inorder/cpu.cc	/^InOrderCPU::readFloatRegBits(RegIndex reg_idx, ThreadID tid)$/;"	f	class:InOrderCPU
readFloatRegBits	inorder/thread_context.cc	/^InOrderThreadContext::readFloatRegBits(int reg_idx)$/;"	f	class:InOrderThreadContext
readFloatRegBits	o3/cpu.cc	/^FullO3CPU<Impl>::readFloatRegBits(int reg_idx)$/;"	f	class:FullO3CPU
readFloatRegBits	o3/regfile.hh	/^    FloatRegBits readFloatRegBits(PhysRegIndex reg_idx) const$/;"	f	class:PhysRegFile
readFloatRegBits	o3/thread_context.hh	/^    virtual FloatRegBits readFloatRegBits(int reg_idx) {$/;"	f	class:O3ThreadContext
readFloatRegBits	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::readFloatRegBits(int reg_idx)$/;"	f	class:OzoneCPU::OzoneTC
readFloatRegBits	simple_thread.hh	/^    FloatRegBits readFloatRegBits(int reg_idx)$/;"	f	class:SimpleThread
readFloatRegBits	thread_context.hh	/^    FloatRegBits readFloatRegBits(int reg_idx)$/;"	f	class:ProxyThreadContext
readFloatRegBitsFlat	checker/thread_context.hh	/^    FloatRegBits readFloatRegBitsFlat(int idx)$/;"	f	class:CheckerThreadContext
readFloatRegBitsFlat	inorder/thread_context.cc	/^InOrderThreadContext::readFloatRegBitsFlat(int idx)$/;"	f	class:InOrderThreadContext
readFloatRegBitsFlat	o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::readFloatRegBitsFlat(int reg_idx)$/;"	f	class:O3ThreadContext
readFloatRegBitsFlat	simple_thread.hh	/^    FloatRegBits readFloatRegBitsFlat(int idx) { return floatRegs.i[idx]; }$/;"	f	class:SimpleThread
readFloatRegBitsFlat	thread_context.hh	/^    FloatRegBits readFloatRegBitsFlat(int idx)$/;"	f	class:ProxyThreadContext
readFloatRegFlat	checker/thread_context.hh	/^    FloatReg readFloatRegFlat(int idx)$/;"	f	class:CheckerThreadContext
readFloatRegFlat	inorder/thread_context.cc	/^InOrderThreadContext::readFloatRegFlat(int idx)$/;"	f	class:InOrderThreadContext
readFloatRegFlat	o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::readFloatRegFlat(int reg_idx)$/;"	f	class:O3ThreadContext
readFloatRegFlat	simple_thread.hh	/^    FloatReg readFloatRegFlat(int idx) { return floatRegs.f[idx]; }$/;"	f	class:SimpleThread
readFloatRegFlat	thread_context.hh	/^    FloatReg readFloatRegFlat(int idx)$/;"	f	class:ProxyThreadContext
readFloatRegOperand	checker/cpu.hh	/^    FloatReg readFloatRegOperand(const StaticInst *si, int idx)$/;"	f	class:CheckerCPU
readFloatRegOperand	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::readFloatRegOperand(const StaticInst *si, int idx)$/;"	f	class:InOrderDynInst
readFloatRegOperand	minor/exec_context.hh	/^    readFloatRegOperand(const StaticInst *si, int idx)$/;"	f	class:Minor::ExecContext
readFloatRegOperand	o3/dyn_inst.hh	/^    FloatReg readFloatRegOperand(const StaticInst *si, int idx)$/;"	f	class:BaseO3DynInst
readFloatRegOperand	ozone/dyn_inst.hh	/^    FloatReg readFloatRegOperand(const StaticInst *si, int idx)$/;"	f	class:OzoneDynInst
readFloatRegOperand	simple/base.hh	/^    FloatReg readFloatRegOperand(const StaticInst *si, int idx)$/;"	f	class:BaseSimpleCPU
readFloatRegOperandBits	checker/cpu.hh	/^    FloatRegBits readFloatRegOperandBits(const StaticInst *si, int idx)$/;"	f	class:CheckerCPU
readFloatRegOperandBits	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::readFloatRegOperandBits(const StaticInst *si, int idx)$/;"	f	class:InOrderDynInst
readFloatRegOperandBits	minor/exec_context.hh	/^    readFloatRegOperandBits(const StaticInst *si, int idx)$/;"	f	class:Minor::ExecContext
readFloatRegOperandBits	o3/dyn_inst.hh	/^    FloatRegBits readFloatRegOperandBits(const StaticInst *si, int idx)$/;"	f	class:BaseO3DynInst
readFloatRegOperandBits	ozone/dyn_inst.hh	/^    FloatRegBits readFloatRegOperandBits(const StaticInst *si, int idx)$/;"	f	class:OzoneDynInst
readFloatRegOperandBits	simple/base.hh	/^    FloatRegBits readFloatRegOperandBits(const StaticInst *si, int idx)$/;"	f	class:BaseSimpleCPU
readFloatResult	inorder/inorder_dyn_inst.hh	/^    FloatReg readFloatResult(int idx)$/;"	f	class:InOrderDynInst
readFreeEntries	o3/rename_impl.hh	/^DefaultRename<Impl>::readFreeEntries(ThreadID tid)$/;"	f	class:DefaultRename
readFuncExeInst	checker/thread_context.hh	/^    Counter readFuncExeInst() { return actualTC->readFuncExeInst(); }$/;"	f	class:CheckerThreadContext
readFuncExeInst	inorder/thread_context.hh	/^    Counter readFuncExeInst() { return thread->funcExeInst; }$/;"	f	class:InOrderThreadContext
readFuncExeInst	o3/thread_context.hh	/^    virtual Counter readFuncExeInst() { return thread->funcExeInst; }$/;"	f	class:O3ThreadContext
readFuncExeInst	ozone/cpu.hh	/^        Counter readFuncExeInst() { return thread->funcExeInst; }$/;"	f	class:OzoneCPU::OzoneTC
readFuncExeInst	thread_context.hh	/^    Counter readFuncExeInst() { return actualTC->readFuncExeInst(); }$/;"	f	class:ProxyThreadContext
readFuncExeInst	thread_state.hh	/^    Counter readFuncExeInst() { return funcExeInst; }$/;"	f	struct:ThreadState
readGlobalHist	pred/tournament.hh	/^    inline unsigned readGlobalHist() { return globalHistory; }$/;"	f	class:TournamentBP
readHeadInst	o3/rob_impl.hh	/^ROB<Impl>::readHeadInst(ThreadID tid)$/;"	f	class:ROB
readIntReg	checker/thread_context.hh	/^    uint64_t readIntReg(int reg_idx)$/;"	f	class:CheckerThreadContext
readIntReg	inorder/cpu.cc	/^InOrderCPU::readIntReg(RegIndex reg_idx, ThreadID tid)$/;"	f	class:InOrderCPU
readIntReg	inorder/thread_context.cc	/^InOrderThreadContext::readIntReg(int reg_idx)$/;"	f	class:InOrderThreadContext
readIntReg	o3/cpu.cc	/^FullO3CPU<Impl>::readIntReg(int reg_idx)$/;"	f	class:FullO3CPU
readIntReg	o3/regfile.hh	/^    uint64_t readIntReg(PhysRegIndex reg_idx) const$/;"	f	class:PhysRegFile
readIntReg	o3/thread_context.hh	/^    virtual uint64_t readIntReg(int reg_idx) {$/;"	f	class:O3ThreadContext
readIntReg	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::readIntReg(int reg_idx)$/;"	f	class:OzoneCPU::OzoneTC
readIntReg	simple_thread.hh	/^    uint64_t readIntReg(int reg_idx)$/;"	f	class:SimpleThread
readIntReg	thread_context.hh	/^    uint64_t readIntReg(int reg_idx)$/;"	f	class:ProxyThreadContext
readIntRegFlat	checker/thread_context.hh	/^    uint64_t readIntRegFlat(int idx)$/;"	f	class:CheckerThreadContext
readIntRegFlat	inorder/thread_context.cc	/^InOrderThreadContext::readIntRegFlat(int idx)$/;"	f	class:InOrderThreadContext
readIntRegFlat	o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::readIntRegFlat(int reg_idx)$/;"	f	class:O3ThreadContext
readIntRegFlat	simple_thread.hh	/^    uint64_t readIntRegFlat(int idx) { return intRegs[idx]; }$/;"	f	class:SimpleThread
readIntRegFlat	thread_context.hh	/^    uint64_t readIntRegFlat(int idx)$/;"	f	class:ProxyThreadContext
readIntRegOperand	checker/cpu.hh	/^    IntReg readIntRegOperand(const StaticInst *si, int idx)$/;"	f	class:CheckerCPU
readIntRegOperand	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::readIntRegOperand(const StaticInst *si, int idx, ThreadID tid)$/;"	f	class:InOrderDynInst
readIntRegOperand	inorder/inorder_dyn_inst.hh	/^    IntReg readIntRegOperand(const StaticInst *si, int idx) {$/;"	f	class:InOrderDynInst
readIntRegOperand	minor/exec_context.hh	/^    readIntRegOperand(const StaticInst *si, int idx)$/;"	f	class:Minor::ExecContext
readIntRegOperand	o3/dyn_inst.hh	/^    IntReg readIntRegOperand(const StaticInst *si, int idx)$/;"	f	class:BaseO3DynInst
readIntRegOperand	ozone/dyn_inst.hh	/^    uint64_t readIntRegOperand(const StaticInst *si, int idx)$/;"	f	class:OzoneDynInst
readIntRegOperand	simple/base.hh	/^    IntReg readIntRegOperand(const StaticInst *si, int idx)$/;"	f	class:BaseSimpleCPU
readIntResult	inorder/inorder_dyn_inst.hh	/^    IntReg readIntResult(int idx)$/;"	f	class:InOrderDynInst
readIntSrc	inorder/inorder_dyn_inst.hh	/^    uint64_t readIntSrc(int idx) { return instSrc[idx].intVal; }$/;"	f	class:InOrderDynInst
readLastActivate	checker/thread_context.hh	/^    Tick readLastActivate() { return actualTC->readLastActivate(); }$/;"	f	class:CheckerThreadContext
readLastActivate	inorder/thread_context.cc	/^InOrderThreadContext::readLastActivate()$/;"	f	class:InOrderThreadContext
readLastActivate	o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::readLastActivate()$/;"	f	class:O3ThreadContext
readLastActivate	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::readLastActivate()$/;"	f	class:OzoneCPU::OzoneTC
readLastActivate	thread_context.hh	/^    Tick readLastActivate() { return actualTC->readLastActivate(); }$/;"	f	class:ProxyThreadContext
readLastActivate	thread_state.hh	/^    Tick readLastActivate() const { return lastActivate; }$/;"	f	struct:ThreadState
readLastSuspend	checker/thread_context.hh	/^    Tick readLastSuspend() { return actualTC->readLastSuspend(); }$/;"	f	class:CheckerThreadContext
readLastSuspend	inorder/thread_context.cc	/^InOrderThreadContext::readLastSuspend()$/;"	f	class:InOrderThreadContext
readLastSuspend	o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::readLastSuspend()$/;"	f	class:O3ThreadContext
readLastSuspend	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::readLastSuspend()$/;"	f	class:OzoneCPU::OzoneTC
readLastSuspend	thread_context.hh	/^    Tick readLastSuspend() { return actualTC->readLastSuspend(); }$/;"	f	class:ProxyThreadContext
readLastSuspend	thread_state.hh	/^    Tick readLastSuspend() const { return lastSuspend; }$/;"	f	struct:ThreadState
readMem	base_dyn_inst.hh	/^BaseDynInst<Impl>::readMem(Addr addr, uint8_t *data,$/;"	f	class:BaseDynInst
readMem	checker/cpu.cc	/^CheckerCPU::readMem(Addr addr, uint8_t *data, unsigned size, unsigned flags)$/;"	f	class:CheckerCPU
readMem	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::readMem(Addr addr, uint8_t *data,$/;"	f	class:InOrderDynInst
readMem	minor/exec_context.hh	/^    readMem(Addr addr, uint8_t *data, unsigned int size,$/;"	f	class:Minor::ExecContext
readMem	simple/atomic.cc	/^AtomicSimpleCPU::readMem(Addr addr, uint8_t * data,$/;"	f	class:AtomicSimpleCPU
readMem	simple/timing.cc	/^TimingSimpleCPU::readMem(Addr addr, uint8_t *data,$/;"	f	class:TimingSimpleCPU
readMicroPC	inorder/thread_context.hh	/^    uint64_t readMicroPC()$/;"	f	class:InOrderThreadContext
readMiscReg	checker/cpu.hh	/^    MiscReg readMiscReg(int misc_reg)$/;"	f	class:CheckerCPU
readMiscReg	checker/thread_context.hh	/^    MiscReg readMiscReg(int misc_reg)$/;"	f	class:CheckerThreadContext
readMiscReg	inorder/cpu.cc	/^InOrderCPU::readMiscReg(int misc_reg, ThreadID tid)$/;"	f	class:InOrderCPU
readMiscReg	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::readMiscReg(int misc_reg)$/;"	f	class:InOrderDynInst
readMiscReg	inorder/thread_context.hh	/^    MiscReg readMiscReg(int misc_reg)$/;"	f	class:InOrderThreadContext
readMiscReg	minor/exec_context.hh	/^    readMiscReg(int misc_reg)$/;"	f	class:Minor::ExecContext
readMiscReg	o3/cpu.cc	/^FullO3CPU<Impl>::readMiscReg(int misc_reg, ThreadID tid)$/;"	f	class:FullO3CPU
readMiscReg	o3/dyn_inst.hh	/^    MiscReg readMiscReg(int misc_reg)$/;"	f	class:BaseO3DynInst
readMiscReg	o3/thread_context.hh	/^    virtual MiscReg readMiscReg(int misc_reg)$/;"	f	class:O3ThreadContext
readMiscReg	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::readMiscReg(int misc_reg)$/;"	f	class:OzoneCPU::OzoneTC
readMiscReg	ozone/dyn_inst_impl.hh	/^OzoneDynInst<Impl>::readMiscReg(int misc_reg)$/;"	f	class:OzoneDynInst
readMiscReg	ozone/thread_state.hh	/^    MiscReg readMiscReg(int misc_reg)$/;"	f	struct:OzoneThreadState
readMiscReg	simple/base.hh	/^    MiscReg readMiscReg(int misc_reg)$/;"	f	class:BaseSimpleCPU
readMiscReg	simple_thread.hh	/^    readMiscReg(int misc_reg, ThreadID tid = 0)$/;"	f	class:SimpleThread
readMiscReg	thread_context.hh	/^    MiscReg readMiscReg(int misc_reg)$/;"	f	class:ProxyThreadContext
readMiscRegNoEffect	checker/cpu.hh	/^    MiscReg readMiscRegNoEffect(int misc_reg)$/;"	f	class:CheckerCPU
readMiscRegNoEffect	checker/thread_context.hh	/^    MiscReg readMiscRegNoEffect(int misc_reg)$/;"	f	class:CheckerThreadContext
readMiscRegNoEffect	inorder/cpu.cc	/^InOrderCPU::readMiscRegNoEffect(int misc_reg, ThreadID tid)$/;"	f	class:InOrderCPU
readMiscRegNoEffect	inorder/thread_context.hh	/^    MiscReg readMiscRegNoEffect(int misc_reg)$/;"	f	class:InOrderThreadContext
readMiscRegNoEffect	minor/exec_context.hh	/^    readMiscRegNoEffect(int misc_reg)$/;"	f	class:Minor::ExecContext
readMiscRegNoEffect	o3/cpu.cc	/^FullO3CPU<Impl>::readMiscRegNoEffect(int misc_reg, ThreadID tid)$/;"	f	class:FullO3CPU
readMiscRegNoEffect	o3/thread_context.hh	/^    virtual MiscReg readMiscRegNoEffect(int misc_reg)$/;"	f	class:O3ThreadContext
readMiscRegNoEffect	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::readMiscRegNoEffect(int misc_reg)$/;"	f	class:OzoneCPU::OzoneTC
readMiscRegNoEffect	ozone/dyn_inst_impl.hh	/^OzoneDynInst<Impl>::readMiscRegNoEffect(int misc_reg)$/;"	f	class:OzoneDynInst
readMiscRegNoEffect	ozone/thread_state.hh	/^    MiscReg readMiscRegNoEffect(int misc_reg)$/;"	f	struct:OzoneThreadState
readMiscRegNoEffect	simple/base.hh	/^    MiscReg readMiscRegNoEffect(int misc_reg)$/;"	f	class:BaseSimpleCPU
readMiscRegNoEffect	simple_thread.hh	/^    readMiscRegNoEffect(int misc_reg, ThreadID tid = 0)$/;"	f	class:SimpleThread
readMiscRegNoEffect	thread_context.hh	/^    MiscReg readMiscRegNoEffect(int misc_reg)$/;"	f	class:ProxyThreadContext
readMiscRegOperand	checker/cpu.hh	/^    MiscReg readMiscRegOperand(const StaticInst *si, int idx)$/;"	f	class:CheckerCPU
readMiscRegOperand	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::readMiscRegOperand(const StaticInst *si, int idx)$/;"	f	class:InOrderDynInst
readMiscRegOperand	minor/exec_context.hh	/^    readMiscRegOperand(const StaticInst *si, int idx)$/;"	f	class:Minor::ExecContext
readMiscRegOperand	o3/dyn_inst.hh	/^    TheISA::MiscReg readMiscRegOperand(const StaticInst *si, int idx)$/;"	f	class:BaseO3DynInst
readMiscRegOperand	simple/base.hh	/^    MiscReg readMiscRegOperand(const StaticInst *si, int idx)$/;"	f	class:BaseSimpleCPU
readNextMicroPC	inorder/thread_context.hh	/^    uint64_t readNextMicroPC()$/;"	f	class:InOrderThreadContext
readNextNPC	ozone/cpu.hh	/^        uint64_t readNextNPC()$/;"	f	class:OzoneCPU::OzoneTC
readNextPC	ozone/cpu.hh	/^        uint64_t readNextPC() { return thread->nextPC; }$/;"	f	class:OzoneCPU::OzoneTC
readNextPC	ozone/thread_state.hh	/^    uint64_t readNextPC()$/;"	f	struct:OzoneThreadState
readPC	ozone/cpu.hh	/^        uint64_t readPC() { return thread->PC; }$/;"	f	class:OzoneCPU::OzoneTC
readPC	ozone/thread_state.hh	/^    uint64_t readPC()$/;"	f	struct:OzoneThreadState
readPercent	testers/traffic_gen/generators.hh	/^    const uint8_t readPercent;$/;"	m	class:LinearGen
readPercent	testers/traffic_gen/generators.hh	/^    const uint8_t readPercent;$/;"	m	class:RandomGen
readPorts	testers/rubytest/RubyTester.hh	/^    std::vector<MasterPort*> readPorts;$/;"	m	class:RubyTester
readPredMicroPC	inorder/inorder_dyn_inst.hh	/^    Addr readPredMicroPC() { return predPC.microPC(); }$/;"	f	class:InOrderDynInst
readPredTaken	base_dyn_inst.hh	/^    bool readPredTaken()$/;"	f	class:BaseDynInst
readPredTarg	base_dyn_inst.hh	/^    const TheISA::PCState &readPredTarg() { return predPC; }$/;"	f	class:BaseDynInst
readPredTarg	inorder/inorder_dyn_inst.hh	/^    TheISA::PCState readPredTarg() { return predPC; }$/;"	f	class:InOrderDynInst
readPredicate	base_dyn_inst.hh	/^    bool readPredicate()$/;"	f	class:BaseDynInst
readPredicate	checker/cpu.hh	/^    bool readPredicate() { return thread->readPredicate(); }$/;"	f	class:CheckerCPU
readPredicate	inorder/inorder_dyn_inst.hh	/^    bool readPredicate() {$/;"	f	class:InOrderDynInst
readPredicate	minor/exec_context.hh	/^    readPredicate()$/;"	f	class:Minor::ExecContext
readPredicate	simple/base.hh	/^    bool readPredicate() { return thread->readPredicate(); }$/;"	f	class:BaseSimpleCPU
readPredicate	simple_thread.hh	/^    bool readPredicate()$/;"	f	class:SimpleThread
readPredicate	thread_context.hh	/^    bool readPredicate() { return actualTC->readPredicate(); }$/;"	f	class:ProxyThreadContext
readRegOtherThread	checker/cpu.hh	/^    MiscReg readRegOtherThread(int misc_reg, ThreadID tid)$/;"	f	class:CheckerCPU
readRegOtherThread	inorder/cpu.cc	/^InOrderCPU::readRegOtherThread(unsigned reg_idx, ThreadID tid)$/;"	f	class:InOrderCPU
readRegOtherThread	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::readRegOtherThread(int reg_idx, ThreadID tid)$/;"	f	class:InOrderDynInst
readRegOtherThread	inorder/thread_context.cc	/^InOrderThreadContext::readRegOtherThread(int reg_idx, ThreadID tid)$/;"	f	class:InOrderThreadContext
readRegOtherThread	minor/exec_context.hh	/^    readRegOtherThread(int idx, ThreadID tid = InvalidThreadID)$/;"	f	class:Minor::ExecContext
readRegOtherThread	o3/dyn_inst.hh	/^    MiscReg readRegOtherThread(int misc_reg, ThreadID tid)$/;"	f	class:BaseO3DynInst
readRegOtherThread	simple/base.hh	/^    MiscReg readRegOtherThread(int regIdx, ThreadID tid = InvalidThreadID)$/;"	f	class:BaseSimpleCPU
readRegOtherThread	thread_context.hh	/^    readRegOtherThread(int misc_reg, ThreadID tid)$/;"	f	class:ThreadContext
readResult	base_dyn_inst.hh	/^    void readResult(T& t)$/;"	f	class:BaseDynInst
readResultTime	inorder/inorder_dyn_inst.hh	/^    Tick readResultTime(int idx) { return instResult[idx].tick; }$/;"	f	class:InOrderDynInst
readSrcRegIdx	inorder/inorder_dyn_inst.hh	/^    PhysRegIndex readSrcRegIdx(int idx)$/;"	f	class:InOrderDynInst
readStCondFailures	base_dyn_inst.hh	/^    unsigned int readStCondFailures() const$/;"	f	class:BaseDynInst
readStCondFailures	checker/cpu.hh	/^    unsigned int readStCondFailures() const {$/;"	f	class:CheckerCPU
readStCondFailures	checker/thread_context.hh	/^    unsigned readStCondFailures()$/;"	f	class:CheckerThreadContext
readStCondFailures	inorder/inorder_dyn_inst.hh	/^    unsigned int readStCondFailures() const$/;"	f	class:InOrderDynInst
readStCondFailures	inorder/thread_context.hh	/^    unsigned readStCondFailures()$/;"	f	class:InOrderThreadContext
readStCondFailures	minor/exec_context.hh	/^    unsigned int readStCondFailures() const { return 0; }$/;"	f	class:Minor::ExecContext
readStCondFailures	o3/thread_context.hh	/^    virtual unsigned readStCondFailures()$/;"	f	class:O3ThreadContext
readStCondFailures	ozone/cpu.hh	/^        unsigned readStCondFailures()$/;"	f	class:OzoneCPU::OzoneTC
readStCondFailures	simple/base.hh	/^    unsigned int readStCondFailures() const {$/;"	f	class:BaseSimpleCPU
readStCondFailures	simple_thread.hh	/^    unsigned readStCondFailures() { return storeCondFailures; }$/;"	f	class:SimpleThread
readStCondFailures	thread_context.hh	/^    unsigned readStCondFailures()$/;"	f	class:ProxyThreadContext
readStallSignals	inorder/pipeline_stage.cc	/^PipelineStage::readStallSignals(ThreadID tid)$/;"	f	class:PipelineStage
readStallSignals	o3/decode_impl.hh	/^DefaultDecode<Impl>::readStallSignals(ThreadID tid)$/;"	f	class:DefaultDecode
readStallSignals	o3/rename_impl.hh	/^DefaultRename<Impl>::readStallSignals(ThreadID tid)$/;"	f	class:DefaultRename
readTailInst	o3/rob_impl.hh	/^ROB<Impl>::readTailInst(ThreadID tid)$/;"	f	class:ROB
readTid	inorder/inorder_dyn_inst.hh	/^    short readTid() { return threadNumber; }$/;"	f	class:InOrderDynInst
readVpn	inorder/inorder_dyn_inst.hh	/^    int readVpn() { return virtProcNumber; }$/;"	f	class:InOrderDynInst
readyInsts	o3/inst_queue.hh	/^    ReadyInstQueue readyInsts[Num_OpClasses];$/;"	m	class:InstructionQueue
readyInsts	ozone/inst_queue.hh	/^    ReadyInstQueue readyInsts;$/;"	m	class:InstQueue
readyInstsForCommit	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::readyInstsForCommit()$/;"	f	class:LWBackEnd
readyIt	o3/inst_queue.hh	/^    ListOrderIt readyIt[Num_OpClasses];$/;"	m	class:InstructionQueue
readyList	ozone/back_end.hh	/^        InstList readyList;$/;"	m	class:BackEnd::InstQueue
readyQueue	ozone/back_end.hh	/^        ReadyInstQueue readyQueue;$/;"	m	class:BackEnd::InstQueue
readyRegs	base_dyn_inst.hh	/^    uint8_t readyRegs;$/;"	m	class:BaseDynInst
readyRegs	inorder/inorder_dyn_inst.hh	/^    unsigned readyRegs;$/;"	m	class:InOrderDynInst
readyThreads	inorder/cpu.hh	/^    std::list<ThreadID> readyThreads;$/;"	m	class:InOrderCPU
readyToCommit	base_dyn_inst.hh	/^    bool readyToCommit() const { return status[CanCommit]; }$/;"	f	class:BaseDynInst
readyToCommit	inorder/inorder_dyn_inst.hh	/^    bool readyToCommit() const { return status[CanCommit]; }$/;"	f	class:InOrderDynInst
readyToIssue	base_dyn_inst.hh	/^    bool readyToIssue() const { return status[CanIssue]; }$/;"	f	class:BaseDynInst
readyToIssue	inorder/inorder_dyn_inst.hh	/^    bool readyToIssue() const { return status[CanIssue]; }$/;"	f	class:InOrderDynInst
reason	minor/pipe_data.hh	/^    Reason reason;$/;"	m	class:Minor::BranchData
recent	decode_cache.hh	/^    PageIt recent[2];$/;"	m	class:DecodeCache::AddrMap
recordPCChange	checker/cpu.hh	/^    void recordPCChange(const TheISA::PCState &val)$/;"	f	class:CheckerCPU
recordProducer	o3/inst_queue.hh	/^    void recordProducer(DynInstPtr &inst)$/;"	f	class:InstructionQueue
recordResult	base_dyn_inst.hh	/^    void recordResult(bool f) { instFlags[RecordResult] = f; }$/;"	f	class:BaseDynInst
record_t	pc_event.hh	/^    typedef PCEvent * record_t;$/;"	t	class:PCEventQueue
recvAtomic	ozone/front_end_impl.hh	/^FrontEnd<Impl>::IcachePort::recvAtomic(PacketPtr pkt)$/;"	f	class:FrontEnd::IcachePort
recvAtomic	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::DcachePort::recvAtomic(PacketPtr pkt)$/;"	f	class:OzoneLWLSQ::DcachePort
recvAtomicSnoop	simple/atomic.cc	/^AtomicSimpleCPU::AtomicCPUDPort::recvAtomicSnoop(PacketPtr pkt)$/;"	f	class:AtomicSimpleCPU::AtomicCPUDPort
recvAtomicSnoop	simple/atomic.hh	/^        virtual Tick recvAtomicSnoop(PacketPtr pkt) { return 0; }$/;"	f	class:AtomicSimpleCPU::AtomicCPUPort
recvAtomicSnoop	testers/memtest/memtest.hh	/^        virtual Tick recvAtomicSnoop(PacketPtr pkt) { return 0; }$/;"	f	class:MemTest::CpuPort
recvFunctional	ozone/front_end_impl.hh	/^FrontEnd<Impl>::IcachePort::recvFunctional(PacketPtr pkt)$/;"	f	class:FrontEnd::IcachePort
recvFunctional	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::DcachePort::recvFunctional(PacketPtr pkt)$/;"	f	class:OzoneLWLSQ::DcachePort
recvFunctionalSnoop	o3/cpu.hh	/^        virtual void recvFunctionalSnoop(PacketPtr pkt)$/;"	f	class:FullO3CPU::DcachePort
recvFunctionalSnoop	simple/atomic.cc	/^AtomicSimpleCPU::AtomicCPUDPort::recvFunctionalSnoop(PacketPtr pkt)$/;"	f	class:AtomicSimpleCPU::AtomicCPUDPort
recvFunctionalSnoop	testers/memtest/memtest.hh	/^        virtual void recvFunctionalSnoop(PacketPtr pkt) { }$/;"	f	class:MemTest::CpuPort
recvRetry	inorder/cpu.cc	/^InOrderCPU::CachePort::recvRetry()$/;"	f	class:InOrderCPU::CachePort
recvRetry	inorder/resources/cache_unit.cc	/^CacheUnit::recvRetry()$/;"	f	class:CacheUnit
recvRetry	kvm/base.hh	/^        void recvRetry()$/;"	f	class:BaseKvmCPU::KVMCpuPort
recvRetry	minor/fetch1.cc	/^Fetch1::recvRetry()$/;"	f	class:Minor::Fetch1
recvRetry	minor/fetch1.hh	/^        void recvRetry() { fetch.recvRetry(); }$/;"	f	class:Minor::Fetch1::IcachePort
recvRetry	minor/lsq.cc	/^LSQ::recvRetry()$/;"	f	class:Minor::LSQ
recvRetry	minor/lsq.hh	/^        void recvRetry() { lsq.recvRetry(); }$/;"	f	class:Minor::LSQ::DcachePort
recvRetry	o3/cpu.cc	/^FullO3CPU<Impl>::DcachePort::recvRetry()$/;"	f	class:FullO3CPU::DcachePort
recvRetry	o3/cpu.cc	/^FullO3CPU<Impl>::IcachePort::recvRetry()$/;"	f	class:FullO3CPU::IcachePort
recvRetry	o3/fetch_impl.hh	/^DefaultFetch<Impl>::recvRetry()$/;"	f	class:DefaultFetch
recvRetry	o3/lsq_impl.hh	/^LSQ<Impl>::recvRetry()$/;"	f	class:LSQ
recvRetry	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::recvRetry()$/;"	f	class:LSQUnit
recvRetry	ozone/front_end_impl.hh	/^FrontEnd<Impl>::IcachePort::recvRetry()$/;"	f	class:FrontEnd::IcachePort
recvRetry	ozone/front_end_impl.hh	/^FrontEnd<Impl>::recvRetry()$/;"	f	class:FrontEnd
recvRetry	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::DcachePort::recvRetry()$/;"	f	class:OzoneLWLSQ::DcachePort
recvRetry	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::recvRetry()$/;"	f	class:OzoneLWLSQ
recvRetry	simple/atomic.hh	/^        void recvRetry()$/;"	f	class:AtomicSimpleCPU::AtomicCPUPort
recvRetry	simple/timing.cc	/^TimingSimpleCPU::DcachePort::recvRetry()$/;"	f	class:TimingSimpleCPU::DcachePort
recvRetry	simple/timing.cc	/^TimingSimpleCPU::IcachePort::recvRetry()$/;"	f	class:TimingSimpleCPU::IcachePort
recvRetry	testers/directedtest/RubyDirectedTester.hh	/^        virtual void recvRetry()$/;"	f	class:RubyDirectedTester::CpuPort
recvRetry	testers/memtest/memtest.cc	/^MemTest::CpuPort::recvRetry()$/;"	f	class:MemTest::CpuPort
recvRetry	testers/networktest/networktest.cc	/^NetworkTest::CpuPort::recvRetry()$/;"	f	class:NetworkTest::CpuPort
recvRetry	testers/rubytest/RubyTester.hh	/^        virtual void recvRetry()$/;"	f	class:RubyTester::CpuPort
recvRetry	testers/traffic_gen/traffic_gen.cc	/^TrafficGen::recvRetry()$/;"	f	class:TrafficGen
recvRetry	testers/traffic_gen/traffic_gen.hh	/^        void recvRetry() { trafficGen.recvRetry(); }$/;"	f	class:TrafficGen::TrafficGenPort
recvTiming	ozone/front_end_impl.hh	/^FrontEnd<Impl>::IcachePort::recvTiming(PacketPtr pkt)$/;"	f	class:FrontEnd::IcachePort
recvTiming	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::DcachePort::recvTiming(PacketPtr pkt)$/;"	f	class:OzoneLWLSQ::DcachePort
recvTimingResp	inorder/cpu.cc	/^InOrderCPU::CachePort::recvTimingResp(Packet *pkt)$/;"	f	class:InOrderCPU::CachePort
recvTimingResp	kvm/base.hh	/^        bool recvTimingResp(PacketPtr pkt)$/;"	f	class:BaseKvmCPU::KVMCpuPort
recvTimingResp	minor/fetch1.cc	/^Fetch1::recvTimingResp(PacketPtr response)$/;"	f	class:Minor::Fetch1
recvTimingResp	minor/fetch1.hh	/^        bool recvTimingResp(PacketPtr pkt)$/;"	f	class:Minor::Fetch1::IcachePort
recvTimingResp	minor/lsq.cc	/^LSQ::recvTimingResp(PacketPtr response)$/;"	f	class:Minor::LSQ
recvTimingResp	minor/lsq.hh	/^        bool recvTimingResp(PacketPtr pkt)$/;"	f	class:Minor::LSQ::DcachePort
recvTimingResp	o3/cpu.cc	/^FullO3CPU<Impl>::DcachePort::recvTimingResp(PacketPtr pkt)$/;"	f	class:FullO3CPU::DcachePort
recvTimingResp	o3/cpu.cc	/^FullO3CPU<Impl>::IcachePort::recvTimingResp(PacketPtr pkt)$/;"	f	class:FullO3CPU::IcachePort
recvTimingResp	o3/lsq_impl.hh	/^LSQ<Impl>::recvTimingResp(PacketPtr pkt)$/;"	f	class:LSQ
recvTimingResp	simple/atomic.hh	/^        bool recvTimingResp(PacketPtr pkt)$/;"	f	class:AtomicSimpleCPU::AtomicCPUPort
recvTimingResp	simple/timing.cc	/^TimingSimpleCPU::DcachePort::recvTimingResp(PacketPtr pkt)$/;"	f	class:TimingSimpleCPU::DcachePort
recvTimingResp	simple/timing.cc	/^TimingSimpleCPU::IcachePort::recvTimingResp(PacketPtr pkt)$/;"	f	class:TimingSimpleCPU::IcachePort
recvTimingResp	testers/directedtest/RubyDirectedTester.cc	/^RubyDirectedTester::CpuPort::recvTimingResp(PacketPtr pkt)$/;"	f	class:RubyDirectedTester::CpuPort
recvTimingResp	testers/memtest/memtest.cc	/^MemTest::CpuPort::recvTimingResp(PacketPtr pkt)$/;"	f	class:MemTest::CpuPort
recvTimingResp	testers/networktest/networktest.cc	/^NetworkTest::CpuPort::recvTimingResp(PacketPtr pkt)$/;"	f	class:NetworkTest::CpuPort
recvTimingResp	testers/rubytest/RubyTester.cc	/^RubyTester::CpuPort::recvTimingResp(PacketPtr pkt)$/;"	f	class:RubyTester::CpuPort
recvTimingResp	testers/traffic_gen/traffic_gen.cc	/^TrafficGen::TrafficGenPort::recvTimingResp(PacketPtr pkt)$/;"	f	class:TrafficGen::TrafficGenPort
recvTimingSnoopReq	inorder/cpu.hh	/^        void recvTimingSnoopReq(PacketPtr pkt) { }$/;"	f	class:InOrderCPU::CachePort
recvTimingSnoopReq	minor/cpu.hh	/^        virtual void recvTimingSnoopReq(PacketPtr pkt) { }$/;"	f	class:MinorCPU::MinorCPUPort
recvTimingSnoopReq	minor/lsq.cc	/^LSQ::recvTimingSnoopReq(PacketPtr pkt)$/;"	f	class:Minor::LSQ
recvTimingSnoopReq	minor/lsq.hh	/^        void recvTimingSnoopReq(PacketPtr pkt)$/;"	f	class:Minor::LSQ::DcachePort
recvTimingSnoopReq	o3/cpu.cc	/^FullO3CPU<Impl>::DcachePort::recvTimingSnoopReq(PacketPtr pkt)$/;"	f	class:FullO3CPU::DcachePort
recvTimingSnoopReq	o3/cpu.hh	/^        virtual void recvTimingSnoopReq(PacketPtr pkt) { }$/;"	f	class:FullO3CPU::IcachePort
recvTimingSnoopReq	o3/lsq_impl.hh	/^LSQ<Impl>::recvTimingSnoopReq(PacketPtr pkt)$/;"	f	class:LSQ
recvTimingSnoopReq	simple/timing.cc	/^TimingSimpleCPU::DcachePort::recvTimingSnoopReq(PacketPtr pkt)$/;"	f	class:TimingSimpleCPU::DcachePort
recvTimingSnoopReq	simple/timing.hh	/^        virtual void recvTimingSnoopReq(PacketPtr pkt) {}$/;"	f	class:TimingSimpleCPU::TimingCPUPort
recvTimingSnoopReq	testers/memtest/memtest.hh	/^        virtual void recvTimingSnoopReq(PacketPtr pkt) { }$/;"	f	class:MemTest::CpuPort
refresh	kvm/perfevent.cc	/^PerfKvmCounter::refresh(int refresh)$/;"	f	class:PerfKvmCounter
reg	TimingExpr.py	/^    reg = Param.TimingExpr("register raw index to read")$/;"	v	class:TimingExprReadIntReg
reg	timing_expr.hh	/^    TimingExpr *reg;$/;"	m	class:TimingExprReadIntReg
regDepMap	inorder/resources/decode_unit.hh	/^    RegDepMap *regDepMap[ThePipeline::MaxThreads];$/;"	m	class:DecodeUnit
regDepMap	inorder/resources/use_def.hh	/^    RegDepMap *regDepMap[ThePipeline::MaxThreads];$/;"	m	class:UseDefUnit
regFile	o3/cpu.hh	/^    PhysRegFile regFile;$/;"	m	class:FullO3CPU
regFile	o3/free_list.hh	/^    PhysRegFile *regFile;$/;"	m	class:UnifiedFreeList
regFile	o3/rename_map.hh	/^    PhysRegFile *regFile;$/;"	m	class:UnifiedRenameMap
regForwards	inorder/resources/use_def.hh	/^    Stats::Scalar regForwards;$/;"	m	class:UseDefUnit
regFpFull	ozone/front_end.hh	/^    Stats::Formula regFpFull;$/;"	m	class:FrontEnd
regIdxToClass	reg_class.hh	/^RegClass regIdxToClass(TheISA::RegIndex reg_idx,$/;"	f
regIntFull	ozone/front_end.hh	/^    Stats::Formula regIntFull;$/;"	m	class:FrontEnd
regMap	inorder/reg_dep_map.hh	/^    std::vector<DepMap> regMap;$/;"	m	class:RegDepMap
regProbeListeners	o3/probe/simple_trace.cc	/^void SimpleTrace::regProbeListeners()$/;"	f	class:SimpleTrace
regProbeListeners	simple/probes/simpoint.cc	/^SimPoint::regProbeListeners()$/;"	f	class:SimPoint
regProbePoints	o3/commit_impl.hh	/^DefaultCommit<Impl>::regProbePoints()$/;"	f	class:DefaultCommit
regProbePoints	o3/cpu.cc	/^FullO3CPU<Impl>::regProbePoints()$/;"	f	class:FullO3CPU
regProbePoints	o3/fetch_impl.hh	/^DefaultFetch<Impl>::regProbePoints()$/;"	f	class:DefaultFetch
regProbePoints	o3/iew_impl.hh	/^DefaultIEW<Impl>::regProbePoints()$/;"	f	class:DefaultIEW
regProbePoints	simple/atomic.cc	/^AtomicSimpleCPU::regProbePoints()$/;"	f	class:AtomicSimpleCPU
regScoreBoard	o3/scoreboard.hh	/^    std::vector<bool> regScoreBoard;$/;"	m	class:Scoreboard
regScoreboard	o3/inst_queue.hh	/^    std::vector<bool> regScoreboard;$/;"	m	class:InstructionQueue
regStats	base.cc	/^BaseCPU::regStats()$/;"	f	class:BaseCPU
regStats	checker/thread_context.hh	/^    void regStats(const std::string &name)$/;"	f	class:CheckerThreadContext
regStats	inorder/cpu.cc	/^InOrderCPU::regStats()$/;"	f	class:InOrderCPU
regStats	inorder/pipeline_stage.cc	/^PipelineStage::regStats()$/;"	f	class:PipelineStage
regStats	inorder/resource.hh	/^    virtual void regStats() { }$/;"	f	class:Resource
regStats	inorder/resource_pool.9stage.cc	/^ResourcePool::regStats()$/;"	f	class:ResourcePool
regStats	inorder/resource_pool.cc	/^ResourcePool::regStats()$/;"	f	class:ResourcePool
regStats	inorder/resources/agen_unit.cc	/^AGENUnit::regStats()$/;"	f	class:AGENUnit
regStats	inorder/resources/branch_predictor.cc	/^BranchPredictor::regStats()$/;"	f	class:BranchPredictor
regStats	inorder/resources/execution_unit.cc	/^ExecutionUnit::regStats()$/;"	f	class:ExecutionUnit
regStats	inorder/resources/inst_buffer.cc	/^InstBuffer::regStats()$/;"	f	class:InstBuffer
regStats	inorder/resources/mult_div_unit.cc	/^MultDivUnit::regStats()$/;"	f	class:MultDivUnit
regStats	inorder/resources/use_def.cc	/^UseDefUnit::regStats()$/;"	f	class:UseDefUnit
regStats	inorder/thread_context.cc	/^InOrderThreadContext::regStats(const std::string &name)$/;"	f	class:InOrderThreadContext
regStats	kvm/base.cc	/^BaseKvmCPU::regStats()$/;"	f	class:BaseKvmCPU
regStats	minor/cpu.cc	/^MinorCPU::regStats()$/;"	f	class:MinorCPU
regStats	minor/stats.cc	/^MinorStats::regStats(const std::string &name, BaseCPU &baseCpu)$/;"	f	class:Minor::MinorStats
regStats	o3/commit_impl.hh	/^DefaultCommit<Impl>::regStats()$/;"	f	class:DefaultCommit
regStats	o3/cpu.cc	/^BaseO3CPU::regStats()$/;"	f	class:BaseO3CPU
regStats	o3/cpu.cc	/^FullO3CPU<Impl>::regStats()$/;"	f	class:FullO3CPU
regStats	o3/decode_impl.hh	/^DefaultDecode<Impl>::regStats()$/;"	f	class:DefaultDecode
regStats	o3/fetch_impl.hh	/^DefaultFetch<Impl>::regStats()$/;"	f	class:DefaultFetch
regStats	o3/iew_impl.hh	/^DefaultIEW<Impl>::regStats()$/;"	f	class:DefaultIEW
regStats	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::regStats()$/;"	f	class:InstructionQueue
regStats	o3/lsq_impl.hh	/^LSQ<Impl>::regStats()$/;"	f	class:LSQ
regStats	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::regStats()$/;"	f	class:LSQUnit
regStats	o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::regStats()$/;"	f	class:MemDepUnit
regStats	o3/rename_impl.hh	/^DefaultRename<Impl>::regStats()$/;"	f	class:DefaultRename
regStats	o3/rob_impl.hh	/^ROB<Impl>::regStats()$/;"	f	class:ROB
regStats	o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::regStats(const std::string &name)$/;"	f	class:O3ThreadContext
regStats	ozone/back_end_impl.hh	/^BackEnd<Impl>::InstQueue::regStats()$/;"	f	class:BackEnd::InstQueue
regStats	ozone/back_end_impl.hh	/^BackEnd<Impl>::regStats()$/;"	f	class:BackEnd
regStats	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::regStats(const std::string &name)$/;"	f	class:OzoneCPU::OzoneTC
regStats	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::regStats()$/;"	f	class:OzoneCPU
regStats	ozone/front_end_impl.hh	/^FrontEnd<Impl>::regStats()$/;"	f	class:FrontEnd
regStats	ozone/inorder_back_end.hh	/^    void regStats() { }$/;"	f	class:InorderBackEnd
regStats	ozone/inst_queue_impl.hh	/^InstQueue<Impl>::regStats()$/;"	f	class:InstQueue
regStats	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::regStats()$/;"	f	class:LWBackEnd
regStats	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::regStats()$/;"	f	class:OzoneLWLSQ
regStats	pred/bpred_unit_impl.hh	/^BPredUnit::regStats()$/;"	f	class:BPredUnit
regStats	simple/base.cc	/^BaseSimpleCPU::regStats()$/;"	f	class:BaseSimpleCPU
regStats	simple_thread.cc	/^SimpleThread::regStats(const string &name)$/;"	f	class:SimpleThread
regStats	testers/memtest/memtest.cc	/^MemTest::regStats()$/;"	f	class:MemTest
regStats	testers/traffic_gen/traffic_gen.cc	/^TrafficGen::regStats()$/;"	f	class:TrafficGen
regStats	thread_context.hh	/^    void regStats(const std::string &name) { actualTC->regStats(name); }$/;"	f	class:ProxyThreadContext
registerThreadContexts	base.cc	/^BaseCPU::registerThreadContexts()$/;"	f	class:BaseCPU
regsReady	o3/mem_dep_unit.hh	/^        bool regsReady;$/;"	m	class:MemDepUnit::MemDepEntry
regsReady	o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::regsReady(DynInstPtr &inst)$/;"	f	class:MemDepUnit
rejectRequest	inorder/resource.cc	/^Resource::rejectRequest(DynInstPtr inst)$/;"	f	class:Resource
releaseReq	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::releaseReq(ResourceRequest* req)$/;"	f	class:InOrderDynInst
remainingSpace	minor/buffers.hh	/^    remainingSpace() const$/;"	f	class:Minor::Queue
remove	inorder/reg_dep_map.cc	/^RegDepMap::remove(DynInstPtr inst)$/;"	f	class:RegDepMap
remove	inorder/reg_dep_map.cc	/^RegDepMap::remove(uint8_t reg_type, RegIndex idx, DynInstPtr inst)$/;"	f	class:RegDepMap
remove	inorder/resources/inst_buffer.cc	/^InstBuffer::remove(DynInstPtr inst)$/;"	f	class:InstBuffer
remove	o3/dep_graph.hh	/^DependencyGraph<DynInstPtr>::remove(PhysRegIndex idx,$/;"	f	class:DependencyGraph
remove	pc_event.cc	/^PCEventQueue::remove(PCEvent *event)$/;"	f	class:PCEventQueue
remove	pc_event.hh	/^    bool remove;$/;"	m	class:BreakPCEvent
remove	pc_event.hh	/^PCEvent::remove()$/;"	f	class:PCEvent
removeAddrDependency	inorder/resources/cache_unit.cc	/^CacheUnit::removeAddrDependency(DynInstPtr inst)$/;"	f	class:CacheUnit
removeAddrDependency	inorder/resources/fetch_unit.cc	/^FetchUnit::removeAddrDependency(DynInstPtr inst)$/;"	f	class:FetchUnit
removeDcacheMiss	ozone/lw_back_end.hh	/^    void removeDcacheMiss(DynInstPtr &inst)$/;"	f	class:LWBackEnd
removeEntries	o3/lsq_impl.hh	/^LSQ<Impl>::removeEntries(ThreadID tid)$/;"	f	class:LSQ
removeFromHistory	o3/rename_impl.hh	/^DefaultRename<Impl>::removeFromHistory(InstSeqNum inst_seq_num, ThreadID tid)$/;"	f	class:DefaultRename
removeFront	inorder/reg_dep_map.cc	/^RegDepMap::removeFront(uint8_t reg_type, RegIndex idx, DynInstPtr inst)$/;"	f	class:RegDepMap
removeFrontInst	o3/cpu.cc	/^FullO3CPU<Impl>::removeFrontInst(DynInstPtr &inst)$/;"	f	class:FullO3CPU
removeInLSQ	base_dyn_inst.hh	/^    void removeInLSQ() { status.reset(LsqEntry); }$/;"	f	class:BaseDynInst
removeInst	inorder/cpu.cc	/^InOrderCPU::removeInst(DynInstPtr inst)$/;"	f	class:InOrderCPU
removeInstsNotInROB	o3/cpu.cc	/^FullO3CPU<Impl>::removeInstsNotInROB(ThreadID tid)$/;"	f	class:FullO3CPU
removeInstsThisCycle	inorder/cpu.hh	/^    bool removeInstsThisCycle;$/;"	m	class:InOrderCPU
removeInstsThisCycle	o3/cpu.hh	/^    bool removeInstsThisCycle;$/;"	m	class:FullO3CPU
removeInstsUntil	inorder/cpu.cc	/^InOrderCPU::removeInstsUntil(const InstSeqNum &seq_num, ThreadID tid)$/;"	f	class:InOrderCPU
removeInstsUntil	o3/cpu.cc	/^FullO3CPU<Impl>::removeInstsUntil(const InstSeqNum &seq_num, ThreadID tid)$/;"	f	class:FullO3CPU
removeList	inorder/cpu.hh	/^    std::queue<ListIt> removeList;$/;"	m	class:InOrderCPU
removeList	o3/cpu.hh	/^    std::queue<ListIt> removeList;$/;"	m	class:FullO3CPU
removePipelineStalls	inorder/cpu.cc	/^InOrderCPU::removePipelineStalls(ThreadID tid)$/;"	f	class:InOrderCPU
removeStalls	inorder/pipeline_stage.cc	/^PipelineStage::removeStalls(ThreadID tid)$/;"	f	class:PipelineStage
removeStore	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::removeStore(int store_idx)$/;"	f	class:OzoneLWLSQ
removeThread	o3/cpu.cc	/^FullO3CPU<Impl>::removeThread(ThreadID tid)$/;"	f	class:FullO3CPU
removeWaitingMemOp	ozone/lw_back_end.hh	/^    void removeWaitingMemOp(DynInstPtr &inst)$/;"	f	class:LWBackEnd
rename	o3/cpu.hh	/^    typename CPUPolicy::Rename rename;$/;"	m	class:FullO3CPU
rename	o3/decode.hh	/^        bool rename;$/;"	m	struct:DefaultDecode::Stalls
rename	o3/rename_impl.hh	/^DefaultRename<Impl>::rename(bool &status_change, ThreadID tid)$/;"	f	class:DefaultRename
rename	o3/rename_map.cc	/^SimpleRenameMap::rename(RegIndex arch_reg)$/;"	f	class:SimpleRenameMap
rename	o3/rename_map.cc	/^UnifiedRenameMap::rename(RegIndex arch_reg)$/;"	f	class:UnifiedRenameMap
renameBlock	o3/comm.hh	/^    bool renameBlock[Impl::MaxThreads];$/;"	m	struct:TimeBufStruct
renameBlockCycles	o3/rename.hh	/^    Stats::Scalar renameBlockCycles;$/;"	m	class:DefaultRename
renameCC	o3/rename_map.hh	/^    RenameInfo renameCC(RegIndex rel_arch_reg)$/;"	f	class:UnifiedRenameMap
renameComm	o3/comm.hh	/^    struct renameComm {$/;"	s	struct:TimeBufStruct
renameCommittedMaps	o3/rename.hh	/^    Stats::Scalar renameCommittedMaps;$/;"	m	class:DefaultRename
renameDestReg	base_dyn_inst.hh	/^    void renameDestReg(int idx,$/;"	f	class:BaseDynInst
renameDestReg	inorder/inorder_dyn_inst.hh	/^    void renameDestReg(int idx,$/;"	f	class:InOrderDynInst
renameDestRegs	o3/rename_impl.hh	/^DefaultRename<Impl>::renameDestRegs(DynInstPtr &inst, ThreadID tid)$/;"	f	class:DefaultRename
renameFloat	o3/rename_map.hh	/^    RenameInfo renameFloat(RegIndex rel_arch_reg)$/;"	f	class:UnifiedRenameMap
renameFullRegistersEvents	o3/rename.hh	/^    Stats::Scalar renameFullRegistersEvents;$/;"	m	class:DefaultRename
renameIQFullEvents	o3/rename.hh	/^    Stats::Scalar renameIQFullEvents;$/;"	m	class:DefaultRename
renameIdleCycles	o3/rename.hh	/^    Stats::Scalar renameIdleCycles;$/;"	m	class:DefaultRename
renameInfo	o3/comm.hh	/^    renameComm renameInfo[Impl::MaxThreads];$/;"	m	struct:TimeBufStruct
renameInst	ozone/front_end_impl.hh	/^FrontEnd<Impl>::renameInst(DynInstPtr &inst)$/;"	f	class:FrontEnd
renameInsts	o3/rename_impl.hh	/^DefaultRename<Impl>::renameInsts(ThreadID tid)$/;"	f	class:DefaultRename
renameInt	o3/rename_map.hh	/^    RenameInfo renameInt(RegIndex rel_arch_reg)$/;"	f	class:UnifiedRenameMap
renameLQFullEvents	o3/rename.hh	/^    Stats::Scalar renameLQFullEvents;$/;"	m	class:DefaultRename
renameMap	o3/commit.hh	/^    RenameMap *renameMap[Impl::MaxThreads];$/;"	m	class:DefaultCommit
renameMap	o3/cpu.hh	/^    typename CPUPolicy::RenameMap renameMap[Impl::MaxThreads];$/;"	m	class:FullO3CPU
renameMap	o3/rename.hh	/^    RenameMap *renameMap[Impl::MaxThreads];$/;"	m	class:DefaultRename
renameMisc	o3/rename_map.hh	/^    RenameInfo renameMisc(RegIndex rel_arch_reg)$/;"	f	class:UnifiedRenameMap
renameQueue	o3/commit.hh	/^    TimeBuffer<RenameStruct> *renameQueue;$/;"	m	class:DefaultCommit
renameQueue	o3/cpu.hh	/^    TimeBuffer<RenameStruct> renameQueue;$/;"	m	class:FullO3CPU
renameQueue	o3/iew.hh	/^    TimeBuffer<RenameStruct> *renameQueue;$/;"	m	class:DefaultIEW
renameQueue	o3/rename.hh	/^    TimeBuffer<RenameStruct> *renameQueue;$/;"	m	class:DefaultRename
renameROBFullEvents	o3/rename.hh	/^    Stats::Scalar renameROBFullEvents;$/;"	m	class:DefaultRename
renameRenameLookups	o3/rename.hh	/^    Stats::Scalar renameRenameLookups;$/;"	m	class:DefaultRename
renameRenamedInsts	o3/rename.hh	/^    Stats::Scalar renameRenamedInsts;$/;"	m	class:DefaultRename
renameRenamedOperands	o3/rename.hh	/^    Stats::Scalar renameRenamedOperands;$/;"	m	class:DefaultRename
renameRunCycles	o3/rename.hh	/^    Stats::Scalar renameRunCycles;$/;"	m	class:DefaultRename
renameSQFullEvents	o3/rename.hh	/^    Stats::Scalar renameSQFullEvents;$/;"	m	class:DefaultRename
renameSerializeStallCycles	o3/rename.hh	/^    Stats::Scalar renameSerializeStallCycles;$/;"	m	class:DefaultRename
renameSkidInsts	o3/rename.hh	/^    Stats::Scalar renameSkidInsts;$/;"	m	class:DefaultRename
renameSquashCycles	o3/rename.hh	/^    Stats::Scalar renameSquashCycles;$/;"	m	class:DefaultRename
renameSquashedInsts	o3/rename.hh	/^    Stats::Scalar renameSquashedInsts;$/;"	m	class:DefaultRename
renameSrcReg	base_dyn_inst.hh	/^    void renameSrcReg(int idx, PhysRegIndex renamed_src)$/;"	f	class:BaseDynInst
renameSrcReg	inorder/inorder_dyn_inst.hh	/^    void renameSrcReg(int idx, PhysRegIndex renamed_src)$/;"	f	class:InOrderDynInst
renameSrcRegs	o3/rename_impl.hh	/^DefaultRename<Impl>::renameSrcRegs(DynInstPtr &inst, ThreadID tid)$/;"	f	class:DefaultRename
renameStatus	o3/rename.hh	/^    ThreadStatus renameStatus[Impl::MaxThreads];$/;"	m	class:DefaultRename
renameTable	ozone/back_end.hh	/^    RenameTable<Impl> renameTable;$/;"	m	class:BackEnd
renameTable	ozone/front_end.hh	/^    RenameTable<Impl> renameTable;$/;"	m	class:FrontEnd
renameTable	ozone/inorder_back_end.hh	/^    RenameTable<Impl> renameTable;$/;"	m	class:InorderBackEnd
renameTable	ozone/lw_back_end.hh	/^    RenameTable<Impl> renameTable;$/;"	m	class:LWBackEnd
renameTable	ozone/thread_state.hh	/^    RenameTable<Impl> renameTable;$/;"	m	struct:OzoneThreadState
renameTick	o3/dyn_inst.hh	/^    int32_t renameTick;  \/\/ instruction enters rename phase$/;"	m	class:BaseO3DynInst
renameToDecodeDelay	o3/O3CPU.py	/^    renameToDecodeDelay = Param.Cycles(1, "Rename to decode delay")$/;"	v	class:DerivO3CPU
renameToDecodeDelay	o3/decode.hh	/^    Cycles renameToDecodeDelay;$/;"	m	class:DefaultDecode
renameToDecodeDelay	ozone/OzoneCPU.py	/^    renameToDecodeDelay = Param.Unsigned("Rename to decode delay")$/;"	v	class:DerivOzoneCPU
renameToDecodeDelay	ozone/SimpleOzoneCPU.py	/^    renameToDecodeDelay = Param.Unsigned("Rename to decode delay")$/;"	v	class:SimpleOzoneCPU
renameToDecodeDelay	ozone/simple_params.hh	/^    unsigned renameToDecodeDelay;$/;"	m	class:SimpleParams
renameToFetchDelay	o3/O3CPU.py	/^    renameToFetchDelay = Param.Cycles(1 ,"Rename to fetch delay")$/;"	v	class:DerivO3CPU
renameToFetchDelay	o3/fetch.hh	/^    Cycles renameToFetchDelay;$/;"	m	class:DefaultFetch
renameToFetchDelay	ozone/OzoneCPU.py	/^    renameToFetchDelay = Param.Unsigned("Rename to fetch delay")$/;"	v	class:DerivOzoneCPU
renameToFetchDelay	ozone/SimpleOzoneCPU.py	/^    renameToFetchDelay = Param.Unsigned("Rename to fetch delay")$/;"	v	class:SimpleOzoneCPU
renameToFetchDelay	ozone/simple_params.hh	/^    unsigned renameToFetchDelay;$/;"	m	class:SimpleParams
renameToIEWDelay	o3/O3CPU.py	/^    renameToIEWDelay = Param.Cycles(2, "Rename to "$/;"	v	class:DerivO3CPU
renameToIEWDelay	o3/iew.hh	/^    Cycles renameToIEWDelay;$/;"	m	class:DefaultIEW
renameToIEWDelay	ozone/OzoneCPU.py	/^    renameToIEWDelay = Param.Unsigned("Rename to "$/;"	v	class:DerivOzoneCPU
renameToIEWDelay	ozone/SimpleOzoneCPU.py	/^    renameToIEWDelay = Param.Unsigned("Rename to "$/;"	v	class:SimpleOzoneCPU
renameToIEWDelay	ozone/simple_params.hh	/^    unsigned renameToIEWDelay;$/;"	m	class:SimpleParams
renameToROBDelay	o3/O3CPU.py	/^    renameToROBDelay = Param.Cycles(1, "Rename to reorder buffer delay")$/;"	v	class:DerivO3CPU
renameToROBDelay	o3/commit.hh	/^    Cycles renameToROBDelay;$/;"	m	class:DefaultCommit
renameToROBDelay	ozone/OzoneCPU.py	/^    renameToROBDelay = Param.Unsigned("Rename to reorder buffer delay")$/;"	v	class:DerivOzoneCPU
renameToROBDelay	ozone/SimpleOzoneCPU.py	/^    renameToROBDelay = Param.Unsigned("Rename to reorder buffer delay")$/;"	v	class:SimpleOzoneCPU
renameToROBDelay	ozone/simple_params.hh	/^    unsigned renameToROBDelay;$/;"	m	class:SimpleParams
renameUnblock	o3/comm.hh	/^    bool renameUnblock[Impl::MaxThreads];$/;"	m	struct:TimeBufStruct
renameUnblockCycles	o3/rename.hh	/^    Stats::Scalar renameUnblockCycles;$/;"	m	class:DefaultRename
renameUndoneMaps	o3/rename.hh	/^    Stats::Scalar renameUndoneMaps;$/;"	m	class:DefaultRename
renameWidth	o3/O3CPU.py	/^    renameWidth = Param.Unsigned(8, "Rename width")$/;"	v	class:DerivO3CPU
renameWidth	o3/commit.hh	/^    unsigned renameWidth;$/;"	m	class:DefaultCommit
renameWidth	o3/rename.hh	/^    unsigned renameWidth;$/;"	m	class:DefaultRename
renameWidth	ozone/OzoneCPU.py	/^    renameWidth = Param.Unsigned("Rename width")$/;"	v	class:DerivOzoneCPU
renameWidth	ozone/SimpleOzoneCPU.py	/^    renameWidth = Param.Unsigned("Rename width")$/;"	v	class:SimpleOzoneCPU
renameWidth	ozone/simple_params.hh	/^    unsigned renameWidth;$/;"	m	class:SimpleParams
renamedDestRegIdx	base_dyn_inst.hh	/^    PhysRegIndex renamedDestRegIdx(int idx) const$/;"	f	class:BaseDynInst
renamedDestRegIdx	inorder/inorder_dyn_inst.hh	/^    PhysRegIndex renamedDestRegIdx(int idx) const$/;"	f	class:InOrderDynInst
renamedSerializing	o3/rename.hh	/^    Stats::Scalar renamedSerializing;$/;"	m	class:DefaultRename
renamedSrcRegIdx	base_dyn_inst.hh	/^    PhysRegIndex renamedSrcRegIdx(int idx) const$/;"	f	class:BaseDynInst
renamedSrcRegIdx	inorder/inorder_dyn_inst.hh	/^    PhysRegIndex renamedSrcRegIdx(int idx) const$/;"	f	class:InOrderDynInst
renamedTempSerializing	o3/rename.hh	/^    Stats::Scalar renamedTempSerializing;$/;"	m	class:DefaultRename
repeatEvent	base.hh	/^    void repeatEvent(bool repeat) { _repeatEvent = repeat; }$/;"	f	class:CPUProgressEvent
replaceThreadContext	cpuevent.cc	/^CpuEvent::replaceThreadContext(ThreadContext *oldTc, ThreadContext *newTc)$/;"	f	class:CpuEvent
replay	o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::replay()$/;"	f	class:MemDepUnit
replayList	ozone/back_end.hh	/^        InstList replayList;$/;"	m	class:BackEnd::InstQueue
replayList	ozone/lw_back_end.hh	/^    std::list<DynInstPtr> replayList;$/;"	m	class:LWBackEnd
replayMemInst	o3/iew_impl.hh	/^DefaultIEW<Impl>::replayMemInst(DynInstPtr &inst)$/;"	f	class:DefaultIEW
replayMemInst	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::replayMemInst(DynInstPtr &replay_inst)$/;"	f	class:InstructionQueue
replayMemInst	ozone/back_end.hh	/^    void replayMemInst(DynInstPtr &inst)$/;"	f	class:BackEnd
replayMemInst	ozone/back_end_impl.hh	/^BackEnd<Impl>::InstQueue::replayMemInst(DynInstPtr &inst)$/;"	f	class:BackEnd::InstQueue
replayMemInst	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::replayMemInst(DynInstPtr &inst)$/;"	f	class:LWBackEnd
reportData	minor/buffers.hh	/^    reportData(std::ostream &os, const ElemType &elem)$/;"	f	class:Minor::ReportTraitsAdaptor
reportData	minor/buffers.hh	/^    reportData(std::ostream &os, const PtrType &elem)$/;"	f	class:Minor::ReportTraitsPtrAdaptor
reportData	minor/dyn_inst.cc	/^MinorDynInst::reportData(std::ostream &os) const$/;"	f	class:Minor::MinorDynInst
reportData	minor/fetch1.cc	/^Fetch1::FetchRequest::reportData(std::ostream &os) const$/;"	f	class:Minor::Fetch1::FetchRequest
reportData	minor/func_unit.cc	/^QueuedInst::reportData(std::ostream &os) const$/;"	f	class:Minor::QueuedInst
reportData	minor/lsq.cc	/^LSQ::LSQRequest::reportData(std::ostream &os) const$/;"	f	class:Minor::LSQ::LSQRequest
reportData	minor/pipe_data.cc	/^BranchData::reportData(std::ostream &os) const$/;"	f	class:Minor::BranchData
reportData	minor/pipe_data.cc	/^ForwardInstData::reportData(std::ostream &os) const$/;"	f	class:Minor::ForwardInstData
reportData	minor/pipe_data.cc	/^ForwardLineData::reportData(std::ostream &os) const$/;"	f	class:Minor::ForwardLineData
reportLeft	minor/buffers.hh	/^    int reportLeft, reportRight;$/;"	m	class:Minor::MinorBuffer
reportRight	minor/buffers.hh	/^    int reportLeft, reportRight;$/;"	m	class:Minor::MinorBuffer
req	inorder/inorder_dyn_inst.hh	/^    Request *req;$/;"	m	class:InOrderDynInst
req	o3/fetch.hh	/^        RequestPtr req;$/;"	m	class:DefaultFetch::FinishTranslationEvent
req	o3/lsq_unit.hh	/^        RequestPtr req;$/;"	m	struct:LSQUnit::SQEntry
req	ozone/lsq_unit.hh	/^        MemReqPtr req;$/;"	m	struct:OzoneLSQ::SQEntry
req	ozone/lw_lsq.hh	/^        RequestPtr req;$/;"	m	struct:OzoneLWLSQ::SQEntry
reqData	inorder/resources/cache_unit.hh	/^    PacketDataPtr reqData;$/;"	m	class:CacheReqPacket
reqData	inorder/resources/cache_unit.hh	/^    PacketDataPtr reqData;$/;"	m	class:CacheRequest
reqID	inorder/resource.hh	/^    int reqID;$/;"	m	class:ResourceRequest
reqList	inorder/inorder_dyn_inst.hh	/^    std::list<ResourceRequest*> reqList;$/;"	m	class:InOrderDynInst
reqToVerify	base_dyn_inst.hh	/^    RequestPtr reqToVerify;$/;"	m	class:BaseDynInst
reqs	inorder/resource.hh	/^    std::vector<ResReqPtr> reqs;$/;"	m	class:Resource
request	inorder/resource.cc	/^Resource::request(DynInstPtr inst)$/;"	f	class:Resource
request	inorder/resource_pool.9stage.cc	/^ResourcePool::request(int res_idx, DynInstPtr inst)$/;"	f	class:ResourcePool
request	inorder/resource_pool.cc	/^ResourcePool::request(int res_idx, DynInstPtr inst)$/;"	f	class:ResourcePool
request	minor/fetch1.hh	/^        Request request;$/;"	m	class:Minor::Fetch1::FetchRequest
request	minor/lsq.hh	/^        Request request;$/;"	m	class:Minor::LSQ::LSQRequest
requestAgain	inorder/resource.cc	/^Resource::requestAgain(DynInstPtr inst, bool &do_request)$/;"	f	class:Resource
requestAgain	inorder/resources/cache_unit.cc	/^CacheUnit::requestAgain(DynInstPtr inst, bool &service_request)$/;"	f	class:CacheUnit
requestAgain	inorder/resources/mult_div_unit.cc	/^MultDivUnit::requestAgain(DynInstPtr inst, bool &service_request)$/;"	f	class:MultDivUnit
requests	minor/fetch1.hh	/^    FetchQueue requests;$/;"	m	class:Minor::Fetch1
requests	minor/lsq.hh	/^    LSQQueue requests;$/;"	m	class:Minor::LSQ
requests_to_complete	testers/directedtest/RubyDirectedTester.py	/^    requests_to_complete = Param.Int("checks to complete")$/;"	v	class:RubyDirectedTester
require_caches	BaseCPU.py	/^    def require_caches(cls):$/;"	f
require_caches	inorder/InOrderCPU.py	/^    def require_caches(cls):$/;"	m	class:InOrderCPU
require_caches	kvm/BaseKvmCPU.py	/^    def require_caches(cls):$/;"	f
require_caches	minor/MinorCPU.py	/^    def require_caches(cls):$/;"	m	class:MinorCPU
require_caches	o3/O3CPU.py	/^    def require_caches(cls):$/;"	m	class:DerivO3CPU
res	inorder/inorder_dyn_inst.hh	/^        InstValue res;$/;"	m	struct:InOrderDynInst::InstResult
res	inorder/resource.hh	/^    Resource *res;$/;"	m	class:ResourceRequest
res	minor/lsq.hh	/^        uint64_t *res;$/;"	m	class:Minor::LSQ::LSQRequest
res	translation.hh	/^    uint64_t *res;$/;"	m	class:WholeTranslationState
resIdx	inorder/resource.hh	/^    int resIdx;$/;"	m	class:ResourceRequest
resName	inorder/resource.hh	/^    std::string resName;$/;"	m	class:Resource
resNum	inorder/pipeline_traits.5stage.hh	/^        int resNum;$/;"	m	struct:ThePipeline::ScheduleEntry
resNum	inorder/pipeline_traits.9stage.hh	/^        int resNum;$/;"	m	struct:ThePipeline::ScheduleEntry
resNum	inorder/pipeline_traits.9stage.smt2.hh	/^        int resNum;$/;"	m	struct:ThePipeline::ScheduleEntry
resNum	inorder/resource_sked.hh	/^    int resNum;$/;"	m	class:ScheduleEntry
resPool	inorder/cpu.hh	/^    ResourcePool *resPool;$/;"	m	class:InOrderCPU
resPool	inorder/resource_pool.hh	/^        ResourcePool *resPool;$/;"	m	class:ResourcePool::ResPoolEvent
resReqCount	inorder/cpu.hh	/^    unsigned resReqCount;$/;"	m	class:InOrderCPU
resReqID	inorder/resource.cc	/^int ResourceRequest::resReqID = 0;$/;"	m	class:ResourceRequest	file:
resReqID	inorder/resource.hh	/^    static int resReqID;$/;"	m	class:ResourceRequest
reschedule	o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::reschedule(DynInstPtr &inst)$/;"	f	class:MemDepUnit
rescheduleMemInst	o3/iew_impl.hh	/^DefaultIEW<Impl>::rescheduleMemInst(DynInstPtr &inst)$/;"	f	class:DefaultIEW
rescheduleMemInst	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::rescheduleMemInst(DynInstPtr &resched_inst)$/;"	f	class:InstructionQueue
rescheduleMemInst	ozone/back_end.hh	/^    void rescheduleMemInst(DynInstPtr &inst)$/;"	f	class:BackEnd
rescheduleMemInst	ozone/back_end_impl.hh	/^BackEnd<Impl>::InstQueue::rescheduleMemInst(DynInstPtr &inst)$/;"	f	class:BackEnd::InstQueue
rescheduleMemInst	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::rescheduleMemInst(DynInstPtr &inst)$/;"	f	class:LWBackEnd
reserve	minor/buffers.hh	/^    reserve()$/;"	f	class:Minor::Queue
reserve	minor/buffers.hh	/^    void reserve() { queue.reserve(); }$/;"	f	class:Minor::InputBuffer
reserved	kvm/x86_cpu.cc	/^    uint64_t reserved[12];$/;"	m	struct:FXSave	file:
reservedSpace	minor/buffers.hh	/^    unsigned int reservedSpace() const { return numReservedSlots; }$/;"	f	class:Minor::Queue
reset	activity.cc	/^ActivityRecorder::reset()$/;"	f	class:ActivityRecorder
reset	o3/dep_graph.hh	/^DependencyGraph<DynInstPtr>::reset()$/;"	f	class:DependencyGraph
reset	pred/2bit_local.cc	/^LocalBP::reset()$/;"	f	class:LocalBP
reset	pred/btb.cc	/^DefaultBTB::reset()$/;"	f	class:DefaultBTB
reset	pred/ras.cc	/^ReturnAddrStack::reset()$/;"	f	class:ReturnAddrStack
reset	pred/sat_counter.hh	/^    void reset() { counter = initialVal; }$/;"	f	class:SatCounter
reset	profile.hh	/^    Callback *reset;$/;"	m	class:FunctionProfile
reset	testers/traffic_gen/generators.cc	/^TraceGen::InputStream::reset()$/;"	f	class:TraceGen::InputStream
resetEntries	o3/iew_impl.hh	/^DefaultIEW<Impl>::resetEntries()$/;"	f	class:DefaultIEW
resetEntries	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::resetEntries()$/;"	f	class:InstructionQueue
resetEntries	o3/lsq_impl.hh	/^LSQ<Impl>::resetEntries()$/;"	f	class:LSQ
resetEntries	o3/rob_impl.hh	/^ROB<Impl>::resetEntries()$/;"	f	class:ROB
resetInstCount	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::resetInstCount()$/;"	f	class:InOrderDynInst
resetStage	o3/decode_impl.hh	/^DefaultDecode<Impl>::resetStage()$/;"	f	class:DefaultDecode
resetStage	o3/fetch_impl.hh	/^DefaultFetch<Impl>::resetStage()$/;"	f	class:DefaultFetch
resetStage	o3/rename_impl.hh	/^DefaultRename<Impl>::resetStage()$/;"	f	class:DefaultRename
resetState	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::resetState()$/;"	f	class:InstructionQueue
resetState	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::resetState()$/;"	f	class:LSQUnit
resetState	o3/rob_impl.hh	/^ROB<Impl>::resetState()$/;"	f	class:ROB
resetStats	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::resetStats()$/;"	f	class:OzoneCPU
resetStats	simple/base.cc	/^BaseSimpleCPU::resetStats()$/;"	f	class:BaseSimpleCPU
resize	minor/pipe_data.cc	/^ForwardInstData::resize(unsigned int width)$/;"	f	class:Minor::ForwardInstData
resize	o3/dep_graph.hh	/^DependencyGraph<DynInstPtr>::resize(int num_entries)$/;"	f	class:DependencyGraph
resizeEntries	o3/lsq_impl.hh	/^LSQ<Impl>::resizeEntries(unsigned size, ThreadID tid)$/;"	f	class:LSQ
resizeLQ	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::resizeLQ(unsigned size)$/;"	f	class:LSQUnit
resizeLQ	ozone/lsq_unit_impl.hh	/^OzoneLSQ<Impl>::resizeLQ(unsigned size)$/;"	f	class:OzoneLSQ
resizeLQ	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::resizeLQ(unsigned size)$/;"	f	class:OzoneLWLSQ
resizeSQ	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::resizeSQ(unsigned size)$/;"	f	class:LSQUnit
resizeSQ	ozone/lsq_unit_impl.hh	/^OzoneLSQ<Impl>::resizeSQ(unsigned size)$/;"	f	class:OzoneLSQ
resizeSQ	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::resizeSQ(unsigned size)$/;"	f	class:OzoneLWLSQ
resolution	kvm/timer.hh	/^    Tick resolution() {$/;"	f	class:BaseKvmTimer
resource	inorder/resource.hh	/^    Resource *resource;$/;"	m	class:ResourceEvent
resourceEvent	inorder/resource.hh	/^    ResourceEvent *resourceEvent;$/;"	m	class:Resource
resources	inorder/pipeline_stage.hh	/^        std::vector<ResReqPtr> resources;$/;"	m	struct:PipelineStage::Stalls
resources	inorder/resource_pool.hh	/^    std::vector<Resource *> resources;$/;"	m	class:ResourcePool
restore	pred/ras.cc	/^ReturnAddrStack::restore(unsigned top_entry_idx,$/;"	f	class:ReturnAddrStack
result	checker/cpu.hh	/^    std::queue<Result> result;$/;"	m	class:CheckerCPU
resultAvailable	timing_expr.hh	/^    std::vector<bool > resultAvailable;$/;"	m	class:TimingExprEvalContext
resultType	inorder/inorder_dyn_inst.hh	/^    ResultType resultType(int idx)$/;"	f	class:InOrderDynInst
results	timing_expr.hh	/^    std::vector<uint64_t> results;$/;"	m	class:TimingExprEvalContext
resumeSerialize	o3/rename.hh	/^    bool resumeSerialize;$/;"	m	class:DefaultRename
resumeUnblocking	o3/rename.hh	/^    bool resumeUnblocking;$/;"	m	class:DefaultRename
retireHead	o3/rob_impl.hh	/^ROB<Impl>::retireHead(ThreadID tid)$/;"	f	class:ROB
retireResponse	minor/lsq.cc	/^LSQ::SingleDataRequest::retireResponse(PacketPtr packet_)$/;"	f	class:Minor::LSQ::SingleDataRequest
retireResponse	minor/lsq.cc	/^LSQ::SplitDataRequest::retireResponse(PacketPtr response)$/;"	f	class:Minor::LSQ::SplitDataRequest
retireResponse	minor/lsq.hh	/^        void retireResponse(PacketPtr packet_) { }$/;"	f	class:Minor::LSQ::SpecialDataRequest
retireSquashed	pred/2bit_local.hh	/^    void retireSquashed(void *bp_history)$/;"	f	class:LocalBP
retireSquashed	pred/bi_mode.cc	/^BiModeBP::retireSquashed(void *bp_history)$/;"	f	class:BiModeBP
retireSquashed	pred/tournament.cc	/^TournamentBP::retireSquashed(void *bp_history)$/;"	f	class:TournamentBP
retryEvent	simple/timing.hh	/^        EventWrapper<MasterPort, &MasterPort::sendRetry> retryEvent;$/;"	m	class:TimingSimpleCPU::TimingCPUPort
retryMemInsts	o3/inst_queue.hh	/^    std::list<DynInstPtr> retryMemInsts;$/;"	m	class:InstructionQueue
retryPkt	o3/fetch.hh	/^    PacketPtr retryPkt;$/;"	m	class:DefaultFetch
retryPkt	o3/lsq_unit.hh	/^    PacketPtr retryPkt;$/;"	m	class:LSQUnit
retryPkt	ozone/front_end.hh	/^    PacketPtr retryPkt;$/;"	m	class:FrontEnd
retryPkt	ozone/lw_lsq.hh	/^    PacketPtr retryPkt;$/;"	m	class:OzoneLWLSQ
retryPkt	testers/memtest/memtest.hh	/^    PacketPtr retryPkt;$/;"	m	class:MemTest
retryPkt	testers/networktest/networktest.hh	/^    PacketPtr retryPkt;$/;"	m	class:NetworkTest
retryPkt	testers/traffic_gen/traffic_gen.hh	/^    PacketPtr retryPkt;$/;"	m	class:TrafficGen
retryPktTick	testers/traffic_gen/traffic_gen.hh	/^    Tick retryPktTick;$/;"	m	class:TrafficGen
retryRequest	minor/lsq.hh	/^    LSQRequestPtr retryRequest;$/;"	m	class:Minor::LSQ
retryTicks	testers/traffic_gen/traffic_gen.hh	/^    Stats::Scalar retryTicks;$/;"	m	class:TrafficGen
retryTid	o3/fetch.hh	/^    ThreadID retryTid;$/;"	m	class:DefaultFetch
returnCycle	minor/scoreboard.hh	/^    std::vector<Cycles> returnCycle;$/;"	m	class:Minor::Scoreboard
right	TimingExpr.py	/^    right = Param.TimingExpr("RHS expression")$/;"	v	class:TimingExprBin
right	timing_expr.hh	/^    TimingExpr *right;$/;"	m	class:TimingExprBin
ringBuffer	kvm/perfevent.hh	/^    struct perf_event_mmap_page *ringBuffer;$/;"	m	class:PerfKvmCounter	typeref:struct:PerfKvmCounter::perf_event_mmap_page
ringNumPages	kvm/perfevent.hh	/^    int ringNumPages;$/;"	m	class:PerfKvmCounter
rob	o3/commit.hh	/^    ROB *rob;$/;"	m	class:DefaultCommit
rob	o3/cpu.hh	/^    typename CPUPolicy::ROB rob;$/;"	m	class:FullO3CPU
robCapEvents	ozone/lw_back_end.hh	/^    Stats::Vector robCapEvents;$/;"	m	class:LWBackEnd
robCapInstCount	ozone/lw_back_end.hh	/^    Stats::Vector robCapInstCount;$/;"	m	class:LWBackEnd
robEmpty	ozone/back_end.hh	/^    bool robEmpty() { return instList.empty(); }$/;"	f	class:BackEnd
robEmpty	ozone/inorder_back_end.hh	/^    bool robEmpty() { return instList.empty(); }$/;"	f	class:InorderBackEnd
robEmpty	ozone/lw_back_end.hh	/^    bool robEmpty() { return numInsts == 0; }$/;"	f	class:LWBackEnd
robEntries	o3/rename.hh	/^        unsigned robEntries;$/;"	m	struct:DefaultRename::FreeEntries
robInfoFromIEW	o3/commit.hh	/^    typename TimeBuffer<TimeStruct>::wire robInfoFromIEW;$/;"	m	class:DefaultCommit
robPolicy	o3/rob.hh	/^    ROBPolicy robPolicy;$/;"	m	class:ROB
robReads	o3/rob.hh	/^    Stats::Scalar robReads;$/;"	m	class:ROB
robSquashing	o3/comm.hh	/^        bool robSquashing; \/\/ *F, D, R, I$/;"	m	struct:TimeBufStruct::commitComm
robStatus	o3/rob.hh	/^    Status robStatus[Impl::MaxThreads];$/;"	m	class:ROB
robWrites	o3/rob.hh	/^    Stats::Scalar robWrites;$/;"	m	class:ROB
rob_cap_events	ozone/back_end.hh	/^    Stats::Vector rob_cap_events;$/;"	m	class:BackEnd
rob_cap_inst_count	ozone/back_end.hh	/^    Stats::Vector rob_cap_inst_count;$/;"	m	class:BackEnd
roundRobin	inorder/first_stage.cc	/^FirstStage::roundRobin()$/;"	f	class:FirstStage
roundRobin	o3/commit_impl.hh	/^DefaultCommit<Impl>::roundRobin()$/;"	f	class:DefaultCommit
roundRobin	o3/fetch_impl.hh	/^DefaultFetch<Impl>::roundRobin()$/;"	f	class:DefaultFetch
rsked	inorder/cpu.hh	/^        ThePipeline::RSkedPtr rsked;$/;"	m	class:InOrderCPU::StageScheduler
runCycles	inorder/cpu.hh	/^    Stats::Scalar runCycles;$/;"	m	class:InOrderCPU
runCycles	inorder/pipeline_stage.hh	/^    Stats::Scalar runCycles;$/;"	m	class:PipelineStage
runTimer	kvm/base.hh	/^    std::unique_ptr<BaseKvmTimer> runTimer;$/;"	m	class:BaseKvmCPU
sample	profile.cc	/^FunctionProfile::sample(ProfileNode *node, Addr pc)$/;"	f	class:FunctionProfile
samplePeriod	kvm/perfevent.hh	/^    PerfKvmCounterConfig &samplePeriod(uint64_t period) {$/;"	f	class:PerfKvmCounterConfig
savedReq	base_dyn_inst.hh	/^    RequestPtr savedReq;$/;"	m	class:BaseDynInst
savedSreqHigh	base_dyn_inst.hh	/^    RequestPtr savedSreqHigh;$/;"	m	class:BaseDynInst
savedSreqLow	base_dyn_inst.hh	/^    RequestPtr savedSreqLow;$/;"	m	class:BaseDynInst
sched_break_pc	pc_event.cc	/^sched_break_pc(Addr addr)$/;"	f
sched_break_pc_sys	pc_event.cc	/^sched_break_pc_sys(System *sys, Addr addr)$/;"	f
schedule	pc_event.cc	/^PCEventQueue::schedule(PCEvent *event)$/;"	f	class:PCEventQueue
schedule	simple/timing.cc	/^TimingSimpleCPU::TimingCPUPort::TickEvent::schedule(PacketPtr _pkt, Tick t)$/;"	f	class:TimingSimpleCPU::TimingCPUPort::TickEvent
scheduleCpuEvent	inorder/cpu.cc	/^InOrderCPU::scheduleCpuEvent(CPUEventType c_event, const Fault &fault,$/;"	f	class:InOrderCPU
scheduleEvent	inorder/cpu.cc	/^InOrderCPU::CPUEvent::scheduleEvent(Cycles delay)$/;"	f	class:InOrderCPU::CPUEvent
scheduleEvent	inorder/resource.cc	/^Resource::scheduleEvent(DynInstPtr inst, Cycles delay)$/;"	f	class:Resource
scheduleEvent	inorder/resource.cc	/^Resource::scheduleEvent(int slot_idx, Cycles delay)$/;"	f	class:Resource
scheduleEvent	inorder/resource.cc	/^ResourceEvent::scheduleEvent(Cycles delay)$/;"	f	class:ResourceEvent
scheduleEvent	inorder/resource_pool.9stage.cc	/^ResourcePool::ResPoolEvent::scheduleEvent(int delay)$/;"	f	class:ResourcePool::ResPoolEvent
scheduleEvent	inorder/resource_pool.9stage.cc	/^ResourcePool::scheduleEvent(InOrderCPU::CPUEventType e_type, DynInstPtr inst,$/;"	f	class:ResourcePool
scheduleEvent	inorder/resource_pool.cc	/^ResourcePool::ResPoolEvent::scheduleEvent(Cycles delay)$/;"	f	class:ResourcePool::ResPoolEvent
scheduleEvent	inorder/resource_pool.cc	/^ResourcePool::scheduleEvent(InOrderCPU::CPUEventType e_type, DynInstPtr inst,$/;"	f	class:ResourcePool
scheduleExecution	inorder/resource.cc	/^Resource::scheduleExecution(int slot_num)$/;"	f	class:Resource
scheduleInstStop	base.cc	/^BaseCPU::scheduleInstStop(ThreadID tid, Counter insts, const char *cause)$/;"	f	class:BaseCPU
scheduleLoadStop	base.cc	/^BaseCPU::scheduleLoadStop(ThreadID tid, Counter loads, const char *cause)$/;"	f	class:BaseCPU
scheduleNonSpec	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::scheduleNonSpec(const InstSeqNum &inst)$/;"	f	class:InstructionQueue
scheduleNonSpec	ozone/back_end_impl.hh	/^BackEnd<Impl>::InstQueue::scheduleNonSpec(const InstSeqNum &sn)$/;"	f	class:BackEnd::InstQueue
scheduleNonSpec	ozone/inst_queue_impl.hh	/^InstQueue<Impl>::scheduleNonSpec(const InstSeqNum &inst)$/;"	f	class:InstQueue
scheduleReadyInsts	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::scheduleReadyInsts()$/;"	f	class:InstructionQueue
scheduleReadyInsts	ozone/back_end_impl.hh	/^BackEnd<Impl>::InstQueue::scheduleReadyInsts()$/;"	f	class:BackEnd::InstQueue
scheduleReadyInsts	ozone/back_end_impl.hh	/^BackEnd<Impl>::scheduleReadyInsts()$/;"	f	class:BackEnd
scheduleReadyInsts	ozone/inst_queue_impl.hh	/^InstQueue<Impl>::scheduleReadyInsts()$/;"	f	class:InstQueue
scheduleTickEvent	inorder/cpu.hh	/^    void scheduleTickEvent(Cycles delay)$/;"	f	class:InOrderCPU
scheduleTickEvent	o3/cpu.hh	/^    void scheduleTickEvent(Cycles delay)$/;"	f	class:FullO3CPU
scheduleTickEvent	ozone/cpu.hh	/^    void scheduleTickEvent(int delay)$/;"	f	class:OzoneCPU
scoreboard	minor/execute.hh	/^    Scoreboard scoreboard;$/;"	m	class:Minor::Execute
scoreboard	o3/cpu.hh	/^    Scoreboard scoreboard;$/;"	m	class:FullO3CPU
scoreboard	o3/iew.hh	/^    Scoreboard* scoreboard;$/;"	m	class:DefaultIEW
scoreboard	o3/rename.hh	/^    Scoreboard *scoreboard;$/;"	m	class:DefaultRename
sendData	simple/timing.cc	/^TimingSimpleCPU::sendData(RequestPtr req, uint8_t *data, uint64_t *res,$/;"	f	class:TimingSimpleCPU
sendFetch	simple/timing.cc	/^TimingSimpleCPU::sendFetch(const Fault &fault, RequestPtr req,$/;"	f	class:TimingSimpleCPU
sendInstToNextStage	inorder/pipeline_stage.cc	/^PipelineStage::sendInstToNextStage(DynInstPtr inst)$/;"	f	class:PipelineStage
sendNextFragmentToTranslation	minor/lsq.cc	/^LSQ::SplitDataRequest::sendNextFragmentToTranslation()$/;"	f	class:Minor::LSQ::SplitDataRequest
sendPkt	testers/memtest/memtest.cc	/^MemTest::sendPkt(PacketPtr pkt) {$/;"	f	class:MemTest
sendPkt	testers/networktest/networktest.cc	/^NetworkTest::sendPkt(PacketPtr pkt)$/;"	f	class:NetworkTest
sendSplitData	simple/timing.cc	/^TimingSimpleCPU::sendSplitData(RequestPtr req1, RequestPtr req2,$/;"	f	class:TimingSimpleCPU
sendStore	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::sendStore(PacketPtr data_pkt)$/;"	f	class:LSQUnit
sendStoreToStoreBuffer	minor/lsq.cc	/^LSQ::sendStoreToStoreBuffer(LSQRequestPtr request)$/;"	f	class:Minor::LSQ
sentAllPackets	minor/lsq.hh	/^        bool sentAllPackets() { return numIssuedFragments == numFragments; }$/;"	f	class:Minor::LSQ::SplitDataRequest
sentAllPackets	minor/lsq.hh	/^        bool sentAllPackets() { return packetSent; }$/;"	f	class:Minor::LSQ::SingleDataRequest
sentAllPackets	minor/lsq.hh	/^        bool sentAllPackets() { return true; }$/;"	f	class:Minor::LSQ::SpecialDataRequest
seqNum	base_dyn_inst.hh	/^    InstSeqNum seqNum;$/;"	m	class:BaseDynInst
seqNum	inorder/inorder_dyn_inst.hh	/^    InstSeqNum seqNum;$/;"	m	class:InOrderDynInst
seqNum	inorder/resource.hh	/^    InstSeqNum seqNum;$/;"	m	class:ResourceRequest
seqNum	inorder/resource_pool.hh	/^        InstSeqNum seqNum;$/;"	m	class:ResourcePool::ResPoolEvent
seqNum	pred/bpred_unit.hh	/^        InstSeqNum seqNum;$/;"	m	struct:BPredUnit::PredictorHistory
serialize	base.cc	/^BaseCPU::serialize(std::ostream &os)$/;"	f	class:BaseCPU
serialize	checker/cpu.cc	/^CheckerCPU::serialize(ostream &os)$/;"	f	class:CheckerCPU
serialize	checker/thread_context.hh	/^    void serialize(std::ostream &os) { actualTC->serialize(os); }$/;"	f	class:CheckerThreadContext
serialize	minor/cpu.cc	/^MinorCPU::serialize(std::ostream &os)$/;"	f	class:MinorCPU
serialize	o3/thread_state.hh	/^    void serialize(std::ostream &os)$/;"	f	struct:O3ThreadState
serialize	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::serialize(std::ostream &os)$/;"	f	class:OzoneCPU::OzoneTC
serialize	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::serialize(std::ostream &os)$/;"	f	class:OzoneCPU
serialize	simple_thread.cc	/^SimpleThread::serialize(ostream &os)$/;"	f	class:SimpleThread
serialize	testers/traffic_gen/traffic_gen.cc	/^TrafficGen::serialize(ostream &os)$/;"	f	class:TrafficGen
serialize	thread_context.cc	/^serialize(ThreadContext &tc, std::ostream &os)$/;"	f
serialize	thread_state.cc	/^ThreadState::serialize(std::ostream &os)$/;"	f	class:ThreadState
serializeAfter	o3/rename_impl.hh	/^DefaultRename<Impl>::serializeAfter(InstQueue &inst_list, ThreadID tid)$/;"	f	class:DefaultRename
serializeAfterSeqNum	inorder/resources/use_def.hh	/^    InstSeqNum serializeAfterSeqNum[ThePipeline::MaxThreads];$/;"	m	class:UseDefUnit
serializeInst	o3/rename.hh	/^    DynInstPtr serializeInst[Impl::MaxThreads];$/;"	m	class:DefaultRename
serializeNext	ozone/front_end.hh	/^    bool serializeNext;$/;"	m	class:FrontEnd
serializeOnNextInst	inorder/resources/use_def.hh	/^    bool serializeOnNextInst[ThePipeline::MaxThreads];$/;"	m	class:UseDefUnit
serializeOnNextInst	o3/rename.hh	/^    bool serializeOnNextInst[Impl::MaxThreads];$/;"	m	class:DefaultRename
serializeThread	base.hh	/^    virtual void serializeThread(std::ostream &os, ThreadID tid) {};$/;"	f	class:BaseCPU
serializeThread	kvm/base.cc	/^BaseKvmCPU::serializeThread(std::ostream &os, ThreadID tid)$/;"	f	class:BaseKvmCPU
serializeThread	minor/cpu.cc	/^MinorCPU::serializeThread(std::ostream &os, ThreadID thread_id)$/;"	f	class:MinorCPU
serializeThread	o3/cpu.cc	/^FullO3CPU<Impl>::serializeThread(std::ostream &os, ThreadID tid)$/;"	f	class:FullO3CPU
serializeThread	simple/base.cc	/^BaseSimpleCPU::serializeThread(ostream &os, ThreadID tid)$/;"	f	class:BaseSimpleCPU
service	pc_event.hh	/^    bool service(ThreadContext *tc)$/;"	f	class:PCEventQueue
set	base_dyn_inst.hh	/^        void set(double d) { dbl = d; }$/;"	f	union:BaseDynInst::Result
set	base_dyn_inst.hh	/^        void set(uint64_t i) { integer = i; }$/;"	f	union:BaseDynInst::Result
set	checker/cpu.hh	/^        void set(double d) { dbl = d; }$/;"	f	union:CheckerCPU::Result
set	checker/cpu.hh	/^        void set(uint64_t i) { integer = i; }$/;"	f	union:CheckerCPU::Result
set	timebuf.hh	/^        void set(int idx)$/;"	f	class:TimeBuffer::wire
setASID	base_dyn_inst.hh	/^    void setASID(short addr_space_id) { asid = addr_space_id; }$/;"	f	class:BaseDynInst
setASID	inorder/inorder_dyn_inst.hh	/^    void setASID(short addr_space_id) { asid = addr_space_id; }$/;"	f	class:InOrderDynInst
setActiveThreads	inorder/pipeline_stage.cc	/^PipelineStage::setActiveThreads(list<ThreadID> *at_ptr)$/;"	f	class:PipelineStage
setActiveThreads	o3/commit_impl.hh	/^DefaultCommit<Impl>::setActiveThreads(list<ThreadID> *at_ptr)$/;"	f	class:DefaultCommit
setActiveThreads	o3/decode_impl.hh	/^DefaultDecode<Impl>::setActiveThreads(std::list<ThreadID> *at_ptr)$/;"	f	class:DefaultDecode
setActiveThreads	o3/fetch_impl.hh	/^DefaultFetch<Impl>::setActiveThreads(std::list<ThreadID> *at_ptr)$/;"	f	class:DefaultFetch
setActiveThreads	o3/iew_impl.hh	/^DefaultIEW<Impl>::setActiveThreads(list<ThreadID> *at_ptr)$/;"	f	class:DefaultIEW
setActiveThreads	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::setActiveThreads(list<ThreadID> *at_ptr)$/;"	f	class:InstructionQueue
setActiveThreads	o3/lsq_impl.hh	/^LSQ<Impl>::setActiveThreads(list<ThreadID> *at_ptr)$/;"	f	class:LSQ
setActiveThreads	o3/rename_impl.hh	/^DefaultRename<Impl>::setActiveThreads(list<ThreadID> *at_ptr)$/;"	f	class:DefaultRename
setActiveThreads	o3/rob_impl.hh	/^ROB<Impl>::setActiveThreads(list<ThreadID> *at_ptr)$/;"	f	class:ROB
setActivityCount	activity.hh	/^    void setActivityCount(int count)$/;"	f	class:ActivityRecorder
setAddrDependency	inorder/resources/cache_unit.cc	/^CacheUnit::setAddrDependency(DynInstPtr inst)$/;"	f	class:CacheUnit
setArchCCReg	o3/cpu.cc	/^FullO3CPU<Impl>::setArchCCReg(int reg_idx, CCReg val, ThreadID tid)$/;"	f	class:FullO3CPU
setArchFloatReg	o3/cpu.cc	/^FullO3CPU<Impl>::setArchFloatReg(int reg_idx, float val, ThreadID tid)$/;"	f	class:FullO3CPU
setArchFloatRegInt	o3/cpu.cc	/^FullO3CPU<Impl>::setArchFloatRegInt(int reg_idx, uint64_t val, ThreadID tid)$/;"	f	class:FullO3CPU
setArchIntReg	o3/cpu.cc	/^FullO3CPU<Impl>::setArchIntReg(int reg_idx, uint64_t val, ThreadID tid)$/;"	f	class:FullO3CPU
setAtCommit	base_dyn_inst.hh	/^    void setAtCommit() { status.set(AtCommit); }$/;"	f	class:BaseDynInst
setAtCommit	inorder/inorder_dyn_inst.hh	/^    void setAtCommit() { status.set(AtCommit); }$/;"	f	class:InOrderDynInst
setBE	ozone/back_end.hh	/^        void setBE(BackEnd *_be) { be = _be; }$/;"	f	class:BackEnd::InstQueue
setBE	ozone/lsq_unit.hh	/^    void setBE(BackEnd *be_ptr)$/;"	f	class:OzoneLSQ
setBE	ozone/lw_lsq.hh	/^    void setBE(BackEnd *be_ptr)$/;"	f	class:OzoneLWLSQ
setBackEnd	ozone/front_end.hh	/^    void setBackEnd(BackEnd *back_end_ptr)$/;"	f	class:FrontEnd
setBackSked	inorder/inorder_dyn_inst.hh	/^    void setBackSked(RSkedPtr back_sked)$/;"	f	class:InOrderDynInst
setBits	pred/sat_counter.hh	/^    void setBits(unsigned bits) { maxVal = (1 << bits) - 1; }$/;"	f	class:SatCounter
setBranchPred	inorder/inorder_dyn_inst.hh	/^    void setBranchPred(bool prediction) { predictTaken = prediction; }$/;"	f	class:InOrderDynInst
setCCEntry	o3/rename_map.hh	/^    void setCCEntry(RegIndex arch_reg, PhysRegIndex phys_reg)$/;"	f	class:UnifiedRenameMap
setCCReg	checker/thread_context.hh	/^    void setCCReg(int reg_idx, CCReg val)$/;"	f	class:CheckerThreadContext
setCCReg	inorder/cpu.cc	/^InOrderCPU::setCCReg(RegIndex reg_idx, CCReg val, ThreadID tid)$/;"	f	class:InOrderCPU
setCCReg	inorder/thread_context.cc	/^InOrderThreadContext::setCCReg(int reg_idx, CCReg val)$/;"	f	class:InOrderThreadContext
setCCReg	o3/cpu.cc	/^FullO3CPU<Impl>::setCCReg(int reg_idx, CCReg val)$/;"	f	class:FullO3CPU
setCCReg	o3/regfile.hh	/^    void setCCReg(PhysRegIndex reg_idx, CCReg val)$/;"	f	class:PhysRegFile
setCCReg	o3/thread_context.hh	/^    virtual void setCCReg(int reg_idx, CCReg val) {$/;"	f	class:O3ThreadContext
setCCReg	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::setCCReg(int reg_idx, CCReg val)$/;"	f	class:OzoneCPU::OzoneTC
setCCReg	simple_thread.hh	/^    void setCCReg(int reg_idx, CCReg val)$/;"	f	class:SimpleThread
setCCReg	thread_context.hh	/^    void setCCReg(int reg_idx, CCReg val)$/;"	f	class:ProxyThreadContext
setCCRegFlat	checker/thread_context.hh	/^    void setCCRegFlat(int idx, CCReg val)$/;"	f	class:CheckerThreadContext
setCCRegFlat	inorder/thread_context.cc	/^InOrderThreadContext::setCCRegFlat(int idx, CCReg val)$/;"	f	class:InOrderThreadContext
setCCRegFlat	o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::setCCRegFlat(int reg_idx, TheISA::CCReg val)$/;"	f	class:O3ThreadContext
setCCRegFlat	simple_thread.hh	/^    void setCCRegFlat(int idx, CCReg val) { ccRegs[idx] = val; }$/;"	f	class:SimpleThread
setCCRegFlat	simple_thread.hh	/^    void setCCRegFlat(int idx, CCReg val)$/;"	f	class:SimpleThread
setCCRegFlat	thread_context.hh	/^    void setCCRegFlat(int idx, CCReg val)$/;"	f	class:ProxyThreadContext
setCCRegOperand	base_dyn_inst.hh	/^    void setCCRegOperand(const StaticInst *si, int idx, CCReg val)$/;"	f	class:BaseDynInst
setCCRegOperand	checker/cpu.hh	/^    void setCCRegOperand(const StaticInst *si, int idx, CCReg val)$/;"	f	class:CheckerCPU
setCCRegOperand	inorder/inorder_dyn_inst.hh	/^    void setCCRegOperand(const StaticInst *si, int idx, CCReg val) {$/;"	f	class:InOrderDynInst
setCCRegOperand	minor/exec_context.hh	/^    setCCRegOperand(const StaticInst *si, int idx, TheISA::CCReg val)$/;"	f	class:Minor::ExecContext
setCCRegOperand	o3/dyn_inst.hh	/^    void setCCRegOperand(const StaticInst *si, int idx, CCReg val)$/;"	f	class:BaseO3DynInst
setCCRegOperand	simple/base.hh	/^    void setCCRegOperand(const StaticInst *si, int idx, CCReg val)$/;"	f	class:BaseSimpleCPU
setCPU	inorder/first_stage.cc	/^FirstStage::setCPU(InOrderCPU *cpu_ptr)$/;"	f	class:FirstStage
setCPU	inorder/pipeline_stage.cc	/^PipelineStage::setCPU(InOrderCPU *cpu_ptr)$/;"	f	class:PipelineStage
setCPU	inorder/reg_dep_map.cc	/^RegDepMap::setCPU(InOrderCPU *_cpu)$/;"	f	class:RegDepMap
setCPU	ozone/back_end.hh	/^    void setCPU(FullCPU *cpu_ptr)$/;"	f	class:BackEnd
setCPU	ozone/front_end_impl.hh	/^FrontEnd<Impl>::setCPU(CPUType *cpu_ptr)$/;"	f	class:FrontEnd
setCPU	ozone/inorder_back_end.hh	/^    void setCPU(FullCPU *cpu_ptr)$/;"	f	class:InorderBackEnd
setCPU	ozone/inst_queue.hh	/^    void setCPU(FullCPU *_cpu) { cpu = _cpu; }$/;"	f	class:InstQueue
setCPU	ozone/lsq_unit.hh	/^    void setCPU(FullCPU *cpu_ptr)$/;"	f	class:OzoneLSQ
setCPU	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::setCPU(OzoneCPU *cpu_ptr)$/;"	f	class:LWBackEnd
setCPU	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::setCPU(OzoneCPU *cpu_ptr)$/;"	f	class:OzoneLWLSQ
setCPUID	kvm/x86_cpu.cc	/^X86KvmCPU::setCPUID(const Kvm::CPUIDVector &cpuid)$/;"	f	class:X86KvmCPU
setCPUID	kvm/x86_cpu.cc	/^X86KvmCPU::setCPUID(const struct kvm_cpuid2 &cpuid)$/;"	f	class:X86KvmCPU
setCanCommit	base_dyn_inst.hh	/^    void setCanCommit() { status.set(CanCommit); }$/;"	f	class:BaseDynInst
setCanCommit	inorder/inorder_dyn_inst.hh	/^    void setCanCommit() { status.set(CanCommit); }$/;"	f	class:InOrderDynInst
setCanIssue	base_dyn_inst.hh	/^    void setCanIssue() { status.set(CanIssue); }$/;"	f	class:BaseDynInst
setCanIssue	inorder/inorder_dyn_inst.hh	/^    void setCanIssue() { status.set(CanIssue); }$/;"	f	class:InOrderDynInst
setCommBuffer	ozone/back_end_impl.hh	/^BackEnd<Impl>::setCommBuffer(TimeBuffer<CommStruct> *_comm)$/;"	f	class:BackEnd
setCommBuffer	ozone/front_end_impl.hh	/^FrontEnd<Impl>::setCommBuffer(TimeBuffer<CommStruct> *_comm)$/;"	f	class:FrontEnd
setCommBuffer	ozone/inorder_back_end.hh	/^    void setCommBuffer(TimeBuffer<CommStruct> *_comm)$/;"	f	class:InorderBackEnd
setCommBuffer	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::setCommBuffer(TimeBuffer<CommStruct> *_comm)$/;"	f	class:LWBackEnd
setCommitStage	o3/rename.hh	/^    void setCommitStage(Commit *commit_stage)$/;"	f	class:DefaultRename
setCommitted	base_dyn_inst.hh	/^    void setCommitted() { status.set(Committed); }$/;"	f	class:BaseDynInst
setCommitted	inorder/inorder_dyn_inst.hh	/^    void setCommitted() { status.set(Committed); }$/;"	f	class:InOrderDynInst
setCompleted	base_dyn_inst.hh	/^    void setCompleted() { status.set(Completed); }$/;"	f	class:BaseDynInst
setCompleted	inorder/inorder_dyn_inst.hh	/^    void setCompleted() { status.set(Completed); }$/;"	f	class:InOrderDynInst
setCompleted	inorder/resource.hh	/^    void setCompleted(bool cond = true) { completed = cond; }$/;"	f	class:ResourceRequest
setContextId	checker/thread_context.hh	/^    void setContextId(int id)$/;"	f	class:CheckerThreadContext
setContextId	inorder/thread_context.hh	/^    void setContextId(int id) { thread->setContextId(id); }$/;"	f	class:InOrderThreadContext
setContextId	o3/thread_context.hh	/^    virtual void setContextId(int id) { thread->setContextId(id); }$/;"	f	class:O3ThreadContext
setContextId	thread_context.hh	/^    void setContextId(int id) { actualTC->setContextId(id); }$/;"	f	class:ProxyThreadContext
setContextId	thread_state.hh	/^    void setContextId(int id) { _contextId = id; }$/;"	f	struct:ThreadState
setContextSegment	kvm/x86_cpu.cc	/^setContextSegment(ThreadContext *tc, const struct kvm_dtable &kvm_dtable,$/;"	f
setContextSegment	kvm/x86_cpu.cc	/^setContextSegment(ThreadContext *tc, const struct kvm_segment &kvm_seg,$/;"	f
setCpuId	inorder/cpu.hh	/^    void setCpuId(int val) { cpu_id = val; }$/;"	f	class:InOrderCPU
setCurResSlot	inorder/inorder_dyn_inst.hh	/^    void setCurResSlot(unsigned slot_num) { curResSlot = slot_num; }$/;"	f	class:InOrderDynInst
setDcachePort	checker/cpu.cc	/^CheckerCPU::setDcachePort(MasterPort *dcache_port)$/;"	f	class:CheckerCPU
setDcachePort	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::setDcachePort(MasterPort *dcache_port)$/;"	f	class:LSQUnit
setDebugRegisters	kvm/x86_cpu.cc	/^X86KvmCPU::setDebugRegisters(const struct kvm_debugregs &regs)$/;"	f	class:X86KvmCPU
setDecodeQueue	o3/decode_impl.hh	/^DefaultDecode<Impl>::setDecodeQueue(TimeBuffer<DecodeStruct> *dq_ptr)$/;"	f	class:DefaultDecode
setDecodeQueue	o3/rename_impl.hh	/^DefaultRename<Impl>::setDecodeQueue(TimeBuffer<DecodeStruct> *dq_ptr)$/;"	f	class:DefaultRename
setDelayedCommit	static_inst.hh	/^    void setDelayedCommit() { flags[IsDelayedCommit] = true; }$/;"	f	class:StaticInst
setDestRegIdx	inorder/inorder_dyn_inst.hh	/^    void setDestRegIdx(int idx, PhysRegIndex dest_idx)$/;"	f	class:InOrderDynInst
setDirectedTester	testers/directedtest/DirectedGenerator.cc	/^DirectedGenerator::setDirectedTester(RubyDirectedTester* directed_tester)$/;"	f	class:DirectedGenerator
setDoubleResult	ozone/dyn_inst.hh	/^    void setDoubleResult(double result) { this->instResult.dbl = result; }$/;"	f	class:OzoneDynInst
setDrainState	minor/execute.cc	/^Execute::setDrainState(DrainState state)$/;"	f	class:Minor::Execute
setEA	base_dyn_inst.hh	/^    void setEA(Addr ea) { instEffAddr = ea; instFlags[EACalcDone] = true; }$/;"	f	class:BaseDynInst
setEA	checker/cpu.hh	/^    void setEA(Addr EA) { panic("SimpleCPU::setEA() not implemented\\n"); }$/;"	f	class:CheckerCPU
setEA	inorder/inorder_dyn_inst.hh	/^    void setEA(Addr ea) { instEffAddr = ea; eaCalcDone = true; }$/;"	f	class:InOrderDynInst
setEA	minor/exec_context.hh	/^    void setEA(Addr ea)$/;"	f	class:Minor::ExecContext
setEA	simple/base.hh	/^    void setEA(Addr EA) { panic("BaseSimpleCPU::setEA() not implemented\\n"); }$/;"	f	class:BaseSimpleCPU
setEntry	o3/rename_map.cc	/^UnifiedRenameMap::setEntry(RegIndex arch_reg, PhysRegIndex phys_reg)$/;"	f	class:UnifiedRenameMap
setEntry	o3/rename_map.hh	/^    void setEntry(RegIndex arch_reg, PhysRegIndex phys_reg)$/;"	f	class:SimpleRenameMap
setEvent	inorder/cpu.hh	/^        void setEvent(CPUEventType e_type, const Fault &_fault, ThreadID _tid,$/;"	f	class:InOrderCPU::CPUEvent
setEvent	inorder/resource_pool.hh	/^        void setEvent(InOrderCPU::CPUEventType e_type,$/;"	f	class:ResourcePool::ResPoolEvent
setExecuted	base_dyn_inst.hh	/^    void setExecuted() { status.set(Executed); }$/;"	f	class:BaseDynInst
setExecuted	inorder/inorder_dyn_inst.hh	/^    void setExecuted() { status.set(Executed); }$/;"	f	class:InOrderDynInst
setFPUState	kvm/base.cc	/^BaseKvmCPU::setFPUState(const struct kvm_fpu &state)$/;"	f	class:BaseKvmCPU
setFault	minor/pipe_data.cc	/^ForwardLineData::setFault(Fault fault_)$/;"	f	class:Minor::ForwardLineData
setFault	o3/fetch.hh	/^        void setFault(Fault _fault)$/;"	f	class:DefaultFetch::FinishTranslationEvent
setFetchQueue	o3/commit_impl.hh	/^DefaultCommit<Impl>::setFetchQueue(TimeBuffer<FetchStruct> *fq_ptr)$/;"	f	class:DefaultCommit
setFetchQueue	o3/decode_impl.hh	/^DefaultDecode<Impl>::setFetchQueue(TimeBuffer<FetchStruct> *fq_ptr)$/;"	f	class:DefaultDecode
setFetchQueue	o3/fetch_impl.hh	/^DefaultFetch<Impl>::setFetchQueue(TimeBuffer<FetchStruct> *ftb_ptr)$/;"	f	class:DefaultFetch
setFlag	static_inst.hh	/^    void setFlag(Flags f) { flags[f] = true; }$/;"	f	class:StaticInst
setFloatEntry	o3/rename_map.hh	/^    void setFloatEntry(RegIndex arch_reg, PhysRegIndex phys_reg)$/;"	f	class:UnifiedRenameMap
setFloatReg	checker/thread_context.hh	/^    void setFloatReg(int reg_idx, FloatReg val)$/;"	f	class:CheckerThreadContext
setFloatReg	inorder/cpu.cc	/^InOrderCPU::setFloatReg(RegIndex reg_idx, FloatReg val, ThreadID tid)$/;"	f	class:InOrderCPU
setFloatReg	inorder/thread_context.cc	/^InOrderThreadContext::setFloatReg(int reg_idx, FloatReg val)$/;"	f	class:InOrderThreadContext
setFloatReg	o3/cpu.cc	/^FullO3CPU<Impl>::setFloatReg(int reg_idx, FloatReg val)$/;"	f	class:FullO3CPU
setFloatReg	o3/regfile.hh	/^    void setFloatReg(PhysRegIndex reg_idx, FloatReg val)$/;"	f	class:PhysRegFile
setFloatReg	o3/thread_context.hh	/^    virtual void setFloatReg(int reg_idx, FloatReg val) {$/;"	f	class:O3ThreadContext
setFloatReg	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::setFloatReg(int reg_idx, FloatReg val)$/;"	f	class:OzoneCPU::OzoneTC
setFloatReg	simple_thread.hh	/^    void setFloatReg(int reg_idx, FloatReg val)$/;"	f	class:SimpleThread
setFloatReg	thread_context.hh	/^    void setFloatReg(int reg_idx, FloatReg val)$/;"	f	class:ProxyThreadContext
setFloatRegBits	checker/thread_context.hh	/^    void setFloatRegBits(int reg_idx, FloatRegBits val)$/;"	f	class:CheckerThreadContext
setFloatRegBits	inorder/cpu.cc	/^InOrderCPU::setFloatRegBits(RegIndex reg_idx, FloatRegBits val, ThreadID tid)$/;"	f	class:InOrderCPU
setFloatRegBits	inorder/thread_context.cc	/^InOrderThreadContext::setFloatRegBits(int reg_idx, FloatRegBits val)$/;"	f	class:InOrderThreadContext
setFloatRegBits	o3/cpu.cc	/^FullO3CPU<Impl>::setFloatRegBits(int reg_idx, FloatRegBits val)$/;"	f	class:FullO3CPU
setFloatRegBits	o3/regfile.hh	/^    void setFloatRegBits(PhysRegIndex reg_idx, FloatRegBits val)$/;"	f	class:PhysRegFile
setFloatRegBits	o3/thread_context.hh	/^    virtual void setFloatRegBits(int reg_idx, FloatRegBits val) {$/;"	f	class:O3ThreadContext
setFloatRegBits	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::setFloatRegBits(int reg_idx, FloatRegBits val)$/;"	f	class:OzoneCPU::OzoneTC
setFloatRegBits	simple_thread.hh	/^    void setFloatRegBits(int reg_idx, FloatRegBits val)$/;"	f	class:SimpleThread
setFloatRegBits	thread_context.hh	/^    void setFloatRegBits(int reg_idx, FloatRegBits val)$/;"	f	class:ProxyThreadContext
setFloatRegBitsFlat	checker/thread_context.hh	/^    void setFloatRegBitsFlat(int idx, FloatRegBits val)$/;"	f	class:CheckerThreadContext
setFloatRegBitsFlat	inorder/thread_context.cc	/^InOrderThreadContext::setFloatRegBitsFlat(int idx, FloatRegBits val)$/;"	f	class:InOrderThreadContext
setFloatRegBitsFlat	o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::setFloatRegBitsFlat(int reg_idx, FloatRegBits val)$/;"	f	class:O3ThreadContext
setFloatRegBitsFlat	simple_thread.hh	/^    void setFloatRegBitsFlat(int idx, FloatRegBits val) {$/;"	f	class:SimpleThread
setFloatRegBitsFlat	thread_context.hh	/^    void setFloatRegBitsFlat(int idx, FloatRegBits val)$/;"	f	class:ProxyThreadContext
setFloatRegBitsSrc	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::setFloatRegBitsSrc(int idx, FloatRegBits val)$/;"	f	class:InOrderDynInst
setFloatRegFlat	checker/thread_context.hh	/^    void setFloatRegFlat(int idx, FloatReg val)$/;"	f	class:CheckerThreadContext
setFloatRegFlat	inorder/thread_context.cc	/^InOrderThreadContext::setFloatRegFlat(int idx, FloatReg val)$/;"	f	class:InOrderThreadContext
setFloatRegFlat	o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::setFloatRegFlat(int reg_idx, FloatReg val)$/;"	f	class:O3ThreadContext
setFloatRegFlat	simple_thread.hh	/^    void setFloatRegFlat(int idx, FloatReg val) { floatRegs.f[idx] = val; }$/;"	f	class:SimpleThread
setFloatRegFlat	thread_context.hh	/^    void setFloatRegFlat(int idx, FloatReg val)$/;"	f	class:ProxyThreadContext
setFloatRegOperand	base_dyn_inst.hh	/^    void setFloatRegOperand(const StaticInst *si, int idx, FloatReg val)$/;"	f	class:BaseDynInst
setFloatRegOperand	checker/cpu.hh	/^    void setFloatRegOperand(const StaticInst *si, int idx, FloatReg val)$/;"	f	class:CheckerCPU
setFloatRegOperand	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::setFloatRegOperand(const StaticInst *si, int idx, FloatReg val)$/;"	f	class:InOrderDynInst
setFloatRegOperand	minor/exec_context.hh	/^    setFloatRegOperand(const StaticInst *si, int idx,$/;"	f	class:Minor::ExecContext
setFloatRegOperand	o3/dyn_inst.hh	/^    void setFloatRegOperand(const StaticInst *si, int idx, FloatReg val)$/;"	f	class:BaseO3DynInst
setFloatRegOperand	ozone/dyn_inst.hh	/^    void setFloatRegOperand(const StaticInst *si, int idx, FloatReg val)$/;"	f	class:OzoneDynInst
setFloatRegOperand	simple/base.hh	/^    void setFloatRegOperand(const StaticInst *si, int idx, FloatReg val)$/;"	f	class:BaseSimpleCPU
setFloatRegOperandBits	base_dyn_inst.hh	/^    void setFloatRegOperandBits(const StaticInst *si, int idx, FloatRegBits val)$/;"	f	class:BaseDynInst
setFloatRegOperandBits	checker/cpu.hh	/^    void setFloatRegOperandBits(const StaticInst *si, int idx,$/;"	f	class:CheckerCPU
setFloatRegOperandBits	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::setFloatRegOperandBits(const StaticInst *si, int idx,$/;"	f	class:InOrderDynInst
setFloatRegOperandBits	minor/exec_context.hh	/^    setFloatRegOperandBits(const StaticInst *si, int idx,$/;"	f	class:Minor::ExecContext
setFloatRegOperandBits	o3/dyn_inst.hh	/^    void setFloatRegOperandBits(const StaticInst *si, int idx,$/;"	f	class:BaseO3DynInst
setFloatRegOperandBits	ozone/dyn_inst.hh	/^    void setFloatRegOperandBits(const StaticInst *si, int idx,$/;"	f	class:OzoneDynInst
setFloatRegOperandBits	simple/base.hh	/^    void setFloatRegOperandBits(const StaticInst *si, int idx,$/;"	f	class:BaseSimpleCPU
setFloatSrc	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::setFloatSrc(int idx, FloatReg val)$/;"	f	class:InOrderDynInst
setFreeFU	o3/inst_queue.hh	/^        void setFreeFU() { freeFU = true; }$/;"	f	class:InstructionQueue::FUCompletion
setFreeList	o3/rename_impl.hh	/^DefaultRename<Impl>::setFreeList(FreeList *fl_ptr)$/;"	f	class:DefaultRename
setFrontEnd	ozone/back_end.hh	/^    void setFrontEnd(FrontEnd *front_end_ptr)$/;"	f	class:BackEnd
setFrontEnd	ozone/inorder_back_end.hh	/^    void setFrontEnd(FrontEnd *front_end_ptr)$/;"	f	class:InorderBackEnd
setFrontEnd	ozone/lw_back_end.hh	/^    void setFrontEnd(FrontEnd *front_end_ptr)$/;"	f	class:LWBackEnd
setFrontSked	inorder/inorder_dyn_inst.hh	/^    void setFrontSked(RSkedPtr front_sked)$/;"	f	class:InOrderDynInst
setFuncExeInst	ozone/cpu.hh	/^        void setFuncExeInst(Counter new_val)$/;"	f	class:OzoneCPU::OzoneTC
setFuncExeInst	thread_state.hh	/^    void setFuncExeInst(Counter new_val) { funcExeInst = new_val; }$/;"	f	struct:ThreadState
setIEWQueue	o3/commit_impl.hh	/^DefaultCommit<Impl>::setIEWQueue(TimeBuffer<IEWStruct> *iq_ptr)$/;"	f	class:DefaultCommit
setIEWQueue	o3/iew_impl.hh	/^DefaultIEW<Impl>::setIEWQueue(TimeBuffer<IEWStruct> *iq_ptr)$/;"	f	class:DefaultIEW
setIEWStage	o3/commit_impl.hh	/^DefaultCommit<Impl>::setIEWStage(IEW *iew_stage)$/;"	f	class:DefaultCommit
setIEWStage	o3/rename.hh	/^    void setIEWStage(IEW *iew_stage)$/;"	f	class:DefaultRename
setIQ	o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::setIQ(InstructionQueue<Impl> *iq_ptr)$/;"	f	class:MemDepUnit
setIRQLine	kvm/vm.cc	/^KvmVM::setIRQLine(uint32_t irq, bool high)$/;"	f	class:KvmVM
setIcachePort	checker/cpu.cc	/^CheckerCPU::setIcachePort(MasterPort *icache_port)$/;"	f	class:CheckerCPU
setInIQ	base_dyn_inst.hh	/^    void setInIQ() { status.set(IqEntry); }$/;"	f	class:BaseDynInst
setInLSQ	base_dyn_inst.hh	/^    void setInLSQ() { status.set(LsqEntry); }$/;"	f	class:BaseDynInst
setInROB	base_dyn_inst.hh	/^    void setInROB() { status.set(RobEntry); }$/;"	f	class:BaseDynInst
setInst	o3/dep_graph.hh	/^    void setInst(PhysRegIndex idx, DynInstPtr &new_inst)$/;"	f	class:DependencyGraph
setInstListIt	base_dyn_inst.hh	/^    void setInstListIt(ListIt _instListIt) { instListIt = _instListIt; }$/;"	f	class:BaseDynInst
setInstListIt	inorder/inorder_dyn_inst.hh	/^    void setInstListIt(ListIt _instListIt) { onInstList = true; instListIt = _instListIt; }$/;"	f	class:InOrderDynInst
setInstSeqNum	inorder/cpu.hh	/^    void setInstSeqNum(ThreadID tid, InstSeqNum seq_num)$/;"	f	class:InOrderCPU
setIntEntry	o3/rename_map.hh	/^    void setIntEntry(RegIndex arch_reg, PhysRegIndex phys_reg)$/;"	f	class:UnifiedRenameMap
setIntReg	checker/thread_context.hh	/^    void setIntReg(int reg_idx, uint64_t val)$/;"	f	class:CheckerThreadContext
setIntReg	inorder/cpu.cc	/^InOrderCPU::setIntReg(RegIndex reg_idx, uint64_t val, ThreadID tid)$/;"	f	class:InOrderCPU
setIntReg	inorder/thread_context.cc	/^InOrderThreadContext::setIntReg(int reg_idx, uint64_t val)$/;"	f	class:InOrderThreadContext
setIntReg	o3/cpu.cc	/^FullO3CPU<Impl>::setIntReg(int reg_idx, uint64_t val)$/;"	f	class:FullO3CPU
setIntReg	o3/regfile.hh	/^    void setIntReg(PhysRegIndex reg_idx, uint64_t val)$/;"	f	class:PhysRegFile
setIntReg	o3/thread_context.hh	/^    virtual void setIntReg(int reg_idx, uint64_t val) {$/;"	f	class:O3ThreadContext
setIntReg	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::setIntReg(int reg_idx, uint64_t val)$/;"	f	class:OzoneCPU::OzoneTC
setIntReg	simple_thread.hh	/^    void setIntReg(int reg_idx, uint64_t val)$/;"	f	class:SimpleThread
setIntReg	thread_context.hh	/^    void setIntReg(int reg_idx, uint64_t val)$/;"	f	class:ProxyThreadContext
setIntRegFlat	checker/thread_context.hh	/^    void setIntRegFlat(int idx, uint64_t val)$/;"	f	class:CheckerThreadContext
setIntRegFlat	inorder/thread_context.cc	/^InOrderThreadContext::setIntRegFlat(int idx, uint64_t val)$/;"	f	class:InOrderThreadContext
setIntRegFlat	o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::setIntRegFlat(int reg_idx, uint64_t val)$/;"	f	class:O3ThreadContext
setIntRegFlat	simple_thread.hh	/^    void setIntRegFlat(int idx, uint64_t val) { intRegs[idx] = val; }$/;"	f	class:SimpleThread
setIntRegFlat	thread_context.hh	/^    void setIntRegFlat(int idx, uint64_t val)$/;"	f	class:ProxyThreadContext
setIntRegOperand	base_dyn_inst.hh	/^    void setIntRegOperand(const StaticInst *si, int idx, IntReg val)$/;"	f	class:BaseDynInst
setIntRegOperand	checker/cpu.hh	/^    void setIntRegOperand(const StaticInst *si, int idx, IntReg val)$/;"	f	class:CheckerCPU
setIntRegOperand	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::setIntRegOperand(const StaticInst *si, int idx, IntReg val)$/;"	f	class:InOrderDynInst
setIntRegOperand	minor/exec_context.hh	/^    setIntRegOperand(const StaticInst *si, int idx, IntReg val)$/;"	f	class:Minor::ExecContext
setIntRegOperand	o3/dyn_inst.hh	/^    void setIntRegOperand(const StaticInst *si, int idx, IntReg val)$/;"	f	class:BaseO3DynInst
setIntRegOperand	ozone/dyn_inst.hh	/^    void setIntRegOperand(const StaticInst *si, int idx, uint64_t val)$/;"	f	class:OzoneDynInst
setIntRegOperand	simple/base.hh	/^    void setIntRegOperand(const StaticInst *si, int idx, IntReg val)$/;"	f	class:BaseSimpleCPU
setIntResult	ozone/dyn_inst.hh	/^    void setIntResult(uint64_t result) { this->instResult.integer = result; }$/;"	f	class:OzoneDynInst
setIntSrc	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::setIntSrc(int idx, uint64_t val)$/;"	f	class:InOrderDynInst
setIssueExecQueue	ozone/back_end_impl.hh	/^BackEnd<Impl>::InstQueue::setIssueExecQueue(TimeBuffer<IssueToExec> *i2e_queue)$/;"	f	class:BackEnd::InstQueue
setIssueToExecuteQueue	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::setIssueToExecuteQueue(TimeBuffer<IssueStruct> *i2e_ptr)$/;"	f	class:InstructionQueue
setIssueToExecuteQueue	ozone/inst_queue_impl.hh	/^InstQueue<Impl>::setIssueToExecuteQueue(TimeBuffer<IssueStruct> *i2e_ptr)$/;"	f	class:InstQueue
setIssued	base_dyn_inst.hh	/^    void setIssued() { status.set(Issued); }$/;"	f	class:BaseDynInst
setIssued	inorder/inorder_dyn_inst.hh	/^    void setIssued() { status.set(Issued); }$/;"	f	class:InOrderDynInst
setKvmDTableReg	kvm/x86_cpu.cc	/^setKvmDTableReg(ThreadContext *tc, struct kvm_dtable &kvm_dtable,$/;"	f	file:
setKvmSegmentReg	kvm/x86_cpu.cc	/^setKvmSegmentReg(ThreadContext *tc, struct kvm_segment &kvm_seg,$/;"	f	file:
setLastMicroop	static_inst.hh	/^    void setLastMicroop() { flags[IsLastMicroop] = true; }$/;"	f	class:StaticInst
setLoadBlockedHandled	ozone/lw_lsq.hh	/^    void setLoadBlockedHandled()$/;"	f	class:OzoneLWLSQ
setMSR	kvm/x86_cpu.cc	/^X86KvmCPU::setMSR(uint32_t index, uint64_t value)$/;"	f	class:X86KvmCPU
setMSRs	kvm/x86_cpu.cc	/^X86KvmCPU::setMSRs(const KvmMSRVector &msrs)$/;"	f	class:X86KvmCPU
setMSRs	kvm/x86_cpu.cc	/^X86KvmCPU::setMSRs(const struct kvm_msrs &msrs)$/;"	f	class:X86KvmCPU
setMemAccCompleted	inorder/resources/cache_unit.hh	/^    setMemAccCompleted(bool completed = true)$/;"	f	class:CacheRequest
setMemAccPending	inorder/resources/cache_unit.hh	/^    void setMemAccPending(bool pending = true) { memAccPending = pending; }$/;"	f	class:CacheRequest
setMemAddr	inorder/inorder_dyn_inst.hh	/^    void setMemAddr(Addr addr)$/;"	f	class:InOrderDynInst
setMemStall	inorder/resource.hh	/^    void setMemStall(bool stall = true) { memStall = stall; }$/;"	f	class:ResourceRequest
setMicroPC	inorder/thread_context.hh	/^    void setMicroPC(uint64_t val) { };$/;"	f	class:InOrderThreadContext
setMiscReg	checker/cpu.hh	/^    void setMiscReg(int misc_reg, const MiscReg &val)$/;"	f	class:CheckerCPU
setMiscReg	checker/thread_context.hh	/^    void setMiscReg(int misc_reg, const MiscReg &val)$/;"	f	class:CheckerThreadContext
setMiscReg	inorder/cpu.cc	/^InOrderCPU::setMiscReg(int misc_reg, const MiscReg &val, ThreadID tid)$/;"	f	class:InOrderCPU
setMiscReg	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::setMiscReg(int misc_reg, const MiscReg &val)$/;"	f	class:InOrderDynInst
setMiscReg	inorder/thread_context.cc	/^InOrderThreadContext::setMiscReg(int misc_reg, const MiscReg &val)$/;"	f	class:InOrderThreadContext
setMiscReg	minor/exec_context.hh	/^    setMiscReg(int misc_reg, const TheISA::MiscReg &val)$/;"	f	class:Minor::ExecContext
setMiscReg	o3/cpu.cc	/^FullO3CPU<Impl>::setMiscReg(int misc_reg,$/;"	f	class:FullO3CPU
setMiscReg	o3/dyn_inst.hh	/^    void setMiscReg(int misc_reg, const MiscReg &val)$/;"	f	class:BaseO3DynInst
setMiscReg	o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::setMiscReg(int misc_reg, const MiscReg &val)$/;"	f	class:O3ThreadContext
setMiscReg	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::setMiscReg(int misc_reg, const MiscReg &val)$/;"	f	class:OzoneCPU::OzoneTC
setMiscReg	ozone/dyn_inst_impl.hh	/^OzoneDynInst<Impl>::setMiscReg(int misc_reg, const MiscReg &val)$/;"	f	class:OzoneDynInst
setMiscReg	ozone/thread_state.hh	/^    void setMiscReg(int misc_reg, const MiscReg &val)$/;"	f	struct:OzoneThreadState
setMiscReg	simple/base.hh	/^    void setMiscReg(int misc_reg, const MiscReg &val)$/;"	f	class:BaseSimpleCPU
setMiscReg	simple_thread.hh	/^    setMiscReg(int misc_reg, const MiscReg &val, ThreadID tid = 0)$/;"	f	class:SimpleThread
setMiscReg	thread_context.hh	/^    void setMiscReg(int misc_reg, const MiscReg &val)$/;"	f	class:ProxyThreadContext
setMiscRegNoEffect	checker/cpu.hh	/^    void setMiscRegNoEffect(int misc_reg, const MiscReg &val)$/;"	f	class:CheckerCPU
setMiscRegNoEffect	checker/thread_context.hh	/^    void setMiscRegNoEffect(int misc_reg, const MiscReg &val)$/;"	f	class:CheckerThreadContext
setMiscRegNoEffect	inorder/cpu.cc	/^InOrderCPU::setMiscRegNoEffect(int misc_reg, const MiscReg &val, ThreadID tid)$/;"	f	class:InOrderCPU
setMiscRegNoEffect	inorder/thread_context.cc	/^InOrderThreadContext::setMiscRegNoEffect(int misc_reg, const MiscReg &val)$/;"	f	class:InOrderThreadContext
setMiscRegNoEffect	o3/cpu.cc	/^FullO3CPU<Impl>::setMiscRegNoEffect(int misc_reg,$/;"	f	class:FullO3CPU
setMiscRegNoEffect	o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::setMiscRegNoEffect(int misc_reg, const MiscReg &val)$/;"	f	class:O3ThreadContext
setMiscRegNoEffect	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::setMiscRegNoEffect(int misc_reg, const MiscReg &val)$/;"	f	class:OzoneCPU::OzoneTC
setMiscRegNoEffect	ozone/dyn_inst_impl.hh	/^OzoneDynInst<Impl>::setMiscRegNoEffect(int misc_reg, const MiscReg &val)$/;"	f	class:OzoneDynInst
setMiscRegNoEffect	ozone/thread_state.hh	/^    void setMiscRegNoEffect(int misc_reg, const MiscReg &val)$/;"	f	struct:OzoneThreadState
setMiscRegNoEffect	simple_thread.hh	/^    setMiscRegNoEffect(int misc_reg, const MiscReg &val, ThreadID tid = 0)$/;"	f	class:SimpleThread
setMiscRegNoEffect	thread_context.hh	/^    void setMiscRegNoEffect(int misc_reg, const MiscReg &val)$/;"	f	class:ProxyThreadContext
setMiscRegOperand	checker/cpu.hh	/^    void setMiscRegOperand($/;"	f	class:CheckerCPU
setMiscRegOperand	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::setMiscRegOperand(const StaticInst *si, int idx,$/;"	f	class:InOrderDynInst
setMiscRegOperand	minor/exec_context.hh	/^    setMiscRegOperand(const StaticInst *si, int idx,$/;"	f	class:Minor::ExecContext
setMiscRegOperand	o3/dyn_inst.hh	/^    void setMiscRegOperand(const StaticInst *si, int idx,$/;"	f	class:BaseO3DynInst
setMiscRegOperand	simple/base.hh	/^    void setMiscRegOperand($/;"	f	class:BaseSimpleCPU
setNextMicroPC	inorder/thread_context.hh	/^    void setNextMicroPC(uint64_t val) { };$/;"	f	class:InOrderThreadContext
setNextNPC	ozone/cpu.hh	/^        void setNextNPC(uint64_t val)$/;"	f	class:OzoneCPU::OzoneTC
setNextPC	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::setNextPC(Addr val)$/;"	f	class:OzoneCPU::OzoneTC
setNextPC	ozone/front_end.hh	/^    void setNextPC(Addr val) { nextPC = val; }$/;"	f	class:FrontEnd
setNextPC	ozone/thread_state.hh	/^    void setNextPC(uint64_t val)$/;"	f	struct:OzoneThreadState
setNextStage	inorder/inorder_dyn_inst.hh	/^    void setNextStage(int stage_num) { nextStage = stage_num; }$/;"	f	class:InOrderDynInst
setNextStageQueue	inorder/pipeline_stage.cc	/^PipelineStage::setNextStageQueue(TimeBuffer<InterStageStruct> *next_stage_ptr)$/;"	f	class:PipelineStage
setNextStatus	o3/commit_impl.hh	/^DefaultCommit<Impl>::setNextStatus()$/;"	f	class:DefaultCommit
setNoFault	translation.hh	/^    setNoFault()$/;"	f	class:WholeTranslationState
setOneReg	kvm/base.cc	/^BaseKvmCPU::setOneReg(uint64_t id, const void *addr)$/;"	f	class:BaseKvmCPU
setOneReg	kvm/base.hh	/^    void setOneReg(uint64_t id, uint32_t value) { setOneReg(id, &value); }$/;"	f	class:BaseKvmCPU
setOneReg	kvm/base.hh	/^    void setOneReg(uint64_t id, uint64_t value) { setOneReg(id, &value); }$/;"	f	class:BaseKvmCPU
setPC	inorder/inorder_trace.hh	/^    void setPC(TheISA::PCState _pc) { pc = _pc; }$/;"	f	class:Trace::InOrderTraceRecord
setPC	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::setPC(Addr val)$/;"	f	class:OzoneCPU::OzoneTC
setPC	ozone/front_end.hh	/^    void setPC(Addr val) { PC = val; }$/;"	f	class:FrontEnd
setPC	ozone/thread_state.hh	/^    void setPC(uint64_t val)$/;"	f	struct:OzoneThreadState
setPid	base.hh	/^    void setPid(uint32_t pid) { _pid = pid; }$/;"	f	class:BaseCPU
setPredTaken	base_dyn_inst.hh	/^    void setPredTaken(bool predicted_taken)$/;"	f	class:BaseDynInst
setPredTarg	base_dyn_inst.hh	/^    void setPredTarg(const TheISA::PCState &_predPC)$/;"	f	class:BaseDynInst
setPredTarg	inorder/inorder_dyn_inst.hh	/^    void setPredTarg(const TheISA::PCState &predictedPC)$/;"	f	class:InOrderDynInst
setPredicate	base_dyn_inst.hh	/^    void setPredicate(bool val)$/;"	f	class:BaseDynInst
setPredicate	checker/cpu.hh	/^    void setPredicate(bool val)$/;"	f	class:CheckerCPU
setPredicate	inorder/inorder_dyn_inst.hh	/^    void setPredicate(bool val) {$/;"	f	class:InOrderDynInst
setPredicate	minor/exec_context.hh	/^    setPredicate(bool val)$/;"	f	class:Minor::ExecContext
setPredicate	simple/base.hh	/^    void setPredicate(bool val)$/;"	f	class:BaseSimpleCPU
setPredicate	simple_thread.hh	/^    void setPredicate(bool val)$/;"	f	class:SimpleThread
setPredicate	thread_context.hh	/^    void setPredicate(bool val)$/;"	f	class:ProxyThreadContext
setPrevDestInst	ozone/dyn_inst.hh	/^    void setPrevDestInst(DynInstPtr &oldDestInst, int regIdx)$/;"	f	class:OzoneDynInst
setPrevStageQueue	inorder/pipeline_stage.cc	/^PipelineStage::setPrevStageQueue(TimeBuffer<InterStageStruct> *prev_stage_ptr)$/;"	f	class:PipelineStage
setProcessing	inorder/resource.hh	/^    void setProcessing(bool cond = true) { processing = cond; }$/;"	f	class:ResourceRequest
setROB	o3/commit_impl.hh	/^DefaultCommit<Impl>::setROB(ROB *rob_ptr)$/;"	f	class:DefaultCommit
setReg	o3/scoreboard.hh	/^    void setReg(PhysRegIndex reg_idx)$/;"	f	class:Scoreboard
setRegDepEntry	inorder/inorder_dyn_inst.hh	/^    void setRegDepEntry() { status.set(RegDepMapEntry); }$/;"	f	class:InOrderDynInst
setRegOtherThread	checker/cpu.hh	/^    void setRegOtherThread(int misc_reg, MiscReg val, ThreadID tid)$/;"	f	class:CheckerCPU
setRegOtherThread	inorder/cpu.cc	/^InOrderCPU::setRegOtherThread(unsigned reg_idx, const MiscReg &val,$/;"	f	class:InOrderCPU
setRegOtherThread	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::setRegOtherThread(int reg_idx, MiscReg val, ThreadID tid)$/;"	f	class:InOrderDynInst
setRegOtherThread	inorder/thread_context.cc	/^InOrderThreadContext::setRegOtherThread(int misc_reg, const MiscReg &val,$/;"	f	class:InOrderThreadContext
setRegOtherThread	minor/exec_context.hh	/^    setRegOtherThread(int idx, const TheISA::MiscReg &val,$/;"	f	class:Minor::ExecContext
setRegOtherThread	o3/dyn_inst.hh	/^    void setRegOtherThread(int misc_reg, MiscReg val, ThreadID tid)$/;"	f	class:BaseO3DynInst
setRegOtherThread	simple/base.hh	/^    void setRegOtherThread(int regIdx, MiscReg val,$/;"	f	class:BaseSimpleCPU
setRegOtherThread	thread_context.hh	/^    setRegOtherThread(int misc_reg, const MiscReg &val, ThreadID tid)$/;"	f	class:ThreadContext
setRegisters	kvm/base.cc	/^BaseKvmCPU::setRegisters(const struct kvm_regs &regs)$/;"	f	class:BaseKvmCPU
setRemoveList	inorder/inorder_dyn_inst.hh	/^    void setRemoveList() { status.set(RemoveList); }$/;"	f	class:InOrderDynInst
setRenameMap	o3/commit_impl.hh	/^DefaultCommit<Impl>::setRenameMap(RenameMap rm_ptr[])$/;"	f	class:DefaultCommit
setRenameMap	o3/rename_impl.hh	/^DefaultRename<Impl>::setRenameMap(RenameMap rm_ptr[])$/;"	f	class:DefaultRename
setRenameQueue	o3/commit_impl.hh	/^DefaultCommit<Impl>::setRenameQueue(TimeBuffer<RenameStruct> *rq_ptr)$/;"	f	class:DefaultCommit
setRenameQueue	o3/iew_impl.hh	/^DefaultIEW<Impl>::setRenameQueue(TimeBuffer<RenameStruct> *rq_ptr)$/;"	f	class:DefaultIEW
setRenameQueue	o3/rename_impl.hh	/^DefaultRename<Impl>::setRenameQueue(TimeBuffer<RenameStruct> *rq_ptr)$/;"	f	class:DefaultRename
setReq	o3/fetch.hh	/^        void setReq(RequestPtr _req)$/;"	f	class:DefaultFetch::FinishTranslationEvent
setRequest	inorder/resource.cc	/^ResourceRequest::setRequest(DynInstPtr _inst, int stage_num,$/;"	f	class:ResourceRequest
setRequest	inorder/resources/cache_unit.hh	/^    void setRequest(DynInstPtr _inst, int stage_num, int res_idx, int slot_num,$/;"	f	class:CacheRequest
setRequest	inorder/resources/tlb_unit.hh	/^    void setRequest(DynInstPtr inst, int stage_num, int res_idx, int slot_num,$/;"	f	class:TLBUnitRequest
setRequest	inorder/resources/use_def.hh	/^        void setRequest(DynInstPtr _inst, int stage_num, int res_idx,$/;"	f	class:UseDefUnit::UseDefRequest
setResStall	inorder/pipeline_stage.cc	/^PipelineStage::setResStall(ResReqPtr res_req, ThreadID tid)$/;"	f	class:PipelineStage
setResult	base_dyn_inst.hh	/^    void setResult(T t)$/;"	f	class:BaseDynInst
setResult	checker/cpu.hh	/^    void setResult(T t)$/;"	f	class:CheckerCPU
setResultReady	base_dyn_inst.hh	/^    void setResultReady() { status.set(ResultReady); }$/;"	f	class:BaseDynInst
setResultReady	inorder/inorder_dyn_inst.hh	/^    void setResultReady() { status.set(ResultReady); }$/;"	f	class:InOrderDynInst
setScoreboard	o3/iew_impl.hh	/^DefaultIEW<Impl>::setScoreboard(Scoreboard *sb_ptr)$/;"	f	class:DefaultIEW
setScoreboard	o3/rename_impl.hh	/^DefaultRename<Impl>::setScoreboard(Scoreboard *_scoreboard)$/;"	f	class:DefaultRename
setSeqNum	inorder/inorder_dyn_inst.hh	/^    void setSeqNum(InstSeqNum seq_num) { seqNum = seq_num; }$/;"	f	class:InOrderDynInst
setSerializeAfter	base_dyn_inst.hh	/^    void setSerializeAfter() { status.set(SerializeAfter); }$/;"	f	class:BaseDynInst
setSerializeAfter	inorder/inorder_dyn_inst.hh	/^    void setSerializeAfter() { status.set(SerializeAfter); }$/;"	f	class:InOrderDynInst
setSerializeBefore	base_dyn_inst.hh	/^    void setSerializeBefore() { status.set(SerializeBefore); }$/;"	f	class:BaseDynInst
setSerializeBefore	inorder/inorder_dyn_inst.hh	/^    void setSerializeBefore() { status.set(SerializeBefore); }$/;"	f	class:InOrderDynInst
setSerializeHandled	base_dyn_inst.hh	/^    void setSerializeHandled() { status.set(SerializeHandled); }$/;"	f	class:BaseDynInst
setSerializeHandled	inorder/inorder_dyn_inst.hh	/^    void setSerializeHandled() { status.set(SerializeHandled); }$/;"	f	class:InOrderDynInst
setSignalMask	kvm/base.cc	/^BaseKvmCPU::setSignalMask(const sigset_t *mask)$/;"	f	class:BaseKvmCPU
setSkipped	minor/lsq.hh	/^        void setSkipped() { skipped = true; }$/;"	f	class:Minor::LSQ::LSQRequest
setSlot	inorder/resource.hh	/^    void setSlot(int slot) { slotIdx = slot; }$/;"	f	class:ResourceEvent
setSpecialRegisters	kvm/base.cc	/^BaseKvmCPU::setSpecialRegisters(const struct kvm_sregs &regs)$/;"	f	class:BaseKvmCPU
setSquashInfo	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::setSquashInfo(unsigned stage_num)$/;"	f	class:InOrderDynInst
setSquashInfoFromXC	ozone/inorder_back_end_impl.hh	/^InorderBackEnd<Impl>::setSquashInfoFromXC()$/;"	f	class:InorderBackEnd
setSquashed	base_dyn_inst.hh	/^    void setSquashed() { status.set(Squashed); }$/;"	f	class:BaseDynInst
setSquashed	inorder/inorder_dyn_inst.hh	/^    void setSquashed() { status.set(Squashed); }$/;"	f	class:InOrderDynInst
setSquashed	inorder/resource.hh	/^    void setSquashed() { squashed = true; }$/;"	f	class:ResourceRequest
setSquashedInIQ	base_dyn_inst.hh	/^    void setSquashedInIQ() { status.set(SquashedInIQ); status.set(Squashed);}$/;"	f	class:BaseDynInst
setSquashedInLSQ	base_dyn_inst.hh	/^    void setSquashedInLSQ() { status.set(SquashedInLSQ);}$/;"	f	class:BaseDynInst
setSquashedInROB	base_dyn_inst.hh	/^    void setSquashedInROB() { status.set(SquashedInROB); }$/;"	f	class:BaseDynInst
setSrcInst	ozone/dyn_inst.hh	/^    void setSrcInst(DynInstPtr &newSrcInst, int regIdx)$/;"	f	class:OzoneDynInst
setSrcRegIdx	inorder/inorder_dyn_inst.hh	/^    void setSrcRegIdx(int idx, PhysRegIndex src_idx)$/;"	f	class:InOrderDynInst
setStCondFailures	base_dyn_inst.hh	/^    void setStCondFailures(unsigned int sc_failures)$/;"	f	class:BaseDynInst
setStCondFailures	checker/cpu.hh	/^    void setStCondFailures(unsigned int sc_failures)$/;"	f	class:CheckerCPU
setStCondFailures	checker/thread_context.hh	/^    void setStCondFailures(unsigned sc_failures)$/;"	f	class:CheckerThreadContext
setStCondFailures	inorder/inorder_dyn_inst.hh	/^    void setStCondFailures(unsigned int sc_failures)$/;"	f	class:InOrderDynInst
setStCondFailures	inorder/thread_context.hh	/^    void setStCondFailures(unsigned sc_failures)$/;"	f	class:InOrderThreadContext
setStCondFailures	minor/exec_context.hh	/^    void setStCondFailures(unsigned int st_cond_failures) {}$/;"	f	class:Minor::ExecContext
setStCondFailures	o3/thread_context.hh	/^    virtual void setStCondFailures(unsigned sc_failures)$/;"	f	class:O3ThreadContext
setStCondFailures	ozone/cpu.hh	/^        void setStCondFailures(unsigned sc_failures)$/;"	f	class:OzoneCPU::OzoneTC
setStCondFailures	simple/base.hh	/^    void setStCondFailures(unsigned int sc_failures) {$/;"	f	class:BaseSimpleCPU
setStCondFailures	simple_thread.hh	/^    void setStCondFailures(unsigned sc_failures)$/;"	f	class:SimpleThread
setStCondFailures	thread_context.hh	/^    void setStCondFailures(unsigned sc_failures)$/;"	f	class:ProxyThreadContext
setStageCycle	inorder/inorder_trace.hh	/^    setStageCycle(int num_stage, Tick cur_cycle)$/;"	f	class:Trace::InOrderTraceRecord
setState	minor/lsq.cc	/^LSQ::LSQRequest::setState(LSQRequestState new_state)$/;"	f	class:Minor::LSQ::LSQRequest
setStaticInst	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::setStaticInst(StaticInstPtr &static_inst)$/;"	f	class:InOrderDynInst
setStaticInst	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::setStaticInst(StaticInstPtr si)$/;"	f	class:InOrderDynInst
setStaticInst	inorder/inorder_trace.hh	/^    setStaticInst(const StaticInstPtr &_staticInst)$/;"	f	class:Trace::InOrderTraceRecord
setStatus	checker/thread_context.hh	/^    void setStatus(Status new_status)$/;"	f	class:CheckerThreadContext
setStatus	inorder/thread_context.hh	/^    void setStatus(Status new_status)$/;"	f	class:InOrderThreadContext
setStatus	o3/thread_context.hh	/^    virtual void setStatus(Status new_status)$/;"	f	class:O3ThreadContext
setStatus	ozone/cpu.hh	/^    void setStatus(Status new_status) { _status = new_status; }$/;"	f	class:OzoneCPU
setStatus	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::setStatus(Status new_status)$/;"	f	class:OzoneCPU::OzoneTC
setStatus	simple_thread.hh	/^    void setStatus(Status newStatus) { _status = newStatus; }$/;"	f	class:SimpleThread
setStatus	thread_context.hh	/^    void setStatus(Status new_status) { actualTC->setStatus(new_status); }$/;"	f	class:ProxyThreadContext
setStatus	thread_state.hh	/^    void setStatus(Status new_status) { _status = new_status; }$/;"	f	struct:ThreadState
setSystem	checker/cpu.cc	/^CheckerCPU::setSystem(System *system)$/;"	f	class:CheckerCPU
setTC	ozone/back_end.hh	/^    void setTC(ThreadContext *tc_ptr)$/;"	f	class:BackEnd
setTC	ozone/front_end_impl.hh	/^FrontEnd<Impl>::setTC(ThreadContext *tc_ptr)$/;"	f	class:FrontEnd
setTC	ozone/lw_back_end.hh	/^    void setTC(ThreadContext *tc_ptr)$/;"	f	class:LWBackEnd
setTSSAddress	kvm/vm.cc	/^KvmVM::setTSSAddress(Addr tss_address)$/;"	f	class:KvmVM
setTail	minor/buffers.hh	/^    setTail(ElemType &new_element)$/;"	f	class:Minor::InputBuffer
setThreadId	checker/thread_context.hh	/^    void setThreadId(int id)$/;"	f	class:CheckerThreadContext
setThreadId	inorder/thread_context.hh	/^    void setThreadId(int id) { return thread->setThreadId(id); }$/;"	f	class:InOrderThreadContext
setThreadId	o3/thread_context.hh	/^    virtual void setThreadId(int id) { return thread->setThreadId(id); }$/;"	f	class:O3ThreadContext
setThreadId	thread_context.hh	/^    void setThreadId(int id) { actualTC->setThreadId(id); }$/;"	f	class:ProxyThreadContext
setThreadId	thread_state.hh	/^    void setThreadId(ThreadID id) { _threadId = id; }$/;"	f	struct:ThreadState
setThreadState	base_dyn_inst.hh	/^    void setThreadState(ImplState *state) { thread = state; }$/;"	f	class:BaseDynInst
setThreadState	inorder/inorder_dyn_inst.hh	/^    void setThreadState(InOrderThreadState *state) { thread = state; }$/;"	f	class:InOrderDynInst
setThreadState	ozone/back_end.hh	/^    void setThreadState(Thread *thread_ptr)$/;"	f	class:BackEnd
setThreadState	ozone/front_end.hh	/^    void setThreadState(OzoneThreadState<Impl> *thread_ptr)$/;"	f	class:FrontEnd
setThreadState	ozone/inorder_back_end_impl.hh	/^InorderBackEnd<Impl>::setThreadState(OzoneThreadState<Impl> *thread_ptr)$/;"	f	class:InorderBackEnd
setThreadState	ozone/lw_back_end.hh	/^    void setThreadState(Thread *thread_ptr)$/;"	f	class:LWBackEnd
setThreads	o3/commit_impl.hh	/^DefaultCommit<Impl>::setThreads(std::vector<Thread *> &threads)$/;"	f	class:DefaultCommit
setTid	base_dyn_inst.hh	/^    void setTid(ThreadID tid) { threadNumber = tid; }$/;"	f	class:BaseDynInst
setTid	inorder/inorder_dyn_inst.hh	/^    void setTid(ThreadID tid) { threadNumber = tid; }$/;"	f	class:InOrderDynInst
setTid	inorder/resource.hh	/^    void setTid(ThreadID _tid) { tid = _tid; }$/;"	f	class:ResourceRequest
setTimeBuffer	inorder/pipeline_stage.cc	/^PipelineStage::setTimeBuffer(TimeBuffer<TimeStruct> *tb_ptr)$/;"	f	class:PipelineStage
setTimeBuffer	o3/commit_impl.hh	/^DefaultCommit<Impl>::setTimeBuffer(TimeBuffer<TimeStruct> *tb_ptr)$/;"	f	class:DefaultCommit
setTimeBuffer	o3/decode_impl.hh	/^DefaultDecode<Impl>::setTimeBuffer(TimeBuffer<TimeStruct> *tb_ptr)$/;"	f	class:DefaultDecode
setTimeBuffer	o3/fetch_impl.hh	/^DefaultFetch<Impl>::setTimeBuffer(TimeBuffer<TimeStruct> *time_buffer)$/;"	f	class:DefaultFetch
setTimeBuffer	o3/iew_impl.hh	/^DefaultIEW<Impl>::setTimeBuffer(TimeBuffer<TimeStruct> *tb_ptr)$/;"	f	class:DefaultIEW
setTimeBuffer	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::setTimeBuffer(TimeBuffer<TimeStruct> *tb_ptr)$/;"	f	class:InstructionQueue
setTimeBuffer	o3/rename_impl.hh	/^DefaultRename<Impl>::setTimeBuffer(TimeBuffer<TimeStruct> *tb_ptr)$/;"	f	class:DefaultRename
setTraceTimeOnCommit	minor/execute.hh	/^    bool setTraceTimeOnCommit;$/;"	m	class:Minor::Execute
setTraceTimeOnIssue	minor/execute.hh	/^    bool setTraceTimeOnIssue;$/;"	m	class:Minor::Execute
setUserMemoryRegion	kvm/vm.cc	/^KvmVM::setUserMemoryRegion(uint32_t slot,$/;"	f	class:KvmVM
setVCpuEvents	kvm/x86_cpu.cc	/^X86KvmCPU::setVCpuEvents(const struct kvm_vcpu_events &events)$/;"	f	class:X86KvmCPU
setVpn	inorder/inorder_dyn_inst.hh	/^    void setVpn(int id) { virtProcNumber = id; }$/;"	f	class:InOrderDynInst
setXC	ozone/inorder_back_end_impl.hh	/^InorderBackEnd<Impl>::setXC(ExecContext *xc_ptr)$/;"	f	class:InorderBackEnd
setXCRs	kvm/x86_cpu.cc	/^X86KvmCPU::setXCRs(const struct kvm_xcrs &regs)$/;"	f	class:X86KvmCPU
setXSave	kvm/x86_cpu.cc	/^X86KvmCPU::setXSave(const struct kvm_xsave &xsave)$/;"	f	class:X86KvmCPU
set_params	TimingExpr.py	/^    def set_params(self, cond, trueExpr, falseExpr):$/;"	m	class:TimingExprIf
set_params	TimingExpr.py	/^    def set_params(self, defns, expr):$/;"	m	class:TimingExprLet
set_params	TimingExpr.py	/^    def set_params(self, index):$/;"	m	class:TimingExprRef
set_params	TimingExpr.py	/^    def set_params(self, index):$/;"	m	class:TimingExprSrcReg
set_params	TimingExpr.py	/^    def set_params(self, op, arg):$/;"	m	class:TimingExprUn
set_params	TimingExpr.py	/^    def set_params(self, op, left, right):$/;"	m	class:TimingExprBin
set_params	TimingExpr.py	/^    def set_params(self, reg):$/;"	m	class:TimingExprReadIntReg
set_params	TimingExpr.py	/^    def set_params(self, value):$/;"	m	class:TimingExprLiteral
setupCounters	kvm/base.cc	/^BaseKvmCPU::setupCounters()$/;"	f	class:BaseKvmCPU
setupFetchRequest	simple/base.cc	/^BaseSimpleCPU::setupFetchRequest(Request *req)$/;"	f	class:BaseSimpleCPU
setupInstCounter	kvm/base.cc	/^BaseKvmCPU::setupInstCounter(uint64_t period)$/;"	f	class:BaseKvmCPU
setupInstStop	kvm/base.cc	/^BaseKvmCPU::setupInstStop()$/;"	f	class:BaseKvmCPU
setupMemRequest	inorder/resources/cache_unit.cc	/^CacheUnit::setupMemRequest(DynInstPtr inst, CacheReqPtr cache_req,$/;"	f	class:CacheUnit
setupMemRequest	inorder/resources/fetch_unit.cc	/^FetchUnit::setupMemRequest(DynInstPtr inst, CacheReqPtr cache_req,$/;"	f	class:FetchUnit
setupSharedData	legiontrace.cc	/^setupSharedData()$/;"	f	namespace:Trace
setupSignalHandler	kvm/base.cc	/^BaseKvmCPU::setupSignalHandler()$/;"	f	class:BaseKvmCPU
setupSquash	inorder/pipeline_stage.cc	/^PipelineStage::setupSquash(DynInstPtr inst, ThreadID tid)$/;"	f	class:PipelineStage
setupSquash	inorder/resource.cc	/^Resource::setupSquash(DynInstPtr inst, int stage_num, ThreadID tid)$/;"	f	class:Resource
shared_data	legiontrace.cc	/^SharedData *shared_data = NULL;$/;"	m	namespace:Trace	file:
sigev_notify_thread_id	kvm/timer.cc	58;"	d	file:
signalDrainDone	minor/cpu.cc	/^MinorCPU::signalDrainDone()$/;"	f	class:MinorCPU
signalSwitched	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::signalSwitched()$/;"	f	class:OzoneCPU
signo	kvm/timer.hh	/^    int signo;$/;"	m	class:BaseKvmTimer
simCycles	testers/networktest/networktest.hh	/^    Tick simCycles;$/;"	m	class:NetworkTest
simPalCheck	checker/cpu.hh	/^    bool simPalCheck(int palFunc) { return thread->simPalCheck(palFunc); }$/;"	f	class:CheckerCPU
simPalCheck	inorder/cpu.cc	/^InOrderCPU::simPalCheck(int palFunc, ThreadID tid)$/;"	f	class:InOrderCPU
simPalCheck	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::simPalCheck(int palFunc)$/;"	f	class:InOrderDynInst
simPalCheck	minor/exec_context.hh	/^    simPalCheck(int palFunc)$/;"	f	class:Minor::ExecContext
simPalCheck	o3/cpu.cc	/^FullO3CPU<Impl>::simPalCheck(int palFunc, ThreadID tid)$/;"	f	class:FullO3CPU
simPalCheck	o3/dyn_inst_impl.hh	/^BaseO3DynInst<Impl>::simPalCheck(int palFunc)$/;"	f	class:BaseO3DynInst
simPalCheck	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::simPalCheck(int palFunc)$/;"	f	class:OzoneCPU
simPalCheck	ozone/dyn_inst_impl.hh	/^OzoneDynInst<Impl>::simPalCheck(int palFunc)$/;"	f	class:OzoneDynInst
simPalCheck	simple/base.hh	/^    bool simPalCheck(int palFunc) { return thread->simPalCheck(palFunc); }$/;"	f	class:BaseSimpleCPU
simPalCheck	simple_thread.cc	/^SimpleThread::simPalCheck(int palFunc)$/;"	f	class:SimpleThread
sim_cycles	testers/networktest/NetworkTest.py	/^    sim_cycles = Param.Int(1000, "Number of simulation cycles")$/;"	v	class:NetworkTest
simpointStream	simple/probes/simpoint.hh	/^    std::ostream *simpointStream;$/;"	m	class:SimPoint
simpoint_start_insts	BaseCPU.py	/^    simpoint_start_insts = VectorParam.Counter([],$/;"	v
simulate_data_stalls	simple/AtomicSimpleCPU.py	/^    simulate_data_stalls = Param.Bool(False, "Simulate dcache stall cycles")$/;"	v	class:AtomicSimpleCPU
simulate_data_stalls	simple/atomic.hh	/^    const bool simulate_data_stalls;$/;"	m	class:AtomicSimpleCPU
simulate_inst_stalls	simple/AtomicSimpleCPU.py	/^    simulate_inst_stalls = Param.Bool(False, "Simulate icache stall cycles")$/;"	v	class:AtomicSimpleCPU
simulate_inst_stalls	simple/atomic.hh	/^    const bool simulate_inst_stalls;$/;"	m	class:AtomicSimpleCPU
size	inorder/resource_sked.cc	/^ResourceSked::size()$/;"	f	class:ResourceSked
size	o3/comm.hh	/^    int size;$/;"	m	struct:DefaultDecodeDefaultRename
size	o3/comm.hh	/^    int size;$/;"	m	struct:DefaultFetchDefaultDecode
size	o3/comm.hh	/^    int size;$/;"	m	struct:DefaultIEWDefaultCommit
size	o3/comm.hh	/^    int size;$/;"	m	struct:DefaultRenameDefaultIEW
size	o3/comm.hh	/^    int size;$/;"	m	struct:IssueStruct
size	o3/fu_pool.hh	/^        int size;$/;"	m	class:FUPool::FUIdxQueue
size	o3/fu_pool.hh	/^    int size() { return numFU; }$/;"	f	class:FUPool
size	o3/lsq_unit.hh	/^        uint8_t size;$/;"	m	struct:LSQUnit::SQEntry
size	ozone/back_end.hh	/^        int size;$/;"	m	class:BackEnd::InstQueue
size	ozone/back_end.hh	/^        int size;$/;"	m	struct:BackEnd::SizeStruct
size	ozone/lsq_unit.hh	/^        int size;$/;"	m	struct:OzoneLSQ::SQEntry
size	ozone/lw_back_end.hh	/^        int size;$/;"	m	struct:LWBackEnd::SizeStruct
size	ozone/lw_lsq.hh	/^        int size;$/;"	m	struct:OzoneLWLSQ::SQEntry
size	testers/memtest/memtest.hh	/^    unsigned size;              \/\/ size of testing memory region$/;"	m	class:MemTest
size	testers/networktest/networktest.hh	/^    unsigned size;$/;"	m	class:NetworkTest
size	timebuf.hh	/^    unsigned size;$/;"	m	class:TimeBuffer
skedCache	inorder/cpu.cc	/^m5::hash_map<InOrderCPU::SkedID, ThePipeline::RSkedPtr> InOrderCPU::skedCache;$/;"	m	class:InOrderCPU	file:
skedCache	inorder/cpu.hh	/^    static m5::hash_map<SkedID, ThePipeline::RSkedPtr> skedCache;$/;"	m	class:InOrderCPU
skidBuffer	inorder/pipeline_stage.hh	/^    std::list<DynInstPtr> skidBuffer[ThePipeline::MaxThreads];$/;"	m	class:PipelineStage
skidBuffer	o3/decode.hh	/^    std::queue<DynInstPtr> skidBuffer[Impl::MaxThreads];$/;"	m	class:DefaultDecode
skidBuffer	o3/iew.hh	/^    std::queue<DynInstPtr> skidBuffer[Impl::MaxThreads];$/;"	m	class:DefaultIEW
skidBuffer	o3/rename.hh	/^    InstQueue skidBuffer[Impl::MaxThreads];$/;"	m	class:DefaultRename
skidBufferMax	o3/decode.hh	/^    unsigned skidBufferMax;$/;"	m	class:DefaultDecode
skidBufferMax	o3/iew.hh	/^    unsigned skidBufferMax;$/;"	m	class:DefaultIEW
skidBufferMax	o3/rename.hh	/^    unsigned skidBufferMax;$/;"	m	class:DefaultRename
skidCount	o3/iew_impl.hh	/^DefaultIEW<Impl>::skidCount()$/;"	f	class:DefaultIEW
skidInsert	o3/decode_impl.hh	/^DefaultDecode<Impl>::skidInsert(ThreadID tid)$/;"	f	class:DefaultDecode
skidInsert	o3/iew_impl.hh	/^DefaultIEW<Impl>::skidInsert(ThreadID tid)$/;"	f	class:DefaultIEW
skidInsert	o3/rename_impl.hh	/^DefaultRename<Impl>::skidInsert(ThreadID tid)$/;"	f	class:DefaultRename
skidSize	inorder/pipeline_stage.cc	/^PipelineStage::skidSize()$/;"	f	class:PipelineStage
skidsEmpty	inorder/pipeline_stage.cc	/^PipelineStage::skidsEmpty()$/;"	f	class:PipelineStage
skidsEmpty	o3/decode_impl.hh	/^DefaultDecode<Impl>::skidsEmpty()$/;"	f	class:DefaultDecode
skidsEmpty	o3/iew_impl.hh	/^DefaultIEW<Impl>::skidsEmpty()$/;"	f	class:DefaultIEW
skidsEmpty	o3/rename_impl.hh	/^DefaultRename<Impl>::skidsEmpty()$/;"	f	class:DefaultRename
skipped	minor/lsq.hh	/^        bool skipped;$/;"	m	class:Minor::LSQ::LSQRequest
skippedMemAccess	minor/lsq.hh	/^        bool skippedMemAccess() { return skipped; }$/;"	f	class:Minor::LSQ::LSQRequest
slotIdx	inorder/resource.hh	/^    int slotIdx;$/;"	m	class:ResourceEvent
slotNum	inorder/resource.hh	/^    int slotNum;$/;"	m	class:ResourceRequest
slots	minor/lsq.hh	/^        std::deque<LSQRequestPtr> slots;$/;"	m	class:Minor::LSQ::StoreBuffer
slotsAvail	inorder/resource.cc	/^Resource::slotsAvail()$/;"	f	class:Resource
slotsAvail	inorder/resource_pool.9stage.cc	/^ResourcePool::slotsAvail(int res_idx)$/;"	f	class:ResourcePool
slotsAvail	inorder/resource_pool.cc	/^ResourcePool::slotsAvail(int res_idx)$/;"	f	class:ResourcePool
slotsInUse	inorder/resource.cc	/^Resource::slotsInUse()$/;"	f	class:Resource
slotsInUse	inorder/resource_pool.9stage.cc	/^ResourcePool::slotsInUse(int res_idx)$/;"	f	class:ResourcePool
slotsInUse	inorder/resource_pool.cc	/^ResourcePool::slotsInUse(int res_idx)$/;"	f	class:ResourcePool
smtCommitPolicy	o3/O3CPU.py	/^    smtCommitPolicy = Param.String('RoundRobin', "SMT Commit Policy")$/;"	v	class:DerivO3CPU
smtCommitPolicy	ozone/simple_params.hh	/^    std::string   smtCommitPolicy;$/;"	m	class:SimpleParams
smtCommittedInsts	inorder/cpu.hh	/^    Stats::Vector smtCommittedInsts;$/;"	m	class:InOrderCPU
smtCpi	inorder/cpu.hh	/^    Stats::Formula smtCpi;$/;"	m	class:InOrderCPU
smtCycles	inorder/cpu.hh	/^    Stats::Scalar smtCycles;$/;"	m	class:InOrderCPU
smtFetchPolicy	o3/O3CPU.py	/^    smtFetchPolicy = Param.String('SingleThread', "SMT Fetch policy")$/;"	v	class:DerivO3CPU
smtFetchPolicy	ozone/simple_params.hh	/^    std::string   smtFetchPolicy;$/;"	m	class:SimpleParams
smtIQPolicy	o3/O3CPU.py	/^    smtIQPolicy    = Param.String('Partitioned', "SMT IQ Sharing Policy")$/;"	v	class:DerivO3CPU
smtIQPolicy	ozone/simple_params.hh	/^    std::string   smtIQPolicy;$/;"	m	class:SimpleParams
smtIQThreshold	o3/O3CPU.py	/^    smtIQThreshold = Param.Int(100, "SMT IQ Threshold Sharing Parameter")$/;"	v	class:DerivO3CPU
smtIQThreshold	ozone/simple_params.hh	/^    unsigned smtIQThreshold;$/;"	m	class:SimpleParams
smtIpc	inorder/cpu.hh	/^    Stats::Formula smtIpc;$/;"	m	class:InOrderCPU
smtLSQPolicy	o3/O3CPU.py	/^    smtLSQPolicy    = Param.String('Partitioned', "SMT LSQ Sharing Policy")$/;"	v	class:DerivO3CPU
smtLSQPolicy	ozone/simple_params.hh	/^    std::string   smtLSQPolicy;$/;"	m	class:SimpleParams
smtLSQThreshold	o3/O3CPU.py	/^    smtLSQThreshold = Param.Int(100, "SMT LSQ Threshold Sharing Parameter")$/;"	v	class:DerivO3CPU
smtLSQThreshold	ozone/simple_params.hh	/^    unsigned smtLSQThreshold;$/;"	m	class:SimpleParams
smtNumFetchingThreads	o3/O3CPU.py	/^    smtNumFetchingThreads = Param.Unsigned(1, "SMT Number of Fetching Threads")$/;"	v	class:DerivO3CPU
smtNumFetchingThreads	ozone/simple_params.hh	/^    unsigned smtNumFetchingThreads;$/;"	m	class:SimpleParams
smtROBPolicy	o3/O3CPU.py	/^    smtROBPolicy   = Param.String('Partitioned', "SMT ROB Sharing Policy")$/;"	v	class:DerivO3CPU
smtROBPolicy	ozone/simple_params.hh	/^    std::string   smtROBPolicy;$/;"	m	class:SimpleParams
smtROBThreshold	o3/O3CPU.py	/^    smtROBThreshold = Param.Int(100, "SMT ROB Threshold Sharing Parameter")$/;"	v	class:DerivO3CPU
smtROBThreshold	ozone/simple_params.hh	/^    unsigned smtROBThreshold;$/;"	m	class:SimpleParams
snList	o3/cpu.hh	/^    std::set<InstSeqNum> snList;$/;"	m	class:FullO3CPU
snList	ozone/cpu.hh	/^    std::set<InstSeqNum> snList;$/;"	m	class:OzoneCPU
socketId	base.hh	/^    uint32_t socketId() const { return _socketId; }$/;"	f	class:BaseCPU
socketId	base_dyn_inst.hh	/^    uint32_t socketId() const { return cpu->socketId(); }$/;"	f	class:BaseDynInst
socketId	checker/thread_context.hh	/^    uint32_t socketId() const { return actualTC->socketId(); }$/;"	f	class:CheckerThreadContext
socketId	inorder/thread_context.hh	/^    uint32_t socketId() const { return cpu->socketId(); }$/;"	f	class:InOrderThreadContext
socketId	o3/thread_context.hh	/^    virtual uint32_t socketId() const { return cpu->socketId(); }$/;"	f	class:O3ThreadContext
socketId	thread_context.hh	/^    uint32_t socketId() const { return actualTC->socketId(); }$/;"	f	class:ProxyThreadContext
socketId	thread_state.hh	/^    uint32_t socketId() const { return baseCpu->socketId(); }$/;"	f	struct:ThreadState
socket_id	BaseCPU.py	/^    socket_id = Param.Unsigned(0, "Physical Socket identifier")$/;"	v
sortInsts	inorder/first_stage.hh	/^    void sortInsts() {}$/;"	f	class:FirstStage
sortInsts	inorder/pipeline_stage.cc	/^PipelineStage::sortInsts()$/;"	f	class:PipelineStage
sortInsts	o3/decode_impl.hh	/^DefaultDecode<Impl>::sortInsts()$/;"	f	class:DefaultDecode
sortInsts	o3/iew_impl.hh	/^DefaultIEW<Impl>::sortInsts()$/;"	f	class:DefaultIEW
sortInsts	o3/rename_impl.hh	/^DefaultRename<Impl>::sortInsts()$/;"	f	class:DefaultRename
split2ndAccess	inorder/inorder_dyn_inst.hh	/^    bool split2ndAccess;$/;"	m	class:InOrderDynInst
split2ndAccess	inorder/resources/cache_unit.hh	/^    bool split2ndAccess;$/;"	m	class:CacheRequest
split2ndAddr	inorder/inorder_dyn_inst.hh	/^    Addr split2ndAddr;$/;"	m	class:InOrderDynInst
split2ndData	inorder/inorder_dyn_inst.hh	/^    uint8_t split2ndData;$/;"	m	class:InOrderDynInst
split2ndDataPtr	inorder/inorder_dyn_inst.hh	/^    PacketDataPtr split2ndDataPtr;$/;"	m	class:InOrderDynInst
split2ndFlags	inorder/inorder_dyn_inst.hh	/^    unsigned split2ndFlags;$/;"	m	class:InOrderDynInst
split2ndSize	inorder/inorder_dyn_inst.hh	/^    int split2ndSize;$/;"	m	class:InOrderDynInst
split2ndStoreDataPtr	inorder/inorder_dyn_inst.hh	/^    uint64_t *split2ndStoreDataPtr;    $/;"	m	class:InOrderDynInst
splitAccess	inorder/resources/cache_unit.hh	/^    bool splitAccess;$/;"	m	class:CacheRequest
splitAccessNum	inorder/resources/cache_unit.hh	/^    int splitAccessNum;$/;"	m	class:CacheRequest
splitFinishCnt	inorder/inorder_dyn_inst.hh	/^    int splitFinishCnt;$/;"	m	class:InOrderDynInst
splitInst	inorder/inorder_dyn_inst.hh	/^    bool splitInst;$/;"	m	class:InOrderDynInst
splitInstSked	inorder/inorder_dyn_inst.hh	/^    bool splitInstSked;$/;"	m	class:InOrderDynInst
splitMemData	inorder/inorder_dyn_inst.hh	/^    PacketDataPtr splitMemData;$/;"	m	class:InOrderDynInst
splitMemReq	inorder/inorder_dyn_inst.hh	/^    RequestPtr splitMemReq;    $/;"	m	class:InOrderDynInst
splitRequest	base_dyn_inst.hh	/^BaseDynInst<Impl>::splitRequest(RequestPtr req, RequestPtr &sreqLow,$/;"	f	class:BaseDynInst
sqEmpty	o3/lsq_impl.hh	/^LSQ<Impl>::sqEmpty() const$/;"	f	class:LSQ
sqEmpty	o3/lsq_unit.hh	/^    bool sqEmpty() const { return stores == 0; }$/;"	f	class:LSQUnit
sqEntries	o3/rename.hh	/^        unsigned sqEntries;$/;"	m	struct:DefaultRename::FreeEntries
sqFull	o3/lsq_impl.hh	/^LSQ<Impl>::sqFull()$/;"	f	class:LSQ
sqFull	o3/lsq_impl.hh	/^LSQ<Impl>::sqFull(ThreadID tid)$/;"	f	class:LSQ
sqFull	o3/lsq_unit.hh	/^    bool sqFull() { return stores >= (SQEntries - 1); }$/;"	f	class:LSQUnit
sqFull	ozone/lsq_unit.hh	/^    bool sqFull() { return stores >= (SQEntries - 1); }$/;"	f	class:OzoneLSQ
sqFull	ozone/lw_lsq.hh	/^    bool sqFull() { return (stores + storesInFlight) >= (SQEntries - 1); }$/;"	f	class:OzoneLWLSQ
sqIdx	base_dyn_inst.hh	/^    int16_t sqIdx;$/;"	m	class:BaseDynInst
sqIdx	inorder/inorder_dyn_inst.hh	/^    int16_t sqIdx;$/;"	m	class:InOrderDynInst
squash	inorder/comm.hh	/^        bool squash;$/;"	m	struct:TimeStruct::StageComm
squash	inorder/first_stage.cc	/^FirstStage::squash(InstSeqNum squash_seq_num, ThreadID tid)$/;"	f	class:FirstStage
squash	inorder/pipeline_stage.cc	/^PipelineStage::squash(InstSeqNum squash_seq_num, ThreadID tid)$/;"	f	class:PipelineStage
squash	inorder/resource.cc	/^Resource::squash(DynInstPtr inst, int stage_num, InstSeqNum squash_seq_num,$/;"	f	class:Resource
squash	inorder/resource_pool.9stage.cc	/^ResourcePool::squash(DynInstPtr inst, int res_idx, InstSeqNum done_seq_num,$/;"	f	class:ResourcePool
squash	inorder/resource_pool.cc	/^ResourcePool::squash(DynInstPtr inst, int res_idx, InstSeqNum done_seq_num,$/;"	f	class:ResourcePool
squash	inorder/resources/branch_predictor.cc	/^BranchPredictor::squash(DynInstPtr inst, int squash_stage,$/;"	f	class:BranchPredictor
squash	inorder/resources/cache_unit.cc	/^CacheUnit::squash(DynInstPtr inst, int stage_num,$/;"	f	class:CacheUnit
squash	inorder/resources/fetch_seq_unit.cc	/^FetchSeqUnit::squash(DynInstPtr inst, int squash_stage,$/;"	f	class:FetchSeqUnit
squash	inorder/resources/inst_buffer.cc	/^InstBuffer::squash(DynInstPtr inst, int stage_num,$/;"	f	class:InstBuffer
squash	inorder/resources/mult_div_unit.cc	/^MultDivUnit::squash(DynInstPtr inst, int stage_num, InstSeqNum squash_seq_num,$/;"	f	class:MultDivUnit
squash	inorder/resources/tlb_unit.cc	/^TLBUnit::squash(DynInstPtr inst, int stage_num,$/;"	f	class:TLBUnit
squash	o3/comm.hh	/^        bool squash; \/\/ *F, D, R, I$/;"	m	struct:TimeBufStruct::commitComm
squash	o3/comm.hh	/^        bool squash;$/;"	m	struct:TimeBufStruct::decodeComm
squash	o3/comm.hh	/^    bool squash[Impl::MaxThreads];$/;"	m	struct:DefaultIEWDefaultCommit
squash	o3/decode_impl.hh	/^DefaultDecode<Impl>::squash(DynInstPtr &inst, ThreadID tid)$/;"	f	class:DefaultDecode
squash	o3/decode_impl.hh	/^DefaultDecode<Impl>::squash(ThreadID tid)$/;"	f	class:DefaultDecode
squash	o3/fetch_impl.hh	/^DefaultFetch<Impl>::squash(const TheISA::PCState &newPC,$/;"	f	class:DefaultFetch
squash	o3/iew_impl.hh	/^DefaultIEW<Impl>::squash(ThreadID tid)$/;"	f	class:DefaultIEW
squash	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::squash(ThreadID tid)$/;"	f	class:InstructionQueue
squash	o3/lsq.hh	/^    void squash(const InstSeqNum &squashed_num, ThreadID tid)$/;"	f	class:LSQ
squash	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::squash(const InstSeqNum &squashed_num)$/;"	f	class:LSQUnit
squash	o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::squash(const InstSeqNum &squashed_num,$/;"	f	class:MemDepUnit
squash	o3/rename_impl.hh	/^DefaultRename<Impl>::squash(const InstSeqNum &squash_seq_num, ThreadID tid)$/;"	f	class:DefaultRename
squash	o3/rob_impl.hh	/^ROB<Impl>::squash(InstSeqNum squash_num, ThreadID tid)$/;"	f	class:ROB
squash	o3/store_set.cc	/^StoreSet::squash(InstSeqNum squashed_num, ThreadID tid)$/;"	f	class:StoreSet
squash	ozone/back_end_impl.hh	/^BackEnd<Impl>::InstQueue::squash(const InstSeqNum &sn)$/;"	f	class:BackEnd::InstQueue
squash	ozone/back_end_impl.hh	/^BackEnd<Impl>::squash(const InstSeqNum &sn)$/;"	f	class:BackEnd
squash	ozone/front_end_impl.hh	/^FrontEnd<Impl>::squash(const InstSeqNum &squash_num, const Addr &next_PC,$/;"	f	class:FrontEnd
squash	ozone/inorder_back_end_impl.hh	/^InorderBackEnd<Impl>::squash(const InstSeqNum &squash_num, const Addr &next_PC)$/;"	f	class:InorderBackEnd
squash	ozone/inst_queue_impl.hh	/^InstQueue<Impl>::squash(ThreadID tid)$/;"	f	class:InstQueue
squash	ozone/lsq_unit_impl.hh	/^OzoneLSQ<Impl>::squash(const InstSeqNum &squashed_num)$/;"	f	class:OzoneLSQ
squash	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::squash(const InstSeqNum &sn)$/;"	f	class:LWBackEnd
squash	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::squash(const InstSeqNum &squashed_num)$/;"	f	class:OzoneLWLSQ
squash	ozone/null_predictor.hh	/^    void squash(const InstSeqNum &squashed_sn, ThreadID tid) { }$/;"	f	class:NullPredictor
squash	ozone/null_predictor.hh	/^    void squash(const InstSeqNum &squashed_sn, const Addr &corr_target,$/;"	f	class:NullPredictor
squash	pred/2bit_local.hh	/^    void squash(void *bp_history)$/;"	f	class:LocalBP
squash	pred/bi_mode.cc	/^BiModeBP::squash(void *bpHistory)$/;"	f	class:BiModeBP
squash	pred/bpred_unit_impl.hh	/^BPredUnit::squash(const InstSeqNum &squashed_sn, ThreadID tid)$/;"	f	class:BPredUnit
squash	pred/bpred_unit_impl.hh	/^BPredUnit::squash(const InstSeqNum &squashed_sn,$/;"	f	class:BPredUnit
squash	pred/tournament.cc	/^TournamentBP::squash(void *bp_history)$/;"	f	class:TournamentBP
squashAfter	o3/commit_impl.hh	/^DefaultCommit<Impl>::squashAfter(ThreadID tid, DynInstPtr &head_inst)$/;"	f	class:DefaultCommit
squashAfterDelaySlot	inorder/pipeline_stage.hh	/^    bool squashAfterDelaySlot[ThePipeline::MaxThreads];$/;"	m	class:PipelineStage
squashAfterDelaySlot	o3/decode.hh	/^    bool squashAfterDelaySlot[Impl::MaxThreads];$/;"	m	class:DefaultDecode
squashAfterInst	o3/commit.hh	/^    DynInstPtr squashAfterInst[Impl::MaxThreads];$/;"	m	class:DefaultCommit
squashAll	inorder/resource_pool.9stage.cc	/^ResourcePool::squashAll(DynInstPtr inst, int stage_num,$/;"	f	class:ResourcePool
squashAll	inorder/resource_pool.cc	/^ResourcePool::squashAll(DynInstPtr inst, int stage_num,$/;"	f	class:ResourcePool
squashAll	o3/commit_impl.hh	/^DefaultCommit<Impl>::squashAll(ThreadID tid)$/;"	f	class:DefaultCommit
squashCacheRequest	inorder/resources/cache_unit.cc	/^CacheUnit::squashCacheRequest(CacheReqPtr req_ptr)$/;"	f	class:CacheUnit
squashCacheRequest	inorder/resources/fetch_unit.cc	/^FetchUnit::squashCacheRequest(CacheReqPtr req_ptr)$/;"	f	class:FetchUnit
squashCounter	o3/commit.hh	/^    ThreadID squashCounter;$/;"	m	class:DefaultCommit
squashDueToBranch	o3/iew_impl.hh	/^DefaultIEW<Impl>::squashDueToBranch(DynInstPtr &inst, ThreadID tid)$/;"	f	class:DefaultIEW
squashDueToBranch	ozone/back_end_impl.hh	/^BackEnd<Impl>::squashDueToBranch(DynInstPtr &inst)$/;"	f	class:BackEnd
squashDueToBranch	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::squashDueToBranch(DynInstPtr &inst)$/;"	f	class:LWBackEnd
squashDueToMemBlocked	ozone/back_end_impl.hh	/^BackEnd<Impl>::squashDueToMemBlocked(DynInstPtr &inst)$/;"	f	class:BackEnd
squashDueToMemBlocked	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::squashDueToMemBlocked(DynInstPtr &inst)$/;"	f	class:LWBackEnd
squashDueToMemOrder	o3/iew_impl.hh	/^DefaultIEW<Impl>::squashDueToMemOrder(DynInstPtr &inst, ThreadID tid)$/;"	f	class:DefaultIEW
squashDueToMemStall	inorder/cpu.cc	/^InOrderCPU::squashDueToMemStall(int stage_num, InstSeqNum seq_num,$/;"	f	class:InOrderCPU
squashDueToMemStall	inorder/first_stage.cc	/^FirstStage::squashDueToMemStall(InstSeqNum seq_num, ThreadID tid)$/;"	f	class:FirstStage
squashDueToMemStall	inorder/pipeline_stage.cc	/^PipelineStage::squashDueToMemStall(InstSeqNum seq_num, ThreadID tid)$/;"	f	class:PipelineStage
squashDueToMemStall	inorder/resource.cc	/^Resource::squashDueToMemStall(DynInstPtr inst, int stage_num,$/;"	f	class:Resource
squashDueToMemStall	inorder/resource_pool.cc	/^ResourcePool::squashDueToMemStall(DynInstPtr inst, int stage_num,$/;"	f	class:ResourcePool
squashDueToMemStall	inorder/resources/cache_unit.cc	/^CacheUnit::squashDueToMemStall(DynInstPtr inst, int stage_num,$/;"	f	class:CacheUnit
squashDueToMemViolation	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::squashDueToMemViolation(DynInstPtr &inst)$/;"	f	class:LWBackEnd
squashFromDecode	o3/fetch_impl.hh	/^DefaultFetch<Impl>::squashFromDecode(const TheISA::PCState &newPC,$/;"	f	class:DefaultFetch
squashFromMemStall	inorder/cpu.cc	/^InOrderCPU::squashFromMemStall(DynInstPtr inst, ThreadID tid,$/;"	f	class:InOrderCPU
squashFromSquashAfter	o3/commit_impl.hh	/^DefaultCommit<Impl>::squashFromSquashAfter(ThreadID tid)$/;"	f	class:DefaultCommit
squashFromTC	o3/commit_impl.hh	/^DefaultCommit<Impl>::squashFromTC(ThreadID tid)$/;"	f	class:DefaultCommit
squashFromTC	o3/cpu.cc	/^FullO3CPU<Impl>::squashFromTC(ThreadID tid)$/;"	f	class:FullO3CPU
squashFromTC	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::squashFromTC()$/;"	f	class:OzoneCPU
squashFromTC	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::squashFromTC()$/;"	f	class:LWBackEnd
squashFromTrap	o3/commit_impl.hh	/^DefaultCommit<Impl>::squashFromTrap(ThreadID tid)$/;"	f	class:DefaultCommit
squashFromTrap	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::squashFromTrap()$/;"	f	class:LWBackEnd
squashFromXC	ozone/back_end_impl.hh	/^BackEnd<Impl>::squashFromXC()$/;"	f	class:BackEnd
squashFromXC	ozone/inorder_back_end_impl.hh	/^InorderBackEnd<Impl>::squashFromXC()$/;"	f	class:InorderBackEnd
squashInst	inorder/pipeline_stage.hh	/^    DynInstPtr squashInst[ThePipeline::MaxThreads];$/;"	m	class:PipelineStage
squashInst	o3/comm.hh	/^        DynInstPtr squashInst; \/\/ *F$/;"	m	struct:TimeBufStruct::commitComm
squashInst	o3/comm.hh	/^        DynInstPtr squashInst;$/;"	m	struct:TimeBufStruct::decodeComm
squashInst	o3/decode.hh	/^    DynInstPtr squashInst[Impl::MaxThreads];$/;"	m	class:DefaultDecode
squashInstIt	inorder/cpu.cc	/^InOrderCPU::squashInstIt(const ListIt inst_it, ThreadID tid)$/;"	f	class:InOrderCPU
squashInstIt	o3/cpu.cc	/^FullO3CPU<Impl>::squashInstIt(const ListIt &instIt, ThreadID tid)$/;"	f	class:FullO3CPU
squashIt	o3/rob.hh	/^    InstIt squashIt[Impl::MaxThreads];$/;"	m	class:ROB
squashIt	ozone/inst_queue.hh	/^    ListIt squashIt[Impl::MaxThreads];$/;"	m	class:InstQueue
squashLatency	ozone/back_end.hh	/^    int squashLatency;$/;"	m	class:BackEnd
squashLatency	ozone/inorder_back_end.hh	/^    int squashLatency;$/;"	m	class:InorderBackEnd
squashLatency	ozone/lw_back_end.hh	/^    int squashLatency;$/;"	m	class:LWBackEnd
squashNextPC	ozone/back_end.hh	/^    Addr squashNextPC;$/;"	m	class:BackEnd
squashNextPC	ozone/inorder_back_end.hh	/^    Addr squashNextPC;$/;"	m	class:InorderBackEnd
squashNextPC	ozone/lw_back_end.hh	/^    Addr squashNextPC;$/;"	m	class:LWBackEnd
squashPending	ozone/back_end.hh	/^    bool squashPending;$/;"	m	class:BackEnd
squashPending	ozone/inorder_back_end.hh	/^    bool squashPending;$/;"	m	class:InorderBackEnd
squashPending	ozone/lw_back_end.hh	/^    bool squashPending;$/;"	m	class:LWBackEnd
squashPrevStageInsts	inorder/pipeline_stage.cc	/^PipelineStage::squashPrevStageInsts(InstSeqNum squash_seq_num, ThreadID tid)$/;"	f	class:PipelineStage
squashSeqNum	inorder/cpu.hh	/^    InstSeqNum squashSeqNum[ThePipeline::MaxThreads];$/;"	m	class:InOrderCPU
squashSeqNum	inorder/inorder_dyn_inst.hh	/^    InstSeqNum squashSeqNum;$/;"	m	class:InOrderDynInst
squashSeqNum	inorder/resources/fetch_seq_unit.hh	/^    InstSeqNum squashSeqNum[ThePipeline::MaxThreads];$/;"	m	class:FetchSeqUnit
squashSeqNum	ozone/back_end.hh	/^    InstSeqNum squashSeqNum;$/;"	m	class:BackEnd
squashSeqNum	ozone/inorder_back_end.hh	/^    InstSeqNum squashSeqNum;$/;"	m	class:InorderBackEnd
squashSeqNum	ozone/lw_back_end.hh	/^    InstSeqNum squashSeqNum;$/;"	m	class:LWBackEnd
squashThenTrap	inorder/resource.cc	/^Resource::squashThenTrap(int stage_num, DynInstPtr inst)$/;"	f	class:Resource
squashThreadInPipeline	inorder/cpu.cc	/^InOrderCPU::squashThreadInPipeline(ThreadID tid)$/;"	f	class:InOrderCPU
squashWidth	o3/O3CPU.py	/^    squashWidth = Param.Unsigned(8, "Squash width")$/;"	v	class:DerivO3CPU
squashWidth	o3/rob.hh	/^    unsigned squashWidth;$/;"	m	class:ROB
squashWidth	ozone/OzoneCPU.py	/^    squashWidth = Param.Unsigned("Squash width")$/;"	v	class:DerivOzoneCPU
squashWidth	ozone/SimpleOzoneCPU.py	/^    squashWidth = Param.Unsigned("Squash width")$/;"	v	class:SimpleOzoneCPU
squashWidth	ozone/simple_params.hh	/^    unsigned squashWidth;$/;"	m	class:SimpleParams
squashed	inorder/resource.hh	/^    bool squashed;$/;"	m	class:ResourceRequest
squashed	o3/mem_dep_unit.hh	/^        bool squashed;$/;"	m	class:MemDepUnit::MemDepEntry
squashed	translation.hh	/^    squashed() const$/;"	f	class:DataTranslation
squashedInsts	ozone/lw_back_end.hh	/^    Stats::Vector squashedInsts;$/;"	m	class:LWBackEnd
squashedSeqNum	o3/comm.hh	/^    InstSeqNum squashedSeqNum[Impl::MaxThreads];$/;"	m	struct:DefaultIEWDefaultCommit
squashedSeqNum	o3/inst_queue.hh	/^    InstSeqNum squashedSeqNum[Impl::MaxThreads];$/;"	m	class:InstructionQueue
squashedSeqNum	o3/rob.hh	/^    InstSeqNum squashedSeqNum[Impl::MaxThreads];$/;"	m	class:ROB
squashedSeqNum	ozone/inst_queue.hh	/^    InstSeqNum squashedSeqNum[Impl::MaxThreads];$/;"	m	class:InstQueue
squashingStage	inorder/inorder_dyn_inst.hh	/^    int squashingStage;$/;"	m	class:InOrderDynInst
srcInstReady	ozone/dyn_inst_impl.hh	/^OzoneDynInst<Impl>::srcInstReady(int regIdx)$/;"	f	class:OzoneDynInst
srcInsts	ozone/dyn_inst.hh	/^    DynInstPtr srcInsts[MaxInstSrcRegs];$/;"	m	class:OzoneDynInst
srcMemInsts	ozone/dyn_inst.hh	/^    std::list<DynInstPtr> srcMemInsts;$/;"	m	class:OzoneDynInst
srcRegIdx	base_dyn_inst.hh	/^    RegIndex srcRegIdx(int i) const { return staticInst->srcRegIdx(i); }$/;"	f	class:BaseDynInst
srcRegIdx	inorder/inorder_dyn_inst.hh	/^    RegIndex srcRegIdx(int i) const { return staticInst->srcRegIdx(i); }$/;"	f	class:InOrderDynInst
srcRegIdx	static_inst.hh	/^    RegIndex srcRegIdx(int i)  const { return _srcRegIdx[i]; }$/;"	f	class:StaticInst
srcRegsRelativeLats	minor/MinorCPU.py	/^        srcRegsRelativeLats=[0])]$/;"	v	class:MinorDefaultIntMulFU
srcRegsRelativeLats	minor/MinorCPU.py	/^        srcRegsRelativeLats=[2])]$/;"	v	class:MinorDefaultFloatSimdFU
srcRegsRelativeLats	minor/MinorCPU.py	/^        srcRegsRelativeLats=[2])]$/;"	v	class:MinorDefaultIntFU
srcRegsRelativeLats	minor/MinorCPU.py	/^    srcRegsRelativeLats = VectorParam.Cycles("the maximum number of cycles"$/;"	v	class:MinorFUTiming
srcRegsRelativeLats	minor/func_unit.hh	/^    std::vector<Cycles> srcRegsRelativeLats;$/;"	m	class:MinorFUTiming
srcsReady	ozone/dyn_inst_impl.hh	/^OzoneDynInst<Impl>::srcsReady()$/;"	f	class:OzoneDynInst
sreqHigh	o3/lsq_unit.hh	/^        RequestPtr sreqHigh;$/;"	m	struct:LSQUnit::SQEntry
sreqHigh	translation.hh	/^    RequestPtr sreqHigh;$/;"	m	class:WholeTranslationState
sreqLow	o3/lsq_unit.hh	/^        RequestPtr sreqLow;$/;"	m	struct:LSQUnit::SQEntry
sreqLow	translation.hh	/^    RequestPtr sreqLow;$/;"	m	class:WholeTranslationState
stage	inorder/pipeline_stage.hh	/^        bool stage[ThePipeline::NumStages];$/;"	m	struct:PipelineStage::Stalls
stageActive	activity.hh	/^    bool *stageActive;$/;"	m	class:ActivityRecorder
stageBlock	inorder/comm.hh	/^    bool stageBlock[ThePipeline::NumStages][ThePipeline::MaxThreads];$/;"	m	struct:TimeStruct
stageBufferAvail	inorder/pipeline_stage.cc	/^PipelineStage::stageBufferAvail()$/;"	f	class:PipelineStage
stageBufferMax	inorder/pipeline_stage.hh	/^    unsigned stageBufferMax;$/;"	m	class:PipelineStage
stageBufferSizes	inorder/pipeline_traits.9stage.hh	/^    static std::map<unsigned, unsigned> stageBufferSizes;$/;"	m	namespace:ThePipeline
stageBufferSizes	inorder/pipeline_traits.9stage.smt2.hh	/^    static std::map<unsigned, unsigned> stageBufferSizes;$/;"	m	namespace:ThePipeline
stageCycle	inorder/inorder_trace.hh	/^    std::vector<Tick> stageCycle;$/;"	m	class:Trace::InOrderTraceRecord
stageInfo	inorder/comm.hh	/^    StageComm stageInfo[ThePipeline::NumStages][ThePipeline::MaxThreads];$/;"	m	struct:TimeStruct
stageNum	inorder/cpu.hh	/^        int stageNum;$/;"	m	class:InOrderCPU::StageScheduler
stageNum	inorder/pipeline_stage.hh	/^    unsigned stageNum;$/;"	m	class:PipelineStage
stageNum	inorder/pipeline_traits.5stage.hh	/^        int stageNum;$/;"	m	struct:ThePipeline::ScheduleEntry
stageNum	inorder/pipeline_traits.9stage.hh	/^        int stageNum;$/;"	m	struct:ThePipeline::ScheduleEntry
stageNum	inorder/pipeline_traits.9stage.smt2.hh	/^        int stageNum;$/;"	m	struct:ThePipeline::ScheduleEntry
stageNum	inorder/resource.hh	/^    int stageNum;$/;"	m	class:ResourceRequest
stageNum	inorder/resource_pool.hh	/^        int stageNum;$/;"	m	class:ResourcePool::ResPoolEvent
stageNum	inorder/resource_sked.hh	/^    int stageNum;$/;"	m	class:ScheduleEntry
stagePasses	inorder/resource.hh	/^    short stagePasses;$/;"	m	class:ResourceRequest
stageQueue	inorder/cpu.hh	/^    StageQueue *stageQueue[ThePipeline::NumStages-1];$/;"	m	class:InOrderCPU
stageStatus	inorder/pipeline_stage.hh	/^    ThreadStatus stageStatus[ThePipeline::MaxThreads];$/;"	m	class:PipelineStage
stageTrace	inorder/inorder_trace.hh	/^    bool stageTrace;$/;"	m	class:Trace::InOrderTraceRecord
stageTracing	inorder/InOrderCPU.py	/^    stageTracing = Param.Bool(False, "Enable tracing of each stage in CPU")$/;"	v	class:InOrderCPU
stageTracing	inorder/cpu.hh	/^    bool stageTracing;$/;"	m	class:InOrderCPU
stageUnblock	inorder/comm.hh	/^    bool stageUnblock[ThePipeline::NumStages][ThePipeline::MaxThreads];$/;"	m	struct:TimeStruct
stageWidth	inorder/InOrderCPU.py	/^    stageWidth = Param.Unsigned(4, "Stage width")$/;"	v	class:InOrderCPU
stageWidth	inorder/cpu.hh	/^    int stageWidth;$/;"	m	class:InOrderCPU
stageWidth	inorder/pipeline_stage.hh	/^    unsigned stageWidth;$/;"	m	class:PipelineStage
stages	inorder/resource_sked.hh	/^    ResourceSked::StageList *stages;$/;"	m	class:RSkedIt
stages	inorder/resource_sked.hh	/^    StageList stages;$/;"	m	class:ResourceSked
stall	ozone/cpu.hh	/^        bool stall;$/;"	m	struct:OzoneCPU::CommStruct
stalled	minor/buffers.hh	/^    bool stalled;$/;"	m	class:Minor::SelfStallingPipeline
stalled	o3/lsq_unit.hh	/^    bool stalled;$/;"	m	class:LSQUnit
stalled	ozone/lsq_unit.hh	/^    bool stalled;$/;"	m	class:OzoneLSQ
stalled	ozone/lw_lsq.hh	/^    bool stalled;$/;"	m	class:OzoneLWLSQ
stallingLoad	ozone/lw_lsq.hh	/^    LQIt stallingLoad;$/;"	m	class:OzoneLWLSQ
stallingLoadIdx	o3/lsq_unit.hh	/^    int stallingLoadIdx;$/;"	m	class:LSQUnit
stallingLoadIdx	ozone/lsq_unit.hh	/^    int stallingLoadIdx;$/;"	m	class:OzoneLSQ
stallingStoreIsn	o3/lsq_unit.hh	/^    InstSeqNum stallingStoreIsn;$/;"	m	class:LSQUnit
stallingStoreIsn	ozone/lsq_unit.hh	/^    InstSeqNum stallingStoreIsn;$/;"	m	class:OzoneLSQ
stallingStoreIsn	ozone/lw_lsq.hh	/^    InstSeqNum stallingStoreIsn;$/;"	m	class:OzoneLWLSQ
stalls	inorder/pipeline_stage.hh	/^    Stalls stalls[ThePipeline::MaxThreads];$/;"	m	class:PipelineStage
stalls	o3/decode.hh	/^    Stalls stalls[Impl::MaxThreads];$/;"	m	class:DefaultDecode
stalls	o3/fetch.hh	/^    Stalls stalls[Impl::MaxThreads];$/;"	m	class:DefaultFetch
stalls	o3/rename.hh	/^    Stalls stalls[Impl::MaxThreads];$/;"	m	class:DefaultRename
start	kvm/perfevent.cc	/^PerfKvmCounter::start()$/;"	f	class:PerfKvmCounter
startAddr	testers/traffic_gen/generators.hh	/^    const Addr startAddr;$/;"	m	class:LinearGen
startAddr	testers/traffic_gen/generators.hh	/^    const Addr startAddr;$/;"	m	class:RandomGen
startAddrTranslation	minor/lsq.cc	/^LSQ::SingleDataRequest::startAddrTranslation()$/;"	f	class:Minor::LSQ::SingleDataRequest
startAddrTranslation	minor/lsq.cc	/^LSQ::SplitDataRequest::startAddrTranslation()$/;"	f	class:Minor::LSQ::SplitDataRequest
startAddrTranslation	minor/lsq.hh	/^        void startAddrTranslation() { }$/;"	f	class:Minor::LSQ::SpecialDataRequest
startNumInst	checker/cpu.hh	/^    Counter startNumInst;$/;"	m	class:CheckerCPU
startNumInst	ozone/cpu.hh	/^    Counter startNumInst;$/;"	m	class:OzoneCPU
startNumInst	simple/base.hh	/^    Counter startNumInst;$/;"	m	class:BaseSimpleCPU
startNumLoad	checker/cpu.hh	/^    Counter startNumLoad;$/;"	m	class:CheckerCPU
startNumLoad	ozone/cpu.hh	/^    Counter startNumLoad;$/;"	m	class:OzoneCPU
startNumLoad	simple/base.hh	/^    Counter startNumLoad;$/;"	m	class:BaseSimpleCPU
startNumLoad	thread_state.hh	/^    Counter startNumLoad;$/;"	m	struct:ThreadState
startNumOp	simple/base.hh	/^    Counter startNumOp;$/;"	m	class:BaseSimpleCPU
start_drain	o3/fetch.hh	/^	bool start_drain; $/;"	m	class:DefaultFetch
started	kvm/vm.hh	/^    bool started;$/;"	m	class:KvmVM
startup	base.cc	/^BaseCPU::startup()$/;"	f	class:BaseCPU
startup	inorder/resource_pool.hh	/^    virtual void startup() { }$/;"	f	class:ResourcePool
startup	kvm/arm_cpu.cc	/^ArmKvmCPU::startup()$/;"	f	class:ArmKvmCPU
startup	kvm/base.cc	/^BaseKvmCPU::startup()$/;"	f	class:BaseKvmCPU
startup	kvm/x86_cpu.cc	/^X86KvmCPU::startup()$/;"	f	class:X86KvmCPU
startup	minor/cpu.cc	/^MinorCPU::startup()$/;"	f	class:MinorCPU
startup	o3/cpu.cc	/^FullO3CPU<Impl>::startup()$/;"	f	class:FullO3CPU
startup	simple/base.cc	/^BaseSimpleCPU::startup()$/;"	f	class:BaseSimpleCPU
startup	simple_thread.cc	/^SimpleThread::startup()$/;"	f	class:SimpleThread
startupStage	o3/commit_impl.hh	/^DefaultCommit<Impl>::startupStage()$/;"	f	class:DefaultCommit
startupStage	o3/decode_impl.hh	/^DefaultDecode<Impl>::startupStage()$/;"	f	class:DefaultDecode
startupStage	o3/fetch_impl.hh	/^DefaultFetch<Impl>::startupStage()$/;"	f	class:DefaultFetch
startupStage	o3/iew_impl.hh	/^DefaultIEW<Impl>::startupStage()$/;"	f	class:DefaultIEW
startupStage	o3/rename_impl.hh	/^DefaultRename<Impl>::startupStage()$/;"	f	class:DefaultRename
startupThread	kvm/base.cc	/^BaseKvmCPU::startupThread()$/;"	f	class:BaseKvmCPU
statComBranches	o3/commit.hh	/^    Stats::Vector statComBranches;$/;"	m	class:DefaultCommit
statComBranches	ozone/lw_back_end.hh	/^    Stats::Vector statComBranches;$/;"	m	class:LWBackEnd
statComFloating	o3/commit.hh	/^    Stats::Vector statComFloating;$/;"	m	class:DefaultCommit
statComFunctionCalls	o3/commit.hh	/^    Stats::Vector statComFunctionCalls;$/;"	m	class:DefaultCommit
statComInst	ozone/lw_back_end.hh	/^    Stats::Vector statComInst;$/;"	m	class:LWBackEnd
statComInteger	o3/commit.hh	/^    Stats::Vector statComInteger;$/;"	m	class:DefaultCommit
statComLoads	o3/commit.hh	/^    Stats::Vector statComLoads;$/;"	m	class:DefaultCommit
statComLoads	ozone/lw_back_end.hh	/^    Stats::Vector statComLoads;$/;"	m	class:LWBackEnd
statComMembars	o3/commit.hh	/^    Stats::Vector statComMembars;$/;"	m	class:DefaultCommit
statComMembars	ozone/lw_back_end.hh	/^    Stats::Vector statComMembars;$/;"	m	class:LWBackEnd
statComRefs	o3/commit.hh	/^    Stats::Vector statComRefs;$/;"	m	class:DefaultCommit
statComRefs	ozone/lw_back_end.hh	/^    Stats::Vector statComRefs;$/;"	m	class:LWBackEnd
statComSwp	o3/commit.hh	/^    Stats::Vector statComSwp;$/;"	m	class:DefaultCommit
statComSwp	ozone/lw_back_end.hh	/^    Stats::Vector statComSwp;$/;"	m	class:LWBackEnd
statCommittedInstType	o3/commit.hh	/^    Stats::Vector2d statCommittedInstType;$/;"	m	class:DefaultCommit
statExecutedInstType	simple/base.hh	/^    Stats::Vector statExecutedInstType;$/;"	m	class:BaseSimpleCPU
statFuBusy	o3/inst_queue.hh	/^    Stats::Vector statFuBusy;$/;"	m	class:InstructionQueue
statIssuedInstType	o3/inst_queue.hh	/^    Stats::Vector2d statIssuedInstType;$/;"	m	class:InstructionQueue
stat_com_branches	ozone/back_end.hh	/^    Stats::Vector stat_com_branches;$/;"	m	class:BackEnd
stat_com_inst	ozone/back_end.hh	/^    Stats::Vector stat_com_inst;$/;"	m	class:BackEnd
stat_com_loads	ozone/back_end.hh	/^    Stats::Vector stat_com_loads;$/;"	m	class:BackEnd
stat_com_membars	ozone/back_end.hh	/^    Stats::Vector stat_com_membars;$/;"	m	class:BackEnd
stat_com_refs	ozone/back_end.hh	/^    Stats::Vector stat_com_refs;$/;"	m	class:BackEnd
stat_com_swp	ozone/back_end.hh	/^    Stats::Vector stat_com_swp;$/;"	m	class:BackEnd
state	minor/fetch1.hh	/^        FetchRequestState state;$/;"	m	class:Minor::Fetch1::FetchRequest
state	minor/fetch1.hh	/^    FetchState state;$/;"	m	class:Minor::Fetch1
state	minor/lsq.hh	/^        LSQRequestState state;$/;"	m	class:Minor::LSQ::LSQRequest
state	minor/lsq.hh	/^    MemoryState state;$/;"	m	class:Minor::LSQ
state	translation.hh	/^    WholeTranslationState *state;$/;"	m	class:DataTranslation
states	testers/traffic_gen/traffic_gen.hh	/^    m5::hash_map<uint32_t, BaseGen*> states;$/;"	m	class:TrafficGen
staticInst	base_dyn_inst.hh	/^    const StaticInstPtr staticInst;$/;"	m	class:BaseDynInst
staticInst	inorder/inorder_dyn_inst.hh	/^    StaticInstPtr staticInst;$/;"	m	class:InOrderDynInst
staticInst	minor/dyn_inst.hh	/^    StaticInstPtr staticInst;$/;"	m	class:Minor::MinorDynInst
stats	minor/cpu.hh	/^    Minor::MinorStats stats;$/;"	m	class:MinorCPU
status	base_dyn_inst.hh	/^    std::bitset<NumStatus> status;$/;"	m	class:BaseDynInst
status	checker/thread_context.hh	/^    Status status() const { return actualTC->status(); }$/;"	f	class:CheckerThreadContext
status	inorder/inorder_dyn_inst.hh	/^    std::bitset<NumStatus> status;$/;"	m	class:InOrderDynInst
status	inorder/thread_context.hh	/^    Status status() const { return thread->status(); }$/;"	f	class:InOrderThreadContext
status	o3/thread_context.hh	/^    virtual Status status() const { return thread->status(); }$/;"	f	class:O3ThreadContext
status	ozone/back_end.hh	/^    Status status;$/;"	m	class:BackEnd
status	ozone/cpu.hh	/^        Status status() const { return thread->status(); }$/;"	f	class:OzoneCPU::OzoneTC
status	ozone/cpu.hh	/^    Status status() const { return _status; }$/;"	f	class:OzoneCPU
status	ozone/front_end.hh	/^    Status status;$/;"	m	class:FrontEnd
status	ozone/inorder_back_end.hh	/^    Status status;$/;"	m	class:InorderBackEnd
status	ozone/lw_back_end.hh	/^    Status status;$/;"	m	class:LWBackEnd
status	simple_thread.hh	/^    Status status() const { return _status; }$/;"	f	class:SimpleThread
status	thread_context.hh	/^    Status status() const { return actualTC->status(); }$/;"	f	class:ProxyThreadContext
status	thread_state.hh	/^    Status status() const { return _status; }$/;"	f	struct:ThreadState
stayAtPC	simple/base.hh	/^    bool stayAtPC;$/;"	m	class:BaseSimpleCPU
step	minor/lsq.cc	/^LSQ::StoreBuffer::step()$/;"	f	class:Minor::LSQ::StoreBuffer
step	minor/lsq.cc	/^LSQ::step()$/;"	f	class:Minor::LSQ
stepQueues	minor/fetch1.cc	/^Fetch1::stepQueues()$/;"	f	class:Minor::Fetch1
stepToNextPacket	minor/lsq.cc	/^LSQ::SplitDataRequest::stepToNextPacket()$/;"	f	class:Minor::LSQ::SplitDataRequest
stepToNextPacket	minor/lsq.hh	/^        void stepToNextPacket() { packetInFlight = true; packetSent = true; }$/;"	f	class:Minor::LSQ::SingleDataRequest
stepToNextPacket	minor/lsq.hh	/^        void stepToNextPacket() { }$/;"	f	class:Minor::LSQ::SpecialDataRequest
stop	kvm/perfevent.cc	/^PerfKvmCounter::stop()$/;"	f	class:PerfKvmCounter
storeBarrier	o3/mem_dep_unit.hh	/^    bool storeBarrier;$/;"	m	class:MemDepUnit
storeBarrierSN	o3/mem_dep_unit.hh	/^    InstSeqNum storeBarrierSN;$/;"	m	class:MemDepUnit
storeBuffer	minor/lsq.hh	/^    StoreBuffer storeBuffer;$/;"	m	class:Minor::LSQ
storeCondFailures	thread_state.hh	/^    unsigned storeCondFailures;$/;"	m	struct:ThreadState
storeData	inorder/inorder_dyn_inst.hh	/^    uint64_t storeData;$/;"	m	class:InOrderDynInst
storeFaultInst	ozone/lsq_unit.hh	/^    DynInstPtr storeFaultInst;$/;"	m	class:OzoneLSQ
storeFaultInst	ozone/lw_lsq.hh	/^    DynInstPtr storeFaultInst;$/;"	m	class:OzoneLWLSQ
storeHead	o3/lsq_unit.hh	/^    int storeHead;$/;"	m	class:LSQUnit
storeHead	ozone/lsq_unit.hh	/^    int storeHead;$/;"	m	class:OzoneLSQ
storeIdx	ozone/lsq_unit.hh	/^        int storeIdx;$/;"	m	class:OzoneLSQ::StoreCompletionEvent
storeInFlight	o3/lsq_unit.hh	/^    bool storeInFlight;$/;"	m	class:LSQUnit
storeLimitPerCycle	minor/lsq.hh	/^        const unsigned int storeLimitPerCycle;$/;"	m	class:Minor::LSQ::StoreBuffer
storeList	o3/store_set.hh	/^    std::map<InstSeqNum, int, ltseqnum> storeList;$/;"	m	class:StoreSet
storePostSend	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::storePostSend(PacketPtr pkt)$/;"	f	class:LSQUnit
storePostSend	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::storePostSend(PacketPtr pkt, DynInstPtr &inst)$/;"	f	class:OzoneLWLSQ
storeQueue	o3/lsq_unit.hh	/^    std::vector<SQEntry> storeQueue;$/;"	m	class:LSQUnit
storeQueue	ozone/lsq_unit.hh	/^    std::vector<SQEntry> storeQueue;$/;"	m	class:OzoneLSQ
storeQueue	ozone/lw_lsq.hh	/^    std::list<SQEntry> storeQueue;$/;"	m	class:OzoneLWLSQ
storeTail	o3/lsq_unit.hh	/^    int storeTail;$/;"	m	class:LSQUnit
storeTail	ozone/lsq_unit.hh	/^    int storeTail;$/;"	m	class:OzoneLSQ
storeTick	o3/dyn_inst.hh	/^    int32_t storeTick;$/;"	m	class:BaseO3DynInst
storeWBIdx	o3/lsq_unit.hh	/^    int storeWBIdx;$/;"	m	class:LSQUnit
storeWBIdx	ozone/lsq_unit.hh	/^    int storeWBIdx;$/;"	m	class:OzoneLSQ
store_set_clear_period	o3/O3CPU.py	/^    store_set_clear_period = Param.Unsigned(250000,$/;"	v	class:DerivO3CPU
stores	o3/lsq_unit.hh	/^    int stores;$/;"	m	class:LSQUnit
stores	ozone/lsq_unit.hh	/^    int stores;$/;"	m	class:OzoneLSQ
stores	ozone/lw_lsq.hh	/^    int stores;$/;"	m	class:OzoneLWLSQ
storesInFlight	ozone/lw_lsq.hh	/^    int storesInFlight;$/;"	m	class:OzoneLWLSQ
storesInProgress	o3/rename.hh	/^    int storesInProgress[Impl::MaxThreads];$/;"	m	class:DefaultRename
storesToWB	o3/lsq_unit.hh	/^    int storesToWB;$/;"	m	class:LSQUnit
storesToWB	ozone/lsq_unit.hh	/^    int storesToWB;$/;"	m	class:OzoneLSQ
storesToWB	ozone/lw_lsq.hh	/^    int storesToWB;$/;"	m	class:OzoneLWLSQ
streamSeqNum	minor/dyn_inst.hh	/^    InstSeqNum streamSeqNum;$/;"	m	class:Minor::InstId
streamSeqNum	minor/execute.hh	/^    InstSeqNum streamSeqNum;$/;"	m	class:Minor::Execute
streamSeqNum	minor/fetch1.hh	/^    InstSeqNum streamSeqNum;$/;"	m	class:Minor::Fetch1
subBlock	testers/rubytest/RubyTester.hh	/^        SubBlock subBlock;$/;"	m	struct:RubyTester::SenderState
support_take_over	BaseCPU.py	/^    def support_take_over(cls):$/;"	f
support_take_over	inorder/InOrderCPU.py	/^    def support_take_over(cls):$/;"	m	class:InOrderCPU
support_take_over	kvm/BaseKvmCPU.py	/^    def support_take_over(cls):$/;"	f
support_take_over	minor/MinorCPU.py	/^    def support_take_over(cls):$/;"	m	class:MinorCPU
support_take_over	o3/O3CPU.py	/^    def support_take_over(cls):$/;"	m	class:DerivO3CPU
support_take_over	simple/AtomicSimpleCPU.py	/^    def support_take_over(cls):$/;"	m	class:AtomicSimpleCPU
support_take_over	simple/TimingSimpleCPU.py	/^    def support_take_over(cls):$/;"	m	class:TimingSimpleCPU
supportedCPUIDCache	kvm/vm.hh	/^    mutable CPUIDVector supportedCPUIDCache;$/;"	m	class:Kvm
supportedMSRCache	kvm/vm.hh	/^    mutable MSRIndexVector supportedMSRCache;$/;"	m	class:Kvm
suppress	minor/MinorCPU.py	/^    suppress = Param.Bool(False, "if true, this inst. is not executed by"$/;"	v	class:MinorFUTiming
suppress	minor/func_unit.hh	/^    bool suppress;$/;"	m	class:MinorFUTiming
suppress_func_warnings	testers/memtest/MemTest.py	/^    suppress_func_warnings = Param.Bool(False,$/;"	v	class:MemTest
suppress_func_warnings	testers/memtest/memtest.hh	/^    bool suppress_func_warnings;$/;"	m	class:MemTest
suspend	checker/thread_context.hh	/^    void suspend() { actualTC->suspend(); }$/;"	f	class:CheckerThreadContext
suspend	inorder/thread_context.cc	/^InOrderThreadContext::suspend()$/;"	f	class:InOrderThreadContext
suspend	o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::suspend()$/;"	f	class:O3ThreadContext
suspend	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::suspend()$/;"	f	class:OzoneCPU::OzoneTC
suspend	simple_thread.cc	/^SimpleThread::suspend()$/;"	f	class:SimpleThread
suspend	thread_context.hh	/^    void suspend() { actualTC->suspend(); }$/;"	f	class:ProxyThreadContext
suspendContext	base.hh	/^    virtual void suspendContext(ThreadID thread_num) {}$/;"	f	class:BaseCPU
suspendContext	inorder/cpu.cc	/^InOrderCPU::suspendContext(ThreadID tid)$/;"	f	class:InOrderCPU
suspendContext	kvm/base.cc	/^BaseKvmCPU::suspendContext(ThreadID thread_num)$/;"	f	class:BaseKvmCPU
suspendContext	minor/cpu.cc	/^MinorCPU::suspendContext(ThreadID thread_id)$/;"	f	class:MinorCPU
suspendContext	o3/cpu.cc	/^FullO3CPU<Impl>::suspendContext(ThreadID tid)$/;"	f	class:FullO3CPU
suspendContext	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::suspendContext(int thread_num)$/;"	f	class:OzoneCPU
suspendContext	simple/atomic.cc	/^AtomicSimpleCPU::suspendContext(ThreadID thread_num)$/;"	f	class:AtomicSimpleCPU
suspendContext	simple/timing.cc	/^TimingSimpleCPU::suspendContext(ThreadID thread_num)$/;"	f	class:TimingSimpleCPU
suspendThread	inorder/cpu.cc	/^InOrderCPU::suspendThread(ThreadID tid)$/;"	f	class:InOrderCPU
suspendThread	inorder/resource.hh	/^    virtual void suspendThread(ThreadID tid) { }$/;"	f	class:Resource
suspendThread	inorder/resource_pool.cc	/^ResourcePool::suspendThread(ThreadID tid)$/;"	f	class:ResourcePool
suspendThread	inorder/resources/fetch_seq_unit.cc	/^FetchSeqUnit::suspendThread(ThreadID tid)$/;"	f	class:FetchSeqUnit
suspendedThreads	inorder/cpu.hh	/^    std::list<ThreadID> suspendedThreads;$/;"	m	class:InOrderCPU
switchCount	ozone/cpu.hh	/^    int switchCount;$/;"	m	class:OzoneCPU
switchOut	base.cc	/^BaseCPU::switchOut()$/;"	f	class:BaseCPU
switchOut	checker/cpu_impl.hh	/^Checker<Impl>::switchOut()$/;"	f	class:Checker
switchOut	inorder/cpu.cc	/^InOrderCPU::switchOut()$/;"	f	class:InOrderCPU
switchOut	inorder/pipeline_stage.cc	/^PipelineStage::switchOut()$/;"	f	class:PipelineStage
switchOut	kvm/base.cc	/^BaseKvmCPU::switchOut()$/;"	f	class:BaseKvmCPU
switchOut	minor/cpu.cc	/^MinorCPU::switchOut()$/;"	f	class:MinorCPU
switchOut	o3/cpu.cc	/^FullO3CPU<Impl>::switchOut()$/;"	f	class:FullO3CPU
switchOut	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::switchOut()$/;"	f	class:OzoneCPU
switchOut	ozone/front_end_impl.hh	/^FrontEnd<Impl>::switchOut()$/;"	f	class:FrontEnd
switchOut	ozone/inorder_back_end.hh	/^    void switchOut() { panic("Not implemented!"); }$/;"	f	class:InorderBackEnd
switchOut	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::switchOut()$/;"	f	class:LWBackEnd
switchOut	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::switchOut()$/;"	f	class:OzoneLWLSQ
switchOut	simple/atomic.cc	/^AtomicSimpleCPU::switchOut()$/;"	f	class:AtomicSimpleCPU
switchOut	simple/timing.cc	/^TimingSimpleCPU::switchOut()$/;"	f	class:TimingSimpleCPU
switchPending	ozone/lw_back_end.hh	/^    bool switchPending;$/;"	m	class:LWBackEnd
switchToActive	inorder/cpu.hh	/^    void switchToActive(int stage_idx)$/;"	f	class:InOrderCPU
switchToActive	o3/fetch_impl.hh	/^DefaultFetch<Impl>::switchToActive()$/;"	f	class:DefaultFetch
switchToInactive	o3/fetch_impl.hh	/^DefaultFetch<Impl>::switchToInactive()$/;"	f	class:DefaultFetch
switchedOut	base.hh	/^    bool switchedOut() const { return _switchedOut; }$/;"	f	class:BaseCPU
switchedOut	ozone/front_end.hh	/^    bool switchedOut;$/;"	m	class:FrontEnd
switchedOut	ozone/lw_back_end.hh	/^    bool switchedOut;$/;"	m	class:LWBackEnd
switchedOut	ozone/lw_lsq.hh	/^    bool switchedOut;$/;"	m	class:OzoneLWLSQ
switchedOutBuffer	inorder/pipeline_stage.hh	/^    std::vector<DynInstPtr> switchedOutBuffer;$/;"	m	class:PipelineStage
switchedOutValid	inorder/pipeline_stage.hh	/^    std::vector<bool> switchedOutValid;$/;"	m	class:PipelineStage
switched_out	BaseCPU.py	/^    switched_out = Param.Bool(False,$/;"	v
symtab	profile.hh	/^    const SymbolTable *symtab;$/;"	m	class:FunctionProfile
syncKvmState	kvm/base.cc	/^BaseKvmCPU::syncKvmState()$/;"	f	class:BaseKvmCPU
syncThreadContext	kvm/base.cc	/^BaseKvmCPU::syncThreadContext()$/;"	f	class:BaseKvmCPU
sys	IntrControl.py	/^    sys = Param.System(Parent.any, "the system we are part of")$/;"	v	class:IntrControl
sys	intr_control.hh	/^    System *sys;$/;"	m	class:IntrControl
sys	testers/memtest/MemTest.py	/^    sys = Param.System(Parent.any, "System Parameter")$/;"	v	class:MemTest
syscall	checker/cpu.hh	/^    void syscall(int64_t callnum) { }$/;"	f	class:CheckerCPU
syscall	checker/thread_context.hh	/^    void syscall(int64_t callnum)$/;"	f	class:CheckerThreadContext
syscall	inorder/cpu.cc	/^InOrderCPU::syscall(int64_t callnum, ThreadID tid)$/;"	f	class:InOrderCPU
syscall	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::syscall(int64_t callnum)$/;"	f	class:InOrderDynInst
syscall	inorder/thread_context.hh	/^    void syscall(int64_t callnum)$/;"	f	class:InOrderThreadContext
syscall	inorder/thread_state.hh	/^    void syscall(int64_t callnum) { process->syscall(callnum, tc); }$/;"	f	class:InOrderThreadState
syscall	minor/exec_context.hh	/^    syscall(int64_t callnum)$/;"	f	class:Minor::ExecContext
syscall	o3/cpu.cc	/^FullO3CPU<Impl>::syscall(int64_t callnum, ThreadID tid)$/;"	f	class:FullO3CPU
syscall	o3/dyn_inst_impl.hh	/^BaseO3DynInst<Impl>::syscall(int64_t callnum)$/;"	f	class:BaseO3DynInst
syscall	o3/thread_context.hh	/^    virtual void syscall(int64_t callnum)$/;"	f	class:O3ThreadContext
syscall	o3/thread_state.hh	/^    void syscall(int64_t callnum) { process->syscall(callnum, tc); }$/;"	f	struct:O3ThreadState
syscall	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::syscall(uint64_t &callnum)$/;"	f	class:OzoneCPU
syscall	ozone/dyn_inst_impl.hh	/^OzoneDynInst<Impl>::syscall(uint64_t &callnum)$/;"	f	class:OzoneDynInst
syscall	simple/base.hh	/^    syscall(int64_t callnum)$/;"	f	class:BaseSimpleCPU
syscall	simple_thread.hh	/^    void syscall(int64_t callnum)$/;"	f	class:SimpleThread
syscall	thread_context.hh	/^    void syscall(int64_t callnum)$/;"	f	class:ProxyThreadContext
syscallContext	inorder/cpu.cc	/^InOrderCPU::syscallContext(const Fault &fault, ThreadID tid, DynInstPtr inst,$/;"	f	class:InOrderCPU
syscallNum	inorder/inorder_dyn_inst.hh	/^    short syscallNum;$/;"	m	class:InOrderDynInst
syscall_num	inorder/cpu.hh	/^        short syscall_num;$/;"	m	class:InOrderCPU::CPUEvent
system	BaseCPU.py	/^    system = Param.System(Parent.any, "system object")$/;"	v
system	base.hh	/^    System *system;$/;"	m	class:BaseCPU
system	inorder/cpu.hh	/^    System *system;$/;"	m	class:InOrderCPU
system	kvm/KvmVM.py	/^    system = Param.System(Parent.any, "system object")$/;"	v	class:KvmVM
system	kvm/vm.hh	/^    System *system;$/;"	m	class:KvmVM
system	o3/cpu.hh	/^    System *system;$/;"	m	class:FullO3CPU
system	ozone/cpu.hh	/^    System *system;$/;"	m	class:OzoneCPU
system	simple_thread.hh	/^    System *system;$/;"	m	class:SimpleThread
system	testers/directedtest/RubyDirectedTester.py	/^    system = Param.System(Parent.any, "System we belong to")$/;"	v	class:DirectedGenerator
system	testers/networktest/NetworkTest.py	/^    system = Param.System(Parent.any, "System we belong to")$/;"	v	class:NetworkTest
system	testers/rubytest/RubyTester.py	/^    system = Param.System(Parent.any, "System we belong to")$/;"	v	class:RubyTester
system	testers/traffic_gen/TrafficGen.py	/^    system = Param.System(Parent.any, "System this generator is part of")$/;"	v	class:TrafficGen
system	testers/traffic_gen/traffic_gen.hh	/^    System* system;$/;"	m	class:TrafficGen
systemPtr	checker/cpu.hh	/^    System *systemPtr;$/;"	m	class:CheckerCPU
table	ozone/rename_table.hh	/^    DynInstPtr table[TheISA::TotalNumRegs];$/;"	m	class:RenameTable
tag	pred/btb.hh	/^        Addr tag;$/;"	m	struct:DefaultBTB::BTBEntry
tagBits	pred/btb.hh	/^    unsigned tagBits;$/;"	m	class:DefaultBTB
tagMask	pred/btb.hh	/^    unsigned tagMask;$/;"	m	class:DefaultBTB
tagShiftAmt	pred/btb.hh	/^    unsigned tagShiftAmt;$/;"	m	class:DefaultBTB
tail	o3/rob.hh	/^    InstIt tail;$/;"	m	class:ROB
takeInterrupt	minor/execute.cc	/^Execute::takeInterrupt(ThreadID thread_id, BranchData &branch)$/;"	f	class:Minor::Execute
takeOverFrom	BaseCPU.py	/^    def takeOverFrom(self, old_cpu):$/;"	f
takeOverFrom	base.cc	/^BaseCPU::takeOverFrom(BaseCPU *oldCPU)$/;"	f	class:BaseCPU
takeOverFrom	checker/cpu_impl.hh	/^Checker<Impl>::takeOverFrom(BaseCPU *oldCPU)$/;"	f	class:Checker
takeOverFrom	checker/thread_context.hh	/^    void takeOverFrom(ThreadContext *oldContext)$/;"	f	class:CheckerThreadContext
takeOverFrom	inorder/cpu.cc	/^InOrderCPU::takeOverFrom(BaseCPU *oldCPU)$/;"	f	class:InOrderCPU
takeOverFrom	inorder/first_stage.cc	/^FirstStage::takeOverFrom()$/;"	f	class:FirstStage
takeOverFrom	inorder/pipeline_stage.cc	/^PipelineStage::takeOverFrom()$/;"	f	class:PipelineStage
takeOverFrom	inorder/thread_context.cc	/^InOrderThreadContext::takeOverFrom(ThreadContext *old_context)$/;"	f	class:InOrderThreadContext
takeOverFrom	kvm/base.cc	/^BaseKvmCPU::takeOverFrom(BaseCPU *cpu)$/;"	f	class:BaseKvmCPU
takeOverFrom	minor/cpu.cc	/^MinorCPU::takeOverFrom(BaseCPU *old_cpu)$/;"	f	class:MinorCPU
takeOverFrom	o3/commit_impl.hh	/^DefaultCommit<Impl>::takeOverFrom()$/;"	f	class:DefaultCommit
takeOverFrom	o3/cpu.cc	/^FullO3CPU<Impl>::takeOverFrom(BaseCPU *oldCPU)$/;"	f	class:FullO3CPU
takeOverFrom	o3/decode.hh	/^    void takeOverFrom() { resetStage(); }$/;"	f	class:DefaultDecode
takeOverFrom	o3/fetch_impl.hh	/^DefaultFetch<Impl>::takeOverFrom()$/;"	f	class:DefaultFetch
takeOverFrom	o3/fu_pool.hh	/^    void takeOverFrom() {};$/;"	f	class:FUPool
takeOverFrom	o3/iew_impl.hh	/^DefaultIEW<Impl>::takeOverFrom()$/;"	f	class:DefaultIEW
takeOverFrom	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::takeOverFrom()$/;"	f	class:InstructionQueue
takeOverFrom	o3/lsq_impl.hh	/^LSQ<Impl>::takeOverFrom()$/;"	f	class:LSQ
takeOverFrom	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::takeOverFrom()$/;"	f	class:LSQUnit
takeOverFrom	o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::takeOverFrom()$/;"	f	class:MemDepUnit
takeOverFrom	o3/rename_impl.hh	/^DefaultRename<Impl>::takeOverFrom()$/;"	f	class:DefaultRename
takeOverFrom	o3/rob_impl.hh	/^ROB<Impl>::takeOverFrom()$/;"	f	class:ROB
takeOverFrom	o3/thread_context_impl.hh	/^O3ThreadContext<Impl>::takeOverFrom(ThreadContext *old_context)$/;"	f	class:O3ThreadContext
takeOverFrom	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::takeOverFrom(ThreadContext *old_context)$/;"	f	class:OzoneCPU::OzoneTC
takeOverFrom	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::takeOverFrom(BaseCPU *oldCPU)$/;"	f	class:OzoneCPU
takeOverFrom	ozone/front_end_impl.hh	/^FrontEnd<Impl>::takeOverFrom(ThreadContext *old_tc)$/;"	f	class:FrontEnd
takeOverFrom	ozone/inorder_back_end.hh	/^    void takeOverFrom(ThreadContext *old_tc = NULL) { panic("Not implemented!"); }$/;"	f	class:InorderBackEnd
takeOverFrom	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::takeOverFrom(ThreadContext *old_tc)$/;"	f	class:LWBackEnd
takeOverFrom	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::takeOverFrom(ThreadContext *old_tc)$/;"	f	class:OzoneLWLSQ
takeOverFrom	simple/atomic.cc	/^AtomicSimpleCPU::takeOverFrom(BaseCPU *oldCPU)$/;"	f	class:AtomicSimpleCPU
takeOverFrom	simple/timing.cc	/^TimingSimpleCPU::takeOverFrom(BaseCPU *oldCPU)$/;"	f	class:TimingSimpleCPU
takeOverFrom	simple_thread.cc	/^SimpleThread::takeOverFrom(ThreadContext *oldContext)$/;"	f	class:SimpleThread
takeOverFrom	thread_context.cc	/^takeOverFrom(ThreadContext &ntc, ThreadContext &otc)$/;"	f
takeOverFrom	thread_context.hh	/^    void takeOverFrom(ThreadContext *oldContext)$/;"	f	class:ProxyThreadContext
takenCounters	pred/bi_mode.hh	/^    std::vector<SatCounter> takenCounters;$/;"	m	class:BiModeBP
takenPred	pred/bi_mode.hh	/^        bool takenPred;$/;"	m	struct:BiModeBP::BPHistory
takenThreshold	pred/bi_mode.hh	/^    unsigned takenThreshold;$/;"	m	class:BiModeBP
takenUsed	pred/bi_mode.hh	/^        bool takenUsed;$/;"	m	struct:BiModeBP::BPHistory
target	minor/pipe_data.hh	/^    TheISA::PCState target;$/;"	m	class:Minor::BranchData
target	pred/btb.hh	/^        TheISA::PCState target;$/;"	m	struct:DefaultBTB::BTBEntry
taskId	base.hh	/^    uint32_t taskId() const { return _taskId; }$/;"	f	class:BaseCPU
taskId	base.hh	/^    void taskId(uint32_t id) { _taskId = id; }$/;"	f	class:BaseCPU
tba	m5legion_interface.h	/^    uint64_t tba;$/;"	m	struct:__anon8
tc	checker/cpu.hh	/^    ThreadContext *tc;$/;"	m	class:CheckerCPU
tc	cpuevent.hh	/^    ThreadContext *tc;$/;"	m	class:CpuEvent
tc	inorder/thread_state.hh	/^    ThreadContext *tc;$/;"	m	class:InOrderThreadState
tc	kvm/base.hh	/^    ThreadContext *tc;$/;"	m	class:BaseKvmCPU
tc	o3/thread_state.hh	/^    ThreadContext *tc;$/;"	m	struct:O3ThreadState
tc	ozone/back_end.hh	/^    ThreadContext *tc;$/;"	m	class:BackEnd
tc	ozone/cpu.hh	/^    ThreadContext *tc;$/;"	m	class:OzoneCPU
tc	ozone/front_end.hh	/^    ThreadContext *tc;$/;"	m	class:FrontEnd
tc	ozone/inorder_back_end.hh	/^    ThreadContext *tc;$/;"	m	class:InorderBackEnd
tc	ozone/lw_back_end.hh	/^    ThreadContext *tc;$/;"	m	class:LWBackEnd
tc	ozone/thread_state.hh	/^    ThreadContext *tc;$/;"	m	struct:OzoneThreadState
tc	quiesce_event.hh	/^    ThreadContext *tc;$/;"	m	class:EndQuiesceEvent
tc	simple/base.hh	/^    ThreadContext *tc;$/;"	m	class:BaseSimpleCPU
tc	simple_thread.hh	/^    ProxyThreadContext<SimpleThread> *tc;$/;"	m	class:SimpleThread
tcBase	base_dyn_inst.hh	/^    ThreadContext *tcBase() { return thread->getTC(); }$/;"	f	class:BaseDynInst
tcBase	checker/cpu.hh	/^    ThreadContext *tcBase() { return tc; }$/;"	f	class:CheckerCPU
tcBase	inorder/cpu.hh	/^    ThreadContext *tcBase(ThreadID tid = 0)$/;"	f	class:InOrderCPU
tcBase	inorder/inorder_dyn_inst.hh	/^    ThreadContext *tcBase() { return thread->getTC(); }$/;"	f	class:InOrderDynInst
tcBase	minor/exec_context.hh	/^    ThreadContext *tcBase() { return thread.getTC(); }$/;"	f	class:Minor::ExecContext
tcBase	o3/cpu.hh	/^    tcBase(ThreadID tid)$/;"	f	class:FullO3CPU
tcBase	ozone/cpu.hh	/^    ThreadContext *tcBase() { return tc; }$/;"	f	class:OzoneCPU
tcBase	simple/base.hh	/^    ThreadContext *tcBase() { return tc; }$/;"	f	class:BaseSimpleCPU
tcSquash	o3/commit.hh	/^    bool tcSquash[Impl::MaxThreads];$/;"	m	class:DefaultCommit
tcSquash	ozone/back_end.hh	/^    bool tcSquash;$/;"	m	class:BackEnd
tcSquash	ozone/lw_back_end.hh	/^    bool tcSquash;$/;"	m	class:LWBackEnd
test	testers/memtest/MemTest.py	/^    test = MasterPort("Port to the memory system to test")$/;"	v	class:MemTest
test	testers/networktest/NetworkTest.py	/^    test = MasterPort("Port to the memory system to test")$/;"	v	class:NetworkTest
tester	testers/directedtest/RubyDirectedTester.hh	/^        RubyDirectedTester *tester;$/;"	m	class:RubyDirectedTester::CpuPort
tester	testers/directedtest/RubyDirectedTester.hh	/^        RubyDirectedTester *tester;$/;"	m	class:RubyDirectedTester::DirectedStartEvent
tester	testers/rubytest/RubyTester.hh	/^        RubyTester *tester;$/;"	m	class:RubyTester::CheckStartEvent
tester	testers/rubytest/RubyTester.hh	/^        RubyTester *tester;$/;"	m	class:RubyTester::CpuPort
thread	base_dyn_inst.hh	/^    ImplState *thread;$/;"	m	class:BaseDynInst
thread	checker/cpu.hh	/^    SimpleThread *thread;$/;"	m	class:CheckerCPU
thread	inorder/cpu.hh	/^    std::vector<Thread *> thread;$/;"	m	class:InOrderCPU
thread	inorder/inorder_dyn_inst.hh	/^    InOrderThreadState *thread;$/;"	m	class:InOrderDynInst
thread	inorder/thread_context.hh	/^    InOrderThreadState *thread;$/;"	m	class:InOrderThreadContext
thread	kvm/base.hh	/^    SimpleThread *thread;$/;"	m	class:BaseKvmCPU
thread	minor/exec_context.hh	/^    SimpleThread &thread;$/;"	m	class:Minor::ExecContext
thread	o3/commit.hh	/^    std::vector<Thread *> thread;$/;"	m	class:DefaultCommit
thread	o3/cpu.hh	/^    std::vector<Thread *> thread;$/;"	m	class:FullO3CPU
thread	o3/lsq.hh	/^    LSQUnit *thread;$/;"	m	class:LSQ
thread	o3/thread_context.hh	/^    O3ThreadState<Impl> *thread;$/;"	m	class:O3ThreadContext
thread	ozone/back_end.hh	/^    Thread *thread;$/;"	m	class:BackEnd
thread	ozone/cpu.hh	/^        OzoneThreadState<Impl> *thread;$/;"	m	class:OzoneCPU::OzoneTC
thread	ozone/cpu.hh	/^    OzoneThreadState<Impl> thread;$/;"	m	class:OzoneCPU
thread	ozone/front_end.hh	/^    OzoneThreadState<Impl> *thread;$/;"	m	class:FrontEnd
thread	ozone/inorder_back_end.hh	/^    OzoneThreadState<Impl> *thread;$/;"	m	class:InorderBackEnd
thread	ozone/lw_back_end.hh	/^    Thread *thread;$/;"	m	class:LWBackEnd
thread	simple/base.hh	/^    SimpleThread *thread;$/;"	m	class:BaseSimpleCPU
thread	timing_expr.hh	/^    ThreadContext *thread;$/;"	m	class:TimingExprEvalContext
threadBase	checker/cpu.hh	/^    SimpleThread *threadBase() { return thread; }$/;"	f	class:CheckerCPU
threadContextDirty	kvm/base.hh	/^    bool threadContextDirty;$/;"	m	class:BaseKvmCPU
threadContexts	base.hh	/^    std::vector<ThreadContext *> threadContexts;$/;"	m	class:BaseCPU
threadCycles	inorder/cpu.hh	/^    Stats::Vector threadCycles;$/;"	m	class:InOrderCPU
threadEntries	o3/rob.hh	/^    unsigned threadEntries[Impl::MaxThreads];$/;"	m	class:ROB
threadFetched	o3/fetch.hh	/^    ThreadID threadFetched;$/;"	m	class:DefaultFetch
threadId	checker/thread_context.hh	/^    int threadId() const { return actualTC->threadId(); }$/;"	f	class:CheckerThreadContext
threadId	inorder/thread_context.hh	/^    int threadId() const { return thread->threadId(); }$/;"	f	class:InOrderThreadContext
threadId	minor/dyn_inst.hh	/^    ThreadID threadId;$/;"	m	class:Minor::InstId
threadId	o3/thread_context.hh	/^    virtual int threadId() const { return thread->threadId(); }$/;"	f	class:O3ThreadContext
threadId	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::threadId() const$/;"	f	class:OzoneCPU::OzoneTC
threadId	thread_context.hh	/^    int threadId() const { return actualTC->threadId(); }$/;"	f	class:ProxyThreadContext
threadId	thread_state.hh	/^    ThreadID threadId() const { return _threadId; }$/;"	f	struct:ThreadState
threadMap	o3/cpu.hh	/^    std::map<ThreadID, unsigned> threadMap;$/;"	m	class:FullO3CPU
threadModel	inorder/InOrderCPU.py	/^    threadModel = Param.ThreadModel('SMT', "Multithreading model (SE-MODE only)")$/;"	v	class:InOrderCPU
threadModel	inorder/cpu.hh	/^    ThreadModel threadModel;$/;"	m	class:InOrderCPU
threadNumber	base_dyn_inst.hh	/^    ThreadID threadNumber;$/;"	m	class:BaseDynInst
threadNumber	inorder/inorder_dyn_inst.hh	/^    short threadNumber;$/;"	m	class:InOrderDynInst
threads	minor/cpu.hh	/^    std::vector<Minor::MinorThread *> threads;$/;"	m	class:MinorCPU
tick	inorder/cpu.cc	/^InOrderCPU::tick()$/;"	f	class:InOrderCPU
tick	inorder/inorder_dyn_inst.hh	/^        Tick tick;$/;"	m	struct:InOrderDynInst::InstResult
tick	inorder/pipeline_stage.cc	/^PipelineStage::tick()$/;"	f	class:PipelineStage
tick	kvm/base.cc	/^BaseKvmCPU::tick()$/;"	f	class:BaseKvmCPU
tick	o3/commit_impl.hh	/^DefaultCommit<Impl>::tick()$/;"	f	class:DefaultCommit
tick	o3/cpu.cc	/^FullO3CPU<Impl>::tick()$/;"	f	class:FullO3CPU
tick	o3/decode_impl.hh	/^DefaultDecode<Impl>::tick()$/;"	f	class:DefaultDecode
tick	o3/fetch_impl.hh	/^DefaultFetch<Impl>::tick()$/;"	f	class:DefaultFetch
tick	o3/iew_impl.hh	/^DefaultIEW<Impl>::tick()$/;"	f	class:DefaultIEW
tick	o3/lsq.hh	/^    void tick(ThreadID tid)$/;"	f	class:LSQ
tick	o3/lsq_impl.hh	/^LSQ<Impl>::tick()$/;"	f	class:LSQ
tick	o3/lsq_unit.hh	/^    void tick() { usedPorts = 0; }$/;"	f	class:LSQUnit
tick	o3/rename_impl.hh	/^DefaultRename<Impl>::tick()$/;"	f	class:DefaultRename
tick	ozone/back_end_impl.hh	/^BackEnd<Impl>::tick()$/;"	f	class:BackEnd
tick	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::tick()$/;"	f	class:OzoneCPU
tick	ozone/front_end_impl.hh	/^FrontEnd<Impl>::tick()$/;"	f	class:FrontEnd
tick	ozone/inorder_back_end_impl.hh	/^InorderBackEnd<Impl>::tick()$/;"	f	class:InorderBackEnd
tick	ozone/lsq_unit.hh	/^    void tick() { usedPorts = 0; }$/;"	f	class:OzoneLSQ
tick	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::tick()$/;"	f	class:LWBackEnd
tick	ozone/lw_lsq.hh	/^    void tick() { usedPorts = 0; }$/;"	f	class:OzoneLWLSQ
tick	simple/atomic.cc	/^AtomicSimpleCPU::tick()$/;"	f	class:AtomicSimpleCPU
tick	testers/memtest/memtest.cc	/^MemTest::tick()$/;"	f	class:MemTest
tick	testers/networktest/networktest.cc	/^NetworkTest::tick()$/;"	f	class:NetworkTest
tick	testers/traffic_gen/generators.hh	/^        Tick tick;$/;"	m	struct:TraceGen::TraceElement
tickEvent	inorder/cpu.hh	/^    TickEvent tickEvent;$/;"	m	class:InOrderCPU
tickEvent	kvm/base.hh	/^    TickEvent tickEvent;$/;"	m	class:BaseKvmCPU
tickEvent	o3/cpu.hh	/^    TickEvent tickEvent;$/;"	m	class:FullO3CPU
tickEvent	ozone/cpu.hh	/^    TickEvent tickEvent;$/;"	m	class:OzoneCPU
tickEvent	simple/atomic.hh	/^    TickEvent tickEvent;$/;"	m	class:AtomicSimpleCPU
tickEvent	simple/timing.hh	/^        DTickEvent tickEvent;$/;"	m	class:TimingSimpleCPU::DcachePort
tickEvent	simple/timing.hh	/^        ITickEvent tickEvent;$/;"	m	class:TimingSimpleCPU::IcachePort
tickEvent	testers/memtest/memtest.hh	/^    TickEvent tickEvent;$/;"	m	class:MemTest
tickEvent	testers/networktest/networktest.hh	/^    TickEvent tickEvent;$/;"	m	class:NetworkTest
tickOffset	testers/traffic_gen/generators.hh	/^    mutable Tick tickOffset;$/;"	m	class:TraceGen
tickThreadStats	inorder/cpu.cc	/^InOrderCPU::tickThreadStats()$/;"	f	class:InOrderCPU
ticksFromHostCycles	kvm/timer.hh	/^    Tick ticksFromHostCycles(uint64_t cycles) {$/;"	f	class:BaseKvmTimer
ticksFromHostNs	kvm/timer.hh	/^    Tick ticksFromHostNs(uint64_t ns) {$/;"	f	class:BaseKvmTimer
tid	inorder/cpu.hh	/^        ThreadID tid;$/;"	m	class:InOrderCPU::CPUEvent
tid	inorder/resource.hh	/^    ThreadID tid;$/;"	m	class:ResourceRequest
tid	inorder/resource_pool.hh	/^        ThreadID tid;$/;"	m	class:ResourcePool::ResPoolEvent
tid	o3/commit.hh	/^        ThreadID tid;$/;"	m	class:DefaultCommit::TrapEvent
tid	pred/bpred_unit.hh	/^        ThreadID tid;$/;"	m	struct:BPredUnit::PredictorHistory
tid	pred/btb.hh	/^        ThreadID tid;$/;"	m	struct:DefaultBTB::BTBEntry
tids	o3/cpu.hh	/^    std::vector<ThreadID> tids;$/;"	m	class:FullO3CPU
timeBuffer	inorder/cpu.hh	/^    TimeBuffer<TimeStruct> timeBuffer;$/;"	m	class:InOrderCPU
timeBuffer	inorder/pipeline_stage.hh	/^    TimeBuffer<TimeStruct> *timeBuffer;$/;"	m	class:PipelineStage
timeBuffer	o3/commit.hh	/^    TimeBuffer<TimeStruct> *timeBuffer;$/;"	m	class:DefaultCommit
timeBuffer	o3/cpu.hh	/^    TimeBuffer<TimeStruct> timeBuffer;$/;"	m	class:FullO3CPU
timeBuffer	o3/decode.hh	/^    TimeBuffer<TimeStruct> *timeBuffer;$/;"	m	class:DefaultDecode
timeBuffer	o3/fetch.hh	/^    TimeBuffer<TimeStruct> *timeBuffer;$/;"	m	class:DefaultFetch
timeBuffer	o3/iew.hh	/^    TimeBuffer<TimeStruct> *timeBuffer;$/;"	m	class:DefaultIEW
timeBuffer	o3/inst_queue.hh	/^    TimeBuffer<TimeStruct> *timeBuffer;$/;"	m	class:InstructionQueue
timeBuffer	o3/rename.hh	/^    TimeBuffer<TimeStruct> *timeBuffer;$/;"	m	class:DefaultRename
timeSource	minor/func_unit.hh	/^    ClockedObject &timeSource;$/;"	m	class:Minor::FUPipeline
timer	kvm/timer.hh	/^    timer_t timer;$/;"	m	class:PosixKvmTimer
timesIdled	inorder/cpu.hh	/^    Stats::Scalar timesIdled;$/;"	m	class:InOrderCPU
timesIdled	o3/cpu.hh	/^    Stats::Scalar timesIdled;$/;"	m	class:FullO3CPU
timings	minor/MinorCPU.py	/^    timings = VectorParam.MinorFUTiming([], "extra decoding rules")$/;"	v	class:MinorFU
timings	minor/MinorCPU.py	/^    timings = [MinorFUTiming(description="Int",$/;"	v	class:MinorDefaultIntFU
timings	minor/MinorCPU.py	/^    timings = [MinorFUTiming(description='FloatSimd',$/;"	v	class:MinorDefaultFloatSimdFU
timings	minor/MinorCPU.py	/^    timings = [MinorFUTiming(description='Mem',$/;"	v	class:MinorDefaultMemFU
timings	minor/MinorCPU.py	/^    timings = [MinorFUTiming(description='Mul',$/;"	v	class:MinorDefaultIntMulFU
timings	minor/func_unit.hh	/^    std::vector<MinorFUTiming *> timings;$/;"	m	class:MinorFU
tl	m5legion_interface.h	/^    uint8_t tl;$/;"	m	struct:__anon8
tlb	inorder/resources/cache_unit.cc	/^CacheUnit::tlb()$/;"	f	class:CacheUnit
tlb	inorder/resources/tlb_unit.cc	/^TLBUnit::tlb()$/;"	f	class:TLBUnit
tlbBlockSeqNum	inorder/resources/cache_unit.hh	/^    InstSeqNum tlbBlockSeqNum[ThePipeline::MaxThreads];$/;"	m	class:CacheUnit
tlbBlocked	inorder/resources/cache_unit.hh	/^    bool tlbBlocked[ThePipeline::MaxThreads];$/;"	m	class:CacheUnit
tlbBlocked	inorder/resources/tlb_unit.hh	/^    bool tlbBlocked[ThePipeline::MaxThreads];$/;"	m	class:TLBUnit
tlbStall	inorder/resources/cache_unit.hh	/^    bool tlbStall;$/;"	m	class:CacheRequest
tnpc	m5legion_interface.h	/^    uint64_t tnpc[8];$/;"	m	struct:__anon8
to	testers/traffic_gen/traffic_gen.hh	/^        uint32_t to;$/;"	m	struct:TrafficGen::Transition
toBeScheduled	ozone/back_end.hh	/^        InstList toBeScheduled;$/;"	m	class:BackEnd::InstQueue
toCommit	o3/iew.hh	/^    typename TimeBuffer<IEWStruct>::wire toCommit;$/;"	m	class:DefaultIEW
toDecode	o3/fetch.hh	/^    typename TimeBuffer<FetchStruct>::wire toDecode;$/;"	m	class:DefaultFetch
toDecode	o3/rename.hh	/^    typename TimeBuffer<TimeStruct>::wire toDecode;$/;"	m	class:DefaultRename
toFetch	o3/decode.hh	/^    typename TimeBuffer<TimeStruct>::wire toFetch;$/;"	m	class:DefaultDecode
toFetch	o3/iew.hh	/^    typename TimeBuffer<TimeStruct>::wire toFetch;$/;"	m	class:DefaultIEW
toIEW	o3/commit.hh	/^    typename TimeBuffer<TimeStruct>::wire toIEW;$/;"	m	class:DefaultCommit
toIEW	o3/rename.hh	/^    typename TimeBuffer<RenameStruct>::wire toIEW;$/;"	m	class:DefaultRename
toIEW	ozone/back_end.hh	/^    typename TimeBuffer<CommStruct>::wire toIEW;$/;"	m	class:BackEnd
toIEW	ozone/lw_back_end.hh	/^    typename TimeBuffer<CommStruct>::wire toIEW;$/;"	m	class:LWBackEnd
toIEWIndex	o3/rename.hh	/^    unsigned toIEWIndex;$/;"	m	class:DefaultRename
toNextStageIndex	inorder/pipeline_stage.hh	/^    unsigned toNextStageIndex;$/;"	m	class:PipelineStage
toPrevStages	inorder/pipeline_stage.hh	/^    TimeBuffer<TimeStruct>::wire toPrevStages;$/;"	m	class:PipelineStage
toRename	o3/decode.hh	/^    typename TimeBuffer<DecodeStruct>::wire toRename;$/;"	m	class:DefaultDecode
toRename	o3/iew.hh	/^    typename TimeBuffer<TimeStruct>::wire toRename;$/;"	m	class:DefaultIEW
toRenameIndex	o3/decode.hh	/^    unsigned toRenameIndex;$/;"	m	class:DefaultDecode
top	inorder/resource_sked.cc	/^ResourceSked::top()$/;"	f	class:ResourceSked
top	inorder/resources/inst_buffer.cc	/^InstBuffer::top(ThreadID tid)$/;"	f	class:InstBuffer
top	pred/ras.hh	/^    TheISA::PCState top()$/;"	f	class:ReturnAddrStack
top	profile.hh	/^    ProfileNode top;$/;"	m	class:FunctionProfile
topIdx	pred/ras.hh	/^    unsigned topIdx()$/;"	f	class:ReturnAddrStack
tos	pred/ras.hh	/^    unsigned tos;$/;"	m	class:ReturnAddrStack
totalCommittedInsts	inorder/cpu.hh	/^    Stats::Scalar totalCommittedInsts;$/;"	m	class:InOrderCPU
totalCpi	inorder/cpu.hh	/^    Stats::Formula totalCpi;$/;"	m	class:InOrderCPU
totalCpi	o3/cpu.hh	/^    Stats::Formula totalCpi;$/;"	m	class:FullO3CPU
totalInstructions	ozone/cpu.hh	/^    virtual Counter totalInstructions() const$/;"	f	class:OzoneCPU
totalInsts	checker/cpu.hh	/^    virtual Counter totalInsts() const$/;"	f	class:CheckerCPU
totalInsts	inorder/cpu.hh	/^    virtual Counter totalInsts() const$/;"	f	class:InOrderCPU
totalInsts	kvm/base.cc	/^BaseKvmCPU::totalInsts() const$/;"	f	class:BaseKvmCPU
totalInsts	minor/cpu.cc	/^MinorCPU::totalInsts() const$/;"	f	class:MinorCPU
totalInsts	o3/cpu.cc	/^FullO3CPU<Impl>::totalInsts() const$/;"	f	class:FullO3CPU
totalInsts	simple/base.hh	/^    virtual Counter totalInsts() const$/;"	f	class:BaseSimpleCPU
totalIpc	inorder/cpu.hh	/^    Stats::Formula totalIpc;$/;"	m	class:InOrderCPU
totalIpc	o3/cpu.hh	/^    Stats::Formula totalIpc;$/;"	m	class:FullO3CPU
totalNumPhysRegs	o3/regfile.hh	/^    unsigned totalNumPhysRegs() const { return totalNumRegs; }$/;"	f	class:PhysRegFile
totalNumRegs	o3/regfile.hh	/^    unsigned totalNumRegs;$/;"	m	class:PhysRegFile
totalOps	checker/cpu.hh	/^    virtual Counter totalOps() const$/;"	f	class:CheckerCPU
totalOps	inorder/cpu.hh	/^    virtual Counter totalOps() const$/;"	f	class:InOrderCPU
totalOps	kvm/base.cc	/^BaseKvmCPU::totalOps() const$/;"	f	class:BaseKvmCPU
totalOps	minor/cpu.cc	/^MinorCPU::totalOps() const$/;"	f	class:MinorCPU
totalOps	o3/cpu.cc	/^FullO3CPU<Impl>::totalOps() const$/;"	f	class:FullO3CPU
totalOps	simple/base.hh	/^    virtual Counter totalOps() const$/;"	f	class:BaseSimpleCPU
totalSize	inorder/inorder_dyn_inst.hh	/^    int totalSize;$/;"	m	class:InOrderDynInst
totalSpace	minor/buffers.hh	/^    unsigned int totalSpace() const { return capacity; }$/;"	f	class:Minor::Queue
totalWidth	o3/inst_queue.hh	/^    unsigned totalWidth;$/;"	m	class:InstructionQueue
totalWidth	ozone/inst_queue.hh	/^    unsigned totalWidth;$/;"	m	class:InstQueue
tpc	m5legion_interface.h	/^    uint64_t tpc[8];$/;"	m	struct:__anon8
trace	profile.hh	/^    TheISA::StackTrace trace;$/;"	m	class:FunctionProfile
trace	testers/traffic_gen/generators.hh	/^        ProtoInputStream trace;$/;"	m	class:TraceGen::InputStream
trace	testers/traffic_gen/generators.hh	/^    InputStream trace;$/;"	m	class:TraceGen
traceBlockAddr	testers/memtest/memtest.hh	/^    Addr traceBlockAddr;$/;"	m	class:MemTest
traceCommit	o3/probe/simple_trace.cc	/^void SimpleTrace::traceCommit(const O3CPUImpl::DynInstPtr &dynInst)$/;"	f	class:SimpleTrace
traceComplete	testers/traffic_gen/generators.hh	/^    bool traceComplete;$/;"	m	class:TraceGen
traceData	base_dyn_inst.hh	/^    Trace::InstRecord *traceData;$/;"	m	class:BaseDynInst
traceData	inorder/inorder_dyn_inst.hh	/^    Trace::InOrderTraceRecord *traceData;$/;"	m	class:InOrderDynInst
traceData	minor/dyn_inst.hh	/^    Trace::InstRecord *traceData;$/;"	m	class:Minor::MinorDynInst
traceData	simple/base.hh	/^    Trace::InstRecord *traceData;$/;"	m	class:BaseSimpleCPU
traceFetch	o3/probe/simple_trace.cc	/^void SimpleTrace::traceFetch(const O3CPUImpl::DynInstPtr &dynInst)$/;"	f	class:SimpleTrace
traceFunctions	base.hh	/^    void traceFunctions(Addr pc)$/;"	f	class:BaseCPU
traceFunctionsInternal	base.cc	/^BaseCPU::traceFunctionsInternal(Addr pc)$/;"	f	class:BaseCPU
traceInst	exetrace.cc	/^Trace::ExeTracerRecord::traceInst(const StaticInstPtr &inst, bool ran)$/;"	f	class:Trace::Trace::ExeTracerRecord
trace_addr	testers/memtest/MemTest.py	/^    trace_addr = Param.Addr(0, "address to trace")$/;"	v	class:MemTest
tracer	BaseCPU.py	/^    tracer = Param.InstTracer(default_tracer, "Instruction tracer")$/;"	v
tracer	base.hh	/^    Trace::InstTracer * tracer;$/;"	m	class:BaseCPU
tracer	inorder/pipeline_stage.hh	/^    Trace::InOrderTrace *tracer;$/;"	m	class:PipelineStage
trafficGen	testers/traffic_gen/traffic_gen.hh	/^        TrafficGen& trafficGen;$/;"	m	class:TrafficGen::TrafficGenPort
trafficType	testers/networktest/networktest.hh	/^    int trafficType;$/;"	m	class:NetworkTest
traffic_type	testers/networktest/NetworkTest.py	/^    traffic_type = Param.Counter(0, "Traffic type: uniform random, tornado, bit complement")$/;"	v	class:NetworkTest
transferNeedsBurst	minor/lsq.cc	/^transferNeedsBurst(Addr addr, unsigned int size, unsigned int block_size)$/;"	f	namespace:Minor
transfers	minor/fetch1.hh	/^    FetchQueue transfers;$/;"	m	class:Minor::Fetch1
transfers	minor/lsq.hh	/^    LSQQueue transfers;$/;"	m	class:Minor::LSQ
transition	testers/traffic_gen/traffic_gen.cc	/^TrafficGen::transition()$/;"	f	class:TrafficGen
transitionMatrix	testers/traffic_gen/traffic_gen.hh	/^    std::vector<std::vector<double> > transitionMatrix;$/;"	m	class:TrafficGen
translationCompleted	base_dyn_inst.hh	/^    bool translationCompleted() const { return instFlags[TranslationCompleted]; }$/;"	f	class:BaseDynInst
translationCompleted	base_dyn_inst.hh	/^    void translationCompleted(bool f) { instFlags[TranslationCompleted] = f; }$/;"	f	class:BaseDynInst
translationEvent	minor/lsq.hh	/^        TranslationEvent translationEvent;$/;"	m	class:Minor::LSQ::SplitDataRequest
translationFault	simple/timing.cc	/^TimingSimpleCPU::translationFault(const Fault &fault)$/;"	f	class:TimingSimpleCPU
translationStarted	base_dyn_inst.hh	/^    bool translationStarted() const { return instFlags[TranslationStarted]; }$/;"	f	class:BaseDynInst
translationStarted	base_dyn_inst.hh	/^    void translationStarted(bool f) { instFlags[TranslationStarted] = f; }$/;"	f	class:BaseDynInst
trap	inorder/cpu.cc	/^InOrderCPU::trap(const Fault &fault, ThreadID tid, DynInstPtr inst)$/;"	f	class:InOrderCPU
trap	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::trap(const Fault &fault)$/;"	f	class:InOrderDynInst
trap	inorder/resource.hh	/^    virtual void trap(const Fault &fault, ThreadID tid, DynInstPtr inst) { }$/;"	f	class:Resource
trap	inorder/resource_pool.cc	/^ResourcePool::trap(const Fault &fault, ThreadID tid, DynInstPtr inst)$/;"	f	class:ResourcePool
trap	inorder/resources/cache_unit.cc	/^CacheUnit::trap(const Fault &fault, ThreadID tid, DynInstPtr inst)$/;"	f	class:CacheUnit
trap	inorder/resources/fetch_seq_unit.cc	/^FetchSeqUnit::trap(const Fault &fault, ThreadID tid, DynInstPtr inst)$/;"	f	class:FetchSeqUnit
trap	inorder/resources/fetch_unit.cc	/^FetchUnit::trap(const Fault &fault, ThreadID tid, DynInstPtr inst)$/;"	f	class:FetchUnit
trap	o3/cpu.cc	/^FullO3CPU<Impl>::trap(const Fault &fault, ThreadID tid,$/;"	f	class:FullO3CPU
trap	o3/dyn_inst_impl.hh	/^BaseO3DynInst<Impl>::trap(const Fault &fault)$/;"	f	class:BaseO3DynInst
trap	ozone/dyn_inst_impl.hh	/^OzoneDynInst<Impl>::trap(const Fault &fault)$/;"	f	class:OzoneDynInst
trapContext	inorder/cpu.cc	/^InOrderCPU::trapContext(const Fault &fault, ThreadID tid, DynInstPtr inst,$/;"	f	class:InOrderCPU
trapInFlight	o3/commit.hh	/^    bool trapInFlight[Impl::MaxThreads];$/;"	m	class:DefaultCommit
trapLatency	o3/O3CPU.py	/^    trapLatency = Param.Cycles(13, "Trap latency")$/;"	v	class:DerivO3CPU
trapLatency	o3/commit.hh	/^    Cycles trapLatency;$/;"	m	class:DefaultCommit
trapPending	inorder/cpu.hh	/^    bool trapPending[ThePipeline::MaxThreads];$/;"	m	class:InOrderCPU
trapPending	inorder/thread_state.hh	/^    bool trapPending;$/;"	m	class:InOrderThreadState
trapPending	o3/thread_state.hh	/^    bool trapPending;$/;"	m	struct:O3ThreadState
trapPending	ozone/thread_state.hh	/^    bool trapPending;$/;"	m	struct:OzoneThreadState
trapSquash	o3/commit.hh	/^    bool trapSquash[Impl::MaxThreads];$/;"	m	class:DefaultCommit
trapSquash	ozone/lw_back_end.hh	/^    bool trapSquash;$/;"	m	class:LWBackEnd
triedToPredict	minor/dyn_inst.hh	/^    bool triedToPredict;$/;"	m	class:Minor::MinorDynInst
trueExpr	TimingExpr.py	/^    trueExpr = Param.TimingExpr("true expression")$/;"	v	class:TimingExprIf
trueExpr	timing_expr.hh	/^    TimingExpr *trueExpr;$/;"	m	class:TimingExprIf
tryCompleteDrain	simple/atomic.cc	/^AtomicSimpleCPU::tryCompleteDrain()$/;"	f	class:AtomicSimpleCPU
tryCompleteDrain	simple/timing.cc	/^TimingSimpleCPU::tryCompleteDrain()$/;"	f	class:TimingSimpleCPU
tryDrain	kvm/base.cc	/^BaseKvmCPU::tryDrain()$/;"	f	class:BaseKvmCPU
tryDrain	o3/cpu.cc	/^FullO3CPU<Impl>::tryDrain()$/;"	f	class:FullO3CPU
tryPCEvents	minor/execute.cc	/^Execute::tryPCEvents()$/;"	f	class:Minor::Execute
tryToBranch	minor/execute.cc	/^Execute::tryToBranch(MinorDynInstPtr inst, Fault fault, BranchData &branch)$/;"	f	class:Minor::Execute
tryToSend	minor/fetch1.cc	/^Fetch1::tryToSend(FetchRequestPtr request)$/;"	f	class:Minor::Fetch1
tryToSend	minor/lsq.cc	/^LSQ::tryToSend(LSQRequestPtr request)$/;"	f	class:Minor::LSQ
tryToSendToTransfers	minor/fetch1.cc	/^Fetch1::tryToSendToTransfers(FetchRequestPtr request)$/;"	f	class:Minor::Fetch1
tryToSendToTransfers	minor/lsq.cc	/^LSQ::tryToSendToTransfers(LSQRequestPtr request)$/;"	f	class:Minor::LSQ
tstate	m5legion_interface.h	/^    uint64_t tstate[8];$/;"	m	struct:__anon8
tt	m5legion_interface.h	/^    uint16_t tt[8];$/;"	m	struct:__anon8
type	BaseCPU.py	/^    type = 'BaseCPU'$/;"	v	class:BaseCPU
type	CheckerCPU.py	/^    type = 'CheckerCPU'$/;"	v	class:CheckerCPU
type	DummyChecker.py	/^    type = 'DummyChecker'$/;"	v	class:DummyChecker
type	ExeTracer.py	/^    type = 'ExeTracer'$/;"	v	class:ExeTracer
type	FuncUnit.py	/^    type = 'FUDesc'$/;"	v	class:FUDesc
type	FuncUnit.py	/^    type = 'OpDesc'$/;"	v	class:OpDesc
type	IntelTrace.py	/^    type = 'IntelTrace'$/;"	v	class:IntelTrace
type	IntrControl.py	/^    type = 'IntrControl'$/;"	v	class:IntrControl
type	LegionTrace.py	/^    type = 'LegionTrace'$/;"	v	class:LegionTrace
type	NativeTrace.py	/^    type = 'NativeTrace'$/;"	v	class:NativeTrace
type	TimingExpr.py	/^    type = 'TimingExpr'$/;"	v	class:TimingExpr
type	TimingExpr.py	/^    type = 'TimingExprBin'$/;"	v	class:TimingExprBin
type	TimingExpr.py	/^    type = 'TimingExprIf'$/;"	v	class:TimingExprIf
type	TimingExpr.py	/^    type = 'TimingExprLet'$/;"	v	class:TimingExprLet
type	TimingExpr.py	/^    type = 'TimingExprLiteral'$/;"	v	class:TimingExprLiteral
type	TimingExpr.py	/^    type = 'TimingExprReadIntReg'$/;"	v	class:TimingExprReadIntReg
type	TimingExpr.py	/^    type = 'TimingExprRef'$/;"	v	class:TimingExprRef
type	TimingExpr.py	/^    type = 'TimingExprSrcReg'$/;"	v	class:TimingExprSrcReg
type	TimingExpr.py	/^    type = 'TimingExprUn'$/;"	v	class:TimingExprUn
type	inorder/InOrderCPU.py	/^    type = 'InOrderCPU'$/;"	v	class:InOrderCPU
type	inorder/InOrderTrace.py	/^    type = 'InOrderTrace'$/;"	v	class:InOrderTrace
type	inorder/inorder_dyn_inst.hh	/^        ResultType type;$/;"	m	struct:InOrderDynInst::InstResult
type	kvm/ArmKvmCPU.py	/^    type = 'ArmKvmCPU'$/;"	v	class:ArmKvmCPU
type	kvm/BaseKvmCPU.py	/^    type = 'BaseKvmCPU'$/;"	v	class:BaseKvmCPU
type	kvm/KvmVM.py	/^    type = 'KvmVM'$/;"	v	class:KvmVM
type	kvm/X86KvmCPU.py	/^    type = 'X86KvmCPU'$/;"	v	class:X86KvmCPU
type	minor/MinorCPU.py	/^    type = 'MinorCPU'$/;"	v	class:MinorCPU
type	minor/MinorCPU.py	/^    type = 'MinorFU'$/;"	v	class:MinorFU
type	minor/MinorCPU.py	/^    type = 'MinorFUPool'$/;"	v	class:MinorFUPool
type	minor/MinorCPU.py	/^    type = 'MinorFUTiming'$/;"	v	class:MinorFUTiming
type	minor/MinorCPU.py	/^    type = 'MinorOpClass'$/;"	v	class:MinorOpClass
type	minor/MinorCPU.py	/^    type = 'MinorOpClassSet'$/;"	v	class:MinorOpClassSet
type	o3/FUPool.py	/^    type = 'FUPool'$/;"	v	class:FUPool
type	o3/O3CPU.py	/^    type = 'DerivO3CPU'$/;"	v	class:DerivO3CPU
type	o3/O3Checker.py	/^    type = 'O3Checker'$/;"	v	class:O3Checker
type	o3/probe/SimpleTrace.py	/^    type = 'SimpleTrace'$/;"	v	class:SimpleTrace
type	ozone/OzoneCPU.py	/^    type = 'DerivOzoneCPU'$/;"	v	class:DerivOzoneCPU
type	ozone/OzoneChecker.py	/^    type = 'OzoneChecker'$/;"	v	class:OzoneChecker
type	ozone/SimpleOzoneCPU.py	/^    type = 'SimpleOzoneCPU'$/;"	v	class:SimpleOzoneCPU
type	pred/BranchPredictor.py	/^    type = 'BranchPredictor'$/;"	v	class:BranchPredictor
type	simple/AtomicSimpleCPU.py	/^    type = 'AtomicSimpleCPU'$/;"	v	class:AtomicSimpleCPU
type	simple/BaseSimpleCPU.py	/^    type = 'BaseSimpleCPU'$/;"	v	class:BaseSimpleCPU
type	simple/TimingSimpleCPU.py	/^    type = 'TimingSimpleCPU'$/;"	v	class:TimingSimpleCPU
type	simple/probes/SimPoint.py	/^    type = 'SimPoint'$/;"	v	class:SimPoint
type	testers/directedtest/RubyDirectedTester.py	/^    type = 'DirectedGenerator'$/;"	v	class:DirectedGenerator
type	testers/directedtest/RubyDirectedTester.py	/^    type = 'InvalidateGenerator'$/;"	v	class:InvalidateGenerator
type	testers/directedtest/RubyDirectedTester.py	/^    type = 'RubyDirectedTester'$/;"	v	class:RubyDirectedTester
type	testers/directedtest/RubyDirectedTester.py	/^    type = 'SeriesRequestGenerator'$/;"	v	class:SeriesRequestGenerator
type	testers/memtest/MemTest.py	/^    type = 'MemTest'$/;"	v	class:MemTest
type	testers/networktest/NetworkTest.py	/^    type = 'NetworkTest'$/;"	v	class:NetworkTest
type	testers/rubytest/RubyTester.py	/^    type = 'RubyTester'$/;"	v	class:RubyTester
type	testers/traffic_gen/TrafficGen.py	/^    type = 'TrafficGen'$/;"	v	class:TrafficGen
unblock	inorder/pipeline_stage.cc	/^PipelineStage::unblock(ThreadID tid)$/;"	f	class:PipelineStage
unblock	o3/decode_impl.hh	/^DefaultDecode<Impl>::unblock(ThreadID tid)$/;"	f	class:DefaultDecode
unblock	o3/iew_impl.hh	/^DefaultIEW<Impl>::unblock(ThreadID tid)$/;"	f	class:DefaultIEW
unblock	o3/rename_impl.hh	/^DefaultRename<Impl>::unblock(ThreadID tid)$/;"	f	class:DefaultRename
uncacheAddr	testers/memtest/memtest.hh	/^    Addr uncacheAddr;$/;"	m	class:MemTest
uncacheable	base_dyn_inst.hh	/^    bool uncacheable() { return instFlags[IsUncacheable]; }$/;"	f	class:BaseDynInst
uncached	inorder/comm.hh	/^        bool uncached;$/;"	m	struct:TimeStruct::StageComm
uncached	o3/comm.hh	/^        bool uncached; \/\/ *I$/;"	m	struct:TimeBufStruct::commitComm
uncached	ozone/cpu.hh	/^        bool uncached;$/;"	m	struct:OzoneCPU::CommStruct
uncachedLoad	inorder/comm.hh	/^        ThePipeline::DynInstPtr uncachedLoad;$/;"	m	struct:TimeStruct::StageComm
uncachedLoad	o3/comm.hh	/^        DynInstPtr uncachedLoad; \/\/ *I$/;"	m	struct:TimeBufStruct::commitComm
uncondBranch	pred/2bit_local.cc	/^LocalBP::uncondBranch(void *&bp_history)$/;"	f	class:LocalBP
uncondBranch	pred/bi_mode.cc	/^BiModeBP::uncondBranch(void * &bpHistory)$/;"	f	class:BiModeBP
uncondBranch	pred/tournament.cc	/^TournamentBP::uncondBranch(void * &bp_history)$/;"	f	class:TournamentBP
undo	ozone/null_predictor.hh	/^    void undo(BPredInfo &bp_info) { return; }$/;"	f	class:NullPredictor
uniqueFloatRegMap	inorder/resources/use_def.hh	/^    std::map<RegIndex, bool> uniqueFloatRegMap;$/;"	m	class:UseDefUnit
uniqueIntRegMap	inorder/resources/use_def.hh	/^    std::map<RegIndex, bool> uniqueIntRegMap;$/;"	m	class:UseDefUnit
uniqueMiscRegMap	inorder/resources/use_def.hh	/^    std::map<RegIndex, bool> uniqueMiscRegMap;$/;"	m	class:UseDefUnit
uniqueRegsPerSwitch	inorder/resources/use_def.hh	/^    Stats::Average uniqueRegsPerSwitch;$/;"	m	class:UseDefUnit
unitBusy	o3/fu_pool.hh	/^    std::vector<bool> unitBusy;$/;"	m	class:FUPool
unitsToBeFreed	o3/fu_pool.hh	/^    std::vector<int> unitsToBeFreed;$/;"	m	class:FUPool
unreservedRemainingSpace	minor/buffers.hh	/^    unreservedRemainingSpace() const$/;"	f	class:Minor::Queue
unreservedRemainingSpace	minor/buffers.hh	/^    unreservedRemainingSpace()$/;"	f	class:Minor::InputBuffer
unscheduleEvent	inorder/cpu.cc	/^InOrderCPU::CPUEvent::unscheduleEvent()$/;"	f	class:InOrderCPU::CPUEvent
unscheduleEvent	inorder/resource.cc	/^Resource::unscheduleEvent(DynInstPtr inst)$/;"	f	class:Resource
unscheduleEvent	inorder/resource.cc	/^Resource::unscheduleEvent(int slot_idx)$/;"	f	class:Resource
unscheduleEvent	inorder/resource.hh	/^    void unscheduleEvent()$/;"	f	class:ResourceEvent
unscheduleEvent	inorder/resource_pool.9stage.cc	/^ResourcePool::ResPoolEvent::unscheduleEvent()$/;"	f	class:ResourcePool::ResPoolEvent
unscheduleEvent	inorder/resource_pool.9stage.cc	/^ResourcePool::unscheduleEvent(int res_idx, DynInstPtr inst)$/;"	f	class:ResourcePool
unscheduleEvent	inorder/resource_pool.cc	/^ResourcePool::ResPoolEvent::unscheduleEvent()$/;"	f	class:ResourcePool::ResPoolEvent
unscheduleEvent	inorder/resource_pool.cc	/^ResourcePool::unscheduleEvent(int res_idx, DynInstPtr inst)$/;"	f	class:ResourcePool
unscheduleTickEvent	inorder/cpu.hh	/^    void unscheduleTickEvent()$/;"	f	class:InOrderCPU
unscheduleTickEvent	o3/cpu.hh	/^    void unscheduleTickEvent()$/;"	f	class:FullO3CPU
unscheduleTickEvent	ozone/cpu.hh	/^    void unscheduleTickEvent()$/;"	f	class:OzoneCPU
unserialize	base.cc	/^BaseCPU::unserialize(Checkpoint *cp, const std::string &section)$/;"	f	class:BaseCPU
unserialize	checker/cpu.cc	/^CheckerCPU::unserialize(Checkpoint *cp, const string &section)$/;"	f	class:CheckerCPU
unserialize	checker/thread_context.hh	/^    void unserialize(Checkpoint *cp, const std::string &section)$/;"	f	class:CheckerThreadContext
unserialize	minor/cpu.cc	/^MinorCPU::unserialize(Checkpoint *cp, const std::string &section)$/;"	f	class:MinorCPU
unserialize	o3/thread_state.hh	/^    void unserialize(Checkpoint *cp, const std::string &section)$/;"	f	struct:O3ThreadState
unserialize	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::OzoneTC::unserialize(Checkpoint *cp, const std::string &section)$/;"	f	class:OzoneCPU::OzoneTC
unserialize	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::unserialize(Checkpoint *cp, const std::string &section)$/;"	f	class:OzoneCPU
unserialize	simple_thread.cc	/^SimpleThread::unserialize(Checkpoint *cp, const std::string &section)$/;"	f	class:SimpleThread
unserialize	testers/traffic_gen/traffic_gen.cc	/^TrafficGen::unserialize(Checkpoint* cp, const string& section)$/;"	f	class:TrafficGen
unserialize	thread_context.cc	/^unserialize(ThreadContext &tc, Checkpoint *cp, const std::string &section)$/;"	f
unserialize	thread_state.cc	/^ThreadState::unserialize(Checkpoint *cp, const std::string &section)$/;"	f	class:ThreadState
unserializeThread	base.hh	/^    virtual void unserializeThread(Checkpoint *cp, const std::string &section,$/;"	f	class:BaseCPU
unserializeThread	kvm/base.cc	/^BaseKvmCPU::unserializeThread(Checkpoint *cp, const std::string &section,$/;"	f	class:BaseKvmCPU
unserializeThread	minor/cpu.cc	/^MinorCPU::unserializeThread(Checkpoint *cp, const std::string &section,$/;"	f	class:MinorCPU
unserializeThread	o3/cpu.cc	/^FullO3CPU<Impl>::unserializeThread(Checkpoint *cp, const std::string &section,$/;"	f	class:FullO3CPU
unserializeThread	simple/base.cc	/^BaseSimpleCPU::unserializeThread(Checkpoint *cp, const string &section,$/;"	f	class:BaseSimpleCPU
unsetMemAddr	inorder/inorder_dyn_inst.hh	/^    void unsetMemAddr()$/;"	f	class:InOrderDynInst
unsetReg	o3/scoreboard.hh	/^    void unsetReg(PhysRegIndex reg_idx)$/;"	f	class:Scoreboard
unsetResStall	inorder/pipeline_stage.cc	/^PipelineStage::unsetResStall(ResReqPtr res_req, ThreadID tid)$/;"	f	class:PipelineStage
unverifiedInst	checker/cpu.hh	/^    DynInstPtr unverifiedInst;$/;"	m	class:Checker
unverifiedMemData	checker/cpu.hh	/^    uint8_t *unverifiedMemData;$/;"	m	class:CheckerCPU
unverifiedReq	checker/cpu.hh	/^    Request *unverifiedReq;$/;"	m	class:CheckerCPU
unverifiedResult	checker/cpu.hh	/^    Result unverifiedResult;$/;"	m	class:CheckerCPU
update	decode_cache.hh	/^    update(PageIt recentest)$/;"	f	class:DecodeCache::AddrMap
update	ozone/null_predictor.hh	/^    void update(const InstSeqNum &done_sn, ThreadID tid) { }$/;"	f	class:NullPredictor
update	pred/2bit_local.cc	/^LocalBP::update(Addr branch_addr, bool taken, void *bp_history, bool squashed)$/;"	f	class:LocalBP
update	pred/bi_mode.cc	/^BiModeBP::update(Addr branchAddr, bool taken, void *bpHistory, bool squashed)$/;"	f	class:BiModeBP
update	pred/bpred_unit_impl.hh	/^BPredUnit::update(const InstSeqNum &done_sn, ThreadID tid)$/;"	f	class:BPredUnit
update	pred/btb.cc	/^DefaultBTB::update(Addr instPC, const TheISA::PCState &target, ThreadID tid)$/;"	f	class:DefaultBTB
update	pred/tournament.cc	/^TournamentBP::update(Addr branch_addr, bool taken, void *bp_history,$/;"	f	class:TournamentBP
update	testers/traffic_gen/traffic_gen.cc	/^TrafficGen::update()$/;"	f	class:TrafficGen
updateAfterContextSwitch	inorder/resource.hh	/^    virtual void updateAfterContextSwitch(DynInstPtr inst, ThreadID tid) { }    $/;"	f	class:Resource
updateAfterContextSwitch	inorder/resource_pool.cc	/^ResourcePool::updateAfterContextSwitch(DynInstPtr inst, ThreadID tid)$/;"	f	class:ResourcePool
updateAfterContextSwitch	inorder/resources/fetch_seq_unit.cc	/^FetchSeqUnit::updateAfterContextSwitch(DynInstPtr inst, ThreadID tid)$/;"	f	class:FetchSeqUnit
updateAfterContextSwitch	inorder/resources/use_def.cc	/^UseDefUnit::updateAfterContextSwitch(DynInstPtr inst, ThreadID tid)$/;"	f	class:UseDefUnit
updateBranchData	minor/execute.cc	/^Execute::updateBranchData($/;"	f	class:Minor::Execute
updateBranchPrediction	minor/fetch2.cc	/^Fetch2::updateBranchPrediction(const BranchData &branch)$/;"	f	class:Minor::Fetch2
updateCPUID	kvm/x86_cpu.cc	/^X86KvmCPU::updateCPUID()$/;"	f	class:X86KvmCPU
updateComInstStats	o3/commit_impl.hh	/^DefaultCommit<Impl>::updateComInstStats(DynInstPtr &inst)$/;"	f	class:DefaultCommit
updateComInstStats	ozone/back_end_impl.hh	/^BackEnd<Impl>::updateComInstStats(DynInstPtr &inst)$/;"	f	class:BackEnd
updateComInstStats	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::updateComInstStats(DynInstPtr &inst)$/;"	f	class:LWBackEnd
updateContextSwitchStats	inorder/cpu.cc	/^InOrderCPU::updateContextSwitchStats()$/;"	f	class:InOrderCPU
updateEvent	testers/traffic_gen/traffic_gen.hh	/^    EventWrapper<TrafficGen, &TrafficGen::update> updateEvent;$/;"	m	class:TrafficGen
updateExeInstStats	o3/iew_impl.hh	/^DefaultIEW<Impl>::updateExeInstStats(DynInstPtr &inst)$/;"	f	class:DefaultIEW
updateExeInstStats	ozone/back_end_impl.hh	/^BackEnd<Impl>::updateExeInstStats(DynInstPtr &inst)$/;"	f	class:BackEnd
updateExeInstStats	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::updateExeInstStats(DynInstPtr &inst)$/;"	f	class:LWBackEnd
updateExpectedSeqNums	minor/fetch1.cc	/^Fetch1::updateExpectedSeqNums(const BranchData &branch)$/;"	f	class:Minor::Fetch1
updateFetchStatus	o3/fetch_impl.hh	/^DefaultFetch<Impl>::updateFetchStatus()$/;"	f	class:DefaultFetch
updateFreeEntries	ozone/inst_queue.hh	/^    void updateFreeEntries(int num) { freeEntries += num; }$/;"	f	class:InstQueue
updateGlobalHistNotTaken	pred/tournament.cc	/^TournamentBP::updateGlobalHistNotTaken()$/;"	f	class:TournamentBP
updateGlobalHistReg	pred/bi_mode.cc	/^BiModeBP::updateGlobalHistReg(bool taken)$/;"	f	class:BiModeBP
updateGlobalHistTaken	pred/tournament.cc	/^TournamentBP::updateGlobalHistTaken()$/;"	f	class:TournamentBP
updateHead	o3/rob_impl.hh	/^ROB<Impl>::updateHead()$/;"	f	class:ROB
updateKvmState	kvm/arm_cpu.cc	/^ArmKvmCPU::updateKvmState()$/;"	f	class:ArmKvmCPU
updateKvmState	kvm/x86_cpu.cc	/^X86KvmCPU::updateKvmState()$/;"	f	class:X86KvmCPU
updateKvmStateCoProc	kvm/arm_cpu.cc	/^ArmKvmCPU::updateKvmStateCoProc(uint64_t id, bool show_warnings)$/;"	f	class:ArmKvmCPU
updateKvmStateCore	kvm/arm_cpu.cc	/^ArmKvmCPU::updateKvmStateCore()$/;"	f	class:ArmKvmCPU
updateKvmStateFPU	kvm/x86_cpu.cc	/^X86KvmCPU::updateKvmStateFPU()$/;"	f	class:X86KvmCPU
updateKvmStateFPUCommon	kvm/x86_cpu.cc	/^updateKvmStateFPUCommon(ThreadContext *tc, T &fpu)$/;"	f	file:
updateKvmStateFPULegacy	kvm/x86_cpu.cc	/^X86KvmCPU::updateKvmStateFPULegacy()$/;"	f	class:X86KvmCPU
updateKvmStateFPUXSave	kvm/x86_cpu.cc	/^X86KvmCPU::updateKvmStateFPUXSave()$/;"	f	class:X86KvmCPU
updateKvmStateMSRs	kvm/x86_cpu.cc	/^X86KvmCPU::updateKvmStateMSRs()$/;"	f	class:X86KvmCPU
updateKvmStateMisc	kvm/arm_cpu.cc	/^ArmKvmCPU::updateKvmStateMisc()$/;"	f	class:ArmKvmCPU
updateKvmStateRegs	kvm/x86_cpu.cc	/^X86KvmCPU::updateKvmStateRegs()$/;"	f	class:X86KvmCPU
updateKvmStateSRegs	kvm/x86_cpu.cc	/^X86KvmCPU::updateKvmStateSRegs()$/;"	f	class:X86KvmCPU
updateKvmStateVFP	kvm/arm_cpu.cc	/^ArmKvmCPU::updateKvmStateVFP(uint64_t id, bool show_warnings)$/;"	f	class:ArmKvmCPU
updateLSQNextCycle	o3/iew.hh	/^    bool updateLSQNextCycle;$/;"	m	class:DefaultIEW
updateLocalHistNotTaken	pred/tournament.cc	/^TournamentBP::updateLocalHistNotTaken(unsigned local_history_idx)$/;"	f	class:TournamentBP
updateLocalHistTaken	pred/tournament.cc	/^TournamentBP::updateLocalHistTaken(unsigned local_history_idx)$/;"	f	class:TournamentBP
updateMiscRegs	o3/dyn_inst.hh	/^    void updateMiscRegs()$/;"	f	class:BaseO3DynInst
updateOnError	CheckerCPU.py	/^    updateOnError = Param.Bool(False,$/;"	v	class:CheckerCPU
updateOnError	checker/cpu.hh	/^    bool updateOnError;$/;"	m	class:CheckerCPU
updateOnError	ozone/OzoneChecker.py	/^    updateOnError = Param.Bool(False,$/;"	v	class:OzoneChecker
updateStatus	inorder/pipeline_stage.cc	/^PipelineStage::updateStatus()$/;"	f	class:PipelineStage
updateStatus	o3/commit_impl.hh	/^DefaultCommit<Impl>::updateStatus()$/;"	f	class:DefaultCommit
updateStatus	o3/decode_impl.hh	/^DefaultDecode<Impl>::updateStatus()$/;"	f	class:DefaultDecode
updateStatus	o3/iew_impl.hh	/^DefaultIEW<Impl>::updateStatus()$/;"	f	class:DefaultIEW
updateStatus	o3/rename_impl.hh	/^DefaultRename<Impl>::updateStatus()$/;"	f	class:DefaultRename
updateStatus	ozone/front_end_impl.hh	/^FrontEnd<Impl>::updateStatus()$/;"	f	class:FrontEnd
updateStructures	ozone/back_end_impl.hh	/^BackEnd<Impl>::updateStructures()$/;"	f	class:BackEnd
updateStructures	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::updateStructures()$/;"	f	class:LWBackEnd
updateTCStateCoProc	kvm/arm_cpu.cc	/^ArmKvmCPU::updateTCStateCoProc(uint64_t id, bool show_warnings)$/;"	f	class:ArmKvmCPU
updateTCStateCore	kvm/arm_cpu.cc	/^ArmKvmCPU::updateTCStateCore()$/;"	f	class:ArmKvmCPU
updateTCStateMisc	kvm/arm_cpu.cc	/^ArmKvmCPU::updateTCStateMisc()$/;"	f	class:ArmKvmCPU
updateTCStateVFP	kvm/arm_cpu.cc	/^ArmKvmCPU::updateTCStateVFP(uint64_t id, bool show_warnings)$/;"	f	class:ArmKvmCPU
updateTail	o3/rob_impl.hh	/^ROB<Impl>::updateTail()$/;"	f	class:ROB
updateThisCycle	checker/cpu.hh	/^    bool updateThisCycle;$/;"	m	class:Checker
updateThreadContext	kvm/arm_cpu.cc	/^ArmKvmCPU::updateThreadContext()$/;"	f	class:ArmKvmCPU
updateThreadContext	kvm/x86_cpu.cc	/^X86KvmCPU::updateThreadContext()$/;"	f	class:X86KvmCPU
updateThreadContextFPU	kvm/x86_cpu.cc	/^X86KvmCPU::updateThreadContextFPU(const struct kvm_fpu &fpu)$/;"	f	class:X86KvmCPU
updateThreadContextFPUCommon	kvm/x86_cpu.cc	/^updateThreadContextFPUCommon(ThreadContext *tc, const T &fpu)$/;"	f	file:
updateThreadContextMSRs	kvm/x86_cpu.cc	/^X86KvmCPU::updateThreadContextMSRs()$/;"	f	class:X86KvmCPU
updateThreadContextRegs	kvm/x86_cpu.cc	/^X86KvmCPU::updateThreadContextRegs(const struct kvm_regs &regs,$/;"	f	class:X86KvmCPU
updateThreadContextSRegs	kvm/x86_cpu.cc	/^X86KvmCPU::updateThreadContextSRegs(const struct kvm_sregs &sregs)$/;"	f	class:X86KvmCPU
updateThreadContextXSave	kvm/x86_cpu.cc	/^X86KvmCPU::updateThreadContextXSave(const struct kvm_xsave &kxsave)$/;"	f	class:X86KvmCPU
updateThreadPriority	inorder/cpu.cc	/^InOrderCPU::updateThreadPriority()$/;"	f	class:InOrderCPU
updateThreadPriority	o3/cpu.cc	/^FullO3CPU<Impl>::updateThreadPriority()$/;"	f	class:FullO3CPU
update_rob_threads	o3/rob_impl.hh	/^ROB<Impl>::update_rob_threads()\/\/lokeshjindal15$/;"	f	class:ROB
updatedQueues	o3/iew.hh	/^    bool updatedQueues;$/;"	m	class:DefaultIEW
useCoalescedMMIO	kvm/BaseKvmCPU.py	/^    useCoalescedMMIO = Param.Bool(False, "Use coalesced MMIO (EXPERIMENTAL)")$/;"	v
useDefIdx	inorder/resources/use_def.hh	/^        int useDefIdx;$/;"	m	class:UseDefUnit::UseDefRequest
usePerfOverflow	kvm/BaseKvmCPU.py	/^    usePerfOverflow = Param.Bool(False, "Use perf event overflow counters (EXPERIMENTAL)")$/;"	v
useXSave	kvm/X86KvmCPU.py	/^    useXSave = Param.Bool(True, "Use XSave to synchronize FPU\/SIMD registers")$/;"	v
useXSave	kvm/x86_cpu.hh	/^    bool useXSave;$/;"	m	class:X86KvmCPU
usedEntries	pred/ras.hh	/^    unsigned usedEntries;$/;"	m	class:ReturnAddrStack
usedIQ	o3/comm.hh	/^        bool usedIQ;$/;"	m	struct:TimeBufStruct::iewComm
usedLSQ	o3/comm.hh	/^        bool usedLSQ;$/;"	m	struct:TimeBufStruct::iewComm
usedPorts	o3/lsq_unit.hh	/^    int usedPorts;$/;"	m	class:LSQUnit
usedPorts	ozone/lsq_unit.hh	/^    int usedPorts;$/;"	m	class:OzoneLSQ
usedPorts	ozone/lw_lsq.hh	/^    int usedPorts;$/;"	m	class:OzoneLWLSQ
usedRAS	pred/bpred_unit.hh	/^        bool usedRAS;$/;"	m	struct:BPredUnit::PredictorHistory
usedRAS	pred/bpred_unit.hh	/^    Stats::Scalar usedRAS;$/;"	m	class:BPredUnit
usedROB	o3/comm.hh	/^        bool usedROB; \/\/ *R$/;"	m	struct:TimeBufStruct::commitComm
utilization	inorder/pipeline_stage.hh	/^    Stats::Formula utilization;$/;"	m	class:PipelineStage
valid	inorder/resource.hh	/^    bool valid;$/;"	m	class:ResourceRequest
valid	inorder/resources/fetch_unit.hh	/^        bool valid;$/;"	m	struct:FetchUnit::FetchBlock
valid	pred/btb.cc	/^DefaultBTB::valid(Addr instPC, ThreadID tid)$/;"	f	class:DefaultBTB
valid	pred/btb.hh	/^        bool valid;$/;"	m	struct:DefaultBTB::BTBEntry
valid	timebuf.hh	/^    void valid(int idx) const$/;"	f	class:TimeBuffer
validDataAddr	inorder/cpu.hh	/^    bool validDataAddr(Addr addr) { return true; }$/;"	f	class:InOrderCPU
validDataAddr	o3/cpu.hh	/^    bool validDataAddr(Addr addr) { return true; }$/;"	f	class:FullO3CPU
validInstAddr	inorder/cpu.hh	/^    bool validInstAddr(Addr addr) { return true; }$/;"	f	class:InOrderCPU
validInstAddr	o3/cpu.hh	/^    bool validInstAddr(Addr addr) { return true; }$/;"	f	class:FullO3CPU
validInsts	o3/rename_impl.hh	/^DefaultRename<Impl>::validInsts()$/;"	f	class:DefaultRename
validInstsFromRename	o3/iew_impl.hh	/^DefaultIEW<Impl>::validInstsFromRename()$/;"	f	class:DefaultIEW
validLFST	o3/store_set.hh	/^    std::vector<bool> validLFST;$/;"	m	class:StoreSet
validMemAddr	inorder/inorder_dyn_inst.hh	/^    bool validMemAddr()$/;"	f	class:InOrderDynInst
validSSIT	o3/store_set.hh	/^    std::vector<bool> validSSIT;$/;"	m	class:StoreSet
validate	activity.cc	/^ActivityRecorder::validate()$/;"	f	class:ActivityRecorder
validateExecution	checker/cpu_impl.hh	/^Checker<Impl>::validateExecution(DynInstPtr &inst)$/;"	f	class:Checker
validateInst	checker/cpu_impl.hh	/^Checker<Impl>::validateInst(DynInstPtr &inst)$/;"	f	class:Checker
validateState	checker/cpu_impl.hh	/^Checker<Impl>::validateState()$/;"	f	class:Checker
vals	FuncUnit.py	/^    vals = ['No_OpClass', 'IntAlu', 'IntMult', 'IntDiv', 'FloatAdd',$/;"	v	class:OpClass
vals	StaticInstFlags.py	/^    vals = [$/;"	v	class:StaticInstFlags
vals	TimingExpr.py	/^    vals = [$/;"	v	class:TimingExprOp
vals	inorder/InOrderCPU.py	/^    vals = ['Single', 'SMT', 'SwitchOnCacheMiss']$/;"	v	class:ThreadModel
value	TimingExpr.py	/^    value = 0$/;"	v	class:TimingExpr0
value	TimingExpr.py	/^    value = Param.UInt64("literal value")$/;"	v	class:TimingExprLiteral
value	timing_expr.hh	/^    uint64_t value;$/;"	m	class:TimingExprLiteral
vcpuFD	kvm/base.hh	/^    int vcpuFD;$/;"	m	class:BaseKvmCPU
vcpuID	kvm/base.hh	/^    const long vcpuID;$/;"	m	class:BaseKvmCPU
vcpuMMapSize	kvm/base.hh	/^    int vcpuMMapSize;$/;"	m	class:BaseKvmCPU
vcpuMMapSize	kvm/vm.hh	/^    int vcpuMMapSize;$/;"	m	class:Kvm
vcpuThread	kvm/base.hh	/^    pthread_t vcpuThread;$/;"	m	class:BaseKvmCPU
verify	checker/cpu_impl.hh	/^Checker<Impl>::verify(DynInstPtr &completed_inst)$/;"	f	class:Checker
verifyMemoryMode	base.hh	/^    virtual void verifyMemoryMode() const { };$/;"	f	class:BaseCPU
verifyMemoryMode	inorder/cpu.cc	/^InOrderCPU::verifyMemoryMode() const$/;"	f	class:InOrderCPU
verifyMemoryMode	kvm/base.cc	/^BaseKvmCPU::verifyMemoryMode() const$/;"	f	class:BaseKvmCPU
verifyMemoryMode	o3/cpu.cc	/^FullO3CPU<Impl>::verifyMemoryMode() const$/;"	f	class:FullO3CPU
verifyMemoryMode	simple/atomic.cc	/^AtomicSimpleCPU::verifyMemoryMode() const$/;"	f	class:AtomicSimpleCPU
verifyMemoryMode	simple/timing.cc	/^TimingSimpleCPU::verifyMemoryMode() const$/;"	f	class:TimingSimpleCPU
version	m5legion_interface.h	/^    uint32_t version;$/;"	m	struct:__anon8
violation	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::violation(DynInstPtr &store,$/;"	f	class:InstructionQueue
violation	o3/lsq.hh	/^    bool violation(ThreadID tid)$/;"	f	class:LSQ
violation	o3/lsq_impl.hh	/^LSQ<Impl>::violation()$/;"	f	class:LSQ
violation	o3/lsq_unit.hh	/^    bool violation() { return memDepViolator; }$/;"	f	class:LSQUnit
violation	o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::violation(DynInstPtr &store_inst,$/;"	f	class:MemDepUnit
violation	o3/store_set.cc	/^StoreSet::violation(Addr store_PC, Addr load_PC)$/;"	f	class:StoreSet
violation	ozone/back_end.hh	/^        void violation(DynInstPtr &inst, DynInstPtr &violation) { }$/;"	f	class:BackEnd::InstQueue
violation	ozone/lsq_unit.hh	/^    bool violation() { return memDepViolator; }$/;"	f	class:OzoneLSQ
violation	ozone/lw_lsq.hh	/^    bool violation() { return memDepViolator; }$/;"	f	class:OzoneLWLSQ
virtProcNumber	inorder/inorder_dyn_inst.hh	/^    short virtProcNumber;$/;"	m	class:InOrderDynInst
virtProxy	thread_state.hh	/^    FSTranslatingPortProxy *virtProxy;$/;"	m	struct:ThreadState
vm	kvm/base.hh	/^    KvmVM &vm;$/;"	m	class:BaseKvmCPU
vmFD	kvm/vm.hh	/^    const int vmFD;$/;"	m	class:KvmVM
vpe	inorder/cpu.hh	/^        unsigned vpe;$/;"	m	class:InOrderCPU::CPUEvent
waitingInsts	ozone/lw_back_end.hh	/^    int waitingInsts;$/;"	m	class:LWBackEnd
waitingList	ozone/lw_back_end.hh	/^    std::list<DynInstPtr> waitingList;$/;"	m	class:LWBackEnd
waitingMemOps	ozone/lw_back_end.hh	/^    std::set<InstSeqNum> waitingMemOps;$/;"	m	class:LWBackEnd
wakeCPU	inorder/cpu.cc	/^InOrderCPU::wakeCPU()$/;"	f	class:InOrderCPU
wakeCPU	o3/cpu.cc	/^FullO3CPU<Impl>::wakeCPU()$/;"	f	class:FullO3CPU
wakeCPU	o3/iew_impl.hh	/^DefaultIEW<Impl>::wakeCPU()$/;"	f	class:DefaultIEW
wakeDependents	o3/iew_impl.hh	/^DefaultIEW<Impl>::wakeDependents(DynInstPtr &inst)$/;"	f	class:DefaultIEW
wakeDependents	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::wakeDependents(DynInstPtr &completed_inst)$/;"	f	class:InstructionQueue
wakeDependents	o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::wakeDependents(DynInstPtr &inst)$/;"	f	class:MemDepUnit
wakeDependents	ozone/back_end_impl.hh	/^BackEnd<Impl>::InstQueue::wakeDependents(DynInstPtr &inst)$/;"	f	class:BackEnd::InstQueue
wakeDependents	ozone/dyn_inst_impl.hh	/^OzoneDynInst<Impl>::wakeDependents()$/;"	f	class:OzoneDynInst
wakeDependents	ozone/inst_queue_impl.hh	/^InstQueue<Impl>::wakeDependents(DynInstPtr &completed_inst)$/;"	f	class:InstQueue
wakeDependents	ozone/lw_back_end_impl.hh	/^LWBackEnd<Impl>::wakeDependents(DynInstPtr &inst, bool memory_deps)$/;"	f	class:LWBackEnd
wakeFromQuiesce	o3/fetch_impl.hh	/^DefaultFetch<Impl>::wakeFromQuiesce()$/;"	f	class:DefaultFetch
wakeFromQuiesce	ozone/front_end_impl.hh	/^FrontEnd<Impl>::wakeFromQuiesce()$/;"	f	class:FrontEnd
wakeMemDependents	ozone/dyn_inst_impl.hh	/^OzoneDynInst<Impl>::wakeMemDependents()$/;"	f	class:OzoneDynInst
wakeup	checker/cpu.hh	/^    void wakeup() { }$/;"	f	class:CheckerCPU
wakeup	inorder/cpu.cc	/^InOrderCPU::wakeup()$/;"	f	class:InOrderCPU
wakeup	kvm/base.cc	/^BaseKvmCPU::wakeup()$/;"	f	class:BaseKvmCPU
wakeup	minor/cpu.cc	/^MinorCPU::wakeup()$/;"	f	class:MinorCPU
wakeup	o3/cpu.cc	/^FullO3CPU<Impl>::wakeup()$/;"	f	class:FullO3CPU
wakeup	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::wakeup()$/;"	f	class:OzoneCPU
wakeup	simple/base.cc	/^BaseSimpleCPU::wakeup()$/;"	f	class:BaseSimpleCPU
wakeup	testers/directedtest/RubyDirectedTester.cc	/^RubyDirectedTester::wakeup()$/;"	f	class:RubyDirectedTester
wakeup	testers/rubytest/RubyTester.cc	/^RubyTester::wakeup()$/;"	f	class:RubyTester
wakeupEvents	kvm/perfevent.hh	/^    PerfKvmCounterConfig &wakeupEvents(uint32_t events) {$/;"	f	class:PerfKvmCounterConfig
wakeupFetch	minor/execute.cc	/^Execute::wakeupFetch(BranchData::Reason reason)$/;"	f	class:Minor::Execute
wakeupFetch	minor/pipeline.cc	/^Pipeline::wakeupFetch()$/;"	f	class:Minor::Pipeline
wakeupOnEvent	minor/cpu.cc	/^MinorCPU::wakeupOnEvent(unsigned int stage_id)$/;"	f	class:MinorCPU
wakeup_frequency	testers/rubytest/RubyTester.py	/^    wakeup_frequency = Param.Int(10, "number of cycles between wakeups")$/;"	v	class:RubyTester
warnOnlyOnLoadError	CheckerCPU.py	/^    warnOnlyOnLoadError = Param.Bool(True,$/;"	v	class:CheckerCPU
warnOnlyOnLoadError	checker/cpu.hh	/^    bool warnOnlyOnLoadError;$/;"	m	class:CheckerCPU
warnOnlyOnLoadError	ozone/OzoneChecker.py	/^    warnOnlyOnLoadError = Param.Bool(False,$/;"	v	class:OzoneChecker
wasCall	pred/bpred_unit.hh	/^        bool wasCall;$/;"	m	struct:BPredUnit::PredictorHistory
wasMicro	legiontrace.cc	/^static bool wasMicro = false;$/;"	v	file:
wasReturn	pred/bpred_unit.hh	/^        bool wasReturn;$/;"	m	struct:BPredUnit::PredictorHistory
wasSquashed	pred/bpred_unit.hh	/^        bool wasSquashed;$/;"	m	struct:BPredUnit::PredictorHistory
wbCycle	o3/iew.hh	/^    unsigned wbCycle;$/;"	m	class:DefaultIEW
wbCycle	ozone/back_end.hh	/^    unsigned wbCycle;$/;"	m	class:BackEnd
wbCycle	ozone/lw_back_end.hh	/^    unsigned wbCycle;$/;"	m	class:LWBackEnd
wbEvent	ozone/lsq_unit.hh	/^        Event *wbEvent;$/;"	m	class:OzoneLSQ::StoreCompletionEvent
wbFanout	o3/iew.hh	/^    Stats::Formula wbFanout;$/;"	m	class:DefaultIEW
wbFanout	ozone/lw_back_end.hh	/^    Stats::Formula wbFanout;$/;"	m	class:LWBackEnd
wbNumInst	o3/iew.hh	/^    unsigned wbNumInst;$/;"	m	class:DefaultIEW
wbNumInst	ozone/back_end.hh	/^    unsigned wbNumInst;$/;"	m	class:BackEnd
wbNumInst	ozone/lw_back_end.hh	/^    unsigned wbNumInst;$/;"	m	class:LWBackEnd
wbPenalized	o3/iew.hh	/^    Stats::Vector wbPenalized;$/;"	m	class:DefaultIEW
wbPenalized	ozone/lw_back_end.hh	/^    Stats::Vector wbPenalized;$/;"	m	class:LWBackEnd
wbPenalizedRate	o3/iew.hh	/^    Stats::Formula wbPenalizedRate;$/;"	m	class:DefaultIEW
wbPenalizedRate	ozone/lw_back_end.hh	/^    Stats::Formula wbPenalizedRate;$/;"	m	class:LWBackEnd
wbRate	o3/iew.hh	/^    Stats::Formula wbRate;$/;"	m	class:DefaultIEW
wbRate	ozone/lw_back_end.hh	/^    Stats::Formula wbRate;$/;"	m	class:LWBackEnd
wbStatus	o3/iew.hh	/^    StageStatus wbStatus;$/;"	m	class:DefaultIEW
wbWidth	o3/O3CPU.py	/^    wbWidth = Param.Unsigned(8, "Writeback width")$/;"	v	class:DerivO3CPU
wbWidth	o3/iew.hh	/^    unsigned wbWidth;$/;"	m	class:DefaultIEW
wbWidth	ozone/back_end.hh	/^    int wbWidth;$/;"	m	class:BackEnd
wbWidth	ozone/lw_back_end.hh	/^    int wbWidth;$/;"	m	class:LWBackEnd
wbWidth	ozone/simple_params.hh	/^    int wbWidth;$/;"	m	class:SimpleParams
wb_fanout	ozone/back_end.hh	/^    Stats::Formula wb_fanout;$/;"	m	class:BackEnd
wb_penalized	ozone/back_end.hh	/^    Stats::Vector wb_penalized;$/;"	m	class:BackEnd
wb_penalized_rate	ozone/back_end.hh	/^    Stats::Formula wb_penalized_rate;$/;"	m	class:BackEnd
wb_rate	ozone/back_end.hh	/^    Stats::Formula wb_rate;$/;"	m	class:BackEnd
width	inorder/resource.hh	/^    int width;$/;"	m	class:Resource
width	minor/pipe_data.hh	/^    unsigned int width() const { return numInsts; }$/;"	f	class:Minor::ForwardInstData
width	ozone/OzoneCPU.py	/^    width = Param.Unsigned("Width")$/;"	v	class:DerivOzoneCPU
width	ozone/SimpleOzoneCPU.py	/^    width = Param.Unsigned("Width")$/;"	v	class:SimpleOzoneCPU
width	ozone/back_end.hh	/^        int width;$/;"	m	class:BackEnd::InstQueue
width	ozone/back_end.hh	/^    int width;$/;"	m	class:BackEnd
width	ozone/cpu.hh	/^        int width;$/;"	m	struct:OzoneCPU::TickEvent
width	ozone/front_end.hh	/^    int width;$/;"	m	class:FrontEnd
width	ozone/inorder_back_end.hh	/^    int width;$/;"	m	class:InorderBackEnd
width	ozone/lw_back_end.hh	/^    int width;$/;"	m	class:LWBackEnd
width	ozone/simple_params.hh	/^    unsigned width;$/;"	m	class:SimpleParams
width	simple/AtomicSimpleCPU.py	/^    width = Param.Int(1, "CPU width")$/;"	v	class:AtomicSimpleCPU
width	simple/atomic.hh	/^    const int width;$/;"	m	class:AtomicSimpleCPU
willChangePC	checker/cpu.hh	/^    bool willChangePC;$/;"	m	class:CheckerCPU
willWB	o3/lsq.hh	/^    bool willWB(ThreadID tid)$/;"	f	class:LSQ
willWB	o3/lsq_impl.hh	/^LSQ<Impl>::willWB()$/;"	f	class:LSQ
willWB	o3/lsq_unit.hh	/^    bool willWB() { return storeQueue[storeWBIdx].canWB &&$/;"	f	class:LSQUnit
willWB	ozone/lsq_unit.hh	/^    bool willWB() { return storeQueue[storeWBIdx].canWB &&$/;"	f	class:OzoneLSQ
willWB	ozone/lw_lsq.hh	/^    bool willWB() { return storeQueue.back().canWB &&$/;"	f	class:OzoneLWLSQ
wire	timebuf.hh	/^        wire()$/;"	f	class:TimeBuffer::wire
wire	timebuf.hh	/^        wire(TimeBuffer<T> *buf, int i)$/;"	f	class:TimeBuffer::wire
wire	timebuf.hh	/^        wire(const wire &i)$/;"	f	class:TimeBuffer::wire
wire	timebuf.hh	/^    class wire$/;"	c	class:TimeBuffer
workItemBegin	base.hh	/^    inline void workItemBegin() { numWorkItemsStarted++; }$/;"	f	class:BaseCPU
workItemEnd	base.hh	/^    inline void workItemEnd() { numWorkItemsCompleted++; }$/;"	f	class:BaseCPU
workload	BaseCPU.py	/^    workload = VectorParam.Process([], "processes to run")$/;"	v
workload	checker/cpu.hh	/^    std::vector<Process*> workload;$/;"	m	class:CheckerCPU
workload	ozone/simple_params.hh	/^    std::vector<Process *> workload;$/;"	m	class:SimpleParams
wrapper_is_struct	StaticInstFlags.py	/^    wrapper_is_struct = True$/;"	v	class:StaticInstFlags
wrapper_name	StaticInstFlags.py	/^    wrapper_name = 'StaticInstFlags'$/;"	v	class:StaticInstFlags
write	inorder/cpu.cc	/^InOrderCPU::write(DynInstPtr inst, uint8_t *data, unsigned size,$/;"	f	class:InOrderCPU
write	inorder/resources/cache_unit.cc	/^CacheUnit::write(DynInstPtr inst, uint8_t *data, unsigned size,$/;"	f	class:CacheUnit
write	o3/cpu.hh	/^    Fault write(RequestPtr &req, RequestPtr &sreqLow, RequestPtr &sreqHigh,$/;"	f	class:FullO3CPU
write	o3/lsq.hh	/^LSQ<Impl>::write(RequestPtr req, RequestPtr sreqLow, RequestPtr sreqHigh,$/;"	f	class:LSQ
write	o3/lsq_unit.hh	/^LSQUnit<Impl>::write(Request *req, Request *sreqLow, Request *sreqHigh,$/;"	f	class:LSQUnit
write	ozone/back_end.hh	/^BackEnd<Impl>::write(RequestPtr req, T &data, int store_idx)$/;"	f	class:BackEnd
write	ozone/cpu.hh	/^    Fault write(Request *req, T &data, int store_idx)$/;"	f	class:OzoneCPU
write	ozone/inorder_back_end.hh	/^InorderBackEnd<Impl>::write(MemReqPtr &req, T &data, int store_idx)$/;"	f	class:InorderBackEnd
write	ozone/inorder_back_end.hh	/^InorderBackEnd<Impl>::write(T data, Addr addr, unsigned flags, uint64_t *res)$/;"	f	class:InorderBackEnd
write	ozone/lsq_unit.hh	/^OzoneLSQ<Impl>::write(MemReqPtr &req, T &data, int store_idx)$/;"	f	class:OzoneLSQ
write	ozone/lw_back_end.hh	/^LWBackEnd<Impl>::write(RequestPtr req, T &data, int store_idx)$/;"	f	class:LWBackEnd
write	ozone/lw_lsq.hh	/^OzoneLWLSQ<Impl>::write(RequestPtr req, T &data, int store_idx)$/;"	f	class:OzoneLWLSQ
writeMem	base_dyn_inst.hh	/^BaseDynInst<Impl>::writeMem(uint8_t *data, unsigned size,$/;"	f	class:BaseDynInst
writeMem	checker/cpu.cc	/^CheckerCPU::writeMem(uint8_t *data, unsigned size,$/;"	f	class:CheckerCPU
writeMem	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::writeMem(uint8_t *data, unsigned size,$/;"	f	class:InOrderDynInst
writeMem	minor/exec_context.hh	/^    writeMem(uint8_t *data, unsigned int size, Addr addr,$/;"	f	class:Minor::ExecContext
writeMem	simple/atomic.cc	/^AtomicSimpleCPU::writeMem(uint8_t *data, unsigned size,$/;"	f	class:AtomicSimpleCPU
writeMem	simple/timing.cc	/^TimingSimpleCPU::writeMem(uint8_t *data, unsigned size,$/;"	f	class:TimingSimpleCPU
writePorts	testers/rubytest/RubyTester.hh	/^    std::vector<MasterPort*> writePorts;$/;"	m	class:RubyTester
writeback	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::writeback(DynInstPtr &inst, PacketPtr pkt)$/;"	f	class:LSQUnit
writeback	ozone/back_end.hh	/^    std::list<DynInstPtr> writeback;$/;"	m	class:BackEnd
writeback	ozone/lw_back_end.hh	/^    std::list<DynInstPtr> writeback;$/;"	m	class:LWBackEnd
writeback	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::writeback(DynInstPtr &inst, PacketPtr pkt)$/;"	f	class:OzoneLWLSQ
writebackCount	o3/iew.hh	/^    Stats::Vector writebackCount;$/;"	m	class:DefaultIEW
writebackCount	ozone/lw_back_end.hh	/^    Stats::Vector writebackCount;$/;"	m	class:LWBackEnd
writebackInsts	o3/iew_impl.hh	/^DefaultIEW<Impl>::writebackInsts()$/;"	f	class:DefaultIEW
writebackInsts	ozone/back_end_impl.hh	/^BackEnd<Impl>::writebackInsts()$/;"	f	class:BackEnd
writebackPendingStore	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::writebackPendingStore()$/;"	f	class:LSQUnit
writebackStores	o3/lsq_impl.hh	/^LSQ<Impl>::writebackStores()$/;"	f	class:LSQ
writebackStores	o3/lsq_unit_impl.hh	/^LSQUnit<Impl>::writebackStores()$/;"	f	class:LSQUnit
writebackStores	ozone/lsq_unit_impl.hh	/^OzoneLSQ<Impl>::writebackStores()$/;"	f	class:OzoneLSQ
writebackStores	ozone/lw_lsq_impl.hh	/^OzoneLWLSQ<Impl>::writebackStores()$/;"	f	class:OzoneLWLSQ
writeback_count	ozone/back_end.hh	/^    Stats::Vector writeback_count;$/;"	m	class:BackEnd
writingInst	minor/scoreboard.hh	/^    std::vector<InstSeqNum> writingInst;$/;"	m	class:Minor::Scoreboard
wroteToTimeBuffer	inorder/pipeline_stage.hh	/^    bool wroteToTimeBuffer;$/;"	m	class:PipelineStage
wroteToTimeBuffer	o3/commit.hh	/^    bool wroteToTimeBuffer;$/;"	m	class:DefaultCommit
wroteToTimeBuffer	o3/decode.hh	/^    bool wroteToTimeBuffer;$/;"	m	class:DefaultDecode
wroteToTimeBuffer	o3/fetch.hh	/^    bool wroteToTimeBuffer;$/;"	m	class:DefaultFetch
wroteToTimeBuffer	o3/iew.hh	/^    bool wroteToTimeBuffer;$/;"	m	class:DefaultIEW
wroteToTimeBuffer	o3/rename.hh	/^    bool wroteToTimeBuffer;$/;"	m	class:DefaultRename
xc	translation.hh	/^    ExecContextPtr xc;$/;"	m	class:DataTranslation
xmm	kvm/x86_cpu.cc	/^    uint8_t xmm[16][16];$/;"	m	struct:FXSave	file:
y	m5legion_interface.h	/^    uint64_t y;$/;"	m	struct:__anon8
youngestSN	checker/cpu.hh	/^    InstSeqNum youngestSN;$/;"	m	class:CheckerCPU
youngestSeqNum	o3/commit.hh	/^    InstSeqNum youngestSeqNum[Impl::MaxThreads];$/;"	m	class:DefaultCommit
zero	timebuf.hh	/^    wire zero()$/;"	f	class:TimeBuffer
zeroReg	o3/rename_map.hh	/^    RegIndex zeroReg;$/;"	m	class:SimpleRenameMap
zeroRegIdx	o3/scoreboard.hh	/^    PhysRegIndex zeroRegIdx;$/;"	m	class:Scoreboard
zero_fill_64	ozone/cpu.hh	/^    void zero_fill_64(Addr addr) {$/;"	f	class:OzoneCPU
zero_fill_64	simple/base.hh	/^    void zero_fill_64(Addr addr) {$/;"	f	class:BaseSimpleCPU
~ActivityRecorder	activity.cc	/^ActivityRecorder::~ActivityRecorder()$/;"	f	class:ActivityRecorder
~ArmKvmCPU	kvm/arm_cpu.cc	/^ArmKvmCPU::~ArmKvmCPU()$/;"	f	class:ArmKvmCPU
~AtomicSimpleCPU	simple/atomic.cc	/^AtomicSimpleCPU::~AtomicSimpleCPU()$/;"	f	class:AtomicSimpleCPU
~BPHistory	pred/tournament.hh	/^        ~BPHistory()$/;"	f	struct:TournamentBP::BPHistory
~BaseCPU	base.cc	/^BaseCPU::~BaseCPU()$/;"	f	class:BaseCPU
~BaseDynInst	base_dyn_inst_impl.hh	/^BaseDynInst<Impl>::~BaseDynInst()$/;"	f	class:BaseDynInst
~BaseGen	testers/traffic_gen/generators.hh	/^    virtual ~BaseGen() { }$/;"	f	class:BaseGen
~BaseKvmCPU	kvm/base.cc	/^BaseKvmCPU::~BaseKvmCPU()$/;"	f	class:BaseKvmCPU
~BaseKvmTimer	kvm/timer.hh	/^    virtual ~BaseKvmTimer() {};$/;"	f	class:BaseKvmTimer
~BaseO3DynInst	o3/dyn_inst_impl.hh	/^template <class Impl>BaseO3DynInst<Impl>::~BaseO3DynInst()$/;"	f	class:BaseO3DynInst
~BaseSimpleCPU	simple/base.cc	/^BaseSimpleCPU::~BaseSimpleCPU()$/;"	f	class:BaseSimpleCPU
~CacheRequest	inorder/resources/cache_unit.hh	/^    virtual ~CacheRequest()$/;"	f	class:CacheRequest
~CacheUnitEvent	inorder/resources/cache_unit.hh	/^    virtual ~CacheUnitEvent() {}$/;"	f	class:CacheUnitEvent
~CheckTable	testers/rubytest/CheckTable.cc	/^CheckTable::~CheckTable()$/;"	f	class:CheckTable
~CheckerCPU	checker/cpu.cc	/^CheckerCPU::~CheckerCPU()$/;"	f	class:CheckerCPU
~CpuEvent	cpuevent.cc	/^CpuEvent::~CpuEvent()$/;"	f	class:CpuEvent
~DependencyGraph	o3/dep_graph.hh	/^DependencyGraph<DynInstPtr>::~DependencyGraph()$/;"	f	class:DependencyGraph
~DirectedGenerator	testers/directedtest/DirectedGenerator.hh	/^    virtual ~DirectedGenerator() {}$/;"	f	class:DirectedGenerator
~EAList	ozone/ea_list.hh	/^    ~EAList() { }$/;"	f	class:EAList
~Execute	minor/execute.cc	/^Execute::~Execute()$/;"	f	class:Minor::Execute
~FUPool	o3/fu_pool.cc	/^FUPool::~FUPool()$/;"	f	class:FUPool
~FetchRequest	minor/fetch1.cc	/^Fetch1::FetchRequest::~FetchRequest()$/;"	f	class:Minor::Fetch1::FetchRequest
~FetchSeqEvent	inorder/resources/fetch_seq_unit.hh	/^        ~FetchSeqEvent() {}$/;"	f	class:FetchSeqUnit::FetchSeqEvent
~FetchSeqUnit	inorder/resources/fetch_seq_unit.cc	/^FetchSeqUnit::~FetchSeqUnit()$/;"	f	class:FetchSeqUnit
~FetchUnit	inorder/resources/fetch_unit.cc	/^FetchUnit::~FetchUnit()$/;"	f	class:FetchUnit
~ForwardLineData	minor/pipe_data.hh	/^    ~ForwardLineData() { line = NULL; }$/;"	f	class:Minor::ForwardLineData
~FullO3CPU	o3/cpu.cc	/^FullO3CPU<Impl>::~FullO3CPU()$/;"	f	class:FullO3CPU
~FunctionProfile	profile.cc	/^FunctionProfile::~FunctionProfile()$/;"	f	class:FunctionProfile
~InOrderCPU	inorder/cpu.cc	/^InOrderCPU::~InOrderCPU()$/;"	f	class:InOrderCPU
~InOrderDynInst	inorder/inorder_dyn_inst.cc	/^InOrderDynInst::~InOrderDynInst()$/;"	f	class:InOrderDynInst
~InstQueue	ozone/inst_queue_impl.hh	/^InstQueue<Impl>::~InstQueue()$/;"	f	class:InstQueue
~InstructionQueue	o3/inst_queue_impl.hh	/^InstructionQueue<Impl>::~InstructionQueue()$/;"	f	class:InstructionQueue
~InvalidateGenerator	testers/directedtest/InvalidateGenerator.cc	/^InvalidateGenerator::~InvalidateGenerator()$/;"	f	class:InvalidateGenerator
~Kvm	kvm/vm.cc	/^Kvm::~Kvm()$/;"	f	class:Kvm
~KvmVM	kvm/vm.cc	/^KvmVM::~KvmVM()$/;"	f	class:KvmVM
~LSQ	minor/lsq.cc	/^LSQ::~LSQ()$/;"	f	class:Minor::LSQ
~LSQ	o3/lsq.hh	/^    ~LSQ() {$/;"	f	class:LSQ
~LSQRequest	minor/lsq.cc	/^LSQ::LSQRequest::~LSQRequest()$/;"	f	class:Minor::LSQ::LSQRequest
~MDUEvent	inorder/resources/mult_div_unit.hh	/^    ~MDUEvent() { }$/;"	f	class:MDUEvent
~MemDepEntry	o3/mem_dep_unit.hh	/^        ~MemDepEntry()$/;"	f	class:MemDepUnit::MemDepEntry
~MemDepUnit	inorder/resources/mem_dep_unit.hh	/^    virtual ~MemDepUnit() {}$/;"	f	class:MemDepUnit
~MemDepUnit	o3/mem_dep_unit_impl.hh	/^MemDepUnit<MemDepPred, Impl>::~MemDepUnit()$/;"	f	class:MemDepUnit
~MinorCPU	minor/cpu.cc	/^MinorCPU::~MinorCPU()$/;"	f	class:MinorCPU
~MinorDynInst	minor/dyn_inst.cc	/^MinorDynInst::~MinorDynInst()$/;"	f	class:Minor::MinorDynInst
~NativeTrace	nativetrace.hh	/^    virtual ~NativeTrace() {}$/;"	f	class:Trace::NativeTrace
~OzoneCPU	ozone/cpu_impl.hh	/^OzoneCPU<Impl>::~OzoneCPU()$/;"	f	class:OzoneCPU
~OzoneDynInst	ozone/dyn_inst_impl.hh	/^OzoneDynInst<Impl>::~OzoneDynInst()$/;"	f	class:OzoneDynInst
~PCEvent	pc_event.hh	/^    virtual ~PCEvent() { if (queue) remove(); }$/;"	f	class:PCEvent
~PCEventQueue	pc_event.cc	/^PCEventQueue::~PCEventQueue()$/;"	f	class:PCEventQueue
~PerfKvmCounter	kvm/perfevent.cc	/^PerfKvmCounter::~PerfKvmCounter()$/;"	f	class:PerfKvmCounter
~PerfKvmCounterConfig	kvm/perfevent.cc	/^PerfKvmCounterConfig::~PerfKvmCounterConfig()$/;"	f	class:PerfKvmCounterConfig
~PerfKvmTimer	kvm/timer.cc	/^PerfKvmTimer::~PerfKvmTimer()$/;"	f	class:PerfKvmTimer
~PhysRegFile	o3/regfile.hh	/^    ~PhysRegFile() {}$/;"	f	class:PhysRegFile
~PipelineStage	inorder/pipeline_stage.cc	/^PipelineStage::~PipelineStage()$/;"	f	class:PipelineStage
~PosixKvmTimer	kvm/timer.cc	/^PosixKvmTimer::~PosixKvmTimer()$/;"	f	class:PosixKvmTimer
~Queue	minor/buffers.hh	/^    virtual ~Queue() { }$/;"	f	class:Minor::Queue
~RegDepMap	inorder/reg_dep_map.cc	/^RegDepMap::~RegDepMap()$/;"	f	class:RegDepMap
~ReportIF	minor/buffers.hh	/^    virtual ~ReportIF() { }$/;"	f	class:Minor::ReportIF
~Resource	inorder/resource.cc	/^Resource::~Resource()$/;"	f	class:Resource
~ResourceEvent	inorder/resource.hh	/^    virtual ~ResourceEvent() { }$/;"	f	class:ResourceEvent
~ResourcePool	inorder/resource_pool.cc	/^ResourcePool::~ResourcePool()$/;"	f	class:ResourcePool
~ResourceRequest	inorder/resource.cc	/^ResourceRequest::~ResourceRequest()$/;"	f	class:ResourceRequest
~RubyDirectedTester	testers/directedtest/RubyDirectedTester.cc	/^RubyDirectedTester::~RubyDirectedTester()$/;"	f	class:RubyDirectedTester
~RubyTester	testers/rubytest/RubyTester.cc	/^RubyTester::~RubyTester()$/;"	f	class:RubyTester
~SQEntry	o3/lsq_unit.hh	/^        ~SQEntry()$/;"	f	struct:LSQUnit::SQEntry
~ScheduleEntry	inorder/pipeline_traits.5stage.hh	/^        virtual ~ScheduleEntry(){}$/;"	f	struct:ThePipeline::ScheduleEntry
~ScheduleEntry	inorder/pipeline_traits.9stage.hh	/^        virtual ~ScheduleEntry(){}$/;"	f	struct:ThePipeline::ScheduleEntry
~ScheduleEntry	inorder/pipeline_traits.9stage.smt2.hh	/^        virtual ~ScheduleEntry(){}$/;"	f	struct:ThePipeline::ScheduleEntry
~Scoreboard	o3/scoreboard.hh	/^    ~Scoreboard() {}$/;"	f	class:Scoreboard
~SeriesRequestGenerator	testers/directedtest/SeriesRequestGenerator.cc	/^SeriesRequestGenerator::~SeriesRequestGenerator()$/;"	f	class:SeriesRequestGenerator
~SimPoint	simple/probes/simpoint.cc	/^SimPoint::~SimPoint()$/;"	f	class:SimPoint
~SimpleRenameMap	o3/rename_map.hh	/^    ~SimpleRenameMap() {};$/;"	f	class:SimpleRenameMap
~SimpleThread	simple_thread.cc	/^SimpleThread::~SimpleThread()$/;"	f	class:SimpleThread
~SplitDataRequest	minor/lsq.cc	/^LSQ::SplitDataRequest::~SplitDataRequest()$/;"	f	class:Minor::LSQ::SplitDataRequest
~StaticInst	static_inst.cc	/^StaticInst::~StaticInst()$/;"	f	class:StaticInst
~StoreSet	o3/store_set.cc	/^StoreSet::~StoreSet()$/;"	f	class:StoreSet
~TLBUnit	inorder/resources/tlb_unit.hh	/^    virtual ~TLBUnit() {}$/;"	f	class:TLBUnit
~TLBUnitEvent	inorder/resources/tlb_unit.hh	/^    virtual ~TLBUnitEvent() {}$/;"	f	class:TLBUnitEvent
~ThreadContext	thread_context.hh	/^    virtual ~ThreadContext() { };$/;"	f	class:ThreadContext
~ThreadState	thread_state.cc	/^ThreadState::~ThreadState()$/;"	f	class:ThreadState
~TimeBuffer	timebuf.hh	/^    ~TimeBuffer()$/;"	f	class:TimeBuffer
~TimingSimpleCPU	simple/timing.cc	/^TimingSimpleCPU::~TimingSimpleCPU()$/;"	f	class:TimingSimpleCPU
~TrafficGen	testers/traffic_gen/traffic_gen.hh	/^    ~TrafficGen() {}$/;"	f	class:TrafficGen
~UnifiedRenameMap	o3/rename_map.hh	/^    ~UnifiedRenameMap() {};$/;"	f	class:UnifiedRenameMap
~X86KvmCPU	kvm/x86_cpu.cc	/^X86KvmCPU::~X86KvmCPU()$/;"	f	class:X86KvmCPU
